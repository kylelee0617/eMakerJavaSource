package Doc;

import jcx.jform.bTransaction;
import java.io.*;
import java.util.*;
import java.util.regex.Pattern;
import jcx.util.*;
import jcx.html.*;
import jcx.db.*;
import javax.swing.*;
import javax.swing.table.*;
import com.jacob.activeX.*;
import com.jacob.com.*;//
import Farglory.util.FargloryUtil;

public class Doc2M010 extends bTransaction {
  talk dbDoc = getTalk("" + get("put_Doc"));
  talk dbFE3D = getTalk("" + get("put_FE3D"));
  talk dbSale = getTalk("" + get("put_Sale"));
  talk dbFED1 = getTalk("" + get("put_FED1"));
  talk dbFED1A = dbFED1;

  public boolean action(String value) throws Throwable {
    // 發票 LU52628354、LU52628356、LU52628357、LU52628394、LU52628430、WU53306624
    // 為楊信義手動鍵入資料庫 Doc6M011 中，已退回廠商不允使用。
    /*
     * isAssetOK isExistInvoiceNoCheck 發票重複檢核 getVoucherDepartNoDoc5 管理費用-新部門代碼邏輯
     * getTableDataFromFirst 管理費用-轉傳票 getTableDataFrom 行銷-轉傳票 putDebitForAsset
     * 行銷-轉傳票-固資借方 getConvertToArrayForReceipt 特殊請款代碼 810(發票)、固資 getVoucherDepartNo
     * 行銷-部門代碼邏輯 getCostIDNumUnion 行銷-廣告企劃費代碼 getExpiredDateUnion 到期日
     * getVoucherEmpNo 財務人員 轉傳票時員編特別處理 getSalaryConvertToDoc2M014 薪資-轉傳票 getSqlAnd
     * 針對請購之權限設定，統一於此 getReceiptKind 扣繳格式 getAutoBarCodeFront 條碼編號 自動給號
     * getStopUseObjectCDMessage 廠商停權 isSupplementMoneyOK 補充保費 getInvoiceKindName
     * 發票格式 getDoc5M060UndergoName 驗收流程 資料庫 Asset 資料庫 Doc
     */
    return true;
  }

  // stringSource A 請購單、統購廠商對照表 B 管理-後續申請單(請款、借款、借款沖銷不處理，轉傳票) C
  // 行銷-後續申請單(請款、借款、借款沖銷不處理，轉傳票) D 驗收單 E
  public String getStopUseObjectCDMessage(Hashtable hashtableCond, FargloryUtil exeUtil) throws Throwable {
    String stringObjectCd = "" + hashtableCond.get("OBJECT_CD");
    if ("null".equals(stringObjectCd))
      stringObjectCd = "";
    String stringCheckDate = "" + hashtableCond.get("CHECK_DATE");
    if ("null".equals(stringCheckDate))
      stringCheckDate = "";
    String stringSource = "" + hashtableCond.get("SOURCE");
    if ("null".equals(stringSource))
      stringSource = "";
    String stringFieldName = "" + hashtableCond.get("FieldName");
    if ("null".equals(stringFieldName))
      stringFieldName = "";
    String stringPurchaseNoExist = "" + hashtableCond.get("PurchaseNo_Exist");
    if ("null".equals(stringPurchaseNoExist))
      stringPurchaseNoExist = "";
    String stringDocNoType = "" + hashtableCond.get("DocNoType");
    if ("null".equals(stringDocNoType))
      stringDocNoType = "";
    String stringToday = datetime.getToday("YYYY/mm/dd");
    String stringSqlAnd = "";
    String stringMessage = "";
    String stringEmployeeNo = "";
    String stringAdminEmployeeDate = "";
    String stringStopDate = "";
    String stringStopDateStart = "";
    String stringStopDateEnd = "";
    String stringReason1 = "";
    String stringReason2 = "";
    String stringRemark = "";
    Hashtable hashtableAnd = new Hashtable();
    Hashtable hashtableDoc3M0153 = new Hashtable();
    Vector vectorDoc3M0153 = new Vector();
    //
    if ("D".equals(stringSource))
      return "TRUE";
    //
    if ("A".equals(stringSource)) {
      // A 以 今日 判斷
      stringCheckDate = stringToday;
    }
    if ("B".equals(stringSource)) {
      if (!"N".equals(stringPurchaseNoExist))
        return "TRUE"; // 無請購單
      if ("C".equals(stringDocNoType))
        return "TRUE"; // 退保留
      if ("D".equals(stringDocNoType))
        return "TRUE"; // 管理-借款沖銷
    }
    if ("C".equals(stringSource)) {
      if (!"N".equals(stringPurchaseNoExist))
        return "TRUE"; // 無請購單
      if ("C".equals(stringDocNoType))
        return "TRUE"; // 退保留
    }
    stringCheckDate = exeUtil.getDateConvert(stringCheckDate);
    //
    if ("".equals(stringFieldName))
      stringFieldName = "廠商";
    if ("".equals(stringObjectCd))
      return "TRUE";
    if ("".equals(stringSource))
      return "TRUE";
    if (stringCheckDate.length() != 10)
      return "日期格式錯誤";
    //
    stringSqlAnd = " AND  UNDERGO_WRITE  = 'Y' \n" + " AND  AdminStatus    = 'Y' \n" + " AND  ID  IN (SELECT  ID \n" + " FROM  Doc3M0153_ObjectID \n" + " WHERE  OBJECT_CD      = '"
        + stringObjectCd + "') \n" + " AND  (StopDateStart = '9999/99/99'   OR  StopDateStart  <= '" + stringCheckDate + "') \n"
        + " AND  (StopDateEnd   = '9999/99/99'   OR  StopDateEnd    >= '" + stringCheckDate + "') \n";
    vectorDoc3M0153 = exeUtil.getQueryDataHashtable("Doc3M0153", hashtableAnd, stringSqlAnd, dbDoc);
    if (vectorDoc3M0153.size() == 0)
      return "TRUE";
    hashtableDoc3M0153 = (Hashtable) vectorDoc3M0153.get(0);
    if (hashtableDoc3M0153 == null)
      return "查詢資料錯誤";
    stringEmployeeNo = "" + hashtableDoc3M0153.get("EmployeeNo");
    if (!"".equals(stringEmployeeNo))
      stringEmployeeNo = getEmpName(stringEmployeeNo);
    stringAdminEmployeeDate = "" + hashtableDoc3M0153.get("AdminEmployeeDate");
    if ("null".equals(stringAdminEmployeeDate))
      stringAdminEmployeeDate = "";
    stringStopDateStart = "" + hashtableDoc3M0153.get("StopDateStart");
    if ("null".equals(stringStopDateStart))
      stringStopDateStart = "";
    stringStopDateEnd = "" + hashtableDoc3M0153.get("StopDateEnd");
    if ("null".equals(stringStopDateEnd))
      stringStopDateEnd = "";
    stringReason1 = "" + hashtableDoc3M0153.get("Reason1");
    if ("null".equals(stringReason1))
      stringReason1 = "";
    stringReason2 = "" + hashtableDoc3M0153.get("Reason2");
    if ("null".equals(stringReason2))
      stringReason2 = "";
    stringRemark = "" + hashtableDoc3M0153.get("Remark");
    if ("null".equals(stringRemark))
      stringRemark = "";
    //
    if ("其他".equals(stringReason1)) {
      stringReason1 = stringRemark;
    }
    if ("9999/99/99".equals(stringStopDateStart) && "9999/99/99".equals(stringStopDateEnd)) {
      stringStopDate = "永不錄用";
    } else if ("9999/99/99".equals(stringStopDateStart)) {
      stringStopDate = "即刻起，至" + stringStopDateEnd + "停權";
    } else if ("9999/99/99".equals(stringStopDateEnd)) {
      stringStopDate = stringStopDateStart + "起，永不錄用";
    } else {
      stringStopDate = stringStopDateStart + "～" + stringStopDateEnd;
    }
    //
    stringMessage = stringFieldName + " 已停權，禁止使用。\n" + "由採購人員：" + stringEmployeeNo + "，於" + stringAdminEmployeeDate + "通過簽核。\n" + "停權區間　：" + stringStopDate + "。\n" + "停權原因　："
        + stringReason1 + "。";
    return stringMessage;
  }

  public String getDoc5M060UndergoName(String stringUndergoWrite) throws Throwable {
    String stringUndergoName = "";
    //
    if ("".equals(stringUndergoWrite))
      return "";
    //
    stringUndergoWrite = stringUndergoWrite.substring(0, 1);
    if ("A".equals(stringUndergoWrite))
      return "承辦";
    if ("B".equals(stringUndergoWrite))
      return "承辦-科主管";
    if ("C".equals(stringUndergoWrite))
      return "承辦-室主管";
    if ("D".equals(stringUndergoWrite))
      return "人總人員";
    if ("E".equals(stringUndergoWrite))
      return "作廢";
    if ("F".equals(stringUndergoWrite))
      return "人總主管";
    if ("G".equals(stringUndergoWrite))
      return "採購人員";
    if ("H".equals(stringUndergoWrite))
      return "監理-設計專案";
    if ("I".equals(stringUndergoWrite))
      return "監理-設計機電";
    if ("J".equals(stringUndergoWrite))
      return "監理-營業";
    if ("K".equals(stringUndergoWrite))
      return "行銷企劃室承辦";
    if ("L".equals(stringUndergoWrite))
      return "行銷企劃室主管";
    if ("Y".equals(stringUndergoWrite))
      return "採購主管";

    if ("X".equals(stringUndergoWrite))
      return "退件";

    return "";
  }

  // stringSource A 請購單、統購廠商對照表 B 管理-後續申請單(請款、借款、借款沖銷不處理，轉傳票) C
  // 行銷-後續申請單(請款、借款、借款沖銷不處理，轉傳票) D 驗收單 E
  public String getStopUseObjectCDSql(Hashtable hashtableCond, FargloryUtil exeUtil) throws Throwable {
    String stringCheckDate = "" + hashtableCond.get("CHECK_DATE");
    if ("null".equals(stringCheckDate))
      stringCheckDate = "";
    String stringSource = "" + hashtableCond.get("SOURCE");
    if ("null".equals(stringSource))
      stringSource = "";
    String stringPurchaseNoExist = "" + hashtableCond.get("PurchaseNo_Exist");
    if ("null".equals(stringPurchaseNoExist))
      stringPurchaseNoExist = "";
    String stringDocNoType = "" + hashtableCond.get("DocNoType");
    if ("null".equals(stringDocNoType))
      stringDocNoType = "";
    String stringToday = datetime.getToday("YYYY/mm/dd");
    String stringSqlAnd = "";
    String stringObjectCd = "";
    Hashtable hashtableAnd = new Hashtable();
    Hashtable hashtableTemp = new Hashtable();
    Vector vectorDBData = new Vector();
    //
    if ("D".equals(stringSource))
      return "";
    System.out.println("---------------------------------------1");
    //
    if ("A".equals(stringSource)) {
      // A 以 今日 判斷
      stringCheckDate = stringToday;
    }
    if ("B".equals(stringSource)) {
      if (!"N".equals(stringPurchaseNoExist))
        return ""; // 無請購單
      if ("C".equals(stringDocNoType))
        return ""; // 退保留
      if ("D".equals(stringDocNoType))
        return ""; // 管理-借款沖銷
    }
    if ("C".equals(stringSource)) {
      if (!"N".equals(stringPurchaseNoExist))
        return ""; // 無請購單
      if ("C".equals(stringDocNoType))
        return ""; // 退保留
    }
    stringCheckDate = exeUtil.getDateConvert(stringCheckDate);
    //
    if ("".equals(stringSource))
      return "";
    System.out.println("---------------------------------------2");
    if (stringCheckDate.length() != 10)
      return "";
    System.out.println("---------------------------------------3");
    //
    stringSqlAnd = " AND  ID  IN  (SELECT  ID  \n" + " FROM  Doc3M0153 \n" + " WHERE  UNDERGO_WRITE  = 'Y' \n" + " AND  AdminStatus    = 'Y' \n"
        + " AND  (StopDateStart = '9999/99/99'   OR  StopDateStart  <= '" + stringCheckDate + "') \n" + " AND  (StopDateEnd   = '9999/99/99'   OR  StopDateEnd    >= '"
        + stringCheckDate + "') \n" + ") ";
    vectorDBData = exeUtil.getQueryDataHashtable("Doc3M0153_ObjectID", hashtableAnd, stringSqlAnd, dbDoc);
    stringSqlAnd = "";
    for (int intNo = 0; intNo < vectorDBData.size(); intNo++) {
      hashtableTemp = (Hashtable) vectorDBData.get(intNo);
      if (hashtableTemp == null)
        continue;
      stringObjectCd = "" + hashtableTemp.get("OBJECT_CD");
      if ("null".equals(stringObjectCd))
        continue;
      //
      if (!"".equals(stringSqlAnd))
        stringSqlAnd += ", ";
      stringSqlAnd += " '" + stringObjectCd + "' ";
    }
    System.out.println("---------------------------------------4");
    return stringSqlAnd;
  }
  // 行銷

  public String get033FGFunctionType(String stringButgetName, FargloryUtil exeUtil) throws Throwable {
    String FunctionType = "";
    String stringSpecBudget = "017PR,033FG,033VIP,033CRM,"; // ","+get("SPEC_BUDGET")+"," ;
    String stringSpecBudgetFun = "18,U,20,19"; // ""+get("SPEC_BUDGET_USER") ;
    String[] arraySpecBudget = convert.StringToken(stringSpecBudget, ",");
    String[] arraySpecBudgetFun = convert.StringToken(stringSpecBudgetFun, ",");
    System.out.println("stringSpecBudget[" + arraySpecBudget.length + "][" + stringSpecBudget + "]stringSpecBudgetFun[" + arraySpecBudgetFun.length + "][" + stringSpecBudgetFun
        + "]---------------------------");
    for (int intNo = 0; intNo < arraySpecBudget.length; intNo++) {
      if (intNo >= arraySpecBudgetFun.length)
        continue;
      if (stringButgetName.equals(arraySpecBudget[intNo])) {
        return arraySpecBudgetFun[intNo];
      }
    }
    return "";
  }

  // 公文編號 行銷及企劃 檢核
  public String getDocNoUserCheckErr(Hashtable hashtableData, FargloryUtil exeUtil) throws Throwable {
    String stringUseDeptCd = ("" + hashtableData.get("DEPT_CD_USER")).trim();
    String stringUseDeptCd3 = exeUtil.doSubstring(stringUseDeptCd, 0, 3);
    String stringDepartNo = ("" + hashtableData.get("DEPT_CD")).trim();
    String stringEmployeeNo = ("" + hashtableData.get("EmployeeNo")).trim();
    String stringDepartNo4 = exeUtil.doSubstring(stringDepartNo, 0, 4);
    String stringSpecBudget = ",017PR,033FG,033VIP,033CRM,"; // +get("SPEC_BUDGET")+"," ;

    Vector vectorDeptCd = new Vector();
    boolean booleanFlag = true;
    // 特殊部門 視為 企劃
    vectorDeptCd.add("0338");
    //
    if (stringUseDeptCd.indexOf("0333") != -1 || vectorDeptCd.indexOf(stringUseDeptCd) != -1) {
      // 企劃
      booleanFlag = (",0333,0533,1333,".indexOf("," + stringDepartNo4 + ",") == -1) && // 判斷公文追蹤非企劃
          (("," + stringSpecBudget + ",033FZ,033MP,").indexOf("," + stringDepartNo + ",") == -1) && // 例外部門，不受檢核限制
          (",B2834,".indexOf("," + stringEmployeeNo + ",") != -1 && "033TC".equals(stringDepartNo)); // 例外人員，不受檢核限制 B2834 張淑真
      if (booleanFlag) {
        return "企劃 之 [部門代碼] 須為企劃類案別。\n(有問題請洽 [行銷管理室])";
      }
    } else if (",033,133,".indexOf(stringUseDeptCd3) != -1) {
      // 行銷
      booleanFlag = (",0333,0533,1333,".indexOf("," + stringDepartNo4 + ",") != -1); // 判斷公文追蹤是企劃
      if (booleanFlag) {
        return "行銷 之 [部門代碼] 不可為企劃類案別 。\n(有問題請洽 [行銷管理室])";
      }
    }
    return "";
  }

  // 是否使用新舊版
  // 已不再使用
  public boolean isNewVersion(String stringComNo, String stringKindNo, String stringPurchaseNo, String stringFactoryNo, String stringEmpDeptCd, JTable jtable9) throws Throwable {
    return isNewVersion(stringComNo, stringKindNo, stringPurchaseNo, stringFactoryNo, stringEmpDeptCd, "", jtable9);
  }

  public boolean isNewVersion(String stringComNo, String stringKindNo, String stringPurchaseNo, String stringFactoryNo, String stringEmpDeptCd, String stringUserID, JTable jtable9)
      throws Throwable {
    Hashtable hashtableData = new Hashtable();
    hashtableData.put("ComNo", stringComNo);
    hashtableData.put("KindNo", stringKindNo);
    hashtableData.put("PurchaseNo", stringPurchaseNo);
    hashtableData.put("FactoryNo", stringFactoryNo);
    hashtableData.put("EmpDeptCd", stringEmpDeptCd);
    hashtableData.put("UserID", stringUserID);
    return isNewVersion(hashtableData, jtable9);
  }

  public boolean isNewVersion(Hashtable hashtableData, JTable jtable9) throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    String stringComNo = "" + hashtableData.get("ComNo");
    if ("null".equals(stringComNo))
      stringComNo = "";
    String stringKindNo = "" + hashtableData.get("KindNo");
    if ("null".equals(stringKindNo))
      stringKindNo = "";
    String stringKindNoPur = "";
    String stringPurchaseNo = "" + hashtableData.get("PurchaseNo");
    if ("null".equals(stringPurchaseNo))
      stringPurchaseNo = "";
    String stringFactoryNo = "" + hashtableData.get("FactoryNo");
    if ("null".equals(stringFactoryNo))
      stringFactoryNo = "";
    String stringEmpDeptCd = "" + hashtableData.get("EmpDeptCd");
    if ("null".equals(stringEmpDeptCd))
      stringEmpDeptCd = "";
    String stringUserID = "" + hashtableData.get("UserID");
    if ("null".equals(stringUserID))
      stringUserID = "";
    Hashtable hashtableAnd = new Hashtable();
    boolean booleanFlag = true;
    //
    if ("24".equals(stringKindNo))
      stringKindNoPur = "17";
    if ("26".equals(stringKindNo))
      stringKindNoPur = "17";
    if ("23".equals(stringKindNo))
      stringKindNoPur = "15";
    // 固資
    hashtableAnd.put("ComNo", stringComNo);
    hashtableAnd.put("KindNo", stringKindNoPur);
    hashtableAnd.put("DocNo", stringPurchaseNo);
    String stringApplyType = getNameUnionDoc("ApplyType", "Doc3M011", "", hashtableAnd, exeUtil);
    if ("D".equals(stringApplyType)) {
      return true;
    }
    System.out.println("isNewVersion--------------------------------------000");
    // 001 付款資訊 Doc3M013 之 GroupName 為 #-#B 結尾時，必須使用新版
    if (isSpectPurchaseNo(stringComNo, stringKindNoPur, stringPurchaseNo))
      return true;
    System.out.println("isNewVersion--------------------------------------001");
    // 002 有輸入此表格 新版
    // if(jtable9.getRowCount() > 0) return true ;
    // System.out.println("isNewVersion--------------------------------------002") ;
    if ("".equals(stringComNo))
      return false;
    if ("".equals(stringKindNo))
      return false;
    if ("".equals(stringPurchaseNo))
      return false;
    System.out.println("isNewVersion--------------------------------------003");
    // 有 前期，以 前期 是否使用新版，作為判斷
    String stringSql = "";
    boolean booleanExist = true;
    // 004 使用判斷 Doc2M010
    booleanExist = isExistDoc("Doc2M010", "Doc2M017", stringComNo, stringKindNo, stringPurchaseNo, stringFactoryNo);
    if (booleanExist) {
      booleanFlag = isExistDoc("Doc2M010", "Doc2M0171", stringComNo, stringKindNo, stringPurchaseNo, stringFactoryNo);
      System.out.println("isNewVersion(" + booleanFlag + ")--------------------------------------004");
      return booleanFlag;
    }
    // 005 使用判斷 Doc6M010
    booleanExist = isExistDoc("Doc6M010", "Doc6M010", stringComNo, stringKindNo, stringPurchaseNo, stringFactoryNo);
    if (booleanExist) {
      booleanFlag = isExistDoc("Doc6M010", "Doc6M0171", stringComNo, stringKindNo, stringPurchaseNo, stringFactoryNo);
      System.out.println("isNewVersion(" + booleanFlag + ")--------------------------------------005");
      return booleanFlag;
    }
    // 006 驗收單上線後，皆為新版
    String stringToday = datetime.getToday("YYYY/mm/dd");
    String stringOptometryDateStart = "" + get("OPTOMETRY_DATE");
    System.out.println("stringOptometryDateStart(" + stringOptometryDateStart + ")-----------------------------");
    if (stringToday.compareTo(stringOptometryDateStart) >= 0)
      return true;
    // 007 無前期，人總皆用
    // if(stringEmpDeptCd.startsWith("035")) return true ;
    // if(stringEmpDeptCd.startsWith("015")) return true ;
    if (!stringEmpDeptCd.startsWith("033") && !stringEmpDeptCd.startsWith("133"))
      return true;
    System.out.println("isNewVersion--------------------------------------007");
    // 008 特殊人員
    if (",B4233,".indexOf("," + stringUserID + ",") != -1)
      return true;
    System.out.println("isNewVersion--------------------------------------008");

    return false;
  }

  // 行銷之前期金額A、已付金額B
  public double getPaidUpMoney(Hashtable hashtableData, FargloryUtil exeUtil) throws Throwable {
    double doublePaidUpMoney = 0;
    double doubleTempMoney = 0;
    String stringComNo = "" + hashtableData.get("ComNo");
    String stringPurchaseNo1 = "" + hashtableData.get("PurchaseNo1");
    String stringPurchaseNo2 = "" + hashtableData.get("PurchaseNo2");
    String stringPurchaseNo3 = "" + hashtableData.get("PurchaseNo3");
    String stringFactoryNo = "" + hashtableData.get("FactoryNo");
    String stringBarCodePur = "" + hashtableData.get("BarCodePur");
    boolean booleanSpecPurchaseNo = isSpectPurchaseNo(stringComNo, "17", stringPurchaseNo1 + stringPurchaseNo2 + stringPurchaseNo3, " AND  M13.GroupName  LIKE  '%#-#B' ");
    Hashtable hashtableAnd = new Hashtable();
    //
    if ("null".equals(stringBarCodePur)) {
      hashtableAnd.put("ComNo", stringComNo);
      hashtableAnd.put("DocNo1", stringPurchaseNo1);
      hashtableAnd.put("DocNo2", stringPurchaseNo2);
      hashtableAnd.put("DocNo3", stringPurchaseNo3);
      hashtableAnd.put("KindNo", "17");
      stringBarCodePur = getNameUnionDoc("BarCode", "Doc3M011", "", hashtableAnd, exeUtil);
      hashtableData.put("BarCodePur", stringBarCodePur);
    }
    //
    doubleTempMoney = getPurchaseMoneyDoc2USE(hashtableData, booleanSpecPurchaseNo, exeUtil);
    doublePaidUpMoney += doubleTempMoney;
    System.out.println("doublePaidUpMoney(" + doublePaidUpMoney + ")doubleTempMoney(" + doubleTempMoney + ")----------------------------------------1");
    doubleTempMoney = getPurchaseMoneyDoc6USE(hashtableData, booleanSpecPurchaseNo, exeUtil);
    doublePaidUpMoney += doubleTempMoney;
    System.out.println("doublePaidUpMoney(" + doublePaidUpMoney + ")doubleTempMoney(" + doubleTempMoney + ")----------------------------------------2");
    doubleTempMoney = getUSEMoney(stringComNo, stringPurchaseNo1 + stringPurchaseNo2 + stringPurchaseNo3, stringFactoryNo, exeUtil);
    doublePaidUpMoney += doubleTempMoney;
    System.out.println("doublePaidUpMoney(" + doublePaidUpMoney + ")doubleTempMoney(" + doubleTempMoney + ")----------------------------------------3");
    //
    return doublePaidUpMoney;
  }

  public double getPurchaseMoneyDoc2USE(Hashtable hashtableData, boolean booleanSpecPurchaseNo, FargloryUtil exeUtil) throws Throwable {
    if (booleanSpecPurchaseNo) {
      return getPurchaseMoneyUSEDoc2M0171(hashtableData, "", exeUtil);
    } else {
      return getPurchaseMoneyUSEDoc2M017(hashtableData, "", exeUtil);
    }
  }

  public double getPurchaseMoneyUSEDoc2M0171(Hashtable hashtableData, String stringSqlAnd, FargloryUtil exeUtil) throws Throwable {
    String stringBarCode = ("" + hashtableData.get("BarCode")).trim();
    String stringComNo = ("" + hashtableData.get("ComNo")).trim();
    String stringPurchaseNo1 = ("" + hashtableData.get("PurchaseNo1")).trim();
    String stringPurchaseNo2 = ("" + hashtableData.get("PurchaseNo2")).trim();
    String stringPurchaseNo3 = ("" + hashtableData.get("PurchaseNo3")).trim();
    String stringFactoryNo = ("" + hashtableData.get("FactoryNo")).trim();
    String stringBarCodePur = ("" + hashtableData.get("BarCodePur")).trim();
    String stringEDateTime = ("" + hashtableData.get("EDateTime")).trim();
    String stringGroupID = ("" + hashtableData.get("GroupID")).trim();
    String stringSumRealMoney = "0";
    String stringSql = "";
    String stringPurchaseNo = stringPurchaseNo1 + stringPurchaseNo2 + stringPurchaseNo3;
    String[][] retDoc2M017 = null;
    //
    if ("null".equals(stringEDateTime))
      stringEDateTime = "";
    if ("null".equals(stringBarCode))
      stringBarCode = "";
    //
    stringSql = "SELECT  SUM(M17.PurchaseMoney) " + "FROM  Doc2M010 M10,  Doc2M0171 M17 " + " WHERE  M10.BarCode  =  M17.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M17.RecordNo12  IN (SELECT  RecordNo " + " FROM  Doc3M012 " + " WHERE  BarCode  =  '" + stringBarCodePur + "' " + "  AND  GroupID  =  '" + stringGroupID + "' ) "
        + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.PurchaseNo  =  '" + stringPurchaseNo + "' " + " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringEDateTime)) {
      stringSql += " AND  M10.EDateTime  <=  '" + stringEDateTime + "' ";
    }
    if (!"".equals(stringBarCode)) {
      stringSql += " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    }
    stringSql += stringSqlAnd;
    retDoc2M017 = getTableDataDoc(stringSql);
    if (retDoc2M017.length != 0) {
      stringSumRealMoney = retDoc2M017[0][0].trim();
      stringSumRealMoney = "" + exeUtil.doParseDouble(stringSumRealMoney);
      stringSumRealMoney = convert.FourToFive(stringSumRealMoney, 0);
    }
    return exeUtil.doParseDouble(stringSumRealMoney);
  }

  public double getPurchaseMoneyUSEDoc2M017(Hashtable hashtableData, String stringSqlAnd, FargloryUtil exeUtil) throws Throwable {
    String stringBarCode = ("" + hashtableData.get("BarCode")).trim();
    String stringComNo = ("" + hashtableData.get("ComNo")).trim();
    String stringPurchaseNo1 = ("" + hashtableData.get("PurchaseNo1")).trim();
    String stringPurchaseNo2 = ("" + hashtableData.get("PurchaseNo2")).trim();
    String stringPurchaseNo3 = ("" + hashtableData.get("PurchaseNo3")).trim();
    String stringFactoryNo = ("" + hashtableData.get("FactoryNo")).trim();
    String stringEDateTime = ("" + hashtableData.get("EDateTime")).trim();
    String stringSumRealMoney = "0";
    String stringSql = "";
    String[][] retDoc2M017 = null;
    //
    if ("null".equals(stringEDateTime))
      stringEDateTime = "";
    if ("null".equals(stringBarCode))
      stringBarCode = "";
    //
    stringSql = "SELECT  SUM(M17.PurchaseMoney) " + "FROM  Doc2M010 M10,  Doc2M017 M17 " + " WHERE  M10.BarCode  =  M17.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  M17.PurchaseNo2  =  '" + stringPurchaseNo2 + "' "
        + " AND  M17.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringEDateTime)) {
      stringSql += " AND  M10.EDateTime  <=  '" + stringEDateTime + "' ";
    }
    if (!"".equals(stringBarCode)) {
      stringSql += " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    }
    stringSql += stringSqlAnd;
    retDoc2M017 = getTableDataDoc(stringSql);
    if (retDoc2M017.length != 0) {
      stringSumRealMoney = retDoc2M017[0][0].trim();
      stringSumRealMoney = "" + exeUtil.doParseDouble(stringSumRealMoney);
      stringSumRealMoney = convert.FourToFive(stringSumRealMoney, 0);
    }
    return exeUtil.doParseDouble(stringSumRealMoney);
  }

  public double getPurchaseMoneyDoc6USE(Hashtable hashtableData, boolean booleanSpecPurchaseNo, FargloryUtil exeUtil) throws Throwable {
    if (booleanSpecPurchaseNo) {
      return getPurchaseMoneyUSEDoc6M0171(hashtableData, "", exeUtil);
    } else {
      return getPurchaseMoneyUSEDoc6M012(hashtableData, "", exeUtil);
    }
  }

  public double getPurchaseMoneyUSEDoc6M0171(Hashtable hashtableData, String stringSqlAnd, FargloryUtil exeUtil) throws Throwable {
    String stringBarCode = ("" + hashtableData.get("BarCode")).trim();
    String stringComNo = ("" + hashtableData.get("ComNo")).trim();
    String stringPurchaseNo1 = ("" + hashtableData.get("PurchaseNo1")).trim();
    String stringPurchaseNo2 = ("" + hashtableData.get("PurchaseNo2")).trim();
    String stringPurchaseNo3 = ("" + hashtableData.get("PurchaseNo3")).trim();
    String stringFactoryNo = ("" + hashtableData.get("FactoryNo")).trim();
    String stringBarCodePur = ("" + hashtableData.get("BarCodePur")).trim();
    String stringEDateTime = ("" + hashtableData.get("EDateTime")).trim();
    String stringGroupID = ("" + hashtableData.get("GroupID")).trim();
    String stringUseType = ("" + hashtableData.get("UseType")).trim(); // A 前期 B 已使用
    String stringSumRealMoney = "0";
    String stringSql = "";
    String stringPurchaseNo = stringPurchaseNo1 + stringPurchaseNo2 + stringPurchaseNo3;
    String[][] retDoc6M0171 = null;
    //
    if ("null".equals(stringUseType))
      stringUseType = "B";
    if ("".equals(stringUseType))
      stringUseType = "B";
    //
    if ("null".equals(stringEDateTime))
      stringEDateTime = "";
    if ("null".equals(stringBarCode))
      stringBarCode = "";
    // 請款申請書借款沖銷有請購單之請款金額
    stringSql = "SELECT  SUM(M171.PurchaseMoney) " + "FROM  Doc6M010 M10,  Doc6M0171 M171 " + " WHERE  M10.BarCode  =  M171.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M171.RecordNo12  IN (SELECT  RecordNo  FROM  Doc3M012  WHERE  BarCode  =  '" + stringBarCodePur + "'  AND  GroupID  =  '" + stringGroupID + "' ) "
        + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M171.PurchaseNo  =  '" + stringPurchaseNo + "' " + " AND  M171.FactoryNo  =  '" + stringFactoryNo + "' ";
    if ("A".equals(stringUseType)) {
      // 前期使用(針對請款，有請購單)
      stringSql += " AND  M10.KindNo  =  '24' " + " AND  M10.PurchaseNoExist  IN  ('Y',  'YY') ";
    } else {
      // 已使用(借款(新) + 借沖(舊))
      stringSql += " AND  M10.PurchaseNoExist  IN  ('Y') ";
    }
    if (!"".equals(stringEDateTime)) {
      stringSql += " AND  M10.EDateTime  <=  '" + stringEDateTime + "' ";
    }
    if (!"".equals(stringBarCode)) {
      stringSql += " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    }
    stringSql += stringSqlAnd;
    retDoc6M0171 = getTableDataDoc(stringSql);
    if (retDoc6M0171.length != 0) {
      stringSumRealMoney = retDoc6M0171[0][0].trim();
      stringSumRealMoney = "" + exeUtil.doParseDouble(stringSumRealMoney);
      stringSumRealMoney = convert.FourToFive(stringSumRealMoney, 0);
    }
    return exeUtil.doParseDouble(stringSumRealMoney);
  }

  public double getPurchaseMoneyUSEDoc6M012(Hashtable hashtableData, String stringSqlAnd, FargloryUtil exeUtil) throws Throwable {
    String stringBarCode = ("" + hashtableData.get("BarCode")).trim();
    String stringComNo = ("" + hashtableData.get("ComNo")).trim();
    String stringPurchaseNo1 = ("" + hashtableData.get("PurchaseNo1")).trim();
    String stringPurchaseNo2 = ("" + hashtableData.get("PurchaseNo2")).trim();
    String stringPurchaseNo3 = ("" + hashtableData.get("PurchaseNo3")).trim();
    String stringFactoryNo = ("" + hashtableData.get("FactoryNo")).trim();
    String stringEDateTime = ("" + hashtableData.get("EDateTime")).trim();
    String stringUseType = ("" + hashtableData.get("UseType")).trim(); // A 前期 B 已使用
    String stringSumRealMoney = "0";
    String stringSql = "";
    String[][] retDoc6M012 = null;
    //
    if ("null".equals(stringUseType))
      stringUseType = "B";
    if ("".equals(stringUseType))
      stringUseType = "B";
    //
    if ("null".equals(stringEDateTime))
      stringEDateTime = "";
    if ("null".equals(stringBarCode))
      stringBarCode = "";
    // 請款申請書借款沖銷有請購單之請款金額
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + "FROM  Doc6M010 M10,  Doc6M012 M12 " + " WHERE  M10.BarCode  =  M12.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' "
        + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M10.FactoryNo  =  '" + stringFactoryNo + "' ";
    if ("A".equals(stringUseType)) {
      // 前期使用(僅針對請款 且 有請購單)
      stringSql += " AND  M10.KindNo  =  '24' " + " AND  M10.PurchaseNoExist  IN  ('Y',  'YY') ";
    } else {
      // 已使用(借款(新) + 借沖(舊))
      stringSql += " AND  M10.PurchaseNoExist  IN  ('Y') ";
    }
    if (!"".equals(stringEDateTime)) {
      stringSql += " AND  M10.EDateTime  <=  '" + stringEDateTime + "' ";
    }
    if (!"".equals(stringBarCode)) {
      stringSql += " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    }
    stringSql += stringSqlAnd;
    retDoc6M012 = getTableDataDoc(stringSql);
    if (retDoc6M012.length != 0) {
      stringSumRealMoney = retDoc6M012[0][0].trim();
      stringSumRealMoney = "" + exeUtil.doParseDouble(stringSumRealMoney);
      stringSumRealMoney = convert.FourToFive(stringSumRealMoney, 0);
    }
    return exeUtil.doParseDouble(stringSumRealMoney);
  }

  // 共同
  public String getBarCodeKindCheck(String stringBarCode, FargloryUtil exeUtil) throws Throwable {
    // 判斷
    char charBarCodeFirst = stringBarCode.charAt(0);
    char charBarCodeSec = stringBarCode.charAt(1);
    String stringBarCodeHead = "";
    String stringBarCodeNum = "";
    //
    if (stringBarCode.length() != 6) {
      return "[條碼編號](" + stringBarCode + ") 大小格式錯誤。";
    }
    //
    if (!Character.isLetter(charBarCodeFirst))
      return "[條碼編號] 格式錯誤。";
    //
    if (Character.isLetter(charBarCodeSec)) {
      stringBarCodeHead = exeUtil.doSubstring(stringBarCode, 0, 2);
      stringBarCodeNum = exeUtil.doSubstring(stringBarCode, 2, stringBarCode.length());
    } else {
      stringBarCodeHead = exeUtil.doSubstring(stringBarCode, 0, 1);
      stringBarCodeNum = exeUtil.doSubstring(stringBarCode, 2, stringBarCode.length());
    }
    if (",R,S,".indexOf(stringBarCodeHead) == -1
        && getQueryDataHashtableDoc("Doc1H010", new Hashtable(), " AND  Used  =  'Y'  AND  HeadCode  = '" + stringBarCodeHead + "' ", new Vector(), exeUtil).size() == 0)
      return "[條碼編號] 字頭不允許使用。";
    //
    if (exeUtil.doParseDouble(stringBarCodeNum) > 0)
      return "OK";
    if (stringBarCodeNum.equals("00000"))
      return "OK";
    if (stringBarCodeNum.equals("0000"))
      return "OK";
    //
    return "[條碼編號](" + stringBarCode + ") 格式錯誤。";
  }

  public boolean isVoucherDataExist(String stringBarCode, FargloryUtil exeUtil) throws Throwable {
    Vector vectorDoc2M014 = null;
    Hashtable hashtableAnd = new Hashtable();
    //
    hashtableAnd.put("BarCode", stringBarCode);
    hashtableAnd.put("STATUS_CD", "Z");
    vectorDoc2M014 = getQueryDataHashtableDoc("Doc2M014", hashtableAnd, "", new Vector(), exeUtil);
    if (vectorDoc2M014.size() == 0)
      return false;
    //
    Hashtable hashtableDoc2M014 = (Hashtable) vectorDoc2M014.get(0);
    if (hashtableDoc2M014 == null)
      return false;
    String stringVoucherYmd = exeUtil.getDateConvertRoc("" + hashtableDoc2M014.get("VOUCHER_YMD")).replaceAll("/", "");
    String stringVoucherFlowNo = ("" + hashtableDoc2M014.get("VOUCHER_FLOW_NO")).trim();
    String stringComNo = ("" + hashtableDoc2M014.get("COMPANY_CD")).trim();
    Vector vectorFED1012 = null;
    //
    hashtableAnd.put("VOUCHER_YMD", stringVoucherYmd);
    hashtableAnd.put("VOUCHER_FLOW_NO", stringVoucherFlowNo);
    hashtableAnd.put("COMPANY_CD", stringComNo);
    hashtableAnd.put("KIND", "0");
    vectorFED1012 = getQueryDataHashtableFED1("FED1012", hashtableAnd, "", new Vector(), exeUtil);
    if (vectorFED1012.size() == 0)
      return false;
    //
    return true;
  }

  public boolean isExistDoc(String stringTable10, String stringTable17, String stringComNo, String stringKindNo, String stringPurchaseNo, String stringFactoryNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    //
    stringSql = " SELECT  M17.BarCode " + " FROM  " + stringTable17 + " M17,  " + stringTable10 + " M10 " + " WHERE  M17.BarCode  =  M10.BarCode "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.PurchaseNo  =  '" + stringPurchaseNo + "' ";
    if (!"".equals(stringKindNo))
      stringSql += " AND  M10.KindNo  =  '" + stringKindNo + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' ";
    retDoc2M010 = getTableDataDoc(stringSql);
    return retDoc2M010.length > 0;
  }

  public boolean isSpectPurchaseNo(String stringComNo, String stringKindNo, String stringDocNo) throws Throwable {
    return isSpectPurchaseNo(stringComNo, stringKindNo, stringDocNo, " AND  M13.GroupName  LIKE  '%#-#B' ");
  }

  public boolean isSpectPurchaseNo(String stringComNo, String stringKindNo, String stringDocNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M013 = null;
    //
    stringSql = " SELECT  M13.BarCode " + " FROM  Doc3M011 M11,  Doc3M013 M13 " + " WHERE  M11.BarCode  =  M13.BarCode " + stringSqlAnd + " AND  M11.ComNo  =  '" + stringComNo
        + "' " + " AND  M11.DocNo  =  '" + stringDocNo + "' " + " AND  M11.KindNo  =  '" + stringKindNo + "' ";
    retDoc3M013 = getTableDataDoc(stringSql);
    return retDoc3M013.length > 0;
  }

  // 補充保費 檢核
  public boolean isSupplementMoneyOK(Hashtable hashtableData, FargloryUtil exeUtil) throws Throwable {
    String stringReceiptTaxType = "" + hashtableData.get("ReceiptTaxType");
    String stringReceiptKind = "" + hashtableData.get("ReceiptKind");
    String stringFactoryNo = "" + hashtableData.get("FactoryNo");
    String stringAcctNo = "" + hashtableData.get("ACCT_NO");
    String stringReceiptTotalMoney = "" + hashtableData.get("ReceiptTotalMoney");
    String stringReceiptMoney = "" + hashtableData.get("ReceiptMoney");
    String stringReceiptTax = "" + hashtableData.get("ReceiptTax");
    String stringSupplementMoney = "" + hashtableData.get("SupplementMoney");
    String stringSpecCostID = "" + hashtableData.get("SpecCostID");
    String stringEmployeeNo = "" + hashtableData.get("EmployeeNo");
    // String stringToday = ""+hashtableData.get("TODAY") ; 已不再須判斷此參數
    // String stringPayCondition1 = ""+hashtableData.get("PayCondition1") ;
    // 已不再須判斷此參數
    String stringSpecUserID = "" + hashtableData.get("SpecUserID");
    String stringTable21Exist = "" + hashtableData.get("Table21Exist");
    String stringTYPE = "" + hashtableData.get("TYPE");
    double doubleReceiptTotalMoney = exeUtil.doParseDouble(stringReceiptTotalMoney);
    double doubleReceiptMoney = exeUtil.doParseDouble(stringReceiptMoney);
    double doubleReceiptTax = exeUtil.doParseDouble(stringReceiptTax);
    double doubleSupplementMoney = exeUtil.doParseDouble(stringSupplementMoney);
    double doubleSupplementMoneyL = 0;
    double doubleSupplementCheckMoney = 20000; // 2016-01-11 修正，原本5000
    // double doubleSupplementRatio = 1.91/100 ; // 2016-01-11 修正，原本 2.0/1000
    double doubleSupplementRatio = 2.11 / 100; // 2021-01-15 Kyle 變更
    double doubleTaxRate = exeUtil.doParseDouble(stringReceiptTaxType) / 100;
    boolean booleanSupplement = true;
    boolean booleanSpecCostID = "Y".equals(stringSpecCostID);
    boolean booleanTable21Exist = "Y".equals(stringTable21Exist);
    boolean booleanSpecUser = "Y".equals(stringSpecUserID) ? isSpecUserID(stringEmployeeNo) : false;

    // 金額處理
    // 稅率
    if (!"A".equals(stringReceiptKind))
      doubleTaxRate = 0;
    // 所得金額
    if (doubleReceiptTotalMoney == 0 && doubleReceiptMoney > 0) {
      if (doubleReceiptTax == 0) {
        doubleReceiptTotalMoney = doubleReceiptMoney / (1 - doubleTaxRate);
      } else {
        doubleReceiptTotalMoney = doubleReceiptMoney + doubleReceiptTax;
      }
    }
    // 補充保費 金額 判斷
    // System.out.println("stringTYPE("+stringTYPE+")----------------------------------------")
    // ;
    // System.out.println("stringReceiptTaxType("+stringReceiptTaxType+")----------------------------------------")
    // ;
    /*
     * if("5".equals(stringReceiptTaxType)) { doubleSupplementCheckMoney = 23800 ;//
     * 2020-02-06 修改，原本 21009 }
     */
    if ("228202".equals(stringAcctNo)) { // 代收款-代扣薪資所得稅
      // doubleSupplementCheckMoney = 23800 ;// 2020-02-06 修改，原本 21009
      doubleSupplementCheckMoney = 24000;// 20210126 Kyle修改 申請書
    }
    System.out.println("doubleSupplementCheckMoney(" + exeUtil.getFormatNum2("" + doubleSupplementCheckMoney) + ")----------------------------------------");
    // 補充保費 判斷
    if (check.isCoId(stringFactoryNo))
      booleanSupplement = false; // 2013-03-29 統一編號 無 補充保費
    if (",A,B,".indexOf("," + stringReceiptKind + ",") == -1)
      booleanSupplement = false;
    // if(",228202,228208,228204,228226,".indexOf(","+stringAcctNo+",")==-1)
    // booleanSupplement = false ; //2020-02-06 拿掉228203 執行業務所得
    if (",228202,228203,228208,228204,228226,".indexOf("," + stringAcctNo + ",") == -1)
      booleanSupplement = false;
    if (booleanTable21Exist)
      booleanSupplement = false;
    if (!"Z0001".equals(stringFactoryNo) && doubleReceiptTotalMoney < doubleSupplementCheckMoney) {
      // 特殊請款代碼時，不作預設處理
      if (booleanSpecCostID && doubleSupplementRatio > 0)
        return true;
      //
      booleanSupplement = false;
    }
    // 檢核 正確判斷
    System.out.println("booleanSupplement(" + booleanSupplement + ")----------------------------------------");
    if (booleanSupplement) {
      doubleSupplementMoneyL = doubleReceiptTotalMoney * doubleSupplementRatio;
      if ("MONEY".equals(stringTYPE)) {
        hashtableData.put("SupplementMoney", convert.FourToFive("" + doubleSupplementMoneyL, 0));
      }
      // 正負 10 檢核
      if (doubleSupplementMoney == 0) {
        hashtableData.put("MESSAGE", "代收繳補充保費金額為０，請檢附免扣繳補充保費資格證明。");
        // hashtableData.put("SupplementMoney", "0") ;
      } else {
        doubleSupplementMoney = exeUtil.doParseDouble(convert.FourToFive("" + doubleSupplementMoney, 0));
        doubleSupplementMoneyL = exeUtil.doParseDouble(convert.FourToFive("" + doubleSupplementMoneyL, 0));
        if (!booleanSpecUser && (doubleSupplementMoney > doubleSupplementMoneyL + 10 || doubleSupplementMoney < doubleSupplementMoneyL - 10)) {
          hashtableData.put("MESSAGE", "補充保費(" + exeUtil.getFormatNum2("" + doubleSupplementMoney) + ") 大於或小於 [所得金額] " + doubleSupplementRatio * 100 + "%("
              + exeUtil.getFormatNum2("" + doubleSupplementMoneyL) + ") ± 10。");
          return false;
        }
      }
    } else {
      doubleSupplementMoneyL = 0;
      if ("MONEY".equals(stringTYPE)) {
        hashtableData.put("SupplementMoney", "0");
      }
      if (!booleanSpecUser && doubleSupplementMoney > 0) {
        if ("CHECK".equals(stringTYPE)) {
          hashtableData.put("SupplementMoney", "0");
        } else {
          hashtableData.put("MESSAGE", "不允許輸入 [補充保費]。");
          return false;
        }
      }
    }
    return true;
  }

  public boolean isSpecUserID(String stringEmployeeNo) throws Throwable {
    String stringSqlAnd = " AND  EmployeeNo  =  '" + stringEmployeeNo + "' ";
    return getDoc3M011EmployeeNo("12", stringSqlAnd).length > 0;
  }

  // 應用
  public String getPurchseUndergoWriteName(String stringUndergoWrite) throws Throwable {
    return getPurchseUndergoWriteNameUnion(stringUndergoWrite, "A");
  }

  // TYPE A 行銷 B 管理
  public String getPurchseUndergoWriteNameUnion(String stringUndergoWrite, String stringType) throws Throwable {
    String stringUndergoWriteName = "";
    if ("".equals(stringUndergoWrite))
      return stringUndergoWriteName;
    //
    switch (stringUndergoWrite.charAt(0)) {
    case 'A':
      stringUndergoWriteName = "經辦";
      break;
    case 'P':
      stringUndergoWriteName = "行銷專案";
      break;
    case 'B':
      stringUndergoWriteName = "業管";
      break;
    case 'S':
      stringUndergoWriteName = "體系主管";
      break;
    case 'C':
      stringUndergoWriteName = "採購";
      break;
    case 'Y':
      stringUndergoWriteName = "採購主管";
      break;
    case 'X':
      stringUndergoWriteName = "作廢";
      break;
    case 'R':
      stringUndergoWriteName = "退件(採購)";
      break;
    case 'F':
      stringUndergoWriteName = "退件(行銷主管)";
      break;
    case 'D':
      stringUndergoWriteName = "重新議價";
      break;
    case 'G':
      stringUndergoWriteName = "A".equals(stringType) ? "經辦(人總)" : "售服";
      break;
    case 'H':
      stringUndergoWriteName = "A".equals(stringType) ? "審核(人總)" : "經辦";
      break;
    case 'I':
      stringUndergoWriteName = "人總待簽核";
      break;
    case 'K':
      stringUndergoWriteName = "人總已簽核";
      break;
    }
    return stringUndergoWriteName;
  }

  public String getRequsetUndergoWriteNameUnion(String stringUndergoWrite, String stringBarCode, String stringType, FargloryUtil exeUtil) throws Throwable {
    String stringUndergoWriteName = "無";
    if ("".equals(stringUndergoWrite))
      return stringUndergoWriteName;
    //
    stringUndergoWriteName = stringUndergoWrite;
    if ("Y".equals(stringUndergoWrite) && !"".equals(stringBarCode)) {
      stringBarCode = getNameUnionDoc("BarCode", "Doc2M014", " AND  BarCode  =  '" + stringBarCode + "' AND STATUS_CD = 'Y'", new Hashtable(), exeUtil);
      //
      if (!"".equals(stringBarCode))
        stringUndergoWrite = "O";
    }
    //
    switch (stringUndergoWrite.charAt(0)) {
    case 'A':
      stringUndergoWriteName = "A".equals(stringType) ? "經辦" : "售服";
      break;
    case 'B':
      stringUndergoWriteName = "A".equals(stringType) ? "業管" : "經辦";
      break;
    case 'Y':
      stringUndergoWriteName = "會計-審核";
      break;
    case 'X':
      stringUndergoWriteName = "會計-退件";
      break;
    case 'O':
      stringUndergoWriteName = "已轉傳票";
      break;
    case 'E':
      stringUndergoWriteName = "作廢";
      break;
    }
    return stringUndergoWriteName;
  }

  public String doChangTableField(JTable tb1, String stringColumnName, int intWidthS) throws Throwable {
    return (new FargloryUtil()).doChangeTableField(tb1, stringColumnName, intWidthS);
  }

  // 發票格式
  public String getInvoiceKindName(String stringInvoiceKind) throws Throwable {
    if ("A,N,".indexOf(stringInvoiceKind) != -1) {
      stringInvoiceKind = "電子計算機";
    } else if ("B".equals(stringInvoiceKind)) {
      stringInvoiceKind = "收銀機三聯式";
    } else if ("C".equals(stringInvoiceKind)) {
      stringInvoiceKind = "收據";
    } else if ("D".equals(stringInvoiceKind)) {
      stringInvoiceKind = "不得抵扣"; // 作廢，不使用
    } else if ("E".equals(stringInvoiceKind)) {
      stringInvoiceKind = "免稅三聯式";
    } else if ("F".equals(stringInvoiceKind)) {
      stringInvoiceKind = "海關代徵扣抵稅";
    } else if ("G".equals(stringInvoiceKind)) {
      stringInvoiceKind = "收銀機收執聯";
    } else if ("H,X,".indexOf(stringInvoiceKind) != -1) {
      stringInvoiceKind = "收據內含稅";
    } else if ("I".equals(stringInvoiceKind)) {
      stringInvoiceKind = "免稅二聯式";
    } else if ("J,Z,".indexOf(stringInvoiceKind) != -1) {
      stringInvoiceKind = "收據彙總";
    } else if ("K,Y,".indexOf(stringInvoiceKind) != -1) {
      stringInvoiceKind = "收據-彙總(含稅)"; // 作廢，不使用
    } else if ("L".equals(stringInvoiceKind)) {
      stringInvoiceKind = "電子發票";
    } else if ("M".equals(stringInvoiceKind)) {
      stringInvoiceKind = "統一發票三聯式(手開)";
    } else if ("K".equals(stringInvoiceKind)) {
      stringInvoiceKind = "紙本電子發票(收執聯)22";
    } else if ("O".equals(stringInvoiceKind)) {
      stringInvoiceKind = "紙本電子發票(收執聯)21";
    } else if ("P".equals(stringInvoiceKind)) {
      stringInvoiceKind = "紙本電子發票(收執聯)25";
    } else if ("Q".equals(stringInvoiceKind)) {
      stringInvoiceKind = "載具號碼彙總25";
    } else if ("R".equals(stringInvoiceKind)) {
      stringInvoiceKind = "載具號碼25";
    } else if ("S".equals(stringInvoiceKind)) {
      stringInvoiceKind = "載具號碼分攤25";
    } else if ("T".equals(stringInvoiceKind)) {
      stringInvoiceKind = "載具號碼彙總分攤25";
    } else {
      stringInvoiceKind = "";
    }
    return stringInvoiceKind;
  }

  // 日期
  public String getDateAC(String stringRocDate, String stringErrorFieldName) throws Throwable {
    return (new FargloryUtil()).getDateAC(stringRocDate, stringErrorFieldName);
  }

  public String getDateRoc(String stringRocDate, String stringErrorFieldName) throws Throwable {
    return (new FargloryUtil()).getDateRoc(stringRocDate, stringErrorFieldName);
  }

  public int[] getInvoiceYearMonth(String stringDate, FargloryUtil exeUtil) throws Throwable {
    int intMonth = 0;
    int[] arrayTemp = new int[2];
    //
    stringDate = stringDate.replaceAll("/", "");
    intMonth = exeUtil.doParseInteger(datetime.getMonth(stringDate));
    arrayTemp[0] = exeUtil.doParseInteger(datetime.getYear(stringDate));
    // 申報日 1、3、5、7、9、12 月
    switch (intMonth) {
    case 1:
    case 3:
    case 5:
    case 7:
    case 9:
      arrayTemp[1] = intMonth + 2;
      break;
    case 2:
    case 4:
    case 6:
    case 8:
    case 10: //
      arrayTemp[1] = intMonth + 1;
      break;
    case 11:
    case 12:
      arrayTemp[0] = arrayTemp[0] + 1;
      arrayTemp[1] = 1;
      break;
    }
    return arrayTemp;
  }

  // 部門 轉案別 且 輸入部門與分攤案別一致檢核
  public String getProjectIDFromDepartNo(String stringDepartNo, String stringPurchaseNoExist, String stringBarCode, String stringComNo, FargloryUtil exeUtil) throws Throwable {
    String stringProjectID1 = getProjectIDFromDepartNoUnion(stringComNo, stringDepartNo, exeUtil);
    String stringSend = "emaker@farglory.com.tw";
    String stringMessage = "";
    String stringSpecBudget = ",017PR,033FG,033VIP,033CRM,"; // ","+get("SPEC_BUDGET")+"," ;
    String[] arrayUser = { "B3018@farglory.com.tw" };
    //
    System.out.println("stringProjectID1(" + stringProjectID1 + ")---------------------------------");
    //
    if (stringPurchaseNoExist.startsWith("Y"))
      return "";
    //
    if (exeUtil.doParseDouble(stringDepartNo) <= 0 && "".equals(stringProjectID1) && ("," + stringSpecBudget + ",033FZ,").indexOf("," + stringDepartNo + ",") == -1) {
      stringMessage = "原部門：" + stringDepartNo + "<br>" + "條碼編號：" + stringBarCode;
      exeUtil.doEMail("請購單部門分析錯誤", stringMessage, stringSend, arrayUser);
    }
    //
    if (stringProjectID1.startsWith("053")) {
      stringProjectID1 = "," + getProjectID1Doc2M051(stringProjectID1) + ",";
    } else {
      if (!"".equals(stringProjectID1)) {
        if (",M43,XM43,".indexOf(stringProjectID1) != -1) {
          stringProjectID1 += ",M43,XM43,";
        }
        stringProjectID1 = "," + stringProjectID1 + ",";
        System.out.println("getProjectIDFromDepartNo(" + stringProjectID1 + ")----------------11111111----");
      }
    }
    return stringProjectID1;
  }

  // 部門 轉案別
  public String getProjectIDFromDepartNoUnion(String stringComNo, String stringDepartNo, FargloryUtil exeUtil) throws Throwable {
    String stringProjectID = "";
    String stringProjectID1 = "";
    String stringProjectID1Temp = "";
    String stringSpecBudget = ",017PR,033FG,033VIP,033CRM,"; // ","+get("SPEC_BUDGET")+"," ;
    // 特殊預算控管 例外
    if (("," + stringSpecBudget + ",033FZ,").indexOf("," + stringDepartNo + ",") != -1)
      return "";
    if (",033MP,".indexOf("," + stringDepartNo + ",") != -1)
      return stringDepartNo;
    //
    int intPos = -1;
    char charWord = 'A';
    char[] arrayChar = stringDepartNo.toCharArray();
    for (int intNo = 0; intNo < arrayChar.length; intNo++) {
      charWord = arrayChar[intNo];
      if (!Character.isDigit(charWord)) {
        intPos = intNo;
        break;
      }
    }
    //
    if (intPos == -1)
      return "";
    //
    stringProjectID1 = stringDepartNo.substring(intPos).trim();
    if (",01,Z6,".indexOf("," + stringComNo + ",") != -1) {
      if ("E02".equals(stringProjectID1))
        stringProjectID1 = "E02A";
      if ("053H42".equals(stringDepartNo))
        stringProjectID1 = "H42A";
      //
      if (stringDepartNo.startsWith("053")) {
        stringProjectID1Temp = "053" + stringProjectID1;
        stringProjectID = getProjectIDForAGroup(stringProjectID1Temp);
        if ("".equals(stringProjectID)) {
          if (stringProjectID1Temp.endsWith("A")) {
            stringProjectID1Temp = exeUtil.doSubstring(stringProjectID1Temp, 0, stringProjectID1Temp.length() - 1);
          } else {
            stringProjectID1Temp = stringProjectID1Temp + "A";
          }
          stringProjectID = getProjectIDForAGroup(stringProjectID1Temp);
        }
      } else {
        stringProjectID = getProjectIDForAGroup(stringProjectID1);
        stringProjectID1Temp = stringProjectID1;
        if ("".equals(stringProjectID)) {
          if (stringProjectID1.endsWith("A")) {
            stringProjectID1Temp = exeUtil.doSubstring(stringProjectID, 0, stringProjectID1.length() - 1);
          } else {
            stringProjectID1Temp = stringProjectID1 + "A";
          }
          stringProjectID = getProjectIDForAGroup(stringProjectID1Temp);
        }
      }
      System.out.println(
          "stringProjectID1(" + stringProjectID1 + ")stringProjectID1Temp(" + stringProjectID1Temp + ")stringProjectID(" + stringProjectID + ")---------------------------------");
      if ("".equals(stringProjectID)) {
        stringProjectID1 = "";
      } else {
        if (!"".equals(stringProjectID1Temp))
          stringProjectID1 = stringProjectID1Temp;
      }
    }
    return stringProjectID1;
  }

  public double getTaxRate(int intPos, JTable jtable1, JTable jtable3, String[] retDoc2M040, String stringInvoiceTaxType) throws Throwable {
    double doubleTaxRate = 0;
    String stringTemp = "";
    //
    if (jtable1.getRowCount() > 0) {
      if ("F".equals(stringInvoiceTaxType)) {
        // 發票為含稅未稅混合格式
        doubleTaxRate = doParseDouble(retDoc2M040[4].trim()) / 100;
      } else {
        // 發票僅單一稅率格式(含稅或不含稅)
        stringTemp = ("" + jtable1.getValueAt(0, intPos)).trim();
        if ("D".equals(stringTemp) || "E".equals(stringTemp)) {
          doubleTaxRate = 0;
        } else {
          doubleTaxRate = doParseDouble(retDoc2M040[4].trim()) / 100;
        }
      }
    } else if (jtable3.getRowCount() > 0) {
      // 計算稅率
      doubleTaxRate = 0;
    }
    return doubleTaxRate;
  }

  // A 時，表示發票種類為 A
  // B 時，表示發票種類為 B
  // C 時，表示發票種類為 C
  // D 時，表示發票種類為 D
  // E 時，表示發票種類為 含稅混合
  // F 時，表示發票為含稅未稅混合
  public String getInvoiceTaxType(JTable jtable1) throws Throwable {
    return getInvoiceTaxType(jtable1, 3);
  }

  public String getInvoiceTaxType(JTable jtable1, int intPos) throws Throwable {
    // 發票格式種類判斷
    String stringInvoiceTaxType = "A";
    String stringInvoiceKindLocal = "";
    boolean booleanTaxA = false;
    // boolean booleanTaxB = false ;
    // boolean booleanTaxC = false ;
    boolean booleanTaxD = false;
    boolean booleanTaxE = false;
    for (int intNo = 0; intNo < jtable1.getRowCount(); intNo++) {
      stringInvoiceKindLocal = ("" + jtable1.getValueAt(intNo, intPos)).trim();
      if ("D,E".indexOf(stringInvoiceKindLocal) == -1) {
        booleanTaxA = true;
      } else {
        booleanTaxD = true;
      }
    }
    if (booleanTaxD)
      stringInvoiceTaxType = "D";
    if (booleanTaxA)
      stringInvoiceTaxType = "E";
    if (booleanTaxA && booleanTaxD)
      stringInvoiceTaxType = "F";
    return stringInvoiceTaxType;
  }

  public String getSpecialDiscountTotalMoney(String stringBarCode, String stringRecordNo) throws Throwable {
    return getSpecialDiscountTotalMoneyUnion("Doc2M015", stringBarCode, stringRecordNo);
  }

  public String getSpecialDiscountTotalMoneyUnion(String stringTable, String stringBarCode, String stringRecordNo) throws Throwable {
    String stringDiscountTotalMoney = "0";
    String[][] retDoc2M015 = getDoc2M015Union(stringTable, stringBarCode, stringRecordNo);
    //
    if (retDoc2M015.length > 0) {
      stringDiscountTotalMoney = getDiscountMoneyForDoc5M010(stringBarCode, retDoc2M015[0]);
    }
    //
    return stringDiscountTotalMoney;
  }

  public String getRecordNoForDoc2M015FromDoc2M012(String stringBarCode, String stringRecordNoDoc2M012) throws Throwable {
    return getRecordNoForDoc2M015FromDoc2M012Union(true, stringBarCode, stringRecordNoDoc2M012);
  }

  //
  public String getRecordNoForDoc2M015FromDoc2M012Union(boolean booleanSource, String stringBarCode, String stringRecordNoDoc2M012) throws Throwable {
    String stringRecordNo = "";
    String stringKey = "";
    String stringTable12 = booleanSource ? "Doc2M012" : "Doc5M022";
    String stringTable15 = booleanSource ? "Doc2M015" : "Doc5M025";
    String[][] retDoc2M010 = null;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 RealMoney 7 RealTotalMoney
    retDoc2M010 = getDoc2M012Union(stringTable12, stringBarCode, stringRecordNoDoc2M012);
    if (retDoc2M010.length == 0)
      return stringRecordNo;
    stringKey = retDoc2M010[0][0].trim() + "-" + retDoc2M010[0][1].trim() + "-" + retDoc2M010[0][2].trim() + "-" + retDoc2M010[0][3].trim();
    stringRecordNo = getRecordNoForDoc2M015Union(stringTable15, stringBarCode, stringKey);

    return stringRecordNo;
  }

  public String getRecordNoForDoc5M010FromDoc2M012(String stringBarCode, String stringRecordNoDoc2M012) throws Throwable {
    return getRecordNoForDoc5M010FromDoc2M012Union(true, stringBarCode, stringRecordNoDoc2M012);
  }

  public String getRecordNoForDoc5M010FromDoc2M012Union(boolean booleanSource, String stringBarCode, String stringRecordNoDoc2M012) throws Throwable {
    String stringRecordNo = "";
    String stringKey = "";
    String stringTable12 = booleanSource ? "Doc2M012" : "Doc5M022";
    String[][] retDoc2M010 = null;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 RealMoney 7 RealTotalMoney
    retDoc2M010 = getDoc2M012Union(stringTable12, stringBarCode, stringRecordNoDoc2M012);
    if (retDoc2M010.length == 0)
      return stringRecordNo;
    stringKey = retDoc2M010[0][0].trim() + "-" + retDoc2M010[0][1].trim() + "-" + retDoc2M010[0][2].trim() + "-" + retDoc2M010[0][3].trim();
    stringRecordNo = getRecordNoForDoc5M010(stringBarCode, stringKey);

    return stringRecordNo;
  }

  // 針對請購之權限設定，統一於此
  public String getSqlAnd(String stringUser) throws Throwable {
    String stringSqlAnd = "";
    String stringInOut = "";
    String stringProjectID1 = "";
    String[][] retProjectID = getProjectID("I"); // 所有可設定的內外業資料
    String[][] retProjectID1ForUser = getProjectID1ForDoc2M050(stringUser); // 該使用者可檢視的內外業資料
    //
    if (retProjectID1ForUser.length == 0) {
      stringSqlAnd += " AND  1  =  0 "; // 該使用者無任何權限
    }
    if (retProjectID1ForUser.length != 0 && retProjectID.length != retProjectID1ForUser.length) {
      for (int intNo = 0; intNo < retProjectID1ForUser.length; intNo++) {
        stringInOut = retProjectID1ForUser[intNo][0].trim();
        stringProjectID1 = retProjectID1ForUser[intNo][1].trim();
        //
        if (!"".equals(stringSqlAnd))
          stringSqlAnd += " OR ";
        stringSqlAnd += "(ProjectID1  =  '" + stringProjectID1 + "'  OR  " + " ProjectID1  LIKE  '" + stringProjectID1 + ",%'  OR  " + " ProjectID1  LIKE  '%," + stringProjectID1
            + ",%'  OR  " + " ProjectID1  LIKE  '%," + stringProjectID1 + "') ";
      }
      stringSqlAnd = " AND  a.BarCode  IN  (SELECT  BarCode  FROM  Doc3M012  WHERE  " + stringSqlAnd + ")";
    }
    //
    stringSqlAnd += "Order by  DocNo1,  DocNo2,  DocNo3 ";
    return stringSqlAnd;
  }

  public String getSqlAnd2(String stringUser) throws Throwable {
    String stringSqlAnd = "";
    String stringInOut = "";
    String stringProjectID1 = "";
    String[][] retProjectID = getProjectID("I"); // 所有可設定的內外業資料
    String[][] retProjectID1ForUser = getProjectID1ForDoc2M050(stringUser); // 該使用者可檢視的內外業資料
    boolean booleanFirstOut = true;
    boolean booleanFirstIn = true;
    //
    if (retProjectID1ForUser.length == 0) {
      stringSqlAnd += " AND  1  =  0 "; // 該使用者無任何權限
    }
    if (retProjectID1ForUser.length != 0 && retProjectID.length != retProjectID1ForUser.length) {
      for (int intNo = 0; intNo < retProjectID1ForUser.length; intNo++) {
        stringInOut = retProjectID1ForUser[intNo][0].trim();
        stringProjectID1 = retProjectID1ForUser[intNo][1].trim();
        //
        // if(!"".equals(stringSqlAnd)) stringSqlAnd += " OR " ;
        // stringSqlAnd += "(ProjectID1 = '" + stringProjectID1 + "' ) " ;
        if ("I".equals(stringInOut)) {
          if (booleanFirstIn) {
            if (!"".equals(stringSqlAnd))
              stringSqlAnd += " OR ";
            stringSqlAnd += "a.BarCode  IN  ( SELECT  BarCode " + " FROM  Doc3M014 " + " WHERE  InOut  =  'I' " + " AND  (";
            booleanFirstIn = false;
          } else {
            stringSqlAnd += " OR ";
          }
          stringSqlAnd += " DepartNo  LIKE  '%" + stringProjectID1 + "%' ";
          if ((intNo == retProjectID1ForUser.length - 1) || ("O".equals(retProjectID1ForUser[intNo + 1][0].trim()))) {
            stringSqlAnd += ")) ";
          }
        } else {
          if (booleanFirstOut) {
            if (!"".equals(stringSqlAnd))
              stringSqlAnd += " OR ";
            stringSqlAnd += " a.BarCode  IN  ( SELECT  BarCode " + " FROM  Doc3M014 " + " WHERE  InOut  =  'O' " + " AND  (";
            booleanFirstOut = false;
          } else {
            stringSqlAnd += " OR ";
          }
          if (stringProjectID1.indexOf("053") == -1) {
            stringSqlAnd += " ProjectID1  =  '" + stringProjectID1 + "' ";
          } else {
            stringProjectID1 = getProjectID1Doc2M051(stringProjectID1);
            stringSqlAnd += " (DepartNo  =  '0531'  AND  ProjectID1  =  '" + stringProjectID1 + "') ";
          }
          // stringSqlAnd += " ProjectID1 = '" + stringProjectID1 + "' " ;
          if (intNo == retProjectID1ForUser.length - 1) {
            stringSqlAnd += ")) ";
          }
        }
      }
      stringSqlAnd = " AND  a.BarCode  IN  (SELECT  BarCode  FROM  Doc3M014  WHERE  " + stringSqlAnd + ")";
    }
    //
    stringSqlAnd += "Order by  DocNo1,  DocNo2,  DocNo3 ";
    return stringSqlAnd;
  }

  public String getSqlAnd3(String stringUser) throws Throwable {
    String stringSqlAnd = "";
    String stringInOut = "";
    String stringProjectID1 = "";
    String[][] retProjectID = getProjectID("I"); // 所有可設定的內外業資料
    String[][] retProjectID1ForUser = getProjectID1ForDoc2M050(stringUser); // 該使用者可檢視的內外業資料
    //
    if (retProjectID1ForUser.length == 0) {
      stringSqlAnd += " AND  1  =  0 "; // 該使用者無任何權限
    }
    if (retProjectID1ForUser.length != 0 && retProjectID.length != retProjectID1ForUser.length) {
      for (int intNo = 0; intNo < retProjectID1ForUser.length; intNo++) {
        stringInOut = retProjectID1ForUser[intNo][0].trim();
        stringProjectID1 = retProjectID1ForUser[intNo][1].trim();
        //
        if (!"".equals(stringSqlAnd))
          stringSqlAnd += " OR ";
        stringSqlAnd += "(DepartNo  LIKE  '%" + stringProjectID1 + "%'  ) ";
      }
      stringSqlAnd = " AND  (" + stringSqlAnd + ")";
    }
    //
    stringSqlAnd += "Order by  DocNo1,  DocNo2,  DocNo3 ";
    return stringSqlAnd;
  }

  public Hashtable getUsedProjectIDMoney2(boolean booleanSource, String stringComNo, String stringBarCode, String[][] retTable6Data) throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return getUsedProjectIDMoney2(booleanSource, stringComNo, stringBarCode, retTable6Data, exeUtil);
  }

  public Hashtable getUsedProjectIDMoney2(boolean booleanSource, String stringComNo, String stringBarCode, String[][] retTable6Data, FargloryUtil exeUtil) throws Throwable {
    // System.out.println("已請款案別金額整理----------------------S") ;
    Hashtable hashtableRealMoney = new Hashtable();
    String stringBarCodeL = "";
    String stringBarCodePurchase = "";
    String stringKey = "";
    String stringLimit = "%---%";
    String stringPurchaseMoney = "";
    String stringPurchaseNo = "";
    String stringPurchaseNo1 = "";
    String stringPurchaseNo1L = "";
    String stringPurchaseNo2 = "";
    String stringPurchaseNo2L = "";
    String stringPurchaseNo3 = "";
    String stringPurchaseNo3L = "";
    String stringPurchaseNo4 = "";
    String stringSqlAnd = "";
    String stringSqlAnd1 = "";
    String stringSql = "";
    String stringFactoryNo = "";
    String stringFactoryNoL = "";
    String stringPurchaseSumMoney = "";
    String stringNoUseRealMoney = "";
    String stringProjectID1 = "";
    String stringProjectID1L = "";
    String stringCostIDL = "";
    String stringCostIDSumL = "";
    String[] arrayTemp = null;
    String[][] retDataTemp = null;
    String[][] retDoc2M010 = null;
    String[][] retDoc2M017 = null;
    String[][] retDoc2M012 = null;
    String[][] retDoc3M012 = null;
    String[][] retDoc3M012L = null;
    // String[][] retDoc3M013 = null ;
    String[][] retDoc3M014 = null;
    double doubleRealMoney = 0;
    double doublePurchaseMoney = 0;
    double doublePurchaseMoneySum = 0;
    double doubleTemp = 0;
    Vector vectorBarCode = new Vector();
    Vector vectorData = new Vector();
    Vector vectorKey = new Vector();
    Vector vectorKeyThis = new Vector();
    Vector vectorFactoryNo = new Vector();
    Vector vectorPurchaseSumMoney = new Vector();
    Vector vectorCostID = new Vector();
    boolean booleanDul = true;
    //
    for (int intNo = 0; intNo < retTable6Data.length; intNo++) {
      stringPurchaseNo1 = retTable6Data[intNo][0].trim();
      stringPurchaseNo2 = retTable6Data[intNo][1].trim();
      stringPurchaseNo3 = retTable6Data[intNo][2].trim();
      stringPurchaseNo4 = retTable6Data[intNo][3].trim();
      stringPurchaseMoney = retTable6Data[intNo][4].trim();
      stringFactoryNo = retTable6Data[intNo][5].trim();
      stringProjectID1 = retTable6Data[intNo][6].trim();
      //
      if (!"".equals(stringSqlAnd))
        stringSqlAnd += " OR ";
      stringSqlAnd += " (PurchaseNo  =  '" + stringPurchaseNo1 + stringProjectID1 + stringPurchaseNo2 + stringPurchaseNo3 + "') ";
      //
      doublePurchaseMoneySum += exeUtil.doParseDouble(stringPurchaseMoney);
      //
      if (!"Z".equals(stringPurchaseNo4)) {
        System.out.println("已請款案別金額整理----------------------ERROR1");
        return null;
      }
      // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
      // 5 CostID1 6 RealMoney 7 BudgetMoney 8 BarCode
      retDoc3M014 = getDoc3M014ForPurchaseNoUnion(booleanSource ? "Doc3M014" : "Doc5M014", stringComNo,
          stringPurchaseNo1 + stringProjectID1 + stringPurchaseNo2 + stringPurchaseNo3);
      stringBarCodePurchase = retDoc3M014[0][8].trim();
      vectorKeyThis = new Vector();
      for (int intNoL = 0; intNoL < retDoc3M014.length; intNoL++) {
        doubleRealMoney = exeUtil.doParseDouble(retDoc3M014[intNoL][6].trim());
        //
        stringKey = retDoc3M014[intNoL][0].trim() + stringLimit + // 2 InOut
            retDoc3M014[intNoL][1].trim() + stringLimit + // 3 DepartNo
            retDoc3M014[intNoL][2].trim() + stringLimit + // 4 ProjectID
            retDoc3M014[intNoL][3].trim() + stringLimit + // 5 ProjectID1
            retDoc3M014[intNoL][4].trim() + stringLimit + // 6 CostID
            retDoc3M014[intNoL][5].trim(); // 7 CostID1
        doubleRealMoney += exeUtil.doParseDouble("" + hashtableRealMoney.get(stringKey));
        hashtableRealMoney.put(stringKey, "" + doubleRealMoney);
        System.out.println(intNo + "請購案別金額整理----------------------[" + stringKey + "]" + doubleRealMoney);
        //
        if (vectorKey.indexOf(stringKey) == -1)
          vectorKey.add(stringKey);
        if (vectorKeyThis.indexOf(stringKey) == -1)
          vectorKeyThis.add(stringKey);
      }
      //
      /*
       * retDoc3M012 = getDoc3M012Union(booleanSource?"Doc3M012":"Doc5M012",
       * stringBarCodePurchase, "") ; for(int intNoL=0 ; intNoL<retDoc3M012.length ;
       * intNoL++) { stringFactoryNoL = retDoc3M012[intNoL][8].trim() ;
       * stringPurchaseSumMoney = retDoc3M012[intNoL][12].trim() ;
       * //stringNoUseRealMoney = retDoc3M013[intNoL][8].trim() ; //
       * if(doParseDouble(stringNoUseRealMoney) > 0) {
       * if(vectorFactoryNo.indexOf(stringFactoryNoL) != -1) {
       * vectorPurchaseSumMoney.remove(vectorFactoryNo.indexOf(stringFactoryNoL)) ;
       * vectorFactoryNo.remove(stringFactoryNoL) ; } //
       * vectorFactoryNo.add(stringFactoryNoL) ;
       * vectorPurchaseSumMoney.add(""+(doParseDouble(stringPurchaseSumMoney) -
       * doParseDouble(stringNoUseRealMoney))) ; } else {
       * if(vectorFactoryNo.indexOf(stringFactoryNoL) == -1) {
       * vectorFactoryNo.add(stringFactoryNoL) ;
       * vectorPurchaseSumMoney.add(stringPurchaseSumMoney) ; } } }
       */
      // 請款申請書
      stringSql = "SELECT  BarCode " + " FROM  " + (booleanSource ? "Doc2M010" : "Doc5M020") + " " + " WHERE  BarCode <> '" + stringBarCode + "' " + " AND  UNDERGO_WRITE  <>  'E' "
          + " AND  ComNo  =  '" + stringComNo + "' " + " AND  BarCode  IN  (SELECT  BarCode " + " FROM  " + (booleanSource ? "Doc2M017" : "Doc5M027") + " "
          + " WHERE  PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  PurchaseNo3  =  '" + stringPurchaseNo3 + "' ";
      if (!booleanSource) {
        stringSql += " AND  ISNULL(ProjectID1,'')  =  '" + stringProjectID1 + "' ";
      }
      stringSql += ")ORDER BY  EDateTime ";
      retDoc2M010 = getTableDataDoc(stringSql);
      vectorBarCode = new Vector();
      //
      vectorBarCode.add(stringBarCode); // 本身不計算
      // 請購為單一案別分攤 直接扣除
      // 請款[單請購單] 直接扣除
      // 請款[多請購單] 請款 單費用分攤 直接使用請購金額扣除
      // 請款 多費用分攤 [先扣除所有請款案別分攤] [再加非此請購單之案別分攤]
      for (int intNoL = 0; intNoL < retDoc2M010.length; intNoL++) {
        stringBarCodeL = retDoc2M010[intNoL][0].trim();
        //
        if (vectorBarCode.indexOf(stringBarCodeL) != -1)
          continue;
        vectorBarCode.add(stringBarCodeL);
        //
        retDataTemp = booleanSource ? getDoc2M017(stringBarCodeL) : getDoc5M027(stringBarCodeL); //
        booleanDul = false;
        for (int intDataTemp = 0; intDataTemp < retDataTemp.length; intDataTemp++) {
          stringPurchaseNo1L = retDataTemp[intDataTemp][0].trim();
          stringPurchaseNo2L = retDataTemp[intDataTemp][1].trim();
          stringPurchaseNo3L = retDataTemp[intDataTemp][2].trim();
          stringProjectID1L = retDataTemp[intDataTemp][7].trim();
          stringPurchaseNo = stringPurchaseNo1L + stringProjectID1L + stringPurchaseNo2L + stringPurchaseNo3L;
          //
          if (stringPurchaseNo.equals(stringPurchaseNo1 + stringProjectID1 + stringPurchaseNo2 + stringPurchaseNo3)) {
            doublePurchaseMoney = exeUtil.doParseDouble(retDataTemp[intDataTemp][4].trim());
            // break ;
          }
          if (vectorKeyThis.size() > 1 && !booleanDul && retDataTemp.length > 1) {
            // 判斷是否請款代碼不重複
            retDoc3M012L = getDoc3M012Union(booleanSource, stringComNo, stringPurchaseNo, "", "");
            stringCostIDSumL = "";
            for (int intDoc3M012L = 0; intDoc3M012L < retDoc3M012L.length; intDoc3M012L++) {
              stringCostIDL = retDoc3M012L[intDoc3M012L][0].trim() + "-" + retDoc3M012L[intDoc3M012L][1].trim();
              //
              if (stringCostIDSumL.indexOf(stringCostIDL) != -1)
                continue;
              stringCostIDSumL += stringCostIDSumL + ",";
              //
              if (vectorCostID.indexOf(stringCostIDL) != -1) {
                booleanDul = true;
                break;
              }
              vectorCostID.add(stringCostIDL);
            }
          }
        }
        // 請購為單一案別分攤
        if (vectorKeyThis.size() == 1) {
          stringKey = ("" + vectorKeyThis.get(0)).trim();
          doubleRealMoney = exeUtil.doParseDouble("" + hashtableRealMoney.get(stringKey)) - doublePurchaseMoney;
          hashtableRealMoney.put(stringKey, "" + doubleRealMoney);
          System.out.println("1請款   案別金額整理----------------------[" + stringKey + "]" + doubleRealMoney);
          continue;
        }
        // 請購筆數
        vectorData = new Vector();
        if (booleanDul && retDataTemp.length > 1) {
          // 取得 該筆請購金額
          // double doublePurchaseMoneyF = 0 ; // 合約金額(不變)
          // double doubleRealTotalMoney = 0 ;
          // double doubleThisRealMoney = 0 ;
          // 請購僅單一費用分攤
          // 取得 該筆之費用分攤
          retDoc2M012 = booleanSource ? getDoc2M012(stringBarCodeL) : getDoc5M022(stringBarCodeL);
          for (int intT = 0; intT < retDoc2M012.length; intT++) {
            stringKey = retDoc2M012[intT][0].trim() + stringLimit + // 2 InOut
                retDoc2M012[intT][1].trim() + stringLimit + // 3 DepartNo
                retDoc2M012[intT][2].trim() + stringLimit + // 4 ProjectID
                retDoc2M012[intT][3].trim() + stringLimit + // 5 ProjectID1
                retDoc2M012[intT][4].trim() + stringLimit + // 6 CostID
                retDoc2M012[intT][5].trim(); // 7 CostID1
            // 針對請購單之資料，過濾費用分攤資料，並加總金額
            if (vectorKeyThis.indexOf(stringKey) == -1)
              continue;
            //
            if (retDoc2M012.length == 1) {
              doubleRealMoney = doublePurchaseMoney;
              System.out.println("2 請款   案別金額整理----------------------[" + stringKey + "]" + doubleRealMoney);
            } else {
              doubleRealMoney = doParseDouble(retDoc2M012[intT][7].trim());
              System.out.println("3 請款   案別金額整理----------------------[" + stringKey + "]" + doubleRealMoney);
            }
            //
            doubleRealMoney = exeUtil.doParseDouble("" + hashtableRealMoney.get(stringKey)) - doubleRealMoney;
            hashtableRealMoney.put(stringKey, "" + doubleRealMoney);
          }
          // 0 PurchaseNo1 1 PurchaseNo2 2 PurchaseNo3 3 RetainMoney 4 PurchaseMoney
          // 5 PurchaseNo4 6 FactoryNo
          // 請款多費用分攤
          if (retDoc2M012.length > 1) {
            for (int intT = 0; intT < retDataTemp.length; intT++) {
              stringPurchaseNo1L = retDataTemp[intT][0].trim();
              stringPurchaseNo2L = retDataTemp[intT][1].trim();
              stringPurchaseNo3L = retDataTemp[intT][2].trim();
              stringProjectID1L = retDataTemp[intT][7].trim();
              doublePurchaseMoney = exeUtil.doParseDouble(retDataTemp[intT][4].trim());
              stringPurchaseNo = stringPurchaseNo1L + stringProjectID1L + stringPurchaseNo2L + stringPurchaseNo3L;
              //
              if (stringPurchaseNo.equals(stringPurchaseNo1 + stringProjectID1 + stringPurchaseNo2 + stringPurchaseNo3))
                continue;
              //
              // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
              // 5 CostID1 6 RealMoney 7 BudgetMoney
              retDoc3M014 = booleanSource ? getDoc3M014ForPurchaseNo(stringComNo, stringPurchaseNo1L + stringProjectID1L + stringPurchaseNo2L + stringPurchaseNo3L)
                  : getDoc5M014("", stringComNo, stringPurchaseNo1L + stringProjectID1L + stringPurchaseNo2L + stringPurchaseNo3L, "");
              for (int intDoc3M014 = 0; intDoc3M014 < retDoc3M014.length; intDoc3M014++) {
                doubleRealMoney = exeUtil.doParseDouble(retDoc3M014[intDoc3M014][6].trim());
                //
                stringKey = retDoc3M014[intDoc3M014][0].trim() + stringLimit + // 2 InOut
                    retDoc3M014[intDoc3M014][1].trim() + stringLimit + // 3 DepartNo
                    retDoc3M014[intDoc3M014][2].trim() + stringLimit + // 4 ProjectID
                    retDoc3M014[intDoc3M014][3].trim() + stringLimit + // 5 ProjectID1
                    retDoc3M014[intDoc3M014][4].trim() + stringLimit + // 6 CostID
                    retDoc3M014[intDoc3M014][5].trim(); // 7 CostID1
                if (vectorKeyThis.indexOf(stringKey) == -1)
                  continue;
                //
                if (retDoc3M014.length == 1) {
                  doubleRealMoney = exeUtil.doParseDouble("" + hashtableRealMoney.get(stringKey)) + doublePurchaseMoney;
                  hashtableRealMoney.put(stringKey, "" + doubleRealMoney);
                } else {
                  // 非模糊(該請購為單一廠商，且請款時為一次使用完)
                  doubleRealMoney = exeUtil.doParseDouble("" + hashtableRealMoney.get(stringKey)) + doubleRealMoney;
                  hashtableRealMoney.put(stringKey, "" + doubleRealMoney);
                  System.out.println("4請款   案別金額整理----------------------[" + stringKey + "]" + doubleRealMoney);
                }
              }
            }
          }
        } else {
          for (int intKey = 0; intKey < vectorKeyThis.size(); intKey++) {
            stringKey = ("" + vectorKeyThis.get(intKey));
            arrayTemp = convert.StringToken(stringKey, stringLimit);
            //
            if (arrayTemp.length != 6) {
              System.out.println("已請款案別金額整理----------------------ERROR2" + stringKey);
              return null;
            }
            //
            stringSqlAnd1 = " AND  BarCode  =  '" + stringBarCodeL + "' ";
            //
            doubleRealMoney = exeUtil.doParseDouble("" + hashtableRealMoney.get(stringKey));
            doubleTemp = booleanSource
                ? getRealTotalMoneySumForDoc2M012(stringBarCode, arrayTemp[0].trim(), arrayTemp[1].trim(), arrayTemp[2].trim(), arrayTemp[3].trim(), arrayTemp[4].trim(),
                    arrayTemp[5].trim(), "", stringSqlAnd1)
                : getRealTotalMoneySumForDoc5M022(stringBarCode, arrayTemp[0].trim(), arrayTemp[1].trim(), arrayTemp[2].trim(), arrayTemp[3].trim(), arrayTemp[4].trim(),
                    arrayTemp[5].trim(), "", stringSqlAnd1);
            doubleRealMoney -= doubleTemp;
            hashtableRealMoney.put(stringKey, "" + doubleRealMoney);
            System.out.println("5請款   案別金額整理----------------------[" + stringKey + "]" + doubleRealMoney);
            if (doubleRealMoney <= 0) {
              vectorKeyThis.remove(stringKey);
              intKey--;
            }
          }
        }
      }
    }
    // 借款沖銷
    if (!"".equals(stringSqlAnd))
      stringSqlAnd1 = " AND  BarCode  IN  (SELECT  BarCode " + " FROM  " + (booleanSource ? "Doc6M010" : "Doc5M030") + " " + " WHERE  (" + stringSqlAnd + "))";
    for (int intNo = 0; intNo < vectorKey.size(); intNo++) {
      stringKey = ("" + vectorKey.get(intNo));
      arrayTemp = convert.StringToken(stringKey, stringLimit);
      //
      if (arrayTemp.length != 6) {
        System.out.println("已請款案別金額整理----------------------ERROR3[" + stringKey + "]");
        return null;
      }
      //
      doubleRealMoney = exeUtil.doParseDouble("" + hashtableRealMoney.get(stringKey));
      doubleRealMoney -= booleanSource
          ? getRealTotalMoneySumForDoc6M012ComNoUnion(stringBarCode, arrayTemp[0].trim(), arrayTemp[1].trim(), arrayTemp[2].trim(), arrayTemp[3].trim(), arrayTemp[4].trim(),
              arrayTemp[5].trim(), "Y", stringSqlAnd1, stringComNo)
          : getRealTotalMoneySumForDoc5M032(stringBarCode, arrayTemp[0].trim(), arrayTemp[1].trim(), arrayTemp[2].trim(), arrayTemp[3].trim(), arrayTemp[4].trim(),
              arrayTemp[5].trim(), "", stringSqlAnd1);
      hashtableRealMoney.put(stringKey, "" + doubleRealMoney);
      System.out.println(doubleRealMoney + "----------------------[" + stringKey + "]");
    }
    // System.out.println("已請款案別金額整理----------------------E") ;
    return hashtableRealMoney;
  }

  // 檢核
  public boolean isDigitNum(String stringValue) throws Throwable {
    return (new FargloryUtil()).isDigitNum(stringValue);
  }

  public boolean isFactoryNoOK(String stringComNo, String stringFactoryNo) throws Throwable {
    String stringFirmNo = getFirmNo(stringComNo, "", "", "");
    if ("".equals(stringFirmNo)) {
      put("ERROR", "公司資料錯誤，請洽 [資訊室])");
      return false;
    }
    if (stringFirmNo.equals(stringFactoryNo)) {
      put("ERROR", "付款廠商 不得與請款公司 [統一編號] 相同。");
      return false;
    }
    return true;
  }

  // true 表示第一次使用，false 表示已經使用
  public boolean isFirstTimeUseFactoryNo(String stringBarCode, String stringComNo, String stringFactoryNo) throws Throwable {
    boolean booleanFirstTime = true;
    String stringUnderGoWrite = "";
    // String stringDateUse = "2006/01/01" ;
    // String stringToday = datetime.getToday("YYYY/mm/dd") ;
    // boolean booleanTEST = (stringToday.compareTo(stringDateUse) < 0) ;// 一般物料
    // 12/8 上線 true 測試 true 正式
    String[][] retDoc2M010 = null;
    String[][] retDoc6M010 = null;
    // Doc2M010
    retDoc2M010 = getUndergoWriterDoc2M010(stringBarCode, stringComNo, stringFactoryNo);
    for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
      stringUnderGoWrite = retDoc2M010[intNo][0].trim();
      if ("Y".equals(stringUnderGoWrite)) {
        return false;
      }
    }
    // Doc6M010
    retDoc6M010 = getUndergoWriterDoc6M010(stringBarCode, stringComNo, stringFactoryNo);
    for (int intNo = 0; intNo < retDoc6M010.length; intNo++) {
      stringUnderGoWrite = retDoc6M010[intNo][0].trim();
      if ("Y".equals(stringUnderGoWrite)) {
        return false;
      }
    }
    //
    // if(!booleanTEST) {
    retDoc2M010 = getUndergoWriterDoc5M020(stringBarCode, stringComNo, stringFactoryNo);
    for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
      stringUnderGoWrite = retDoc2M010[intNo][0].trim();
      if ("Y".equals(stringUnderGoWrite)) {
        return false;
      }
    }
    retDoc6M010 = getUndergoWriterDoc5M030(stringBarCode, stringComNo, stringFactoryNo);
    for (int intNo = 0; intNo < retDoc6M010.length; intNo++) {
      stringUnderGoWrite = retDoc6M010[intNo][0].trim();
      if ("Y".equals(stringUnderGoWrite)) {
        return false;
      }
    }
    // }
    //
    return booleanFirstTime;
  }

  // 多模糊 時，回true
  // 單一請購單 OK
  // 多 請購單 請款單一分攤 OK
  // 多 請購單 請款多 分攤 請購 單一費用分攤 OK
  // 多 費用分攤 本次未完全使用完 模糊
  // 本次 完全使用完 請購單為單一廠商廠商 OK
  // 請購單為多 廠商廠商 模糊
  public boolean isStatusSlur(boolean booleanSource, String[][] retTable6Data) throws Throwable {
    return isStatusSlur(booleanSource, "", retTable6Data);
  }

  public boolean isStatusSlur(boolean booleanSource, String stringComNo, String[][] retTable6Data) throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return isStatusSlur(booleanSource, stringComNo, retTable6Data, exeUtil);
  }

  public boolean isStatusSlur(boolean booleanSource, String stringComNo, String[][] retTable6Data, FargloryUtil exeUtil) throws Throwable {
    int intCount = 0;
    String stringFactoryNo = "";
    String stringFactoryNoL = "";
    String stringNoUseRealMoney = "";
    String stringPurchaseNo = "";
    String stringPurchaseNo1 = "";
    String stringPurchaseNo2 = "";
    String stringPurchaseNo3 = "";
    String stringPurchaseNo4 = "";
    String stringPurchaseMoney = "";
    String stringPurchaseSumMoney = "";
    String stringPurchaseSumMoneyL = "";
    String stringSql = "";
    String stringBarCode = "";
    String stringProjectID1 = "";
    String stringCostIDL = "";
    String stringCostIDSum = "";
    String[][] retDoc3M014 = null;
    String[][] retDoc3M013 = null;
    Vector vectorCostID = new Vector();
    Vector vectorFactoryNo = new Vector();
    boolean booleanDulCostID = false; // 重複為 true，否則為 false
    //
    for (int intNo = 0; intNo < retTable6Data.length; intNo++) {
      stringPurchaseNo1 = retTable6Data[intNo][0].trim();
      stringPurchaseNo2 = retTable6Data[intNo][1].trim();
      stringPurchaseNo3 = retTable6Data[intNo][2].trim();
      stringPurchaseNo4 = retTable6Data[intNo][3].trim();
      stringPurchaseMoney = retTable6Data[intNo][4].trim();
      stringFactoryNo = retTable6Data[intNo][5].trim();
      stringProjectID1 = retTable6Data[intNo][6].trim();
      stringPurchaseNo = stringPurchaseNo1 + stringProjectID1 + stringPurchaseNo2 + stringPurchaseNo3;
      //
      if (!"Z".equals(stringPurchaseNo4))
        return false;
      // Doc3M014 筆數
      stringSql = "SELECT  BarCode " + " FROM  " + (booleanSource ? "Doc3M014" : "Doc5M014") + " " + " WHERE  BarCode  IN  (SELECT  BarCode " + " FROM "
          + (booleanSource ? "Doc3M011" : "Doc5M011") + " " + " WHERE  DocNo  =  '" + stringPurchaseNo + "' ";
      if (!"".equals(stringComNo))
        stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
      stringSql += ") ";
      retDoc3M014 = dbDoc.queryFromPool(stringSql);
      if (retDoc3M014.length == 1)
        continue;
      stringBarCode = retDoc3M014[0][0].trim();
      //
      retDoc3M013 = getDoc3M012Union(booleanSource ? "Doc3M012" : "Doc5M012", stringBarCode, "");
      vectorFactoryNo = new Vector();
      stringCostIDSum = "";
      for (int intNoL = 0; intNoL < retDoc3M013.length; intNoL++) {
        stringCostIDL = retDoc3M013[intNoL][0].trim() + retDoc3M013[intNoL][1].trim();
        stringFactoryNoL = retDoc3M013[intNoL][8].trim();
        stringPurchaseSumMoneyL = retDoc3M013[intNoL][12].trim();
        stringPurchaseSumMoney += "" + (exeUtil.doParseDouble(stringPurchaseSumMoneyL) - exeUtil.doParseDouble(stringPurchaseSumMoney));
        //
        // stringNoUseRealMoney = retDoc3M013[intNoL][8].trim() ;
        //
        // if(doParseDouble(stringNoUseRealMoney) > 0) {
        //
        // stringPurchaseSumMoney = ""+(exeUtil.doParseDouble(stringPurchaseSumMoneyL) -
        // exeUtil.doParseDouble(stringNoUseRealMoney)) ;
        // } else {
        // if(vectorFactoryNo.indexOf(stringFactoryNoL) == -1) {
        // stringPurchaseSumMoney = stringPurchaseSumMoneyL ;
        // }
        // }
        if (vectorFactoryNo.indexOf(stringFactoryNoL) == -1)
          vectorFactoryNo.add(stringFactoryNoL);
        // 請款代碼重複判斷
        if (booleanDulCostID)
          continue; // 已重複，不再作判斷
        if (stringCostIDSum.indexOf(stringCostIDL) != -1)
          continue; // 本身重複，即已判斷
        stringCostIDSum += stringCostIDL + ",";
        if (vectorCostID.indexOf(stringCostIDL) != -1) {
          booleanDulCostID = true;
        }
        vectorCostID.add(stringCostIDL);
      }
      if (vectorFactoryNo.size() > 1) {
        intCount++;
        // System.out.println(stringPurchaseNo1+stringProjectID1+stringPurchaseNo2+stringPurchaseNo3+"-----------------多廠商")
        // ;
        continue;
      }
      if (booleanSource) {
        retDoc3M013 = dbDoc
            .queryFromPool("SELECT  SUM(NoUseRealMoney) " + " FROM  Doc3M013 " + " WHERE  BarCode =  '" + stringBarCode + "' " + " AND  FactoryNo =  '" + stringFactoryNoL + "' ");
        stringPurchaseSumMoney = "" + (exeUtil.doParseDouble(stringPurchaseSumMoney) - exeUtil.doParseDouble(retDoc3M013[0][0].trim()));
      } else {
        retDoc3M013 = dbDoc.queryFromPool("SELECT  SUM(M130.NoUseRealMoney) " + " FROM  Doc5M0130 M130,  Doc5M012 M12 " + " WHERE  M130.BarCode   =  M12.BarCode "
            + " AND  M130.RecordNo  =  M12.RecordNo " + " AND  M12.FactoryNo  =  '" + stringFactoryNoL + "' " + " AND  M12.BarCode =  '" + stringBarCode + "' ");
        stringPurchaseSumMoney = "" + (exeUtil.doParseDouble(stringPurchaseSumMoney) - exeUtil.doParseDouble(retDoc3M013[0][0].trim()));
      }
      if (exeUtil.doParseDouble(stringPurchaseMoney) != exeUtil.doParseDouble(stringPurchaseSumMoney)) {
        intCount++;
        // System.out.println(stringPurchaseNo1+stringProjectID1+stringPurchaseNo2+stringPurchaseNo3+"-----------------未一次使用完
        // ") ;
        continue;
      }
    }
    if (!booleanDulCostID)
      return false;
    if (intCount > 1)
      return true;
    return false;
  }

  // 通知
  public void doErrorEmail(String stringContentText) throws Throwable {
    String stringSend = "emaker@farglory.com.tw";
    String stringSubject = "基金會判斷錯誤";
    String[] arrayUser = { "B3018@farglory.com.tw" };
    (new Farglory.util.FargloryUtil()).doEMail(stringSubject, stringContentText, stringSend, arrayUser);
  }

  // 年底預估 E-mail 通知
  public void doYearEndDataExistEmail(String stringBarCode, String stringDocNoAnd, String stringInvoiceNoAnd, String stringPurchaseNoAnd, String stringMessage,
      FargloryUtil exeUtil) throws Throwable {
    doYearEndDataExistEmail(stringBarCode, stringDocNoAnd, stringInvoiceNoAnd, stringPurchaseNoAnd, stringMessage, "Z6", exeUtil);
  }

  public void doYearEndDataExistEmail(String stringBarCode, String stringDocNoAnd, String stringInvoiceNoAnd, String stringPurchaseNoAnd, String stringMessage, String stringComNo,
      FargloryUtil exeUtil) throws Throwable {
    String stringSubject = "年底預估重複通知";
    String stringSend = "emaker@farglory.com.tw";
    String[] arrayUser = { "B3018@farglory.com.tw" };
    String[][] retData = null;
    String stringSql = " AND  ComNo  =  '" + stringComNo + "' ";
    //
    String stringToday = datetime.getToday("YYYYmmdd");
    int intYear = exeUtil.doParseInteger(datetime.getYear(stringToday));
    int intMonth = exeUtil.doParseInteger(datetime.getMonth(stringToday));
    //
    if (1 <= intMonth && intMonth <= 10)
      return;
    // 條碼編號
    if (!"".equals(stringBarCode)) {
      retData = getDoc2M090("", stringBarCode, "" + intYear, "", "", "", "", stringSql);
      if (retData.length > 0) {
        stringMessage += "<br>已存在 [條碼編號](" + stringBarCode + ")(公司：" + stringComNo + ")(年度：" + intYear + ")";
        exeUtil.doEMail(stringSubject, stringMessage, stringSend, arrayUser);
        return;
      }
    }
    // 公文編號
    if (!"".equals(stringDocNoAnd)) {
      retData = getDoc2M090("", "", "" + intYear, "", "", "", "", stringDocNoAnd + " " + stringSql);
      if (retData.length > 0) {
        stringMessage += "<br>已存在 [公文編號](" + stringDocNoAnd + ")(公司：" + stringComNo + ")(年度：" + intYear + ")";
        exeUtil.doEMail(stringSubject, stringMessage, stringSend, arrayUser);
        return;
      }
    }
    // 發票
    if (!"".equals(stringInvoiceNoAnd)) { //
      stringInvoiceNoAnd += " AND  ID  IN (SELECT  ID " + " FROM  Doc2M090 " + " WHERE  YEAR  =  '" + intYear + "' ";
      if (!"".equals(stringSql))
        stringInvoiceNoAnd += stringSql;
      stringInvoiceNoAnd += ")";
      retData = getDoc2M091("", "", stringInvoiceNoAnd);
      if (retData.length > 0) {
        stringMessage += "<br>已存在 [發票](" + stringInvoiceNoAnd + ")(公司：" + stringComNo + ")(年度：" + intYear + ")";
        exeUtil.doEMail(stringSubject, stringMessage, stringSend, arrayUser);
        return;
      }
    }
    // 請購單
    if (!"".equals(stringPurchaseNoAnd)) {
      stringPurchaseNoAnd += " AND  YEAR  =  '" + intYear + "' ";
      retData = getDoc2M097("", "", "", "", "", stringComNo, stringPurchaseNoAnd);
      if (retData.length > 0) {
        stringMessage += "<br>已存在 [請購單](" + stringPurchaseNoAnd + ")(公司：" + stringComNo + ")(年度：" + intYear + ")";
        exeUtil.doEMail(stringSubject, stringMessage, stringSend, arrayUser);
        return;
      }
    }
  }

  // 轉傳票
  public String[][] getTableDataFrom(String stringBarCode) throws Throwable {
    return getTableDataFrom(true, stringBarCode);
  }

  // 退保留款 getConvertToArrayForRetainMoney 無年底預估
  // 131,132 getConvertToArrayBonus 無年底預估
  // 事後補發票 getConvertToArrayDocTypeB
  // 零用金(發票或個人收據) getConvertToArrayForPocketMoney
  // 發票 或 無憑證 getConvertToArrayForInvoice
  // 立沖或個人收據、特殊請款代碼 810(發票)、固資
  // getConvertToArrayForReceipt
  public String[][] getTableDataFrom(boolean booleanSource, String stringBarCode) throws Throwable {
    System.out.println("JackLee Come In getTableDataFrom");
    if (!booleanSource)
      return getTableDataFromFirst(booleanSource, stringBarCode);
    //
    String stringDateUse = "2009/01/12";
    String stringToday = datetime.getToday("YYYY/mm/dd");
    boolean booleanTEST = (stringToday.compareTo(stringDateUse) < 0) && !"B3018".equals(getUser());// true 測試 false 正式
    //
    FargloryUtil exeUtil = new FargloryUtil();
    String[][] retDoc2M010 = null;
    String[][] retDoc2M011 = null;
    String[][] retDoc2M012 = null;
    String[][] retDoc2M013 = null;
    String[][] retTable = new String[1][1];
    boolean booleanPocketMoney = false; // true 表示為零用金
    // 0 ComNo 1 Descript 2 3 BarCode 4 DocNo
    // 5 UNDERGO_WRITE 6 7 8 9 DocNo1
    // 10 DocNo2 11 DocNo3 12 DepartNo 13 RetainMoney 14 PayCondition1
    // 15 PayCondition2 16 CDate 17 OriEmployeeNo 18 Descript 19 PreFinDate
    // 20 PurchaseNoExist 21 PrintCount 22 EDateTime 23 CTime 24 AccountCount
    // 25 WriteRetainMoney 26 RetainBarCode 27 DocNoType 28 FactoryNoSpec
    retDoc2M010 = getDoc2M010Union("Doc2M010", stringBarCode);
    if (retDoc2M010.length == 0) {
      retTable[0][0] = "查無資料。";
      return retTable;
    }
    // 基金會不轉傳票
    String stringComNo = retDoc2M010[0][0].trim();
    String[][] retDoc7M056 = getDoc7M056(stringComNo, "", "", "", "");
    String strinComNoType = retDoc7M056[0][2].trim();
    if (strinComNoType.equals("E")) {
      retTable[0][0] = "";
      System.out.println("基金會公司 不轉傳票。");
      return retTable;
    }
    // 薪資轉傳票
    Hashtable hashtableAnd = new Hashtable();
    Vector vectorDoc2M0143 = new Vector();
    hashtableAnd.put("BarCode", stringBarCode);
    vectorDoc2M0143 = getQueryDataHashtableDoc("Doc2M0143", hashtableAnd, " ORDER BY  TEMP_KEY ", new Vector(), exeUtil);
    if (vectorDoc2M0143.size() > 1) {
      System.out.println("薪資轉傳票-----------------------");
      return getSalaryConvertToDoc2M014(vectorDoc2M0143, exeUtil);
    }
    //
    String stringRetainBarCode = retDoc2M010[0][26].trim();
    if (!"".equals(stringRetainBarCode)) {
      // 退保留款
      System.out.println("getConvertToArrayForRetainMoney-----------------------");
      retTable = getConvertToArrayForRetainMoney(booleanSource, retDoc2M010, exeUtil);
      return retTable;
    }
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 RealMoney 7 RealTotalMoney
    retDoc2M012 = booleanSource ? getDoc2M012(stringBarCode) : getDoc5M022(stringBarCode); // 取得費用資料，Doc2M012
    if (retDoc2M012.length == 0) {
      retTable[0][0] = "查無資料。";
      return retTable;
    }
    boolean booleanApplyTypeD = ",P38453,P20829,".indexOf("," + stringBarCode + ",") == -1
        && isApplyTypeDVoucher1("A", retDoc2M010[0][0].trim(), stringBarCode, retDoc2M010[0][33].trim());
    //
    String stringCDate = retDoc2M010[0][16].trim();
    String stringCDateAC = exeUtil.getDateConvert(stringCDate);
    String stringCostAll = "";
    String[][] retDoc5M0224 = getDoc5M0224(stringBarCode, "");
    boolean booleanDoc2M0201ForB = false;
    boolean booleanCostIDSpec = false;
    Vector vectorDoc2M0201ForB = null;
    Vector vectorCostID = new Vector();
    Hashtable hashtbleFunctionType = getCostIDVDoc2M0201H(retDoc2M010[0][0].trim(), "", "", stringCDateAC, "");
    //
    vectorDoc2M0201ForB = (Vector) hashtbleFunctionType.get("B");
    if (vectorDoc2M0201ForB == null)
      vectorDoc2M0201ForB = new Vector();

    vectorCostID.add("131");
    vectorCostID.add("132");
    for (int intNo = 0; intNo < retDoc2M012.length; intNo++) {
      stringCostAll = retDoc2M012[intNo][4].trim() + retDoc2M012[intNo][5].trim();
      if (vectorCostID.indexOf(stringCostAll) != -1) {
        // retTable[0][0] = "請款代碼 131(訴訟公積金)、132(體系公積金) 不轉傳票。" ;
        // 2008/06/09 修正
        System.out.println("getConvertToArrayBonus-----------------------");
        retTable = getConvertToArrayBonus(booleanTEST, booleanSource, retDoc2M010, retDoc2M012, exeUtil);
        return retTable;
      }
      // if(",810,".indexOf(","+stringCostAll+",") != -1) {
      // booleanCostIDSpec = true ;
      // }
      if (vectorDoc2M0201ForB.indexOf(stringCostAll) != -1) {
        // 允許免憑證
        booleanDoc2M0201ForB = true;
      }
    }
    if ("B".equals(retDoc2M010[0][27].trim())) {
      // 事後補發票
      System.out.println("getConvertToArrayDocTypeB-----------------------");
      retTable = getConvertToArrayDocTypeB(booleanTEST, booleanSource, retDoc2M010, retDoc2M012, exeUtil);
      return retTable;
    }
    // 零用金 START
    String stringCostID = retDoc2M012[0][4].trim();
    Vector vectorPocketMoney = new Vector();
    //
    vectorPocketMoney.add("31");
    vectorPocketMoney.add("32");
    if (vectorPocketMoney.indexOf(stringCostID) != -1)
      booleanPocketMoney = true;
    // 零用金 END
    // 0 FactoryNo 1 InvoiceKind 2 InvoiceDate 3 InvoiceNo 4 InvoiceMoney
    // 5 InvoiceTax 6 InvoiceTotalMoney 7 DeductKind
    retDoc2M011 = getDoc2M011(stringBarCode); // 取得發票資料，Doc2M011
    if (",P93421,".indexOf(stringBarCode) == -1 && booleanPocketMoney) {
      System.out.println("getConvertToArrayForPocketMoney-----------------------1");
      retDoc2M013 = getDoc2M013(stringBarCode); // 取得扣繳資料，Doc2M013
      retTable = getConvertToArrayForPocketMoney(booleanTEST, booleanSource, retDoc2M010, retDoc2M011, retDoc2M012, retDoc2M013, exeUtil);
    } else {
      System.out.println("booleanCostIDSpec(" + booleanCostIDSpec + ")booleanApplyTypeD(" + booleanApplyTypeD + ")retDoc2M011.length(" + retDoc2M011.length
          + ")retDoc5M0224.length(" + retDoc5M0224.length + ")-----------------------1");
      if (!booleanCostIDSpec && !booleanApplyTypeD && retDoc2M011.length != 0 && retDoc5M0224.length == 0) {
        System.out.println("getConvertToArray1-----------------------2");
        retTable = getConvertToArrayForInvoice(booleanTEST, retDoc2M010, retDoc2M011, retDoc2M012, booleanDoc2M0201ForB, exeUtil);
      } else {
        // 0 FactoryNo 1 ReceiptKind 2 ReceiptDate 3 ReceiptMoney 4 ReceiptTax
        // 5 ReceiptTotalMoney 6 ReceiptTaxType 7 ACCT_NO 8 PayCondition1 9 DepartNo
        // 10 ACCT_NO2 11 SupplementMoney
        retDoc2M013 = getDoc2M013(stringBarCode); // 取得扣繳資料，Doc2M013
        // 立沖 或 個人收據 或 固定資產
        if (retDoc2M013.length != 0 || retDoc5M0224.length > 0 || booleanCostIDSpec || booleanApplyTypeD) {
          System.out.println("getConvertToArrayForReceipt-----------------------3");
          retTable = getConvertToArrayForReceipt(booleanApplyTypeD, booleanTEST, hashtbleFunctionType, retDoc2M010, retDoc2M011, retDoc2M012, retDoc2M013, retDoc5M0224, exeUtil);
        } else {
          if (booleanDoc2M0201ForB) {
            System.out.println("getConvertToArray2----------------4");
            retTable = getConvertToArrayForInvoice(booleanTEST, retDoc2M010, retDoc2M011, retDoc2M012, booleanDoc2M0201ForB, exeUtil);
          } else {
            retTable[0][0] = "查無資料。";
          }
        }
      }
    }
    return retTable;
  }

  // 行銷轉傳票設定值
  // 特殊部門視為外案
  public boolean isDepartCdIsOut(String stringDepartNo) throws Throwable {
    boolean booleanInOut = ("017PR,033FG,033VIP,033CRM,03335,033622,03365,").indexOf(stringDepartNo + ",") != -1;
    return booleanInOut;
  }

  // 一般物料轉傳票 START
  public String[][] getTableDataFromFirst(boolean booleanSource, String stringBarCode) throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    String stringDateUse = "2009/01/12";
    String stringToday = datetime.getToday("YYYY/mm/dd");
    String stringRetainBarCode = "";
    boolean booleanTEST = false;// (stringToday.compareTo(stringDateUse) < 0) && !"B3018".equals(getUser()) ;//
                                // true 測試 false 正式
    String[][] retDoc2M011 = null;
    String[][] retDoc2M013 = null;
    String[][] retTable = new String[1][1];
    boolean booleanPocketMoney = false; // true 表示為零用金
    Hashtable hashtableDoc2M010 = null;
    Vector vectorTableData = getQueryDataHashtableDoc(booleanSource ? "Doc2M010" : "Doc5M020", new Hashtable(), "AND  BarCode  =  '" + stringBarCode + "' ", new Vector(), exeUtil);
    Vector vectorDoc5M022 = new Vector();
    if (vectorTableData.size() == 0) {
      retTable[0][0] = "查無資料。";
      return retTable;
    }
    hashtableDoc2M010 = (Hashtable) vectorTableData.get(0);
    stringRetainBarCode = "" + hashtableDoc2M010.get("RetainBarCode");
    if ("null".equals(stringRetainBarCode))
      stringRetainBarCode = "";
    if (!"".equals(stringRetainBarCode)) {
      retTable = getConvertToDoc2M014(booleanSource, hashtableDoc2M010, retDoc2M011, vectorDoc5M022, retDoc2M013, exeUtil);
      return retTable;
    }
    // 薪資轉傳票
    Hashtable hashtableAnd = new Hashtable();
    Vector vectorDoc2M0143 = new Vector();
    hashtableAnd.put("BarCode", stringBarCode);
    vectorDoc2M0143 = getQueryDataHashtableDoc("Doc2M0143", hashtableAnd, " ORDER BY  TEMP_KEY ", new Vector(), exeUtil);
    System.out.println("vectorDoc2M0143(" + vectorDoc2M0143.size() + ")-----------------------");
    if (vectorDoc2M0143.size() > 1) {
      System.out.println("薪資轉傳票-----------------------S");
      return getSalaryConvertToDoc2M014(vectorDoc2M0143, exeUtil);
    }
    // 取得費用資料，Doc2M012
    vectorDoc5M022 = getQueryDataHashtableDoc("Doc5M022", new Hashtable(), "AND  BarCode  =  '" + stringBarCode + "' ORDER BY RecordNo ", new Vector(), exeUtil);
    if (vectorDoc5M022.size() == 0) {
      retTable[0][0] = "查無資料。";
      return retTable;
    }
    // 0 FactoryNo 1 InvoiceKind 2 InvoiceDate 3 InvoiceNo 4 InvoiceMoney
    // 5 InvoiceTax 6 InvoiceTotalMoney 7 DeductKind
    retDoc2M011 = getDoc5M021(stringBarCode); // 取得發票資料，Doc2M011
    // 0 FactoryNo 1 ReceiptKind 2 ReceiptDate 3 ReceiptMoney 4 ReceiptTax
    // 5 ReceiptTotalMoney 6 ReceiptTaxType 7 ACCT_NO 8 PayCondition1 9 DepartNo
    // 10 ACCT_NO2 11 SupplementMoney
    retDoc2M013 = getDoc5M023(stringBarCode); // 取得扣繳資料，Doc2M013
    return getConvertToDoc2M014(booleanSource, hashtableDoc2M010, retDoc2M011, vectorDoc5M022, retDoc2M013, exeUtil);
  }

  public String[][] getSalaryConvertToDoc2M014(Vector vectorDoc2M0143, FargloryUtil exeUtil) throws Throwable {
    System.out.println("getSalaryConvertToDoc2M014--------------------------S");
    Vector retVector = new Vector();
    String stringPOS = "" + get("Doc2M014_Salary_POS");
    put("Doc2M014_Salary_POS", "null");
    String stringVoucherYMD014 = ("" + get("Doc2M014_VOUCHER_YMD")).trim();
    String stringVoucherYMD014L = "";
    String stringBarCode = "";
    String stringSystemCd = "";
    String stringTempKey = "";
    String stringTempYMD = "";
    String stringTempFlowNo = "";
    String stringTempSeqNo = "";
    String stringCompanyCd = "";
    String stringStatus = "";
    String stringVoucherYMD = "";
    String stringVoucherFlowNo = "";
    String stringVoucherSeqNo = "";
    String stringVoucherStatus = "";
    String stringDocNo = "";
    String stringDbCrCd = "";
    String stringAcctNo = "";
    String stringDepartNo = "";
    String stringObjectCd = "";
    String stringAmt = "";
    String stringDescript = "";
    String stringKEY = "";
    String stringToday = getToday("yymmdd");
    String stringLastYMD = "";
    String stringCDate = "";
    String stringItemCd = "";
    String[] arrayDescript = new String[5];
    for (int intNo = 0; intNo < arrayDescript.length; intNo++)
      arrayDescript[intNo] = "";
    String[] retDataTemp = null;
    String[] arrayTemp = null;
    String[][] retFED1004 = new String[0][0];
    String[][] retTable = new String[0][0];
    Hashtable hashtableTemp = new Hashtable();
    Hashtable hashtableAnd = new Hashtable();
    Hashtable hashtableKEY = new Hashtable();
    Vector vectorFED1040 = new Vector();
    Vector vectorFED1012 = new Vector();
    //
    if ("null".equals(stringPOS))
      stringPOS = "END";
    stringVoucherYMD014 = exeUtil.getDateConvert(stringVoucherYMD014);
    if (stringVoucherYMD014.length() != 10)
      stringVoucherYMD014 = "";
    //
    for (int intNo = 0; intNo < vectorDoc2M0143.size(); intNo++) {
      hashtableTemp = (Hashtable) vectorDoc2M0143.get(intNo);
      if (hashtableTemp == null)
        continue;
      stringStatus = "" + hashtableTemp.get("STATUS_CD");
      if ("null".equals(stringStatus))
        stringStatus = "";
      //
      if (intNo == 0 && "Z".equals(stringStatus))
        stringVoucherStatus = "A";
      if (intNo == 1 && "Z".equals(stringStatus))
        stringVoucherStatus = "B";
    }
    System.out.println("getSalaryConvertToDoc2M014(" + vectorDoc2M0143.size() + ")-----------------------1");
    for (int intNo = 0; intNo < vectorDoc2M0143.size(); intNo++) {
      hashtableTemp = (Hashtable) vectorDoc2M0143.get(intNo);
      if (hashtableTemp == null)
        continue;
      stringBarCode = "" + hashtableTemp.get("BarCode");
      if ("null".equals(stringBarCode))
        stringBarCode = "";
      stringCDate = "" + hashtableTemp.get("CDate");
      if ("null".equals(stringCDate))
        stringCDate = "";
      stringSystemCd = "" + hashtableTemp.get("SYSTEM_CD");
      if ("null".equals(stringSystemCd))
        stringSystemCd = "";
      stringTempKey = "" + hashtableTemp.get("TEMP_KEY");
      if ("null".equals(stringTempKey))
        stringTempKey = "";
      stringTempYMD = "" + hashtableTemp.get("TEMP_YMD");
      if ("null".equals(stringTempYMD))
        stringTempYMD = "";
      stringTempFlowNo = "" + hashtableTemp.get("TEMP_FLOW_NO");
      if ("null".equals(stringTempFlowNo))
        stringTempFlowNo = "";
      stringCompanyCd = "" + hashtableTemp.get("COMPANY_CD");
      if ("null".equals(stringCompanyCd))
        stringCompanyCd = "";
      stringVoucherYMD = "" + hashtableTemp.get("VOUCHER_YMD");
      if ("null".equals(stringVoucherYMD))
        stringVoucherYMD = "";
      stringVoucherFlowNo = "" + hashtableTemp.get("VOUCHER_FLOW_NO");
      if ("null".equals(stringVoucherFlowNo))
        stringVoucherFlowNo = "";
      stringStatus = "" + hashtableTemp.get("STATUS_CD");
      if ("null".equals(stringStatus))
        stringStatus = "";
      //
      System.out.println(intNo + "getSalaryConvertToDoc2M014---stringVoucherStatus(" + stringVoucherStatus + ")-----------------------2");
      if ("B".equals(stringVoucherStatus)) {
        // 查詢 FED1012
        if ("START".equals(stringPOS) && !stringTempKey.endsWith("1")) {
          continue;
        }
        if ("END".equals(stringPOS) && !stringTempKey.endsWith("2")) {
          continue;
        }
        if ("".equals(stringCompanyCd)) {
          System.out.println("Doc2M0143 COMPANY_CD 為空白");
          return retTable;
        }
        if ("".equals(stringVoucherYMD)) {
          System.out.println("Doc2M0143 VOUCHER_YMD 為空白");
          return retTable;
        }
        if ("".equals(stringVoucherFlowNo)) {
          System.out.println("Doc2M0143 VOUCHER_FLOW_NO 為空白");
          return retTable;
        }
        return getTableDataFromDB(stringBarCode, stringPOS);
      }
      System.out.println(intNo + "getSalaryConvertToDoc2M014---stringStatus(" + stringStatus + ")-----------------------3");
      if ("Z".equals(stringStatus)) {
        if (stringTempKey.endsWith("1")) {
          // 尋找 2251 之 VouchcerYMD-VoucherFlowNo-VoucherSeqNo 以明細一作KEY 對應的金額
          stringVoucherYMD = exeUtil.getDateConvertRoc(stringVoucherYMD).replaceAll("/", "");
          hashtableAnd.put("VOUCHER_YMD", stringVoucherYMD);
          hashtableAnd.put("VOUCHER_FLOW_NO", stringVoucherFlowNo);
          hashtableAnd.put("COMPANY_CD", stringCompanyCd);
          hashtableAnd.put("ACCT_NO", "2251");
          hashtableAnd.put("KIND", "0");
          vectorFED1012 = getQueryDataHashtableFED1("FED1012", hashtableAnd, "", new Vector(), exeUtil);
          for (int intNoL = 0; intNoL < vectorFED1012.size(); intNoL++) {
            hashtableTemp = (Hashtable) vectorFED1012.get(intNoL);
            if (hashtableTemp == null)
              continue;
            stringKEY = "" + hashtableTemp.get("DESCRIPTION_1");
            stringVoucherSeqNo = "" + hashtableTemp.get("VOUCHER_SEQ_NO");
            hashtableKEY.put(stringKEY, stringVoucherYMD + "-" + stringVoucherFlowNo + "-" + stringVoucherSeqNo);
          }
        }
        if ("START".equals(stringPOS)) {
          return getTableDataFromDB(stringBarCode, stringPOS);
        }
        continue;
      }
      System.out.println("傳票日預設值(" + stringVoucherYMD014 + ")----------------------------S");
      if ("".equals(stringVoucherYMD014)) {
        if (stringTempKey.endsWith("1")) {
          System.out.println("----------------------------1");
          stringVoucherYMD014L = exeUtil.doSubstring(stringTempKey, 0, stringTempKey.length() - 1) + "01";
          stringVoucherYMD014L = exeUtil.getDateMonthEnd(stringVoucherYMD014L);
        } else {
          System.out.println("----------------------------2");
          stringVoucherYMD014L = exeUtil.doSubstring(stringTempKey, 0, stringTempKey.length() - 1) + "04";
          stringVoucherYMD014L = datetime.dateAdd(stringVoucherYMD014L, "m", 1);
        }
        stringVoucherYMD014L = exeUtil.getDateConvert(stringVoucherYMD014L);
      }
      System.out.println("傳票日預設值(" + stringVoucherYMD014L + ")----------------------------E");
      //
      if ("".equals(stringSystemCd)) {
        System.out.println("Doc2M0143 SYSTEM_CD 為空白");
        return retTable;
      }
      if ("".equals(stringTempKey)) {
        System.out.println("Doc2M0143 TEMP_KEY 為空白");
        return retTable;
      }
      if ("".equals(stringCompanyCd)) {
        System.out.println("Doc2M0143 COMPANY_CD 為空白");
        return retTable;
      }
      // 查詢 FED1040
      hashtableAnd.put("SYSTEM_CD", stringSystemCd);
      hashtableAnd.put("TEMP_KEY", stringTempKey);
      hashtableAnd.put("COMPANY_CD", stringCompanyCd);
      vectorFED1040 = getQueryDataHashtableFED1("FED1040", hashtableAnd, " ORDER BY  TEMP_SEQ_NO ", new Vector(), exeUtil);
      System.out.println("DocNo----------------------------S");
      stringDocNo = getNameUnionDoc("DocNo", "Doc5M020", " AND  BarCode  =  '" + stringBarCode + "' ", new Hashtable(), exeUtil);
      if ("".equals(stringDocNo)) {
        stringDocNo = getNameUnionDoc("DocNo", "Doc2M010", " AND  BarCode  =  '" + stringBarCode + "' ", new Hashtable(), exeUtil);
      }
      System.out.println("DocNo(" + stringDocNo + ")----------------------------E");
      for (int intNoL = 0; intNoL < vectorFED1040.size(); intNoL++) {
        hashtableTemp = (Hashtable) vectorFED1040.get(intNoL);
        if (hashtableTemp == null)
          continue;
        stringTempFlowNo = "" + hashtableTemp.get("TEMP_FLOW_NO");
        stringTempSeqNo = "" + hashtableTemp.get("TEMP_SEQ_NO");
        stringDbCrCd = "" + hashtableTemp.get("DB_CR_CD");
        stringAcctNo = "" + hashtableTemp.get("ACCT_NO");
        stringDepartNo = "" + hashtableTemp.get("DEPT_CD");
        stringObjectCd = "" + hashtableTemp.get("OBJECT_CD");
        stringAmt = "" + hashtableTemp.get("AMT");
        arrayDescript[0] = "" + hashtableTemp.get("DESCRIPTION_1");
        arrayDescript[1] = "" + hashtableTemp.get("DESCRIPTION_2");
        arrayDescript[2] = "" + hashtableTemp.get("DESCRIPTION_3");
        arrayDescript[3] = "" + hashtableTemp.get("DESCRIPTION_4");
        arrayDescript[4] = "" + hashtableTemp.get("DESCRIPTION_5");
        stringDescript = "" + hashtableTemp.get("DESCRIPTION");
        //
        if ("null".equals(stringTempSeqNo)) {
          System.out.println("FED1040 TEMP_SEQ_NO 為空白");
          return retTable;
        }
        if ("null".equals(stringDbCrCd)) {
          System.out.println("FED1040 DB_CR_CD 為空白");
          return retTable;
        }
        if ("null".equals(stringAcctNo))
          stringAcctNo = "";
        if ("null".equals(stringDepartNo))
          stringDepartNo = "";
        if ("null".equals(stringObjectCd))
          stringObjectCd = "";
        if (exeUtil.doParseDouble(stringAmt) <= 0)
          stringAmt = "0";
        //
        if ("2251".equals(stringAcctNo) && stringTempKey.endsWith("2")) {
          stringLastYMD = "" + hashtableKEY.get(arrayDescript[0]);
        } else {
          stringLastYMD = stringToday;
        }
        // 明細處理
        if ("228202".equals(stringAcctNo)) {
          retFED1004 = getFED1004(stringAcctNo);
          for (int intL = 0; intL < retFED1004.length; intL++) {
            stringItemCd = retFED1004[intL][0].trim();
            //
            if ("G20".equals(stringItemCd)) {
              arrayDescript[intL] = "" + getG20Amt(stringBarCode, exeUtil);
              arrayDescript[intL] = convert.FourToFive(arrayDescript[intL], 0);
            }
          }
        }
        // 會計科目 228299 立沖處理 依公司-對象-會科目 去找可沖銷資料
        //
        retDataTemp = new String[27];
        retDataTemp[0] = stringBarCode; // 條碼編號 0
        retDataTemp[1] = stringDocNo; // 公文代號 1
        retDataTemp[2] = "R"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H 退保留款I
        retDataTemp[3] = "" + (intNoL + 1); // No 3
        retDataTemp[4] = stringVoucherYMD014L; // 傳票日期 4
        retDataTemp[5] = "0"; // 傳票流水號 5
        retDataTemp[6] = stringTempSeqNo; // 傳票序號 6
        retDataTemp[7] = stringCompanyCd; // 公司代號 7
        retDataTemp[8] = "0"; // Kind 8
        retDataTemp[9] = stringDbCrCd; // 借貸 9
        retDataTemp[10] = stringAcctNo; // 會計科目 10
        retDataTemp[11] = stringDepartNo; // 部門 11
        retDataTemp[12] = stringObjectCd; // 對象 12
        retDataTemp[13] = stringAmt; // 金額 13
        retDataTemp[14] = "0"; // 匯率 14
        retDataTemp[15] = "0"; // 原類金額 15
        retDataTemp[16] = "0"; // 請款金額 16
        retDataTemp[17] = "U"; // 狀態-未過帳 17
        retDataTemp[18] = arrayDescript[0]; // 明細一 18
        retDataTemp[19] = arrayDescript[1]; // 明細二 19
        retDataTemp[20] = arrayDescript[2]; // 明細三 20
        retDataTemp[21] = arrayDescript[3]; // 明細四 21
        retDataTemp[22] = arrayDescript[4]; // 明細五 22
        retDataTemp[23] = stringDescript; // 摘要 23
        retDataTemp[24] = getUser(); // 修改者 24
        retDataTemp[25] = stringLastYMD; // 修改日期 25
        retDataTemp[26] = "A"; //
        //
        retVector.add(retDataTemp);
      }
      retTable = (String[][]) retVector.toArray(new String[0][0]);
      return retTable;
    }
    //
    System.out.println("getSalaryConvertToDoc2M014--------------------------E");
    return retTable;
  }

  public double getG20Amt(String stringBarCode, FargloryUtil exeUtil) throws Throwable {
    String stringTemp = "";
    Hashtable hashtableAnd = new Hashtable();
    double dobuleAmt = 0;
    hashtableAnd.put("BarCode", stringBarCode);
    stringTemp = getNameUnionDoc("BarCode", "Doc5M020", "", hashtableAnd, exeUtil);
    if (!"".equals(stringTemp)) {
      // 管理費用
      hashtableAnd.put("BarCode", stringBarCode);
      hashtableAnd.put("ReceiptKind", "A");
      stringTemp = getNameUnionDoc("ReceiptTotalMoney", "Doc5M023", "", hashtableAnd, exeUtil);
      dobuleAmt += exeUtil.doParseDouble(stringTemp);
      hashtableAnd.put("BarCode", stringBarCode);
      hashtableAnd.put("ReceiptKind", "B");
      stringTemp = getNameUnionDoc("ReceiptTotalMoney", "Doc5M023", "", hashtableAnd, exeUtil);
      dobuleAmt += exeUtil.doParseDouble(stringTemp);
    } else {
      // 行銷
      hashtableAnd.put("BarCode", stringBarCode);
      hashtableAnd.put("ReceiptKind", "A");
      stringTemp = getNameUnionDoc("ReceiptTotalMoney", "Doc2M013", "", hashtableAnd, exeUtil);
      dobuleAmt += exeUtil.doParseDouble(stringTemp);
      hashtableAnd.put("BarCode", stringBarCode);
      hashtableAnd.put("ReceiptKind", "B");
      stringTemp = getNameUnionDoc("ReceiptTotalMoney", "Doc2M013", "", hashtableAnd, exeUtil);
      dobuleAmt += exeUtil.doParseDouble(stringTemp);
    }
    return dobuleAmt;
  }

  /*
   * 借款申請書-傳票 借款沖銷-傳票 借款沖銷-借款表格 借款沖銷-費用表格 發票 1281(95238) XXXX(92538) 沖銷總金額 100000
   * 含稅 100000 1264(4762) 1281(92538) 借沖金額 92538 未稅 92538 2121(100000)
   * 
   * 個人收據 1281(100000) XXXX(100000) 沖銷總金額 100000 含稅 100000 228202(5000)
   * 1281(100000) 借沖金額 100000 未稅 100000 228231(2000) 2121(9700)
   * 
   * 無憑證 1281(100000) XXXX(92538) 沖銷總金額 100000 含稅 100000 2121(100000) 1264(4762)
   * 借沖金額 100000 未稅 92538 1281(100000)
   */
  // 獎金
  // 事後補發票OK
  // hashtableDoc2M010
  // 2 VoucherYMD014 5 FactoryNo 6 AccFirst 7 DepartNoFirst 10 到期日
  // 11 BankCd 12 BankNo 13 Amt2146 14 Amt2147
  // 15 AcctountType 17 DepartNo2147 18 TotalNoTaxAmt 19 TotalAmt 20 InvoiceDate
  // 21 InvoiceNo
  // 22 InvoiceMoney 23 InvoiceTotalMoney 24 InvoiceKind 25 Count 次數 27 Temp
  // 28 AccountCountStatusS 29 ComType 30 RetainAcctNo 保留-會計 31 貸方負值 32 KindNoPur
  // ApplyTypeD
  public String[][] getConvertToDoc2M014(boolean booleanSource, Hashtable hashtableDoc2M010, String[][] retDoc2M011, Vector vectorDoc5M022, String[][] retDoc2M013,
      FargloryUtil exeUtil) throws Throwable {
    talk dbAsset = getTalk("" + get("put_Asset"));
    boolean booleanTEST = false;
    Vector retVector = new Vector();
    String stringVoucherYMD014 = ("" + get("Doc2M014_VOUCHER_YMD")).trim();
    String stringAccountCountS = ("" + get("Doc2M014_AccountCount")).trim();
    String stringAccountCountStatusS = ("" + get("Doc2M014_AccountCount_Status")).trim(); // 扣繳月數一致
    String stringAccountCount = "" + hashtableDoc2M010.get("AccountCount");
    String stringAcctCSession = ("" + get("Doc2M014_AcctNo")).trim();
    //
    if ("null".equals(stringVoucherYMD014))
      stringVoucherYMD014 = "";
    if (!"".equals(stringAccountCountS) && !"null".equals(stringAccountCountS))
      stringAccountCount = stringAccountCountS;
    if (exeUtil.doParseInteger(stringAccountCount) <= 0)
      stringAccountCount = "1"; // 月數
    put("Doc2M014_VOUCHER_YMD", "null");
    put("Doc2M014_AccountCount", "null");
    put("Doc2M014_AccountCount_Status", "null");
    put("Doc2M014_AcctNo", "null");
    //
    int intFlowNo = 0;
    String stringTemp = "";
    String stringAcctC = "";
    String stringAcctCConstant = "";
    String stringAcctDConstant = "";
    String stringBarCode = "" + hashtableDoc2M010.get("BarCode");
    if ("null".equals(stringBarCode))
      stringBarCode = "";
    String stringComNo = "" + hashtableDoc2M010.get("ComNo");
    if ("null".equals(stringComNo))
      stringComNo = "";
    String stringDescript = "" + hashtableDoc2M010.get("Descript");
    if ("null".equals(stringDescript))
      stringDescript = "";
    String stringDocNoType = "" + hashtableDoc2M010.get("DocNoType");
    if ("null".equals(stringDocNoType))
      stringDocNoType = "";
    String stringFactoryNo = "" + hashtableDoc2M010.get("FactoryNoSpec");
    if ("null".equals(stringFactoryNo))
      stringFactoryNo = "";
    String stringInputDepartNo = "" + hashtableDoc2M010.get("DepartNo");
    if ("null".equals(stringInputDepartNo))
      stringInputDepartNo = "";
    String stringKindNoL = "" + hashtableDoc2M010.get("KindNo");
    if ("null".equals(stringKindNoL))
      stringKindNoL = "";
    String stringKindNo = "23".equals(stringKindNoL) ? "15" : "17";
    String stringMailMoney1 = "";
    String stringMailMoney2 = "";
    String stringRetainMoney = "" + hashtableDoc2M010.get("RetainMoney");
    if ("null".equals(stringRetainMoney))
      stringRetainMoney = "";// 保留款
    String stringPayCondition1 = "" + hashtableDoc2M010.get("PayCondition1");
    if ("null".equals(stringPayCondition1))
      stringPayCondition1 = "";
    String stringPayCondition2 = "" + hashtableDoc2M010.get("PayCondition2");
    if ("null".equals(stringPayCondition2))
      stringPayCondition2 = "";
    String stringPurchaseNo = "";
    String stringPurchaseNo1 = "";//
    String stringPurchaseNo2 = "";//
    String stringPurchaseNo3 = "";//
    String stringPurchaseNo4 = "";//
    String stringRetainBarCode = "" + hashtableDoc2M010.get("RetainBarCode");
    if ("null".equals(stringRetainBarCode))
      stringRetainBarCode = "";
    String stringWriteRetainMoney = "" + hashtableDoc2M010.get("WriteRetainMoney");
    if ("null".equals(stringWriteRetainMoney))
      stringWriteRetainMoney = "";
    String stringPurchaseNoExist = "" + hashtableDoc2M010.get("PurchaseNoExist");
    if ("null".equals(stringPurchaseNoExist))
      stringPurchaseNoExist = "";
    String stringRealMoney = "";
    String stringRowtype = "";
    String stringType = "";
    String stringComType = getComNoType(stringComNo);
    // 0預設 1(5681-2146) 2(6201-2147) 3(5681-6201,2146/2147)
    String[] retDoc2M040 = getDoc2M040();
    String[] retDataTemp = null;
    String[] arrayTemp = null;
    String[] arrayTable = new String[8];
    String[][] retDoc2M017 = getDoc2M017Union("Doc5M027", stringBarCode);
    String[][] retDoc5M0272 = getDoc5M0272(stringBarCode, " ORDER BY  PayCondition1,  PayCondition2 ");
    String[][] retDoc2M015 = getDoc2M015Union("Doc5M025", stringBarCode);
    String[][] retDoc2M030 = new String[0][0];
    String[][] retDoc5M010 = getDoc5M010(stringBarCode); // 特別折讓
    String[][] retDoc5M0226 = getDoc5M0226(stringBarCode, "", ""); // 支出證明單
    String[][] retAsAsset = new String[0][0];
    double doubleRetainMoney = exeUtil.doParseDouble(stringRetainMoney); // 退保留款
    double doubleTaxRate = exeUtil.doParseDouble(retDoc2M040[4].trim());
    double doubleSpecDiscount = 0;
    Vector retDataVector = new Vector();
    Vector retVectorNeg = new Vector();
    Vector vectorPayCondition = new Vector();
    Vector vectrorDoc5M0202 = getQueryDataHashtableDoc("Doc5M0202", new Hashtable(), " AND  BarCode  =  '" + stringBarCode + "' ", new Vector(), exeUtil);// Doc5M0202 借款表格
    Vector vectrorDoc5M0273 = getQueryDataHashtableDoc("Doc5M0273", new Hashtable(), " AND  BarCode  =  '" + stringBarCode + "' ", new Vector(), exeUtil);// Doc5M0273 請購-項目-階段-案別分攤
    Hashtable hashtableDiscountMoney = getHashtableDoc2M015(retDoc2M015);
    Hashtable hashtableDiscountMoneyS = new Hashtable();
    Hashtable hashtablePayAmt = new Hashtable();
    // boolean booleanNew = retDoc2M012!=null && ("".equals(retDoc2M012[0][1]) ||
    // !Character.isDigit(retDoc2M012[0][1].charAt(0))) ;
    boolean booleanApplyTypeD = isApplyTypeDVoucher1("B", stringComNo, stringBarCode, stringKindNoL);
    hashtableDoc2M010.put("ApplyTypeD", booleanApplyTypeD ? "Y" : "N");
    boolean booleanEnd = false;
    int intMaxCount = 0;
    // 不用於借款沖銷
    if (("" + get("借款沖銷例外")).indexOf(stringBarCode) != -1) {
      booleanApplyTypeD = false;
      vectrorDoc5M0202 = new Vector();
    }
    //
    stringDescript = stringDescript.replaceAll("\n", "");
    stringTemp = getDeptCdDoc(stringInputDepartNo, "", "");
    if (!"".equals(stringTemp))
      stringInputDepartNo = stringTemp;
    // Descript
    hashtableDoc2M010.put("VoucherYMD014", stringVoucherYMD014);
    hashtableDoc2M010.put("Descript", stringDescript); // 取代
    hashtableDoc2M010.put("FactoryNo", stringFactoryNo);
    hashtableDoc2M010.put("DepartNoFirst", stringInputDepartNo);
    hashtableDoc2M010.put("AccountCountStatusS", stringAccountCountStatusS);
    hashtableDoc2M010.put("ComType", stringComType);
    hashtableDoc2M010.put("KindNoPur", stringKindNo);
    //
    intMaxCount = getMaxCount(hashtableDoc2M010, retDoc5M0272, vectorPayCondition, vectrorDoc5M0273, hashtablePayAmt, exeUtil);
    // 輸入部門轉檔
    String stringDepartNo1 = "" + hashtableDoc2M010.get("DepartNo1");
    if ("null".equals(stringDepartNo1))
      stringDepartNo1 = "";
    String stringDepartNo2 = "" + hashtableDoc2M010.get("DepartNo2");
    if ("null".equals(stringDepartNo2))
      stringDepartNo2 = "";
    if ("".equals(stringDepartNo2)) {
      // 內業
      // 部門別(部室)
      // 除財務以科為單位
      if (stringDepartNo1.startsWith("A18") || stringDepartNo1.startsWith("022")) {
        stringDepartNo1 = stringDepartNo1;
      } else {
        if (exeUtil.doParseDouble(stringDepartNo1) <= 0) {
          stringDepartNo1 = stringDepartNo1.substring(0, 3) + "A";
        } else {
          stringDepartNo1 = stringDepartNo1.substring(0, 3) + "1";
        }
      }
      stringInputDepartNo = getDeptCdDoc(stringDepartNo1, "", "");
      if ("".equals(stringInputDepartNo))
        stringInputDepartNo = stringDepartNo1;
    } else {
      stringInputDepartNo = "";
    }
    hashtableDoc2M010.put("DepartNoFirst", stringInputDepartNo);
    //
    if ("E".equals(stringComType)) {
      doErrorEmail("轉傳票-基金會 BarCode(" + stringBarCode + ")");
    }
    // 特別折讓 處理
    doubleSpecDiscount = getHashtableDoc5M010(stringComNo, retDoc5M010, hashtableDiscountMoneyS, hashtableDoc2M010, exeUtil);
    //
    if (retDoc2M017.length > 0) {
      stringPurchaseNo1 = retDoc2M017[0][0].trim();
      stringPurchaseNo2 = retDoc2M017[0][1].trim();
      stringPurchaseNo3 = retDoc2M017[0][2].trim();
      stringPurchaseNo4 = retDoc2M017[0][5].trim();
      stringPurchaseNo = retDoc2M017[0][8].trim();//
    }
    //
    stringAcctDConstant = retDoc2M040[0].trim();
    stringAcctCConstant = retDoc2M040[1].trim();
    stringMailMoney1 = retDoc2M040[2].trim();
    stringMailMoney2 = retDoc2M040[3].trim();
    // 摘要
    int intPos = stringDescript.indexOf("還款帳號");
    if (intPos != -1) {
      Hashtable hashtableDoc5M022L = null;
      String stringCostIDL = "";
      for (int intNo = 0; intNo < vectorDoc5M022.size(); intNo++) {
        hashtableDoc5M022L = (Hashtable) vectorDoc5M022.get(intNo);
        if (hashtableDoc5M022L == null)
          continue;
        stringCostIDL = "" + hashtableDoc5M022L.get("CostID");
        if ("F170701,F273701,".indexOf(stringCostIDL) != -1) {
          stringDescript = stringDescript.substring(0, intPos);
        }
      }
    }
    //
    stringDescript = exeUtil.doCutStringBySize(30, stringDescript)[0];
    stringDescript = convert.replace(stringDescript, "'", "''");
    hashtableDoc2M010.put("Descript", stringDescript);
    // 取得不同的統一編號
    if ("".equals(stringFactoryNo)) {
      String stringSourceType = "A";
      if (!"".equals(stringRetainBarCode)) {
        String[][] retDoc5M0220 = getDoc5M0220("", "", stringBarCode, "");
        if (retDoc5M0220.length > 0) {
          stringFactoryNo = retDoc5M0220[0][2].trim();
        }
      }
      if ("".equals(stringFactoryNo)) {
        stringTemp = ("".equals(stringRetainBarCode)) ? stringBarCode : stringRetainBarCode;
        if (vectrorDoc5M0202.size() > 0) {
          stringSourceType = "B";
          //
          Hashtable hashtableDoc5M0202 = (Hashtable) vectrorDoc5M0202.get(0);
          Hashtable hashtableAnd = new Hashtable();
          //
          hashtableAnd.put("ComNo", stringComNo);
          hashtableAnd.put("DocNo", "" + hashtableDoc5M0202.get("BorrowNo"));
          stringTemp = getNameUnionDoc("BarCode", "Doc5M030", "", hashtableAnd, exeUtil);

        }
        stringFactoryNo = getFactoryNo(stringSourceType, stringTemp, exeUtil); // 2015-03-10
      }
      String[][] retFED1005 = getFED1005(stringFactoryNo);
      if (retFED1005.length == 0)
        stringFactoryNo = "Z0001";
      hashtableDoc2M010.put("FactoryNo", stringFactoryNo);
    }
    System.out.println("固資判斷   廠商(" + hashtableDoc2M010.get("FactoryNo") + ")-------------------S");
    if (booleanApplyTypeD) {
      arrayTable[4] = stringComNo;
      arrayTable[5] = stringKindNo;
      arrayTable[6] = stringPurchaseNo;
      arrayTable[7] = stringFactoryNo;
      System.out.println("booleanEnd-------------------S");
      booleanEnd = isLastDocVoucher(false, stringBarCode, stringComNo, stringKindNoL, stringPurchaseNo, stringFactoryNo);
      System.out.println("booleanEnd-------------------E");
      retAsAsset = getAsAssetVoucher("B", stringComNo, stringKindNo, stringPurchaseNo, stringFactoryNo, exeUtil, dbAsset);// 0 會計科目 1 部門代碼 2 金額 3 固資代碼 4 AssId 5 請款代碼
    }
    System.out.println("固資判斷 是否最後一筆(" + booleanEnd + ")-------------------E");
    boolean booleanA110103 = false; // true 為立沖 false 為非立沖
    boolean boolean110301 = false; // true 貸方預設為 110301
    System.out.println("---------------------借方 S");
    System.out.println(
        "---------------------部門[" + hashtableDoc2M010.get("DepartNoFirst") + "]廠商[" + hashtableDoc2M010.get("FactoryNo") + "] 金額[" + hashtableDoc2M010.get("TotalAmt") + "]");
    if ("B".equals(stringDocNoType)) {
      stringRowtype = "S"; // 事後補發票
    } else if (!"".equals(stringRetainBarCode)) {
      stringRowtype = "J"; // 退保留款
    } else {
      stringRowtype = "B"; //
    }
    if (!"".equals(stringRetainBarCode)) {
      // 退保留款
      hashtableDoc2M010.put("AcctountType", "1");
      //
      if (exeUtil.doParseInteger("" + hashtableDoc2M010.get("Count")) == 0)
        stringMailMoney1 = "0"; // 次數
      //
      hashtableDoc2M010.put("TotalNoTaxAmt", stringWriteRetainMoney);
      hashtableDoc2M010.put("TotalAmt", stringWriteRetainMoney);
      stringTemp = "" + (exeUtil.doParseDouble(stringWriteRetainMoney) - exeUtil.doParseDouble(stringMailMoney1));
      intFlowNo = putDebitDoc2M012_3(intFlowNo, stringRetainBarCode, stringRowtype, hashtableDoc2M010, retVector, retVectorNeg, exeUtil);
      System.out.println("getAcctC-0--------------------資料處理OK");
      retDoc2M030 = getAcctC(boolean110301, vectorPayCondition, intMaxCount, "C", "", stringAcctCSession, hashtableDoc2M010, exeUtil);
      System.out.println("getAcctC-0--------------------資料處理OK(" + retDoc2M030.length + ")金額[" + hashtableDoc2M010.get("TotalAmt") + "]");
      if (retDoc2M030.length == 0)
        return getErrorArray("貸方資料錯誤1");
    } else {
      hashtableDoc2M010.put("到期日", "借方");
      String[][] retDoc5M0224 = getDoc5M0224(stringBarCode, "");
      Vector vectorCostIDNullData = getDoc2M0401V("", "D", " AND  FunctionName LIKE '%立沖傳票對應%' "); // 立沖對應傳票，允許部門、案別為空白
      if (retDoc5M0224.length > 0) {
        System.out.println("借方----------------AS ");
        // 立沖轉傳票
        stringRowtype = "N";
        intFlowNo = putDebitDoc2M012_2(intFlowNo, stringRowtype, vectorDoc5M022, retDoc2M013, hashtableDoc2M010, hashtableDiscountMoney, vectorCostIDNullData, retVector,
            retVectorNeg, exeUtil);
        booleanA110103 = true;
        if (intFlowNo == 0)
          return getErrorArray("借方(Doc2M012) 轉傳票邏輯錯誤");
        System.out.println("借方----------------AE(" + retVector.size() + ") 金額[" + hashtableDoc2M010.get("TotalAmt") + "]");
      } else {
        System.out.println("借方----------------BS");
        intFlowNo = putDebitDoc2M012_1(intFlowNo, stringPurchaseNoExist, stringRowtype, vectorDoc5M022, retDoc2M013, retDoc5M0226, hashtableDoc2M010, hashtableDiscountMoney,
            retVector, retVectorNeg, exeUtil);
        if (intFlowNo == 0)
          return getErrorArray("借方(Doc2M012) 轉傳票邏輯錯誤");
        System.out.println("借方----------------BE(" + retVector.size() + ")  金額[" + hashtableDoc2M010.get("TotalAmt") + "]");
      }
      hashtableDoc2M010.put("到期日", "");
      stringType = "" + hashtableDoc2M010.get("Temp");
      if ("null".equals(stringType))
        stringType = "";
      arrayTemp = convert.StringToken(stringType, "%-%");
      if (arrayTemp.length == 2) {
        stringType = arrayTemp[0].trim();
        boolean110301 = "Y".equals(arrayTemp[1].trim());
      }
      System.out.println("stringType----------------[" + stringType + "]");
      // A、C 貸方特別處理(依 [無營業稅憑證] 之筆數、金額產生，廠商為關係人時，會計科目為 2132 否則為 2121)
      // B 貸方特別處理(A030000 福利金提撥，現已改成立沖處理 )
      // D 請款代碼 F273901 支付保證費管理 借方以憑證頁籤廠商多筆列示
      // E C010304 區權會-雜支費用
      // 付款條件為 現金時， 貸方會計科目為 110301，部門為空白
      // 付款條件為非現金時， 對象為 Z0001對象為 Z0001
      if (",D,".indexOf("," + stringType + ",") != -1) {
        System.out.println("借方----------------C");
        // 2011-09-30 retVector
        intFlowNo = putDebitDoc2M012_5(intFlowNo, retDoc2M011, retDoc2M013, hashtableDoc2M010, retVector, exeUtil);
        stringType = "";
      }
      System.out.println("stringType(" + stringType + ")(" + (retDoc2M013 == null) + ")----------------C");
      if (",A,C,,".indexOf("," + stringType + ",") != -1 && (retDoc2M013 == null || retDoc2M013.length == 0))
        stringType = "";
      if (booleanApplyTypeD) {
        // 固資-轉傳票
        retVector = new Vector();
        intFlowNo = putDebitForAsset5(booleanEnd, arrayTable, retAsAsset, hashtableDoc2M010, retVector, exeUtil, dbAsset);
      }
    }
    System.out.println("傳票筆數(" + retVector.size() + ")---------------------發票  金額[" + hashtableDoc2M010.get("TotalAmt") + "]部門[" + hashtableDoc2M010.get("DepartNoFirst") + "]廠商["
        + hashtableDoc2M010.get("FactoryNo") + "]Type(" + stringType + ")");
    hashtableDoc2M010.put("到期日", "發票");
    if (retDoc2M011 != null)
      intFlowNo = putDebitDoc2M011(intFlowNo, "A", stringAcctDConstant, "", hashtableDoc2M010, retDoc2M011, retDoc5M0226, retVector, exeUtil);
    hashtableDoc2M010.put("到期日", "");
    System.out.println("---------------------事後補發票 K部門[" + hashtableDoc2M010.get("DepartNoFirst") + "]廠商[" + hashtableDoc2M010.get("FactoryNo") + "]");
    if ("B".equals(stringDocNoType)) {
      stringRealMoney = convert
          .FourToFive("" + (exeUtil.doParseDouble("" + hashtableDoc2M010.get("TotalAmt")) - exeUtil.doParseDouble("" + hashtableDoc2M010.get("TotalNoTaxAmt"))), 0);
      intFlowNo = putIntoVector1("K", "1", intFlowNo, "D", "1282", "", "", stringRealMoney, hashtableDoc2M010, retVector, exeUtil);
    }
    System.out.println("---------------------資料處理  金額[" + hashtableDoc2M010.get("TotalAmt") + "]stringType(" + stringType + ")部門[" + hashtableDoc2M010.get("DepartNoFirst") + "]廠商["
        + hashtableDoc2M010.get("FactoryNo") + "]stringRetainBarCode[" + stringRetainBarCode + "]");
    double doubleRate = 0;
    if (("".equals(stringType) || "E".equals(stringType)) && "".equals(stringRetainBarCode)) {
      System.out.println("getAcctC-1--------------------資料處理OK");
      stringTemp = "" + hashtableDoc2M010.get("FactoryNo");
      if ("null".equals(stringTemp))
        stringTemp = "";
      retDoc2M030 = getAcctC(boolean110301, vectorPayCondition, intMaxCount, stringDocNoType, stringTemp, stringAcctCSession, hashtableDoc2M010, exeUtil);
      System.out.println("getAcctC-1--------------------資料處理OK(" + retDoc2M030.length + ")(" + retDoc2M030[0][0] + ")");
      if (vectrorDoc5M0202.size() <= 0 && retDoc2M030.length == 0)
        return getErrorArray("貸方資料錯誤2");
      //
      if (exeUtil.doParseInteger("" + hashtableDoc2M010.get("Count")) == 0)
        stringMailMoney1 = "0";
      if (",Q71901,".indexOf(stringBarCode) != -1)
        stringMailMoney1 = "0";
      //
      doubleRate = getRate(intMaxCount, retDoc2M017, hashtableDoc2M010, exeUtil);
    }
    System.out.println(retVector.size() + "---------------------負值  貸方資料  部門[" + hashtableDoc2M010.get("DepartNoFirst") + "]廠商[" + hashtableDoc2M010.get("FactoryNo") + "]");
    for (int intNo = 0; intNo < retVectorNeg.size(); intNo++) {
      intFlowNo++;
      retDataTemp = (String[]) retVectorNeg.get(intNo);
      retDataTemp[6] = "" + intFlowNo;
      retVector.add(retDataTemp);
    }
    System.out.println(retVector.size() + "---------------------部門[" + hashtableDoc2M010.get("DepartNoFirst") + "]廠商[" + hashtableDoc2M010.get("FactoryNo") + "]");
    boolean booleanNoReceipt = false;
    if ((retDoc5M0226 != null && retDoc5M0226.length > 0) || (retDoc2M013 != null && retDoc2M013.length > 0)) {
      for (int intDoc2M030 = 0; intDoc2M030 < retDoc2M030.length; intDoc2M030++) {
        stringAcctC = retDoc2M030[intDoc2M030][0].trim();
        if ("2258,2191,2251,".indexOf(stringAcctC) != -1)
          booleanNoReceipt = true;
      }
      System.out.println("---------------------貸方-扣繳1[" + hashtableDoc2M010.get("TotalAmt") + "]");
      hashtableDoc2M010.put("到期日", "扣繳");
      // if(!booleanNoReceipt)
      intFlowNo = putCeditDoc2M013(intFlowNo, "G", "", stringAccountCount, hashtableDoc2M010, retDoc2M013, retDoc5M0226, retVector, exeUtil);
      hashtableDoc2M010.put("到期日", "");
      System.out.println("---------------------貸方-扣繳2[" + hashtableDoc2M010.get("TotalAmt") + "]");
    }
    System.out.println("筆數：" + retVector.size() + "---------------------貸方正常  部門[" + hashtableDoc2M010.get("DepartNoFirst") + "]廠商[" + hashtableDoc2M010.get("FactoryNo") + "]");

    if ("B".equals(stringDocNoType)) {
      stringRowtype = "T"; // 事後補發票
      doubleRate = 1;
      hashtableDoc2M010.put("到期日", "事後補發票");
    } else if ("C".equals(stringDocNoType)) {
      stringRowtype = "C"; // 退保留款
      hashtableDoc2M010.put("到期日", "退保留款");
    } else {
      stringRowtype = "C";
      hashtableDoc2M010.put("到期日", "貸方");
    }
    // 代收代付 S
    String stringFactoryNoL = "";
    String[][] retDoc5M0225 = getDoc5M0225(stringBarCode);
    String[][] retFED1005 = null;
    if (retDoc5M0225.length > 0) {
      String[][] retFE3D70 = getFE3D70(retDoc5M0225[0][0].trim());
      stringFactoryNoL = (retFE3D70.length == 0) ? "" : retFE3D70[0][0].trim();
      retFED1005 = getFED1005(stringFactoryNoL);
      if (retFED1005.length == 0)
        stringFactoryNoL = "Z0001";
      hashtableDoc2M010.put("FactoryNo", stringFactoryNoL);
    }
    // 代收代付 E
    if (vectrorDoc5M0202.size() > 0) {
      // 沖借款
      System.out.println("putCedit2Doc5M0202------------------------------S");
      intFlowNo = putCedit2Doc5M0202(intFlowNo, doubleRate, stringRowtype, stringMailMoney1, stringAccountCount, hashtableDoc2M010, retDoc2M030, vectrorDoc5M0202,
          vectorPayCondition, booleanA110103, hashtablePayAmt, exeUtil, retVector);
      if (intFlowNo == -1) {
        return getErrorArray("貸方會計科目 錯誤。");
      }
      System.out.println("putCedit2Doc5M0202------------------------------E");
      if (intFlowNo == 0) {
        return new String[0][0];
      }
    } else if (!"".equals(stringType) && "A,C,".indexOf(stringType + ",") != -1) {
      System.out.println("貸方1---------------------[" + hashtableDoc2M010.get("TotalAmt") + "]");
      intFlowNo = putCedit2Doc2M013(boolean110301, vectorPayCondition, intFlowNo, intMaxCount, stringRowtype, stringInputDepartNo, stringType, stringAcctCSession,
          stringAccountCount, hashtableDoc2M010, retDoc2M013, retVector, exeUtil);
    } else if ("B".equals(stringType)) {
      // 已廢止，但保留(改立沖)
      System.out.println("貸方2---------------------[" + hashtableDoc2M010.get("TotalAmt") + "]");
      stringTemp = "" + hashtableDoc2M010.get("TotalNoTaxAmt");
      if (exeUtil.doParseDouble(stringTemp) <= 0)
        stringTemp = "0";
      intFlowNo = putIntoVector1(stringRowtype, "", intFlowNo, "C", "110301", "", "", stringTemp, hashtableDoc2M010, retVector, exeUtil);
    } else {
      System.out.println("vectorPayCondition(" + vectorPayCondition.size() + ")retDoc2M030.length(" + retDoc2M030.length + ")---------------------正常");
      if ("E".equals(stringType)) {
        String stringPayCondition = "";
        boolean booleanPayCondition000 = true;
        /*
         * if(vectorPayCondition.size() == 0) {
         * vectorPayCondition.add(stringPayCondition1) ;
         * if(!"999".equals(stringPayCondition2))
         * vectorPayCondition.add(stringPayCondition2) ; // retDoc2M030 = new
         * String[intMaxCount][1] ; }
         */
        for (int intL = 0; intL < vectorPayCondition.size(); intL++) {
          stringPayCondition = "" + vectorPayCondition.get(intL);
          if (!"000".equals(stringPayCondition)) {
            booleanPayCondition000 = false;
            break;
          }
        }
        if (booleanPayCondition000) {
          // 會計科目為 110301
          for (int intL = 0; intL < retDoc2M030.length; intL++) {
            retDoc2M030[intL][0] = "110301";
          }
        }
      }
      // booleanA110103
      if (vectorPayCondition.size() != 0 && vectorPayCondition.size() != retDoc2M030.length) {
        return getErrorArray("資方資料不一致。");
      }
      System.out.println("貸方3(" + retDoc2M030.length + ")(" + vectorPayCondition.size() + ")---------------------[" + hashtableDoc2M010.get("TotalAmt") + "]");
      intFlowNo = putCeditData(intFlowNo, doubleRate, doubleSpecDiscount, booleanA110103, stringMailMoney1, stringRetainMoney, stringRowtype, stringAccountCount, hashtableDoc2M010,
          retDoc2M030, vectorPayCondition, hashtablePayAmt, retVector, exeUtil);
    }
    hashtableDoc2M010.put("到期日", "");
    System.out.println("筆數：" + retVector.size() + "---------------------貨方-固資 前期沖轉[" + hashtableDoc2M010.get("DepartNoFirst") + "](" + stringRetainMoney + ")booleanEnd("
        + booleanEnd + ")booleanApplyTypeD(" + booleanApplyTypeD + ")retAsAsset.length(" + retAsAsset.length + ")-----------");
    // 貨方-固資 前期沖轉
    if (",K01241,K01261,".indexOf(stringBarCode) == -1 && booleanEnd && booleanApplyTypeD && retAsAsset.length > 0) {
      intFlowNo = putCeditAssetFront(intFlowNo, "01", stringPurchaseNo, hashtableDoc2M010, retVector, exeUtil);
      if (intFlowNo == 0) {
        return new String[0][0];
      }
    }
    System.out.println(retVector.size() + "---------------------保留款[" + hashtableDoc2M010.get("DepartNoFirst") + "](" + stringRetainMoney + ")");
    if (exeUtil.doParseDouble(stringRetainMoney) > 0) {
      String stringAcctNoL = "2143";
      stringTemp = "" + hashtableDoc2M010.get("RetainAcctNo");
      if (!"null".equals(stringTemp)) {
        stringAcctNoL = stringTemp;
      } /*
         * else { if("".equals(stringAcctCSession) || "null".equals(stringAcctCSession))
         * { System.out.println("保留款1---------------------["+hashtableDoc2M010.get(
         * "Amt2146")+"]" ); // 貸方如是２１４６保留款就是２１４３，２１４７保留款就是２２５８
         * if(exeUtil.doParseDouble(hashtableDoc2M010.get("Amt2146"))>0) { // 2146
         * System.out.println("保留款1---------------------[2143]" ); stringAcctNoL =
         * "2143" ; } else if(exeUtil.doParseDouble(hashtableDoc2M010.get("Amt2147"))>0)
         * { stringAcctNoL = "2258" ; } } else {
         * System.out.println("保留款2---------------------["+stringAcctCSession+"]" );
         * if("2146".equals(stringAcctCSession)) { stringAcctNoL = "2143" ; } else
         * if("2147".equals(stringAcctCSession)) { stringAcctNoL = "2258" ; } } }
         */
      // 行銷獎金(130)用 228299，否則用 2143
      intFlowNo = putIntoVector1("I", "0", intFlowNo, "C", stringAcctNoL, "", "", stringRetainMoney, hashtableDoc2M010, retVector, exeUtil);
    }
    System.out.println(retVector.size() + "---------------------折讓[" + hashtableDoc2M010.get("DepartNoFirst") + "]");
    if (retDoc2M015.length > 0) {
      Hashtable hashtableInvoice = new Hashtable();
      String stringInvoiceNo = "";
      for (int intNo = 0; intNo < retDoc2M011.length; intNo++) {
        stringInvoiceNo = retDoc2M011[intNo][3].trim();
        if ("E85894".equals(stringBarCode) && "RX81952833".equals(stringInvoiceNo))
          stringInvoiceNo = "QW77406153";
        hashtableInvoice.put(stringInvoiceNo, retDoc2M011[intNo]);
      }
      if ("J78025".equals(stringBarCode)) {
        arrayTemp = new String[7];
        stringInvoiceNo = "XT18229756";
        arrayTemp[0] = "04224690";
        arrayTemp[1] = "N";
        arrayTemp[2] = "100/11/11";
        hashtableInvoice.put(stringInvoiceNo, arrayTemp);
      }
      intFlowNo = putCeditDoc2M015(intFlowNo, "D", stringAcctDConstant, stringInputDepartNo, hashtableDoc2M010, vectorDoc5M022, retDoc2M015, hashtableDiscountMoney,
          hashtableInvoice, retVector, exeUtil);
      if (intFlowNo == 0)
        return getErrorArray("");
    }
    System.out.println(retVector.size() + "---------------------郵電費 E[" + hashtableDoc2M010.get("DepartNoFirst") + "]");
    if ("N".equals("" + hashtableDoc2M010.get("貸方負值")) && "".equals(stringType) && exeUtil.doParseDouble(stringMailMoney1) > 0) {
      hashtableDoc2M010.put("到期日", "郵電費");
      intFlowNo = putIntoVector1("E", " ", intFlowNo, "C", stringAcctCConstant, "", "", stringMailMoney1, hashtableDoc2M010, retVector, exeUtil);
      hashtableDoc2M010.put("到期日", "");
    }
    System.out.println(retVector.size() + "---------------------年底預估傳票 W");
    // intFlowNo = putFuture(intFlowNo, hashtableDoc2M010, retVector, exeUtil) ;
    // if(intFlowNo==0) return getErrorArray("") ;

    return (String[][]) retVector.toArray(new String[0][0]);
  }

  public int getMaxCount(Hashtable hashtableDoc2M010, String[][] retDoc5M0272, Vector vectorPayCondition, Vector vectrorDoc5M0273, Hashtable hashtablePayAmt, FargloryUtil exeUtil)
      throws Throwable {
    String stringPayCondition2 = "" + hashtableDoc2M010.get("PayCondition2");
    int intMaxCount = ("999".equals(stringPayCondition2) || "null".equals(stringPayCondition2)) ? 1 : 2;// 取得付款條件，判斷是否有第二張發票。
    int intMaxCountTemp = getMaxCountDoc5M0272(retDoc5M0272, exeUtil, hashtablePayAmt, vectorPayCondition);
    //
    if (intMaxCountTemp > 0) {
      intMaxCount = intMaxCountTemp;
    } else {
      hashtablePayAmt = new Hashtable();
      vectorPayCondition = new Vector();
      intMaxCountTemp = getMaxCountDoc5M0273(hashtableDoc2M010, vectrorDoc5M0273, exeUtil, hashtablePayAmt, vectorPayCondition);
      if (intMaxCountTemp > 0) {
        intMaxCount = intMaxCountTemp;
      }

    }
    return intMaxCount;
  }

  public int getMaxCountDoc5M0273(Hashtable hashtableDoc2M010, Vector vectrorDoc5M0273, FargloryUtil exeUtil, Hashtable hashtablePayAmt, Vector vectorPayCondition)
      throws Throwable {
    String stringDocType = "";
    String stringPurchaseMoney = "";
    String stringPayCondition1 = "" + hashtableDoc2M010.get("PayCondition1");
    String stringPayCondition2 = "" + hashtableDoc2M010.get("PayCondition2");
    double doublePurchaseMoneySum = 0;
    Hashtable hashtalbeDoc5M0273 = null;
    for (int intNo = 0; intNo < vectrorDoc5M0273.size(); intNo++) {
      hashtalbeDoc5M0273 = (Hashtable) vectrorDoc5M0273.get(intNo);
      if (hashtalbeDoc5M0273 == null)
        continue;
      stringDocType = "" + hashtalbeDoc5M0273.get("DocType");
      stringPurchaseMoney = "" + hashtalbeDoc5M0273.get("PurchaseMoney");
      //
      if (!"C".equals(stringDocType))
        continue;
      //
      doublePurchaseMoneySum += exeUtil.doParseDouble(stringPurchaseMoney);
    }
    if (doublePurchaseMoneySum <= 0)
      return -1;
    //
    stringPurchaseMoney = convert.FourToFive("" + doublePurchaseMoneySum, 0);
    //
    if ("999".equals(stringPayCondition2)) {
      vectorPayCondition.add(stringPayCondition1);
      // 僅有付款條件 1
      hashtablePayAmt.put(stringPayCondition1, stringPurchaseMoney);

    } else {
      vectorPayCondition.add(stringPayCondition1);
      vectorPayCondition.add(stringPayCondition2);
      //
      double doublePurchaseMoney1 = exeUtil.doParseDouble(convert.FourToFive("" + (doublePurchaseMoneySum / 2), 0));
      double doublePurchaseMoney2 = doublePurchaseMoneySum - doublePurchaseMoney1;
      //
      hashtablePayAmt.put(stringPayCondition1, convert.FourToFive("" + doublePurchaseMoney1, 0));
      hashtablePayAmt.put(stringPayCondition2, convert.FourToFive("" + doublePurchaseMoney2, 0));
    }

    hashtablePayAmt.put("ALL", stringPurchaseMoney);
    return vectorPayCondition.size();
  }

  public int getMaxCountDoc5M0272(String[][] retDoc5M0272, FargloryUtil exeUtil, Hashtable hashtablePayAmt, Vector vectorPayCondition) throws Throwable {
    if (retDoc5M0272 == null || retDoc5M0272.length == 0) {
      return -1;
    }
    //
    double doublePurchaseMoney1 = 0;
    double doublePurchaseMoney2 = 0;
    double doublePurchaseMoney = 0;
    double doublePurchaseMoneySum = 0;
    String stringPayCondition1 = "";
    String stringPayCondition2 = "";
    String stringDocNoSource = "";
    String stringPurchaseMoney = "";
    for (int intNo = 0; intNo < retDoc5M0272.length; intNo++) {
      stringPayCondition1 = retDoc5M0272[intNo][7].trim();
      stringPayCondition2 = retDoc5M0272[intNo][8].trim();
      stringPurchaseMoney = retDoc5M0272[intNo][11].trim();
      stringDocNoSource = retDoc5M0272[intNo][13].trim();
      doublePurchaseMoney1 = exeUtil.doParseDouble(stringPurchaseMoney);
      doublePurchaseMoneySum += doublePurchaseMoney1;
      //
      if (",A,C,".indexOf(stringDocNoSource) == -1)
        continue;
      //
      if ("999".equals(stringPayCondition2)) {
        // 僅 付款條件一
        doublePurchaseMoney = doublePurchaseMoney1 + exeUtil.doParseDouble("" + hashtablePayAmt.get(stringPayCondition1));
        stringPurchaseMoney = convert.FourToFive("" + doublePurchaseMoney, 0);
        hashtablePayAmt.put(stringPayCondition1, stringPurchaseMoney);
        //
        if (vectorPayCondition.indexOf(stringPayCondition1) == -1)
          vectorPayCondition.add(stringPayCondition1);
      } else {
        doublePurchaseMoney2 = doublePurchaseMoney1;
        doublePurchaseMoney1 = doublePurchaseMoney1 / 2;
        doublePurchaseMoney2 = doublePurchaseMoney2 - doublePurchaseMoney1;
        //
        doublePurchaseMoney = doublePurchaseMoney1 + exeUtil.doParseDouble("" + hashtablePayAmt.get(stringPayCondition1));
        stringPurchaseMoney = convert.FourToFive("" + doublePurchaseMoney, 0);
        hashtablePayAmt.put(stringPayCondition1, stringPurchaseMoney);
        if (vectorPayCondition.indexOf(stringPayCondition1) == -1)
          vectorPayCondition.add(stringPayCondition1);
        //
        doublePurchaseMoney = doublePurchaseMoney2 + exeUtil.doParseDouble("" + hashtablePayAmt.get(stringPayCondition2));
        stringPurchaseMoney = convert.FourToFive("" + doublePurchaseMoney, 0);
        hashtablePayAmt.put(stringPayCondition2, stringPurchaseMoney);
        if (vectorPayCondition.indexOf(stringPayCondition2) == -1)
          vectorPayCondition.add(stringPayCondition2);
      }
    }
    stringPurchaseMoney = convert.FourToFive("" + doublePurchaseMoneySum, 0);
    hashtablePayAmt.put("ALL", stringPurchaseMoney);
    return vectorPayCondition.size();
  }

  public String[][] getAcctC(boolean boolean110301, Vector vectorPayCondition, int intMaxCount, String stringDocNoType, String stringFactoryNo, String stringAcctCSession,
      Hashtable hashtableDoc2M010, FargloryUtil exeUtil) throws Throwable {
    String stringAcctC = "";
    String stringComNo = "" + hashtableDoc2M010.get("ComNo");
    if ("null".equals(stringComNo))
      stringComNo = "";
    String stringAccountNo = "" + hashtableDoc2M010.get("AccFirst");
    if ("null".equals(stringAccountNo))
      stringAccountNo = "";
    String sringAcctNoFour = exeUtil.doSubstring(stringAccountNo, 0, 4);
    String stringBankCd = "";
    String stringBankNo = "";
    String stringAcctountType = "" + hashtableDoc2M010.get("AcctountType");
    if ("null".equals(stringAcctountType))
      stringAcctountType = "";
    String stringComType = "" + hashtableDoc2M010.get("ComType");
    if ("null".equals(stringComType))
      stringComType = "";
    String stringAcctCSession2 = "";
    String[] arrayTemp = null;
    String[][] retDoc2M030 = new String[1][1];
    retDoc2M030[0][0] = "";
    boolean booleanComNoType = "E".equals(stringComType);
    String stringPayCondition = "";
    Vector vectorDoc2M030 = new Vector();
    Vector vectorPayConditionL = new Vector();
    Vector vectorFactoryNo = getDoc2M0402();
    boolean booleanFactoryNo = vectorFactoryNo.indexOf(stringFactoryNo) != -1; // true 關係人
    boolean booleanApplyTypeD = "Y".equals("" + hashtableDoc2M010.get("ApplyTypeD")) ? true : false;
    System.out.println("關係人--(" + booleanFactoryNo + ")---------------------[" + stringFactoryNo + "]");
    if ("null".equals(stringAcctCSession))
      stringAcctCSession = "";
    if ("".equals(stringFactoryNo))
      stringFactoryNo = "" + hashtableDoc2M010.get("FactoryNo");
    //
    if (!"".equals(stringAcctCSession) && !booleanFactoryNo && ",2131,2132,".indexOf(stringAcctCSession) != -1)
      stringAcctCSession = "";
    if (!"".equals(stringAcctCSession) && booleanFactoryNo && ",2121,2122,".indexOf(stringAcctCSession) != -1)
      stringAcctCSession = "";
    System.out.println("stringDocNoType--(" + stringDocNoType + ")---------------------");
    if (boolean110301) {
      System.out.println("getAcctC-----------------------110301");
      stringAcctC = "110301";
      if (!"".equals(stringAcctCSession))
        stringAcctC = stringAcctCSession;
      retDoc2M030[0][0] = stringAcctC;
      System.out.println("getAcctC----boolean110301--(" + stringAcctC + ")---------------------");
      // } else if("B".equals(stringDocNoType)) {
      // stringAcctC = "1281" ;
      // if(!"".equals(stringAcctCSession)) stringAcctC = stringAcctCSession ;
      // retDoc2M030[0][0] = stringAcctC ; // 事後補發票
    } else if ("C".equals(stringDocNoType)) {
      System.out.println("getAcctC-----------------------stringDocNoType C");
      hashtableDoc2M010.put("Count", "0");
      //
      retDoc2M030[0][0] = "2121"; // 退保留款
      intMaxCount = 1;
      //
      if ("2258".equals(stringAccountNo)) {
        retDoc2M030[0][0] = "2147";
      } else if ("2143".equals(stringAccountNo)) {
        retDoc2M030[0][0] = "2146";
      }
      if (!"".equals(stringAcctCSession))
        retDoc2M030[0][0] = stringAcctCSession;
      return retDoc2M030;
    } else if (",A,B,D,Z,".indexOf(stringDocNoType) != -1) {
      // } else if("A".equals(stringDocNoType) || "B".equals(stringDocNoType) ||
      // "Z".equals(stringDocNoType)) {
      System.out.println("getAcctC-----stringComNo(" + stringComNo + ")------------------stringDocNoType ABDZ");
      // 一般
      // 由 [借方會計科目] 取得 [貸方會計科目]
      // retDoc2M030
      if (vectorPayCondition.size() == 0) {
        vectorPayConditionL.add("" + hashtableDoc2M010.get("PayCondition1"));
        if (!"999".equals("" + hashtableDoc2M010.get("PayCondition2")))
          vectorPayConditionL.add("" + hashtableDoc2M010.get("PayCondition2"));
      } else {
        vectorPayConditionL = vectorPayCondition;
      }
      for (int intNo = 0; intNo < vectorPayConditionL.size(); intNo++) {
        stringPayCondition = ("" + vectorPayConditionL.get(intNo)).trim();
        arrayTemp = new String[1];
        if ("000".equals(stringPayCondition)) {
          // 現金
          stringAcctC = "110301";
        } else if (booleanFactoryNo) {
          // 關係人
          if (",1234,1232,".indexOf(sringAcctNoFour) != -1 && ",A,B,".indexOf(stringComType) != -1) {
            // 借方會計科目為 1234、1232 開頭者，且為建設A、營造類B公司時，貸方會計科目為 2131。
            stringAcctC = "2131";
          } else if (",5681,".indexOf(sringAcctNoFour) != -1 && ",C,".indexOf(stringComType) != -1) {
            // 借方會計科目為 5681 開頭者，且為行銷類C公司時，貸方會計科目為 2131。
            stringAcctC = "2131";
          } else if (",1662,1664,".indexOf(sringAcctNoFour) != -1 && ",D,".indexOf(stringComType) != -1) {
            // 借方會計科目為 1161、1664 開頭者，且為遊憩D類公司時，貸方會計科目為 2131。
            stringAcctC = "2131";
          } else if (",6201,".indexOf(sringAcctNoFour) != -1 && ",A,B,C,F,".indexOf(stringComType) != -1) {
            // 借方會計科目為 6201 開頭者，且為建設A、營造B、行銷C、投資F類公司時，貸方會計科目為 2132。
            stringAcctC = "2132";
          } else {
            // 非上述情況時
            stringAcctC = "2132";
          }
          System.out.println(intNo + "關係人--(" + stringAcctC + ")---------------------");
        } else {
          // 非關係人
          if (",1234,1232,".indexOf(sringAcctNoFour) != -1 && ",A,B,".indexOf(stringComType) != -1) {
            // 借方會計科目為 1234、1232 開頭者，且為建設A、營造B類公司時，貸方會計科目為 2121。
            stringAcctC = "2121";
          } else if (",5681,".indexOf(sringAcctNoFour) != -1 && ",C,".indexOf(stringComType) != -1) {
            // 借方會計科目為 5681 開頭者，且為行銷C類公司時，貸方會計科目為 2121。
            stringAcctC = "2121";
          } else if (",1662,1664,".indexOf(sringAcctNoFour) != -1 && ",D,".indexOf(stringComType) != -1) {
            // 借方會計科目為 1161、1664 開頭者，且為遊憩D類公司時，貸方會計科目為 2121。
            stringAcctC = "2121";
          } else if (",6201,".indexOf(sringAcctNoFour) != -1 && ",A,B,C,F,".indexOf(stringComType) != -1) {
            // 借方會計科目為 6201 開頭者，且為建設A、營造B、行銷C、投資F類公司時，貸方會計科目為 2122。
            stringAcctC = "2122";
          } else if (",5311,".indexOf(sringAcctNoFour) != -1 && ",02,".indexOf(stringComNo) != -1) {
            // 借方會計科目為 5311 開頭者，且為遠翔建設，貸方會計科目為 2121。
            stringAcctC = "2121";
          } else {
            // 非上述情況時
            stringAcctC = "2122";
          }
          System.out.println(intNo + "非關係人--(" + stringAcctC + ")---------------------");
        }
        arrayTemp[0] = stringAcctC;

      }
      if (vectorPayConditionL.size() > 0) {
        if (!"".equals(stringAcctCSession) && ",2121,2122,2131,2132,2146,2147,".indexOf(stringAcctCSession) == -1)
          stringAcctC = stringAcctCSession;
        // 保留款-會計科目
        if ("2131,".indexOf(stringAcctC) != -1) {
          hashtableDoc2M010.put("RetainAcctNo", "2153");
        } else if ("2132,".indexOf(stringAcctC) != -1) {
          hashtableDoc2M010.put("RetainAcctNo", "2191");
        } else if ("2121,".indexOf(stringAcctC) != -1) {
          hashtableDoc2M010.put("RetainAcctNo", "2143");
        } else if ("2122,".indexOf(stringAcctC) != -1) {
          hashtableDoc2M010.put("RetainAcctNo", "2258");
        }
        arrayTemp[0] = stringAcctC;
        vectorDoc2M030.add(arrayTemp);
        System.out
            .println("stringAcctCSession--(" + stringAcctCSession + ")會計科目--(" + stringAcctC + ")保留款-會計科目--(" + hashtableDoc2M010.get("RetainAcctNo") + ")---------------------");
      } else {
        vectorDoc2M030.add(arrayTemp);
      }
      retDoc2M030 = (String[][]) vectorDoc2M030.toArray(new String[0][0]);

    }
    //
    System.out.println("----retDoc2M030(" + retDoc2M030.length + ")-----------------------" + hashtableDoc2M010.get("RetainAcctNo"));
    System.out.println("----vectorPayConditionL(" + vectorPayConditionL.size() + ")-----------------------");
    System.out.println("END----getAcctC(" + retDoc2M030[0][0] + ")-----------------------");
    if ("B".equals(stringDocNoType) || "Z".equals(stringDocNoType))
      return retDoc2M030;
    //
    talk dbFED1L = null;
    if (boolean110301) {

    } else if (!isExistForFED1047(stringFactoryNo, booleanComNoType) && !isExistForFED1073(stringFactoryNo, booleanComNoType)) {
      // 0 LAST_YMD 1 LAST_USER 2 OBJECT_CD 3 OBJECT_SHORT_NAME 4 OBJECT_FULL_NAME
      // 5 CHAIRMAN 6 CONTACT_MAN 7 COMPANY_TEL_NO 8 COMPANY_FAX_NO 9 INVOICE_ADDR
      // 10 MAIL_ADDR 11 OBJECT_TYPE 12 OBJECT_KIND 13 EMAIL 14 OBJECT_ID
      // 15 VOUCHER_KIND 16 BANK_CD 17 BANK_NO
      String stringVoucherKind = "";
      String[][] retFED1005 = getFED1005(stringFactoryNo, booleanComNoType);
      //
      if (retFED1005.length > 0) {
        stringVoucherKind = retFED1005[0][15].trim();
        stringBankCd = retFED1005[0][16].trim();
        stringBankNo = retFED1005[0][17].trim();
        // 廠商憑證(VOUCHER_KIND)不為其他類(3)
        System.out.println("stringVoucherKind(" + stringVoucherKind + ")-stringBankCd(" + stringBankCd + ")-stringBankNo(" + stringBankNo + ")--------------------");
        if (!"3".equals(stringVoucherKind) && !"".equals(stringBankCd) && !"".equals(stringBankNo)) {
          // 銀行代號 BANK_CD
          // 帳號 BANK_NO
          if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession)) {
            System.out.println("1stringAcctountType--------------------" + stringAcctCSession);
          } else if ("Z3".equals(stringComNo)) {
            System.out.println("2stringAcctountType--------------------" + stringComNo);
          } else {
            System.out.println("3stringAcctountType(" + booleanFactoryNo + ")--------------------" + stringAcctountType);
            switch (exeUtil.doParseInteger(stringAcctountType)) {
            case 0:
              stringAcctCSession = "2146";
              break;
            case 1:
              stringAcctCSession = "2146";
              break;
            case 2:
              stringAcctCSession = "2147";
              break;
            case 3:
              stringAcctCSession = "2146";
              stringAcctCSession2 = "2147";
              break;
            }
            // 2014-06-30 B3018 修正 當廠商為關係人，且可匯款廠商時，貸方會計科目改為 2142
            if (booleanFactoryNo) {
              if ("20".equals(stringComNo) && !stringAccountNo.startsWith("166")) {
                stringAcctCSession = "2193";
              } else {
                stringAcctCSession = "2142";
              }
            }
          }
        } else {
          if (!"".equals(stringAcctCSession) && ("2146".equals(stringAcctCSession) || "2147".equals(stringAcctCSession)))
            stringAcctCSession = "";
        }
        hashtableDoc2M010.put("BankCd", stringBankCd);
        hashtableDoc2M010.put("BankNo", stringBankNo);
      }
      System.out.println("1111  stringAcctCSession--(" + stringAcctCSession + ")---------------------");
    } else {
      if (!"".equals(stringAcctCSession) && ("2146".equals(stringAcctCSession) || "2147".equals(stringAcctCSession)))
        stringAcctCSession = "";
      System.out.println("2222  stringAcctCSession--(" + stringAcctCSession + ")---------------------");
    }
    boolean booleanFlow = false;
    int intMailCount = 0;
    vectorDoc2M030 = new Vector();
    String[][] retFED1003 = null;
    //
    for (int intDoc2M030 = 0; intDoc2M030 < intMaxCount; intDoc2M030++) {
      System.out.println(intDoc2M030 + "getAcctC--intMaxCount(" + intMaxCount + ")retDoc2M030(" + retDoc2M030.length + ")---------------------");
      if (intDoc2M030 < retDoc2M030.length)
        stringAcctC = retDoc2M030[intDoc2M030][0].trim();
      if (!boolean110301 && "Z3".equals(stringComNo))
        stringAcctC = "2121";
      System.out.println(intDoc2M030 + "-1---getAcctC-----------------------" + stringAcctC);
      if (intDoc2M030 == 0)
        put("Doc2M014_AcctNo2", stringAcctC);
      // 20060710 更改不管是否為即期，只要符合條件皆有郵電費
      // Doc2M013 為 [即期]，借方會計科目內含票據時，以 [即期] 為主)
      // 貸方會計科目(由 Doc2M040)
      if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession))
        stringAcctC = stringAcctCSession;
      System.out.println(intDoc2M030 + "-2---getAcctC-----------------------" + stringAcctC);
      //
      retFED1003 = getFED1003(stringAcctC);
      // 廠商為 "關係人"時，不會有郵電費
      // 當 [會計科目名稱] 內含"票據"，會有郵電費
      // 特例：2258。
      booleanFlow = retFED1003.length > 0 && (retFED1003[0][7].trim().indexOf("票據") != -1) && !booleanFactoryNo;
      booleanFlow = booleanFlow && exeUtil.doParseDouble("" + hashtableDoc2M010.get("TotalAmt")) > 40;
      if (booleanFlow)
        intMailCount++;
      arrayTemp = new String[1];
      arrayTemp[0] = stringAcctC;
      System.out.println(intDoc2M030 + "-3----stringAcctC-----------------[" + stringAcctC + "]");
      vectorDoc2M030.add(arrayTemp);
    }
    hashtableDoc2M010.put("Count", "" + intMailCount);
    return (String[][]) vectorDoc2M030.toArray(new String[0][0]);
  }

  public double getRate(int intMaxCount, String[][] retDoc2M017, Hashtable hashtableDoc2M010, FargloryUtil exeUtil) throws Throwable {
    double doubleRate = 1;
    //
    if (intMaxCount == 1)
      return 1; // 只有一個付款條件
    if (retDoc2M017.length <= 1)
      return 0.5; // 只有一個請購單
    if ("Z".equals(retDoc2M017[0][5].trim()))
      return 0.5; // 來自 [請購維護作業]
    //
    String stringBarCode = "" + hashtableDoc2M010.get("BarCode");
    String stringComNo = "" + hashtableDoc2M010.get("ComNo");
    String stringEDateTime = "" + hashtableDoc2M010.get("EDateTime");
    String stringFactoryNoL = "";
    String stringPurchaseNo1L = "";
    String stringPurchaseNo2L = "";
    String stringPurchaseNo3L = "";
    String stringPurchaseNoL = "";
    String stringPayCondition1 = "" + hashtableDoc2M010.get("PayCondition1");
    String stringPayCondition1L = "";
    String stringPayCondition2 = "" + hashtableDoc2M010.get("PayCondition2");
    String stringPayCondition2L = "";
    String[][] retDoc3M013L = null;
    double doubleUsePurchaseMoneyL = 0;
    double doublePayConditionPurchaseMoneyL = 0;
    double doublePayCondition1PurchaseMoneyL = 0;
    double doublePayCondition2PurchaseMoneyL = 0;
    double doubleUsePurchaseMoneySumL = 0;
    double doubleThisPurchaseMoneyL = 0;
    double doublePurchaseMoneySumL = 0;
    double doubleTempL = 0;
    Hashtable hashtablePayCondition = new Hashtable();
    // 多筆請購單
    // 0 PurchaseNo1 1 PurchaseNo2 2 PurchaseNo3 3 RetainMoney 4 PurchaseMoney
    // 5 PurchaseNo4 6 FactoryNo
    for (int intDoc2M017 = 0; intDoc2M017 < retDoc2M017.length; intDoc2M017++) {
      doubleThisPurchaseMoneyL = exeUtil.doParseDouble(retDoc2M017[intDoc2M017][4].trim());
      stringFactoryNoL = retDoc2M017[intDoc2M017][6].trim();
      stringPurchaseNo1L = retDoc2M017[intDoc2M017][0].trim();
      stringPurchaseNo2L = retDoc2M017[intDoc2M017][1].trim();
      stringPurchaseNo3L = retDoc2M017[intDoc2M017][2].trim();
      stringPurchaseNoL = stringPurchaseNo1L + stringPurchaseNo2L + stringPurchaseNo3L;
      // 已申請的請款金額不包含本次(Doc7M017)
      doubleUsePurchaseMoneyL = exeUtil.doParseDouble(
          getExistFactoryNoRealMoneyForDoc5M020(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1L, stringPurchaseNo2L, stringPurchaseNo3L, stringFactoryNoL))
          + exeUtil.doParseDouble(getExistFactoryNoRealMoneyBorrowForDoc5M030(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1L, stringPurchaseNo2L,
              stringPurchaseNo3L, stringFactoryNoL));
      // System.out.println("已申請的請款金額不包含本次(Doc7M017)---------------------------"+convert.FourToFive(""+doubleUsePurchaseMoneyL,0))
      // ;
      // 取得請購單資料 Doc3M013
      // 0 FactoryNo 1 PurchaseSumMoney 2 PercentRate 3 MonthNum 4 PurchaseMoney
      // 5 PayCondition1 6 PayCondition2 7 Descript
      retDoc3M013L = getDoc5M013(stringComNo, stringPurchaseNoL, stringFactoryNoL);
      doublePurchaseMoneySumL = 0;
      doubleUsePurchaseMoneySumL = doubleUsePurchaseMoneyL + doubleThisPurchaseMoneyL; // 已申請的金額(合計)(包含本次)
      System.out.println("已申請的金額(合計)---------------------------" + convert.FourToFive("" + doubleUsePurchaseMoneySumL, 0));
      for (int intDoc3M013L = 0; intDoc3M013L < retDoc3M013L.length; intDoc3M013L++) {
        doublePurchaseMoneySumL += exeUtil.doParseDouble(retDoc3M013L[intDoc3M013L][4].trim());
        stringPayCondition1L = retDoc3M013L[intDoc3M013L][5].trim();
        stringPayCondition2L = retDoc3M013L[intDoc3M013L][6].trim();
        // [合約金額(階段)加總] 大於 [已申請金額(不包含本次)]
        if (doublePurchaseMoneySumL > doubleUsePurchaseMoneyL) {
          if (doublePurchaseMoneySumL <= doubleUsePurchaseMoneySumL) {
            // [合約金額(階段)加總] 小於等於 [已申請的金額(合計)(包含本次)]
            // [付款條件金額] = [合約金額(階段)加總] - [已請購金額(不包含本次)]
            doublePayConditionPurchaseMoneyL = doublePurchaseMoneySumL - doubleUsePurchaseMoneyL;
            System.out.println(intDoc3M013L + "---------------" + doublePayConditionPurchaseMoneyL);
          } else {
            // [付款條件金額] = [已申請的金額(合計)(包含本次)] - [已請購金額(不包含本次)]
            doublePayConditionPurchaseMoneyL = doubleUsePurchaseMoneySumL - doubleUsePurchaseMoneyL;
            System.out.println(intDoc3M013L + "---------------" + doublePayConditionPurchaseMoneyL);
          }
          // [已請購金額(不包含本次)] = [合約金額(階段)加總]
          doubleUsePurchaseMoneyL = doublePurchaseMoneySumL;
          // 放入對應的 付款條件中
          if (!"999".equals(stringPayCondition2L)) {
            doublePayCondition1PurchaseMoneyL = doublePayConditionPurchaseMoneyL / 2;
            doublePayCondition1PurchaseMoneyL = doParseDouble(convert.FourToFive("" + doublePayCondition1PurchaseMoneyL, 0));
            doublePayCondition2PurchaseMoneyL = doublePayConditionPurchaseMoneyL - doublePayCondition1PurchaseMoneyL;
            // 付款條件 2
            doublePayConditionPurchaseMoneyL = doParseDouble("" + hashtablePayCondition.get(stringPayCondition2L)) + doublePayCondition2PurchaseMoneyL;
            doublePayConditionPurchaseMoneyL = doParseDouble(convert.FourToFive("" + doublePayConditionPurchaseMoneyL, 0));
            hashtablePayCondition.put(stringPayCondition2L, "" + doublePayConditionPurchaseMoneyL);
          } else {
            doublePayCondition1PurchaseMoneyL = doublePayConditionPurchaseMoneyL;
          }

          doublePayConditionPurchaseMoneyL = doParseDouble("" + hashtablePayCondition.get(stringPayCondition1L)) + doublePayCondition1PurchaseMoneyL;
          doublePayConditionPurchaseMoneyL = doParseDouble(convert.FourToFive("" + doublePayConditionPurchaseMoneyL, 0));
          System.out.println(intDoc3M013L + "---------" + stringPayCondition1L + "------" + doublePayConditionPurchaseMoneyL);
          hashtablePayCondition.put(stringPayCondition1L, "" + doublePayConditionPurchaseMoneyL);
        }
        // [合約金額(階段)加總] 大於等於 [已申請的金額(合計)(包含本次)]
        if (doublePurchaseMoneySumL >= doubleUsePurchaseMoneySumL)
          break;
      }
    }
    double doublePay1 = exeUtil.doParseDouble("" + hashtablePayCondition.get(stringPayCondition1));
    double doublePay2 = exeUtil.doParseDouble("" + hashtablePayCondition.get(stringPayCondition2));
    //
    doubleRate = doublePay1 / (doublePay1 + doublePay2);
    return doubleRate;
  }

  // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
  // 5 CostID1 6 RealMoney 7 RealTotalMoney
  public int putDebitDoc2M012_1(int intFlowNo, String stringPurchaseNoExist, String stringRowtype, Vector vectorDoc5M022, String[][] retDoc2M013, String[][] retDoc5M0226,
      Hashtable hashtableDoc2M010, Hashtable hashtableDiscountMoney, Vector retVector, Vector retVectorNeg, FargloryUtil exeUtil) throws Throwable {
    System.out.println("putDebitDoc2M012---------------------------------------S");
    String stringAccountNo = "";
    String stringAccountNoFirst = "";
    String stringComNo = "" + hashtableDoc2M010.get("ComNo");
    String stringBarCode = "" + hashtableDoc2M010.get("BarCode");
    String stringDocNo = "" + hashtableDoc2M010.get("DocNo");
    String stringCostID = "";
    String stringCostID1 = "";
    String stringDepartNo = "";
    String stringDepartNoSet = "";
    String stringDepartNoS = "034F1F,034H28,034H32A,034H32B,034H36,034H36B,034H37A,034H38,034H42A,034H42B,034H43B,034H45A,034H51,034H43C,034M58,034H47,034H47,034H43A,034H58B,034M60,";
    String stringFactoryNo = "";
    String stringInOut = "";
    String stringDepartNoFirst = "" + hashtableDoc2M010.get("DepartNoFirst");
    if ("null".equals(stringDepartNoFirst))
      stringDepartNoFirst = "";
    String stringProjectID = "";
    String stringProjectID1 = "";
    String stringPosition = "";
    String stringRealMoney = "";
    String stringRealTotalMoney = "";
    String stringRecordNo = "";
    String stringUsedCd = "";
    String stringItemCd = "";
    String stringKey = "";
    String stringTemp = "";
    String stringAcctountType = "";// 0預設 1(5681-2146) 2(6201-2147) 3(5681-6201,2146/2147)
    String stringComNoType = "" + hashtableDoc2M010.get("ComType");
    String stringType = "";
    String[] arrayTempData = null;
    String[] arrayDescript = null;
    String[][] retDoc2M020 = null;
    String[][] retDoc5M0224 = null;
    double doubleAmt2146 = exeUtil.doParseDouble("" + hashtableDoc2M010.get("Amt2146"));
    double doubleAmt2147 = exeUtil.doParseDouble("" + hashtableDoc2M010.get("Amt2147"));
    double doubleTotalAmt = 0;
    double doubleTotalNoTaxAmt = 0;
    double doubleRealMoney = 0;
    Vector retDataVector = new Vector();
    Vector vectorDepartNo = new Vector();
    Vector vectorCostIDJ = getDoc2M0401V("", "J", "");
    Vector vectorCostIDAF = getDoc2M0401V("", "", " AND  UseType  LIKE  '%A%' AND  UseType  LIKE  '%F%'");
    Vector vectrorDoc5M0229 = getQueryDataHashtableDoc("Doc5M0229", new Hashtable(), " AND  BarCode  =  '" + stringBarCode + "' ", new Vector(), exeUtil);// Doc5M0229 大包印花稅
    // Vector vectorCostIDNullData = getDoc2M0401V("", "", " AND FunctionName LIKE
    // '%立沖傳票對應%' ") ; // 立沖對應傳票，允許部門、案別為空白
    boolean booleanSpec = false;
    boolean booleanComNoType = "E".equals(stringComNoType);
    Hashtable hashtableDoc5M022 = new Hashtable();
    // 2017-01-13 營業部修改
    Vector vectorSpecCostID = getSpecCostIDV();
    boolean booleanSplit = stringDocNo.startsWith("B34") && stringDocNo.length() > 4;
    /*
     * for(int intNo=0 ; intNo<vectorDoc5M022.size() ; intNo++) { hashtableDoc5M022
     * = (Hashtable) vectorDoc5M022.get(intNo) ; if(hashtableDoc5M022 == null)
     * continue ; stringCostID = ""+hashtableDoc5M022.get("CostID") ; stringDepartNo
     * = ""+hashtableDoc5M022.get("DepartNo") ; stringProjectID1 =
     * ""+hashtableDoc5M022.get("ProjectID1") ; //
     * if(vectorDepartNo.indexOf(stringDepartNo+"%-%"+stringProjectID1)==-1)
     * vectorDepartNo.add(stringDepartNo+"%-%"+stringProjectID1) ; //
     * if(vectorSpecCostID.indexOf(exeUtil.doSubstring(stringCostID,0,5)) != -1)
     * booleanSplit = true ; }
     */
    System.out.println("booleanSplit(" + booleanSplit + ")----------------------------");
    int intPos = 0; // NEW
    String stringRowtypeL = "";// NEW
    String stringAccountNoL = "";
    String stringAccountNo4 = "";
    String stringAcctNoType = "";
    String[][] retDoc7M0552 = null;
    Vector vectorVoucherData = new Vector();// NEW
    Vector vectorVoucherDataKey = new Vector();// NEW
    Vector vectorDescrip = new Vector();
    Hashtable hashtableInOut = new Hashtable();
    Hashtable hashtableDeptCdToSubject = getDepartNoDoc7M040("", "", "Y", "", exeUtil);
    Hashtable hashtableDoc5M0229 = new Hashtable();
    boolean booleanF273701 = false;
    //
    boolean booleanF297001 = false;
    String stringDepartName = "";
    String[][] retFED1005 = null;

    for (int intNo = 0; intNo < vectorDoc5M022.size(); intNo++) {
      hashtableDoc5M022 = (Hashtable) vectorDoc5M022.get(intNo);
      if (hashtableDoc5M022 == null)
        continue;
      stringAcctNoType = "" + hashtableDoc5M022.get("InOut");
      stringDepartNo = "" + hashtableDoc5M022.get("DepartNo");
      stringProjectID = "" + hashtableDoc5M022.get("ProjectID");
      stringProjectID1 = "" + hashtableDoc5M022.get("ProjectID1");
      stringCostID = "" + hashtableDoc5M022.get("CostID");
      stringRealMoney = "" + hashtableDoc5M022.get("RealMoney");
      stringRealTotalMoney = "" + hashtableDoc5M022.get("RealTotalMoney");
      stringFactoryNo = "";
      stringInOut = getInOutDoc7M0551H(stringAcctNoType, hashtableInOut);
      //
      hashtableDoc2M010.put("Temp", stringCostID); // 使用於傳票時之判斷請款代碼
      //
      stringDepartName = "";
      //
      if ("".equals(stringDepartNo)) {
        // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD 4 ACCT_OUT(分攤)
        // if("".equals(stringAccountNo)) {
        retDoc7M0552 = getDoc7M0552(stringCostID, stringComNoType, stringAcctNoType, "");
        if (retDoc7M0552.length == 0) {
          System.out.println("查無 Doc7M0552 --------------------------------");
          return 0;
        }
        //
        stringAccountNo = retDoc7M0552[0][3].trim();
        // 東源營造 10、開案興建O、為H091AA，H093AA，O006AA其中之一
        System.out.println("1會計科目變更----------------S");
        System.out.println("stringAccountNo(" + stringAccountNo + ")----------------");
        System.out.println("stringComNo(" + stringComNo + ")----------------");
        System.out.println("stringAcctNoType(" + stringAcctNoType + ")----------------");
        System.out.println("stringProjectID(" + stringProjectID + ")stringProjectID1(" + stringProjectID1 + ")----------------");
        System.out.println("1會計科目變更----------------E");
        if (stringAccountNo.length() > 4 && "10".equals(stringComNo) && "O".equals(stringAcctNoType) && ",H091AA,H093AA,O006AA,".indexOf("," + stringProjectID1 + ",") != -1) {
          stringAccountNo = "5881" + exeUtil.doSubstring(stringAccountNo, 4, stringAccountNo.length());
        }
        // java}
        // 以輸入部室
        stringDepartNoSet = exeUtil.doSubstring(stringDepartNoFirst, 0, 3) + "1";
      } else if (Character.isDigit(stringDepartNo.charAt(0))) {
        // 舊部門代碼
        if ("".equals(stringAccountNo)) {
          retDoc2M020 = getDoc7M055(stringComNo, stringCostID, stringInOut);
          if (retDoc2M020.length == 0) {
            System.out.println("查無 Doc2M020 --------------------------------");
            return 0;
          }
          if ("I".equals(stringInOut)) {
            stringAccountNo = retDoc2M020[0][0].trim();
          } else if ("O".equals(stringInOut)) {
            stringAccountNo = retDoc2M020[0][1].trim();
          } else {
            stringAccountNo = retDoc2M020[0][4].trim();
          }
        }
        if ("034H851,234O61,".indexOf(stringDepartNo) != -1 && "10,".indexOf(stringComNo + ",") != -1) {
          stringAccountNo = "5881" + exeUtil.doSubstring(stringAccountNo, 4, stringAccountNo.length());
        }
        if (stringDepartNo.indexOf("BH3") != -1 || stringDepartNo.indexOf("SH3") != -1)
          stringAccountNo = "128401";
        // 舊部門
        if ("I".equals(stringInOut) && !stringDepartNo.startsWith("022") && "0302,3000,3010,".indexOf(stringDepartNo) == -1) {
          stringDepartNoSet = stringDepartNo.substring(0, 3) + "1";
        } else {
          stringDepartNoSet = stringDepartNo;
          if ("10".equals(stringComNo)) {
            stringTemp = stringDepartNoSet;
            if (stringTemp.endsWith("A"))
              stringTemp = exeUtil.doSubstring(stringTemp, 0, stringTemp.length() - 1);
            stringTemp = stringTemp + "1";
            stringDepartName = getDepartNameFED1006(stringTemp);
            if (!"".equals(stringDepartName)) {
              stringDepartNoSet = stringTemp;
            }
          }
        }
      } else {
        // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD 4 ACCT_OUT(分攤)
        // if("".equals(stringAccountNo)) {
        retDoc7M0552 = getDoc7M0552(stringCostID, stringComNoType, stringAcctNoType, "");
        if (retDoc7M0552.length == 0) {
          System.out.println("查無 Doc7M0552 --------------------------------");
          return 0;
        }
        //
        stringAccountNo = retDoc7M0552[0][3].trim();
        // 東源營造 10、開案興建O、為H091AA，H093AA，O006AA其中之一
        System.out.println("2會計科目變更----------------S");
        System.out.println("stringAccountNo(" + stringAccountNo + ")----------------");
        System.out.println("stringComNo(" + stringComNo + ")----------------");
        System.out.println("stringAcctNoType(" + stringAcctNoType + ")----------------");
        System.out.println("stringProjectID(" + stringProjectID + ")stringProjectID1(" + stringProjectID1 + ")----------------");
        System.out.println("2會計科目變更----------------E");
        if (stringAccountNo.length() > 4 && "10".equals(stringComNo) && "O".equals(stringAcctNoType) && ",H091AA,H093AA,O006AA,".indexOf("," + stringProjectID1 + ",") != -1) {
          stringAccountNo = "5881" + exeUtil.doSubstring(stringAccountNo, 4, stringAccountNo.length());
        }
        // }
        // 新部門邏輯
        stringDepartNoSet = getVoucherDepartNoDoc5(stringComNo, stringComNoType, stringAcctNoType, stringDepartNo, stringProjectID, stringProjectID1, stringAccountNo,
            hashtableInOut, exeUtil);
      }
      //
      if (vectorCostIDJ.indexOf(stringCostID) != -1) {
        // 依無營業稅憑證轉傳票
        return putDebitDoc2M012_4(intFlowNo, stringAccountNo, stringRowtype, vectorDoc5M022, retDoc2M013, retDoc5M0226, hashtableDoc2M010, hashtableDiscountMoney, retVector,
            retVectorNeg, exeUtil);
      }
      if (vectrorDoc5M0229.size() > 0) {
        if (intNo < vectrorDoc5M0229.size()) {
          hashtableDoc5M0229 = (Hashtable) vectrorDoc5M0229.get(intNo);
          if (hashtableDoc5M0229 != null) {
            stringDepartNoSet = "" + hashtableDoc5M0229.get("Casecode");
          }
        }
      }
      //
      doubleTotalNoTaxAmt += exeUtil.doParseDouble(stringRealMoney);
      doubleTotalAmt += exeUtil.doParseDouble(stringRealTotalMoney);
      //
      if (intNo == 0)
        stringAccountNoFirst = stringAccountNo;
      if (!booleanF297001 && intNo == 0) {
        System.out.println("stringDepartNoFirst(" + stringDepartNoFirst + ")----------------------原");
        if (vectorDepartNo.size() > 1 && !"".equals(stringDepartNoFirst)) {
          // 多部門情況，且輸入部門為內業時，以輸入部門作為 1264 等傳票部門
        } else {
          stringDepartNoFirst = stringDepartNoSet;
        }
        System.out.println("stringDepartNoFirst(" + stringDepartNoFirst + ")-----------------------後");
      }
      if ("170501".equals(stringAccountNoFirst) && "170201,170202,170203,".indexOf(stringAccountNo + ",") != -1)
        stringAccountNoFirst = stringAccountNo;
      //
      /*
       * if("10,11,12,".indexOf(stringComNo+",")!=-1 &&
       * stringDepartNo.startsWith("034") &&
       * stringDepartNoS.indexOf(stringDepartNo+",")!=-1&&
       * "F273701,F282201,F282301,F282302,F283101,F283102,F283103,F283201,F283202,F283203,F283204,F283205,F283206,F283207,F283299,F283301,F283401,F283501,F283502"
       * .indexOf(stringCostID)==-1) { stringAccountNo = "2156" ; stringFactoryNo =
       * "Z0003" ; }
       */
      if (!"Y".equals(stringPurchaseNoExist)) {
        // booleanF297001 零用金
        if (booleanF297001) {
          stringFactoryNo = "Z0001";
          hashtableDoc2M010.put("FactoryNo", stringFactoryNo);
        }
        if ("D040321".indexOf(stringCostID) != -1) {
          stringFactoryNo = "Z0006";
          hashtableDoc2M010.put("FactoryNo", stringFactoryNo);
        }
        if (!booleanF297001 && "F304001".equals(stringCostID)) { // 發放董監酬勞
          stringFactoryNo = "Z0006";
          hashtableDoc2M010.put("FactoryNo", stringFactoryNo);
        }
        if ("F297001,A210302,A210202,A210402,C010304,".indexOf(stringCostID) != -1) {
          stringFactoryNo = "Z0001";
          hashtableDoc2M010.put("FactoryNo", stringFactoryNo);
        }
        if ("A010502".indexOf(stringCostID) != -1) { // 新制退休金-員工自提
          stringFactoryNo = "Z0001";
        }
        // 郵資費用(代收代付_遠東)
        if (!booleanF297001 && "A140802,A110940,".indexOf(stringCostID + ",") != -1) {
          stringFactoryNo = "05151717";
          hashtableDoc2M010.put("FactoryNo", stringFactoryNo);
        }
        // 郵資費用(代收代付_遠營)
        if (!booleanF297001 && "A140803,A110941,".indexOf(stringCostID + ",") != -1) {
          stringFactoryNo = "05159128";
          hashtableDoc2M010.put("FactoryNo", stringFactoryNo);
        }
        // 郵資費用(代收代付_遠房)
        if (!booleanF297001 && "A140804,A110942,".indexOf(stringCostID + ",") != -1) {
          stringFactoryNo = "23605591";
          hashtableDoc2M010.put("FactoryNo", stringFactoryNo);
        }
        // 郵資費用(代收代付_網服)
        if (!booleanF297001 && "A140805,".indexOf(stringCostID + ",") != -1) {
          stringFactoryNo = "24464556";
          hashtableDoc2M010.put("FactoryNo", stringFactoryNo);
        }
        // 郵資費用(代收代付_陽明山)
        if (!booleanF297001 && "A140806,".indexOf(stringCostID + ",") != -1) {
          stringFactoryNo = "96937408";
          hashtableDoc2M010.put("FactoryNo", stringFactoryNo);
        }
        // 郵資費用(代收代付_礁溪)
        if (!booleanF297001 && "A140807,".indexOf(stringCostID + ",") != -1) {
          stringFactoryNo = "29044800";
          hashtableDoc2M010.put("FactoryNo", stringFactoryNo);
        }
        if (!booleanF297001 && "A030100,".indexOf(stringCostID + ",") != -1) { // 福利金提撥
          stringType = "B";
          if ("01".equals(stringComNo)) {
            stringFactoryNo = "81587092";
          } else if ("12".equals(stringComNo)) {
            stringFactoryNo = "81596634";
          } else if ("Z6".equals(stringComNo)) {
            stringFactoryNo = "48956355";
          }
          hashtableDoc2M010.put("FactoryNo", stringFactoryNo);
        }
      }
      // 東源營造 10、開案興建O、為H091AA，H093AA，O006AA時，修正廠商
      System.out.println("廠商變更----------------S");
      System.out.println("stringAccountNo(" + stringAccountNo + ")----------------");
      System.out.println("stringComNo(" + stringComNo + ")----------------");
      System.out.println("stringAcctNoType(" + stringAcctNoType + ")----------------");
      System.out.println("stringProjectID(" + stringProjectID + ")stringProjectID1(" + stringProjectID1 + ")----------------");
      System.out.println("廠商變更----------------E");
      if (stringAccountNo.startsWith("5881") && "10".equals(stringComNo) && "O".equals(stringAcctNoType)) {
        if ("H091AA".equals(stringProjectID1))
          stringFactoryNo = "GH";
        if ("H093AA".equals(stringProjectID1))
          stringFactoryNo = "SD";
        if ("O006AA".equals(stringProjectID1))
          stringFactoryNo = "DM";
      }
      // 東源營造 10 且 別為 H681 廠商 改為 Z0003
      if ("10".equals(stringComNo) && "034H681".equals(stringDepartNoSet)) {
        stringFactoryNo = "Z0003";
        stringAccountNo = "2156";
      }
      // 營造類 且 完工結案 廠商 改為 Z0003
      if ("B".equals(stringComNoType) && "D".equals(stringAcctNoType)) {
        stringFactoryNo = "Z0003";
        if ("E87267".equals(stringBarCode))
          stringAccountNo = "2156";
      }
      if (intNo == 0 && "033M43".equals(stringDepartNoSet) && "128404".equals(stringAccountNo)) {
        stringFactoryNo = "M43";
      }
      //
      //
      arrayDescript = null;
      // NEW Start
      if ("".equals(stringFactoryNo)) {
        hashtableDoc2M010.get("FactoryNo");
      }
      if (!"".equals(stringFactoryNo)) {
        retFED1005 = getFED1005(stringFactoryNo);
        if (retFED1005.length == 0)
          stringFactoryNo = "Z0001";
      }
      stringKey = stringAccountNo + "---" + stringDepartNoSet + "---" + stringFactoryNo;
      // 撥補零用金 償還銀行借款 庶務用品,文具用品
      if (!booleanSplit && !"Z6".equals(stringComNo)) {
        // if(!booleanF297001 || booleanF273701 ||
        // "A14,A15,".indexOf(stringCostID.substring(0,3)+",")!=-1) {
        // if(!booleanF273701 &&
        // "A140501,A140502,A140503,A140504,A140505,A140506,A140507,".indexOf(stringCostID+",")!=-1)
        // {
        // 彙總
        // 報紙
        stringRowtypeL = "Q";
        if (vectorVoucherDataKey.indexOf(stringKey) == -1) {
          arrayTempData = new String[9];
          vectorVoucherDataKey.add(stringKey);
          vectorVoucherData.add(arrayTempData);
          vectorDescrip.add(arrayDescript);
          System.out.println(intNo + "---------OLD------------[" + stringKey + "]");
        } else {
          arrayTempData = (String[]) vectorVoucherData.get(vectorVoucherDataKey.indexOf(stringKey));
        }
      } else {
        stringKey += "---" + (intNo + 1);
        stringRowtypeL = stringRowtype;
        arrayTempData = new String[9];
        vectorVoucherDataKey.add(stringKey);
        vectorVoucherData.add(arrayTempData);
        vectorDescrip.add(arrayDescript);
      }
      // AcctountType
      if ("".equals(stringAcctountType)) {
        if (",01,00,".indexOf("," + stringComNo + ",") != -1 && stringAccountNo.startsWith("5311")) {
          // 遠雄建設01、遠東建設 00 且為 5311 開頭，貸方設為 2146
          stringAcctountType = "1";
        } else if (",02,".indexOf("," + stringComNo + ",") != -1 && stringAccountNo.startsWith("5311")) {
          // 遠翔建設02 且為 5311 開頭，貸方設為 2146 2013-08-14
          stringAcctountType = "1";
        } else if (",02,".indexOf("," + stringComNo + ",") != -1 && stringAccountNo.startsWith("5881")) {
          // 遠翔建設02 且為 5881 開頭，貸方設為 2146 2013-08-14
          stringAcctountType = "1";
        } else if (",12,10,".indexOf("," + stringComNo + ",") != -1) {
          // 遠雄營造 12、東源營造 10 2017-11-09 B5309 林勁豪 修為2
          stringAcctountType = "2";
        } else if (stringAccountNo.equals("214114")) {
          stringAcctountType = "1";
        } else {
          if (stringAccountNo.length() >= 4) {
            stringAccountNo4 = stringAccountNo.substring(0, 4);
            if ("1231,1232,1234,1664,1661,5681,2143".indexOf(stringAccountNo4 + "") != -1) {
              if (!"3".equals(stringAcctountType))
                stringAcctountType = ("2".equals(stringAcctountType)) ? "3" : "1";
            } else {
              if (!"3".equals(stringAcctountType))
                stringAcctountType = ("1".equals(stringAcctountType)) ? "3" : "2";
            }
          } else {
            if (!"3".equals(stringAcctountType))
              stringAcctountType = ("1".equals(stringAcctountType)) ? "3" : "2";
          }
        }
      }
      if ("1".equals(stringAcctountType)) {
        doubleAmt2146 += exeUtil.doParseDouble(stringRealTotalMoney);
      } else {
        doubleAmt2147 += exeUtil.doParseDouble(stringRealTotalMoney);
      }
      // 公司為 東源，部門為 034H851.034H931. 234O61 時，將會計科目 1234 置換為 5881
      if ("10".equals(stringComNo) && ",034H851,034H931,234O61,".indexOf(stringDepartNoSet) != -1) {
        stringAccountNo = stringAccountNo.replaceAll("1234", "5881");
      }
      //
      arrayTempData[0] = "";
      arrayTempData[1] = "" + (intNo + 1);
      arrayTempData[2] = stringAccountNo;
      arrayTempData[3] = stringDepartNoSet;
      arrayTempData[4] = stringFactoryNo;
      // arrayTempData[5] =
      // convert.FourToFive(""+(exeUtil.doParseDouble(stringRealMoney) +
      // exeUtil.doParseDouble(arrayTempData[5])), 0) ;
      arrayTempData[6] = stringItemCd;
      arrayTempData[7] = stringUsedCd;
      arrayTempData[8] = stringRowtypeL;
      //
      if (vectorCostIDAF.indexOf(stringCostID) != -1 && !"F304001".equals(stringCostID) && !"F293001".equals(stringCostID)) {
        booleanSpec = true;
      }
      if ("A321144".equals(stringCostID)) {
        stringType = "A";
      }
      if (vectorCostIDAF.indexOf(stringCostID) != -1 && !"F293001".equals(stringCostID)) {
        stringType = "A";
      }
      if ("A110105,,".indexOf(stringCostID + ",") != -1)
        stringType = "C";
      if ("F273901,E010301,".indexOf(stringCostID + ",") != -1)
        stringType = "D";
      if ("C010304,".indexOf(stringCostID + ",") != -1)
        stringType = "E";
      // NEW END
      // if(exeUtil.doParseDouble(stringRealMoney) < 0) {
      // arrayTempData[0] = "A" ; // NEW
      // stringRealMoney = convert.FourToFive(""+
      // Math.abs(exeUtil.doParseDouble(stringRealMoney)),0) ;
      // } else {
      arrayTempData[0] = "B"; // NEW
      // }
      arrayTempData[5] = convert.FourToFive("" + (exeUtil.doParseDouble(stringRealMoney) + exeUtil.doParseDouble(arrayTempData[5])), 0);
    }
    // if(retDoc5M0224 != null && retDoc5M0224.length>0 &&
    // "F282302,F283101,F283102,F283103,F283201,F283202,F283203,F283204,F283205,F283206,F283207,F283299,F283301,F283401,F283501,F283502,".indexOf(stringCostID)!=-1)
    // {
    // // 無營業稅憑證大於費用合計之金額，使用 8111
    // doubleTotalAmt = doF282302(stringBarCode, stringCostID, stringDepartNoFirst,
    // stringRowtypeL, doubleTotalAmt, vectorDescrip, vectorVoucherData,
    // retDoc2M013, exeUtil) ;
    // doubleTotalNoTaxAmt = doubleTotalAmt ;
    // }
    // NEW START
    if (booleanSpec) {
      // 會計科目、部門 依費用
      // 廠商、金額、筆數依無營業稅憑證
      for (int intDoc2M013 = 0; intDoc2M013 < retDoc2M013.length; intDoc2M013++) {
        stringFactoryNo = retDoc2M013[intDoc2M013][0].trim();
        stringRealMoney = retDoc2M013[intDoc2M013][5].trim();
        //
        arrayTempData = (String[]) vectorVoucherData.get(0);
        if ("A".equals(arrayTempData[0])) {
          putIntoVector2(arrayTempData[8], arrayTempData[1], intFlowNo, "C", arrayTempData[2], arrayTempData[3], stringFactoryNo, stringRealMoney, "", arrayTempData[6],
              arrayTempData[7], hashtableDoc2M010, arrayDescript, retVectorNeg, exeUtil);
          System.out.println("putDebitDoc2M012---------------------------------------1");
        } else {
          intFlowNo = putIntoVector2(arrayTempData[8], arrayTempData[1], intFlowNo, "D", arrayTempData[2], arrayTempData[3], stringFactoryNo, stringRealMoney, "", arrayTempData[6],
              arrayTempData[7], hashtableDoc2M010, arrayDescript, retVector, exeUtil);
          System.out.println("putDebitDoc2M012---------------------------------------2");
        }
      }
    } else {
      int intPosL = 0;
      Object objectTemp;
      boolean booleanFlag = false;
      String[] arrayKey = (String[]) vectorVoucherDataKey.toArray(new String[0]);
      if (!booleanSplit)
        Arrays.sort(arrayKey);
      for (int intNo = 0; intNo < vectorVoucherData.size(); intNo++) {
        intPosL = intNo;
        //
        stringKey = arrayKey[intNo].trim();
        System.out.println(intNo + "---------------------[" + stringKey + "]");
        intPosL = vectorVoucherDataKey.indexOf(stringKey);
        arrayTempData = (String[]) vectorVoucherData.get(intPosL);
        //
        objectTemp = vectorDescrip.get(intPosL);
        if (objectTemp == null) {
          arrayDescript = null;
        } else {
          arrayDescript = (String[]) objectTemp;
          for (int intNoL = 0; intNoL < arrayDescript.length; intNoL++) {
            if ("null".equals("" + arrayDescript[intNoL])) {
              arrayDescript = null;
              break;
            }
            if (!"".equals("" + arrayDescript[intNoL]))
              booleanFlag = true;
          }
        }
        if (!booleanFlag)
          arrayDescript = null;
        if ("A".equals(arrayTempData[0])) {
          putIntoVector2(arrayTempData[8], arrayTempData[1], intFlowNo, "C", arrayTempData[2], arrayTempData[3], arrayTempData[4], arrayTempData[5], "", arrayTempData[6],
              arrayTempData[7], hashtableDoc2M010, arrayDescript, retVectorNeg, exeUtil);
          System.out.println("putDebitDoc2M012---------------------------------------3");
        } else {
          if ("12".equals(stringComNo) && "234D1E".equals(arrayTempData[3])) {
            Vector vectorTemp = new Vector();
            String[] arrayTemp = null;
            String[] arrayData = null;
            String[] arrayMoney = null;
            String[] arrayRatio = { "50", "32", "18" };
            String[] arrayDepartNo = { "234D1E", "234D1F", "234D1G" };
            putIntoVector2(arrayTempData[8], arrayTempData[1], intFlowNo, "D", arrayTempData[2], arrayTempData[3], arrayTempData[4], arrayTempData[5], "", arrayTempData[6],
                arrayTempData[7], hashtableDoc2M010, arrayDescript, vectorTemp, exeUtil);
            //
            arrayData = (String[]) vectorTemp.get(0);
            arrayMoney = exeUtil.getMoneyFromRatio(arrayData[13], arrayRatio);
            for (int i = 0; i < arrayMoney.length; i++) {
              arrayTemp = exeUtil.doCopyArray(arrayData);
              //
              intFlowNo++;
              arrayTemp[6] = "" + intFlowNo;
              arrayTemp[11] = arrayDepartNo[i];
              arrayTemp[13] = arrayMoney[i];
              retVector.add(arrayTemp);
            }
            System.out.println("putDebitDoc2M012---------------------------------------4");
          } else {
            System.out.println("putDebitDoc2M012--intFlowNo(" + intFlowNo + ")-------------------------------------5S");
            intFlowNo = putIntoVector2(arrayTempData[8], arrayTempData[1], intFlowNo, "D", arrayTempData[2], arrayTempData[3], arrayTempData[4], arrayTempData[5], "",
                arrayTempData[6], arrayTempData[7], hashtableDoc2M010, arrayDescript, retVector, exeUtil);
            System.out.println("putDebitDoc2M012--intFlowNo(" + intFlowNo + ")-------------------------------------5E");
          }
        }
      }
    }
    // NEW END
    if (booleanF297001) {
      if (!stringDepartNoFirst.startsWith("A18")) {
        stringDepartNoSet = stringDepartNoFirst.substring(0, 3) + "A";
      } else {
        stringDepartNoSet = stringDepartNoFirst;
      }
      stringDepartNoSet = getDeptCdDoc(stringDepartNoSet, "", "");
      if (!"".equals(stringDepartNoSet))
        stringDepartNoFirst = stringDepartNoSet;
    }
    hashtableDoc2M010.put("AccFirst", stringAccountNoFirst);
    hashtableDoc2M010.put("DepartNoFirst", stringDepartNoFirst);
    hashtableDoc2M010.put("AcctountType", stringAcctountType);
    hashtableDoc2M010.put("Amt2146", convert.FourToFive("" + doubleAmt2146, 0));
    hashtableDoc2M010.put("Amt2147", convert.FourToFive("" + doubleAmt2147, 0));
    hashtableDoc2M010.put("TotalNoTaxAmt", convert.FourToFive("" + doubleTotalNoTaxAmt, 0));
    hashtableDoc2M010.put("TotalAmt", convert.FourToFive("" + doubleTotalAmt, 0));
    hashtableDoc2M010.put("Temp", stringType);
    // 回傳
    System.out.println("putDebitDoc2M012---------------------------------------E");
    return intFlowNo;
  }

  public int putDebitDoc2M012_4(int intFlowNo, String stringAcctNoFront, String stringRowtype, Vector vectorDoc5M022, String[][] retDoc2M013Front, String[][] retDoc5M0226,
      Hashtable hashtableDoc2M010, Hashtable hashtableDiscountMoney, Vector retVector, Vector retVectorNeg, FargloryUtil exeUtil) throws Throwable {
    System.out.println("putDebitDoc2M012_4---------------------------------------S");
    String[][] retDoc2M013 = exeUtil.doClone2DArray(retDoc2M013Front);
    String stringAccountNo = stringAcctNoFront;
    String stringAccountNoFirst = "";
    String stringComNo = "" + hashtableDoc2M010.get("ComNo");
    String stringBarCode = "" + hashtableDoc2M010.get("BarCode");
    String stringDepartNo = "";
    // String stringDepartNoS =
    // "034F1F,034H28,034H32A,034H32B,034H36,034H36B,034H37A,034H38,034H42A,034H42B,034H43B,034H45A,034H51,034H43C,034M58,034H47,034H47,034H43A,034H58B,034M60,"
    // ;
    String stringFactoryNo = "";
    String stringDepartNoFirst = "" + hashtableDoc2M010.get("DepartNoFirst");
    String stringReceiptTotalMoney = "";
    String stringKey = "";
    String stringAcctountType = "";// 0預設 1(5681-2146) 2(6201-2147) 3(5681-6201,2146/2147)
    String[] arrayTempData = null;
    String[] arrayDescript = null;
    String[][] retDoc2M020 = null;
    double doubleAmt2146 = exeUtil.doParseDouble("" + hashtableDoc2M010.get("Amt2146"));
    double doubleAmt2147 = exeUtil.doParseDouble("" + hashtableDoc2M010.get("Amt2147"));
    double doubleTotalAmt = 0;
    double doubleTotalNoTaxAmt = 0;
    Vector vectorDepartNo = new Vector();
    boolean booleanSpec = false;
    // 0 FactoryNo 1 ReceiptKind 2 ReceiptDate 3 ReceiptMoney 4 ReceiptTax
    // 5 ReceiptTotalMoney 6 ReceiptTaxType 7 ACCT_NO 8 PayCondition1 9 DepartNo
    for (int intNo = 0; intNo < retDoc2M013.length; intNo++) {
      stringDepartNo = retDoc2M013[intNo][9].trim();
      if (vectorDepartNo.indexOf(stringDepartNo) == -1)
        vectorDepartNo.add(stringDepartNo);
    }
    int intPos = 0; // NEW
    String stringRowtypeL = "";// NEW
    String stringAccountNo4 = "";
    String stringAcctNoType = "";
    String stringType = "";
    Vector vectorVoucherData = new Vector();// NEW
    Vector vectorVoucherDataKey = new Vector();// NEW
    Vector vectorDescrip = new Vector();
    //
    Hashtable hashtableDoc5M022 = (Hashtable) vectorDoc5M022.get(0);
    String stringCostID = "";
    if (hashtableDoc5M022 != null) {
      stringCostID = "" + hashtableDoc5M022.get("CostID");

    }
    System.out.println("putDebitDoc2M012_4--------------stringCostID(" + stringCostID + ")------------------");
    if ("F304101,".indexOf(stringCostID + ",") != -1) {
      stringType = "A";
    }
    for (int intNo = 0; intNo < retDoc2M013.length; intNo++) {
      stringFactoryNo = retDoc2M013[intNo][0].trim();
      stringReceiptTotalMoney = retDoc2M013[intNo][5].trim();
      stringDepartNo = retDoc2M013[intNo][9].trim();
      // stringAccountNo = retDoc2M013[intNo][7].trim( ) ;
      //
      doubleTotalNoTaxAmt += exeUtil.doParseDouble(stringReceiptTotalMoney);
      doubleTotalAmt += exeUtil.doParseDouble(stringReceiptTotalMoney);
      //
      if (intNo == 0)
        stringAccountNoFirst = stringAccountNo;
      if (intNo == 0) {
        if (vectorDepartNo.size() > 1 && !"".equals(stringDepartNoFirst)) {
          // 多部門情況，且輸入部門為內業時，以輸入部門作為 1264 等傳票部門
        } else {
          stringDepartNoFirst = stringDepartNo;
        }
      }
      if ("170501".equals(stringAccountNoFirst) && "170201,170202,170203,".indexOf(stringAccountNo + ",") != -1)
        stringAccountNoFirst = stringAccountNo; //
      //
      arrayDescript = null;
      stringKey = stringAccountNo + "---" + stringDepartNo + "---" + stringFactoryNo;
      if (true) {
        // 彙總
        // 報紙
        stringRowtypeL = "Q";
        if (vectorVoucherDataKey.indexOf(stringKey) == -1) {
          arrayTempData = new String[9];
          vectorVoucherDataKey.add(stringKey);
          vectorVoucherData.add(arrayTempData);
          vectorDescrip.add(arrayDescript);
          System.out.println(intNo + "---------OLD------------[" + stringKey + "]");
        } else {
          arrayTempData = (String[]) vectorVoucherData.get(vectorVoucherDataKey.indexOf(stringKey));
        }
      } else {
        stringRowtypeL = stringRowtype;
        arrayTempData = new String[9];
        vectorVoucherDataKey.add(stringKey);
        vectorVoucherData.add(arrayTempData);
        vectorDescrip.add(arrayDescript);
      }
      // AcctountType
      if ("".equals(stringAcctountType)) {
        // 遠雄營造 12、東源營造 10
        if ("12,10,".indexOf(stringComNo) != -1) {
          stringAcctountType = "1";
        } else {
          if (stringAccountNo.length() > 4) {
            stringAccountNo4 = stringAccountNo.substring(0, 4);
            if ("1231,1232,1234,1664,1661,5681".indexOf(stringAccountNo4 + "") != -1) {
              if (!"3".equals(stringAcctountType))
                stringAcctountType = ("2".equals(stringAcctountType)) ? "3" : "1";
            } else {
              if (!"3".equals(stringAcctountType))
                stringAcctountType = ("1".equals(stringAcctountType)) ? "3" : "2";
            }
          } else {
            if (!"3".equals(stringAcctountType))
              stringAcctountType = ("1".equals(stringAcctountType)) ? "3" : "2";
          }
        }
      }
      if ("1".equals(stringAcctountType)) {
        doubleAmt2146 += exeUtil.doParseDouble(stringReceiptTotalMoney);
      } else {
        doubleAmt2147 += exeUtil.doParseDouble(stringReceiptTotalMoney);
      }
      //
      arrayTempData[0] = "";
      arrayTempData[1] = "" + (intNo + 1);
      arrayTempData[2] = stringAccountNo;
      arrayTempData[3] = stringDepartNo;
      arrayTempData[4] = stringFactoryNo;
      arrayTempData[6] = "";
      arrayTempData[7] = "";
      arrayTempData[8] = stringRowtypeL;
      // NEW END
      if (exeUtil.doParseDouble(stringReceiptTotalMoney) < 0) {
        arrayTempData[0] = "A"; // NEW
        stringReceiptTotalMoney = convert.FourToFive("" + Math.abs(exeUtil.doParseDouble(stringReceiptTotalMoney)), 0);
      } else {
        arrayTempData[0] = "B"; // NEW
      }
      arrayTempData[5] = convert.FourToFive("" + (exeUtil.doParseDouble(stringReceiptTotalMoney) + exeUtil.doParseDouble(arrayTempData[5])), 0);
    }
    // NEW START
    int intPosL = 0;
    Object objectTemp;
    boolean booleanFlag = false;
    String[] arrayKey = (String[]) vectorVoucherDataKey.toArray(new String[0]);
    Arrays.sort(arrayKey);
    for (int intNo = 0; intNo < vectorVoucherData.size(); intNo++) {
      intPosL = intNo;
      //
      stringKey = arrayKey[intNo].trim();
      System.out.println(intNo + "---------------------[" + stringKey + "]");
      intPosL = vectorVoucherDataKey.indexOf(stringKey);
      arrayTempData = (String[]) vectorVoucherData.get(intPosL);
      //
      objectTemp = vectorDescrip.get(intPosL);
      if (objectTemp == null) {
        arrayDescript = null;
      } else {
        arrayDescript = (String[]) objectTemp;
        for (int intNoL = 0; intNoL < arrayDescript.length; intNoL++) {
          if ("null".equals("" + arrayDescript[intNoL])) {
            arrayDescript = null;
            break;
          }
          if (!"".equals("" + arrayDescript[intNoL]))
            booleanFlag = true;
        }
      }
      if (!booleanFlag)
        arrayDescript = null;
      if ("A".equals(arrayTempData[0])) {
        putIntoVector2(arrayTempData[8], arrayTempData[1], intFlowNo, "C", arrayTempData[2], arrayTempData[3], arrayTempData[4], arrayTempData[5], "", arrayTempData[6],
            arrayTempData[7], hashtableDoc2M010, arrayDescript, retVectorNeg, exeUtil);
      } else {
        intFlowNo = putIntoVector2(arrayTempData[8], arrayTempData[1], intFlowNo, "D", arrayTempData[2], arrayTempData[3], arrayTempData[4], arrayTempData[5], "", arrayTempData[6],
            arrayTempData[7], hashtableDoc2M010, arrayDescript, retVector, exeUtil);
      }
    }
    // NEW END
    // 回傳
    hashtableDoc2M010.put("AccFirst", stringAccountNoFirst);
    hashtableDoc2M010.put("DepartNoFirst", stringDepartNoFirst);
    hashtableDoc2M010.put("AcctountType", stringAcctountType);
    hashtableDoc2M010.put("Amt2146", convert.FourToFive("" + doubleAmt2146, 0));
    hashtableDoc2M010.put("Amt2147", convert.FourToFive("" + doubleAmt2147, 0));
    hashtableDoc2M010.put("TotalNoTaxAmt", convert.FourToFive("" + doubleTotalNoTaxAmt, 0));
    hashtableDoc2M010.put("TotalAmt", convert.FourToFive("" + doubleTotalAmt, 0));
    hashtableDoc2M010.put("Temp", stringType);
    // 回傳
    System.out.println("putDebitDoc2M012_4---------------------------------------E");
    return intFlowNo;
  }

  public int putDebitDoc2M012_5(int intFlowNo, String[][] retDoc5M021, String[][] retDoc5M023, Hashtable hashtableDoc2M010, Vector retVector, FargloryUtil exeUtil)
      throws Throwable {
    System.out.println("putDebitDoc2M012_5---------------------------------------S");
    // 2011-09-30
    String stringBarCode = "" + hashtableDoc2M010.get("BarCode");
    String stringFactoryNo = "";
    String stringAmt = "";
    String[] arrayTemplate = (String[]) retVector.get(retVector.size() - 1);
    String[][] retDoc5M0211 = getDoc2M011Union("Doc5M0211", stringBarCode);
    Vector vectorFactoryNo = new Vector();
    Hashtable hashtableFactoryNo = new Hashtable();
    for (int intNo = 0; intNo < retDoc5M021.length; intNo++) {
      stringFactoryNo = retDoc5M021[intNo][0].trim();
      stringAmt = retDoc5M021[intNo][4].trim();
      //
      if (vectorFactoryNo.indexOf(stringFactoryNo) == -1) {
        vectorFactoryNo.add(stringFactoryNo);
      }
      stringAmt = "" + (exeUtil.doParseDouble(stringAmt) + exeUtil.doParseDouble("" + hashtableFactoryNo.get(stringFactoryNo)));
      hashtableFactoryNo.put(stringFactoryNo, convert.FourToFive(stringAmt, 0));
    }
    for (int intNo = 0; intNo < retDoc5M0211.length; intNo++) {
      stringFactoryNo = retDoc5M0211[intNo][0].trim();
      stringAmt = retDoc5M0211[intNo][4].trim();
      //
      if (vectorFactoryNo.indexOf(stringFactoryNo) == -1) {
        vectorFactoryNo.add(stringFactoryNo);
      }
      stringAmt = "" + (exeUtil.doParseDouble(stringAmt) + exeUtil.doParseDouble("" + hashtableFactoryNo.get(stringFactoryNo)));
      hashtableFactoryNo.put(stringFactoryNo, convert.FourToFive(stringAmt, 0));
    }
    for (int intNo = 0; intNo < retDoc5M023.length; intNo++) {
      stringFactoryNo = retDoc5M023[intNo][0].trim();
      stringAmt = retDoc5M023[intNo][5].trim();
      //
      if (vectorFactoryNo.indexOf(stringFactoryNo) == -1) {
        vectorFactoryNo.add(stringFactoryNo);
      }
      stringAmt = "" + (exeUtil.doParseDouble(stringAmt) + exeUtil.doParseDouble("" + hashtableFactoryNo.get(stringFactoryNo)));
      hashtableFactoryNo.put(stringFactoryNo, convert.FourToFive(stringAmt, 0));
    }
    //
    String[] arrayTemp = null;
    for (int intNo = 0; intNo < vectorFactoryNo.size(); intNo++) {
      stringFactoryNo = "" + vectorFactoryNo.get(intNo);
      stringAmt = "" + exeUtil.doParseDouble("" + hashtableFactoryNo.get(stringFactoryNo));
      //
      if (intNo != 0) {
        arrayTemp = exeUtil.doCopyArray(arrayTemplate);
        retVector.add(arrayTemp);
        //
        intFlowNo++;
        arrayTemp[6] = "" + intFlowNo; // 傳票序號 6
      } else {
        arrayTemp = arrayTemplate;
      }
      //
      arrayTemp[12] = stringFactoryNo;
      arrayTemp[13] = stringAmt;
    }
    System.out.println("putDebitDoc2M012_5---------------------------------------E");
    return intFlowNo;
  }

  public int putDebitForAsset5(boolean booleanEnd, String[] arrayTable, String[][] retAsAsset, Hashtable hashtableDoc2M010, Vector retVector, FargloryUtil exeUtil, talk dbAsset)
      throws Throwable {
    System.out.println("putDebitForAsset5---------------------------------------S");
    int intFlowNo = 0;
    int intAssetPos = 0;
    String stringAccountNo = "";
    String stringAccountNoFirst = "";
    String stringComNo = "" + hashtableDoc2M010.get("ComNo");
    String stringBarCode = "" + hashtableDoc2M010.get("BarCode");
    String stringDepartNo = "";
    String stringFactoryNo = "" + hashtableDoc2M010.get("FactoryNo");
    String stringRealMoney = "";
    String stringFILTER = "";
    String stringAssId = "";
    String stringCostID = "";
    String stringDepartNoFirst = "";
    String stringInOut = "";
    String stringF2Name = "";
    String stringF3Name = "";
    String stringOptometryNo = "";
    String stringAssNumber = "";
    String[] arrayDescript = null;
    String[] arrayTemp = null;
    String[] retDataTempL = null;
    String[][] retAsAssetL = null;
    String[][] retAssAssetItem = null;
    String[][] retDoc2M018 = null;
    Hashtable hashtableData = new Hashtable();
    Hashtable hashtableTmp = new Hashtable();
    Vector vectorAsAssetFilter = new Vector();
    Vector retVectorL = new Vector();
    if (retAsAsset.length > 0 && booleanEnd) {
      retAsAssetL = retAsAsset;
      retDoc2M018 = getTableDataDoc("SELECT  OptometryNo  FROM  Doc5M028  WHERE  BarCode  = '" + stringBarCode + "' ");
      if (retDoc2M018.length > 0) {
        stringOptometryNo = retDoc2M018[0][0].trim();
      }
    } else {
      arrayTable[7] = stringFactoryNo;
      // 未入固資 本次請款單 會計科目為1252
      retAsAssetL = getDoc2M0171("B", stringBarCode, arrayTable, exeUtil);
    }
    // 0 會計科目 1 部門代碼 2 金額 3 固資代碼 4 AssId 5 請款代碼
    for (int intNo = 0; intNo < retAsAssetL.length; intNo++) {
      stringAccountNo = retAsAssetL[intNo][0].trim();
      stringDepartNo = retAsAssetL[intNo][1].trim();
      stringRealMoney = retAsAssetL[intNo][2].trim();
      stringFILTER = retAsAssetL[intNo][3].trim();
      stringAssId = retAsAssetL[intNo][4].trim();
      stringCostID = retAsAssetL[intNo][5].trim();
      stringInOut = retAsAssetL[intNo][6].trim();
      //
      if (intNo == 0)
        stringAccountNoFirst = stringAccountNo;
      if (intNo == 0)
        stringDepartNoFirst = stringDepartNo;
      //
      if (retAsAsset.length > 0 && booleanEnd) {
        vectorAsAssetFilter = exeUtil.getQueryDataHashtable("AS_ASSET_FILTER", new Hashtable(), " AND  FILTER  = '" + stringFILTER + "' ", new Vector(), dbAsset);
        if (vectorAsAssetFilter.size() > 0) {
          hashtableTmp = (Hashtable) vectorAsAssetFilter.get(0);
          stringF2Name = "" + hashtableTmp.get("F2_NAME");
          if ("null".equals(stringF2Name))
            stringF2Name = "";
          stringF3Name = "" + hashtableTmp.get("F3_NAME");
          if ("null".equals(stringF3Name))
            stringF3Name = "";
        }
        stringAssNumber = "ASSET_DATA";
        stringCostID = getCostIDNumNew(stringCostID, stringInOut);
        //
        hashtableData.put("DESCRIPT", "Y");
        hashtableData.put("H11", stringF2Name); // 資產中分類名稱
        hashtableData.put("H12", stringF3Name); // 資產中分類名稱
        hashtableData.put("I07", stringAssNumber); // 財產編號
        hashtableData.put("I10", stringOptometryNo); // 最後一筆之驗收單編號
        hashtableData.put("Y10", stringCostID); // 請款代碼
      }
      //
      retVectorL = new Vector();
      System.out.println(intNo + "(intFlowNo：" + intFlowNo + ")---------------------------------------S1");
      //
      intFlowNo = putIntoVectorFull("B", "" + (intNo + 1), intFlowNo, "D", stringAccountNo, stringDepartNo, stringFactoryNo, stringRealMoney, "", "", "", 0, "1", hashtableDoc2M010,
          null, retVectorL, exeUtil, hashtableData);
      arrayTemp = (String[]) retVectorL.get(0);
      System.out.println(intNo + "(intFlowNo：" + intFlowNo + ")---------------------------------------E1");
      //
      if (retAsAsset.length > 0 && booleanEnd) {
        // 固資摘要位置
        intAssetPos = 0;
        for (int intNoL = 18; intNoL <= 22; intNoL++) {
          if ("ASSET_DATA".equals(arrayTemp[intNoL].trim())) {
            intAssetPos = intNoL;
            break;
          }
        }
        // 固資明細資料
        retAssAssetItem = getAsAssetItem(stringAssId, exeUtil, dbAsset);
        // 增加至傳票
        // 0 部門 1 金額 2 資產代碼
        intFlowNo--;
        System.out.println(intNo + "(intFlowNo：" + intFlowNo + ")---------------------------------------2");
        for (int intNoL = 0; intNoL < retAssAssetItem.length; intNoL++) {
          intFlowNo++;
          //
          System.out.println(intNo + "-" + intNoL + "(intFlowNo：" + intFlowNo + ")---------------------------------------3");
          retDataTempL = exeUtil.doCopyArray(arrayTemp);
          retDataTempL[6] = "" + intFlowNo; // 傳票序號 6
          retDataTempL[11] = retAssAssetItem[intNoL][0]; // 部門
          retDataTempL[13] = retAssAssetItem[intNoL][1]; // 金額
          retDataTempL[intAssetPos] = retAssAssetItem[intNoL][2]; // 資產代號
          retVector.add(retDataTempL);
        }
      } else {
        retVector.add(arrayTemp);
      }
    }
    /*
     * if(exeUtil.doParseDouble(""+hashtableDoc2M010.get("Amt2147")) > 0) {
     * hashtableDoc2M010.put("AcctountType", "1") ; hashtableDoc2M010.put("Amt2146",
     * ""+hashtableDoc2M010.get("Amt2147")) ; hashtableDoc2M010.put("Amt2147", "0")
     * ; }
     */
    // hashtableDoc2M010.put("AccFirst", stringAccountNoFirst) ;
    hashtableDoc2M010.put("DepartNoFirst", stringDepartNoFirst);
    // 回傳
    System.out.println("putDebitForAsset5---------------------------------------E");
    return intFlowNo;
  }

  public String getVoucherDepartNoDoc5(String stringComNo, String stringComNoType, String stringAcctNoType, String stringDepartNo, String stringProjectID, String stringProjectID1F,
      String stringAccountNo, Hashtable hashtableInOut, FargloryUtil exeUtil) throws Throwable {
    String stringInOut = getInOutDoc7M0551H(stringAcctNoType, hashtableInOut);
    String stringDepartNoSet = "";
    String stringDepartName = "";
    String stringTemp = "";
    String stringProjectID1 = getProject1Old(stringProjectID1F, "");
    if ("".equals(stringProjectID1)) {
      stringProjectID1 = stringProjectID1F;
    }
    //
    if ("I".equals(stringInOut)) {
      // 內業
      // 部門別(部室)
      // 除財務以科為單位
      if ("00".equals(stringComNo) && stringDepartNo.equals("A28B")) {
        stringDepartNoSet = "3000";
      } else if ("00".equals(stringComNo) && stringDepartNo.equals("A28C")) {
        stringDepartNoSet = "3010";
      } else {
        if (",C68B,C68C,C68D,".indexOf("," + stringDepartNo + ",") != -1) {
          // 不作主部室處理
        } else if (stringDepartNo.startsWith("A18")) {
          stringDepartNoSet = stringDepartNo;
        } else {
          stringDepartNoSet = stringDepartNo.substring(0, 3) + "A";
          stringDepartNo = stringDepartNoSet;
        }
        stringDepartNoSet = getDeptCdDoc(stringDepartNo, "", "");
        if ("".equals(stringDepartNoSet))
          stringDepartNoSet = stringDepartNo;

        if (stringDepartNoSet.startsWith("034"))
          stringDepartNoSet = "0341";
      }
    } else {
      // 外業
      // 1. 特殊公司
      if ("20".equals(stringComNo) && "D1".equals(stringProjectID1))
        stringDepartNoSet = stringProjectID1;
      else if ("71".equals(stringComNo) && "R2".equals(stringProjectID1))
        stringDepartNoSet = "910R2";
      else if ("72".equals(stringComNo) && "R3".equals(stringProjectID1))
        stringDepartNoSet = "710R3";
      else if ("73".equals(stringComNo) && "R6".equals(stringProjectID1))
        stringDepartNoSet = "610R6"; // 2014-08-25 黃淑燕
      else if ("76".equals(stringComNo) && "R7".equals(stringProjectID1))
        stringDepartNoSet = "234R7";
      else if ("Z0".equals(stringComNo) && "ZF".equals(stringProjectID1))
        stringDepartNoSet = stringProjectID1;
      else if ("Z3".equals(stringComNo) && "H27".equals(stringProjectID1))
        stringDepartNoSet = "034H27";
      else if ("12".equals(stringComNo) && "O3".equals(stringProjectID1))
        stringDepartNoSet = "234O3";
      else if ("Z3".equals(stringComNo) && ",Z05,Z07,Z08,".indexOf("," + stringProjectID1 + ",") != -1)
        stringDepartNoSet = stringProjectID1;
      else if (",B1,F,H7,H9,".indexOf("," + stringProjectID1 + ",") != -1) {
        System.out.println("2. 特殊案別-----------------------------");
        if ("B".equals(stringComNoType)) {
          // 營造體系 134 +案別
          stringDepartNoSet = "134" + stringProjectID1;
        } else {
          // 非營造體系 133 +案別
          stringDepartNoSet = "133" + stringProjectID1;
        }
        /*
         * } else if(",B,".indexOf(","+stringAcctNoType+",")!=-1) {
         * System.out.println("3. 階段別為餘屋-----------------stringDepartNo("+stringDepartNo
         * +")") ; stringDepartNoSet = stringDepartNo.substring(0,3)+"A" ; stringTemp =
         * getDeptCdDoc(stringDepartNoSet, "", "") ; if(!"".equals(stringTemp))
         * stringDepartNoSet = stringTemp ; stringDepartNoSet =
         * stringDepartNoSet+stringProjectID1 ; } else
         * if(",D,".indexOf(","+stringAcctNoType+",")!=-1 &&
         * "A".equals(stringComNoType)) {
         * System.out.println("3. 階段別為完工結案，公司為建設-----------------stringDepartNo("
         * +stringDepartNo+")") ; stringDepartNoSet = stringDepartNo.substring(0,3)+"A"
         * ; stringTemp = getDeptCdDoc(stringDepartNoSet, "", "") ;
         * if(!"".equals(stringTemp)) stringDepartNoSet = stringTemp ; stringDepartNoSet
         * = stringDepartNoSet+stringProjectID1 ;
         */
      } else if ("B".equals(stringComNoType) && (stringProjectID1.startsWith("A") || stringProjectID1.startsWith("R")) && ",A1,A2,".indexOf("," + stringProjectID1 + ",") == -1) {
        System.out.println("4. 營造體系案別為A或R開頭，除(A1遠東世紀廣場第一期,A2遠東世紀廣場第二期)，以234+案別-----------------");
        stringDepartNoSet = "234" + stringProjectID1;
      } else {
        System.out.println("5. 其餘案別營造034、建設及行銷及其他家公司 033-----------------");
        if ("B".equals(stringComNoType)) {
          // 營造體系 034 +案別
          stringDepartNoSet = "034" + stringProjectID1;
        } else {
          stringDepartNoSet = "033" + stringProjectID1;
        }
      }
      //
      if ("G02A".equals(stringProjectID1))
        stringDepartNoSet = "133G2";
      // 公司型態為建築 A 時，會計科目為 6201 開頭、有案別，部門特別處理
      if ("A".equals(stringComNoType) && stringAccountNo.startsWith("6201")) {
        stringDepartNoSet = stringDepartNo.substring(0, 3) + "A";
        stringDepartNoSet = getDeptCdDoc(stringDepartNoSet, "", "");
        if ("".equals(stringDepartNoSet))
          stringDepartNoSet = stringDepartNo;
        stringDepartNoSet = stringDepartNoSet + stringProjectID1;
      }
      if ("".equals(stringDepartName) && "034H40B".equals(stringDepartNoSet)) {
        System.out.println("案別 034H40B 特別處理---------------------------s");
        stringTemp = "034H40B1";
        stringDepartName = getDepartNameFED1006(stringTemp);
        if (!"".equals(stringDepartName)) {
          stringDepartNoSet = stringTemp;
        }
      }
      // 東源營造特別處理
      System.out.println("東源營造特別處理---------------------------stringComNo(" + stringComNo + ")");
      if ("10".equals(stringComNo) && "".equals(stringDepartName)) {
        System.out.println("東源營造特別處理---------------------------S(" + stringDepartNoSet + ")");
        stringTemp = stringDepartNoSet;
        if (stringTemp.endsWith("A"))
          stringTemp = exeUtil.doSubstring(stringTemp, 0, stringTemp.length() - 1);
        System.out.println("東源營造特別處理---------------------------1(" + stringDepartNoSet + ")");
        stringTemp = stringTemp + "1";
        stringDepartName = getDepartNameFED1006(stringTemp);
        if (!"".equals(stringDepartName)) {
          stringDepartNoSet = stringTemp;
        }
        System.out.println("東源營造特別處理---------------------------E(" + stringDepartNoSet + ")");
      }
      // + A - A 處理
      stringDepartName = getDepartNameFED1006(stringDepartNoSet);
      if ("".equals(stringDepartName) && "234A1外".equals(stringDepartNoSet)) {
        System.out.println("案別 234A1 特別處理---------------------------s");
        stringTemp = "234A1";
        stringDepartName = getDepartNameFED1006(stringTemp);
        if (!"".equals(stringDepartName)) {
          stringDepartNoSet = stringTemp;
        }
      }
      if ("".equals(stringDepartName)) {
        System.out.println("案別 +- A 處理---------------------------s");
        if (Character.isDigit(stringDepartNoSet.charAt(stringDepartNoSet.length() - 1))) {
          stringTemp = stringDepartNoSet + "A";
        } else {
          stringTemp = stringDepartNoSet.substring(0, stringDepartNoSet.length() - 1);
        }
        stringDepartName = getDepartNameFED1006(stringTemp);
        if (!"".equals(stringDepartName)) {
          stringDepartNoSet = stringTemp;
        }
      }
      if ("".equals(stringDepartName)) {
        // A2
        System.out.println("案別 A2 特別處理---------------------------s");
        if (stringDepartNoSet.indexOf("A2") != -1) {
          stringTemp = stringDepartNoSet.replaceAll("A2", "A02A");
          stringDepartName = getDepartNameFED1006(stringTemp);
          if (!"".equals(stringDepartName)) {
            stringDepartNoSet = stringTemp;
          } else {
            if (Character.isDigit(stringTemp.charAt(stringTemp.length() - 1))) {
              stringTemp = stringTemp + "A";
            } else {
              stringTemp = stringTemp.substring(0, stringTemp.length() - 1);
            }
            stringDepartName = getDepartNameFED1006(stringTemp);
            if (!"".equals(stringDepartName)) {
              stringDepartNoSet = stringTemp;
            }
          }
        }
      }
      if ("".equals(stringDepartName)) {
        // 案別即為部門
        stringTemp = stringProjectID1;
        stringDepartName = getDepartNameFED1006(stringTemp);
        if (!"".equals(stringDepartName)) {
          stringDepartNoSet = stringTemp;
        }
      }
      if (stringDepartNoSet.equals("0351E2")) {
        // 建設類公司 + 傳票6201 開頭 改為 0351E02A 否則皆為 033E02A。
        if ("A".equals(stringComNoType) && stringAccountNo.startsWith("6201")) {
          stringDepartNoSet = "0351E02A";
        } else {
          stringDepartNoSet = "033E02A";
        }
      }
    }
    //
    if ("01".equals(stringComNo) && "0351H73A".equals(stringDepartNoSet))
      stringDepartNoSet = "033H73A"; // 吳珮甄
    if ("10".equals(stringComNo) && "034H57".equals(stringDepartNoSet))
      stringDepartNoSet = "034H57A1";
    if ("20".equals(stringComNo) && "0229".equals(stringDepartNoSet))
      stringDepartNoSet = "7299"; // 劉慧菁 2014-05-02
    // if("20".equals(stringComNo) && "0231".equals(stringDepartNoSet))
    // stringDepartNoSet = "7299"; // 劉慧菁 2014-05-02 2014-05-28 取消
    if ("033H27A".equals(stringDepartNoSet))
      stringDepartNoSet = "033H27";
    if ("033D01A".equals(stringDepartNoSet))
      stringDepartNoSet = "D1";
    if ("033E2".equals(stringDepartNoSet))
      stringDepartNoSet = "033E02A";
    if ("034D01A".equals(stringDepartNoSet))
      stringDepartNoSet = "234D1A";
    if ("0381A1".equals(stringDepartNoSet))
      stringDepartNoSet = "0381A01A";
    if ("A29A".equals(stringDepartNoSet))
      stringDepartNoSet = "7201";
    if ("053H0101D".equals(stringDepartNoSet))
      stringDepartNoSet = "053H0101";
    if ("033O1".equals(stringDepartNoSet))
      stringDepartNoSet = "133O1";
    if ("0381M18C".equals(stringDepartNoSet))
      stringDepartNoSet = "0381M18A";
    if ("10".equals(stringComNo) && "034O6".equals(stringDepartNoSet))
      stringDepartNoSet = "234O61";
    if ("A".equals(stringComNoType) && "033E2".equals(stringDepartNoSet))
      stringDepartNoSet = "033E02A";
    // JackLee Start
    // System.out.println("JackLee stringComNo1="+stringComNo);
    // System.out.println("JackLee stringDepartNoSet1="+stringDepartNoSet);
    // if("10".equals(stringComNo) && "034H043AB".equals(stringDepartNoSet))
    // stringDepartNoSet = "034H43A1";
    // if("10".equals(stringComNo) && "034H043BB".equals(stringDepartNoSet))
    // stringDepartNoSet = "034H43B1";
    if ("10".equals(stringComNo) && "034H43A".equals(stringDepartNoSet))
      stringDepartNoSet = "034H43A1";
    if ("10".equals(stringComNo) && "034H43B".equals(stringDepartNoSet))
      stringDepartNoSet = "034H43B1";
    if ("10".equals(stringComNo) && "034H45A".equals(stringDepartNoSet))
      stringDepartNoSet = "034H45A1";
    if (stringDepartNoSet.equals("4111"))
      stringDepartNoSet = "4110";
    if (stringDepartNoSet.equals("4121"))
      stringDepartNoSet = "4120";
    if (stringDepartNoSet.equals("4171"))
      stringDepartNoSet = "4170";
    System.out.println("JackLee stringDepartNoSet2=" + stringDepartNoSet);
    // JackLee End
    if ("0351H6".equals(stringDepartNoSet))
      stringDepartNoSet = "0351H40A"; // 2013-11-25
    // 2014-05-27 B3018 修改
    String stringProjectID1L = getProjectIDFromDepartNoUnion("", stringDepartNoSet, exeUtil);
    if (",SD,SE,SF,SG,X23,X6,X15,X40,XA,XB,XD,XJ,XP,XQ,XX,XZ,".indexOf("," + stringProjectID1L + ",") != -1) {
      stringDepartNoSet = "033" + stringProjectID1L;
    }
    if (stringDepartNoSet.length() > 8) {
      stringDepartNoSet = exeUtil.doSubstring(stringDepartNoSet, 0, 8);
    }
    if ("12".equals(stringComNo) && "034O1".equals(stringDepartNoSet))
      stringDepartNoSet = "134O1";
    return stringDepartNoSet;
  }

  public int putDebitDoc2M012_2(int intFlowNo, String stringRowtype, Vector vectorDoc5M022, String[][] retDoc2M013, Hashtable hashtableDoc2M010, Hashtable hashtableDiscountMoney,
      Vector vectorCostIDNullData, Vector retVector, Vector retVectorNeg, FargloryUtil exeUtil) throws Throwable {
    System.out.println("[putDebitDoc2M012_2]---------------------------------------S");
    String stringAcctountType = "" + hashtableDoc2M010.get("AcctountType");// 0預設 1(5681-2146) 2(6201-2147) 3(5681-6201,2146/2147)
    String stringAccountNoFirst = "";
    String stringAccountNo = "";
    String stringAccountNo4 = "";
    String stringBarCode = "" + hashtableDoc2M010.get("BarCode");
    String stringComNo = "" + hashtableDoc2M010.get("ComNo");
    String stringDepartNoFirst = "" + hashtableDoc2M010.get("DepartNoFirst");
    String stringComNoType = "" + hashtableDoc2M010.get("ComType");
    String stringAmt2146 = "" + hashtableDoc2M010.get("Amt2146");
    String stringAmt2147 = "" + hashtableDoc2M010.get("Amt2147");
    String stringCostID = "";
    String stringCostID1 = "";
    String stringDepartNoSet = "";
    String stringFactoryNo = "";
    String stringKey = "";
    String stringRealMoney = "";
    String stringType = "";
    String stringVoucherYMD = "";
    String stringVoucherFlowNo = "";
    String stringVoucherSeqNo = "";
    String stringDescript = "" + hashtableDoc2M010.get("Descrip");
    String stringCostName = "";
    String stringDbCrCd = "";
    String[] arrayDescript = null;
    String[] arrayTempData = null;
    String[][] retDoc5M0224 = getDoc5M0224(stringBarCode, "");
    String[][] retFED1012 = null;
    Vector vectorDescrip = new Vector();
    Vector vectorVoucherData = new Vector();// NEW
    Vector vectorVoucherDataKey = new Vector();// NEW
    double doubleTotalAmt = 0;
    double doubleTotalNoTaxAmt = 0;
    double doubleAmt2146 = exeUtil.doParseDouble(stringAmt2146);
    double doubleAmt2147 = exeUtil.doParseDouble(stringAmt2147);
    boolean booleanComNoType = "E".equals(stringComNoType);
    //
    // 繳納暫繳營所稅、繳納暫繳營所稅及未分配盈餘稅 處理方式 8111 ;
    /*
     * if("F282302,F282301,".indexOf(stringCostID)==-1 && retDoc5M0224.length==0) {
     * System.out.println("立沖資料為零--------------------------------") ; return 0 ; }
     */
    String stringAcctNoType = "";
    String stringRealTotalMoney = "";
    String[][] retDoc7M0552 = null;
    boolean boolean110301 = false;
    Vector vectorNormalDoc2M012 = new Vector();
    Hashtable hashtableDoc5M022 = null;
    for (int intNo = 0; intNo < vectorDoc5M022.size(); intNo++) {
      hashtableDoc5M022 = (Hashtable) vectorDoc5M022.get(intNo);
      if (hashtableDoc5M022 == null)
        continue;
      stringAcctNoType = "" + hashtableDoc5M022.get("InOut");
      stringCostID = "" + hashtableDoc5M022.get("CostID");
      stringRealMoney = "" + hashtableDoc5M022.get("RealMoney");
      stringRealTotalMoney = "" + hashtableDoc5M022.get("RealTotalMoney");
      doubleTotalNoTaxAmt += exeUtil.doParseDouble(stringRealMoney);
      doubleTotalAmt += exeUtil.doParseDouble(stringRealTotalMoney);
      //
      System.out.println(intNo + "[putDebitDoc2M012_2]-----TotalAmt(" + doubleTotalAmt + ") --------------------------------");
      //
      if (!"".equals(stringAcctNoType)) {
        vectorNormalDoc2M012.add(hashtableDoc5M022);
      }
      //
      if (",A010451,A010452,A010453,A010454,A010455,A010456,".indexOf("," + stringCostID + ",") != -1)
        boolean110301 = true;
      if (retDoc5M0224.length == 0 && intNo == 0) {
        stringAccountNoFirst = getAcctNoDoc7M057(stringComNo, stringCostID, "I");
        if ("".equals(stringAccountNoFirst)) {
          // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD 4 ACCT_OUT(分攤)
          retDoc7M0552 = getDoc7M0552(stringCostID, stringComNoType, "I", "");
          if (retDoc7M0552.length == 0) {
            System.out.println("查無 Doc7M0552 --------------------------------");
            return 0;
          }
          stringAccountNoFirst = retDoc7M0552[0][3].trim();
        }
      }
    }
    // 0 BarCode 1 VOUCHER_YMD 2 VOUCHER_FLOW_NO 3 VOUCHER_SEQ_NO 4 FactoryNo 5 Amt
    // 6 CostID 7 CostID1
    String[][] retFED1005 = null;
    for (int intNo = 0; intNo < retDoc5M0224.length; intNo++) {
      stringVoucherYMD = retDoc5M0224[intNo][1].trim();
      stringVoucherFlowNo = retDoc5M0224[intNo][2].trim();
      stringVoucherSeqNo = retDoc5M0224[intNo][3].trim();
      stringFactoryNo = retDoc5M0224[intNo][4].trim();
      stringRealMoney = retDoc5M0224[intNo][5].trim();
      stringCostID = retDoc5M0224[intNo][6].trim();
      //
      hashtableDoc2M010.put("Temp", stringCostID);
      //
      if (intNo == 0)
        hashtableDoc2M010.put("FactoryNo", stringFactoryNo);
      // 0 DB_CR_CD 1 ACCT_NO 2 DEPT_CD 3 OBJECT_CD 4 AMT
      // 5 EXCHANG_AMT 6 MONTEARY 7 STATUS_CD 8 DESCRIPTION_1 9 DESCRIPTION_2
      // 10 DESCRIPTION_3 11 DESCRIPTION_4 12 DESCRIPTION_5 13 DESCRIPTION 14
      // LAST_USER
      // 15 LAST_YMD
      retFED1012 = getFED1012(stringVoucherYMD, stringVoucherFlowNo, stringVoucherSeqNo, stringComNo, "0", booleanComNoType);
      if (retFED1012.length <= 0) {
        System.out.println("查無立沖資料--------------------------------");
        return 0;
      }
      stringAccountNo = retFED1012[0][1].trim();
      stringDepartNoSet = retFED1012[0][2].trim();
      arrayDescript = new String[5]; // 明細一至明細五
      arrayDescript[0] = retFED1012[0][8].trim();
      arrayDescript[1] = retFED1012[0][9].trim();
      arrayDescript[2] = retFED1012[0][10].trim();
      arrayDescript[3] = retFED1012[0][11].trim();
      arrayDescript[4] = retFED1012[0][12].trim();
      stringDbCrCd = retFED1012[0][0].trim();
      //
      if (intNo == 0)
        stringAccountNoFirst = stringAccountNo;
      if (intNo == 0)
        stringDepartNoFirst = stringDepartNoSet;
      //
      // AcctountType
      if ("".equals(stringAcctountType)) {
        if ("12,10,".indexOf(stringComNo) != -1) {
          stringAcctountType = "1";
        } else {
          if (stringAccountNo.length() > 4) {
            stringAccountNo4 = stringAccountNo.substring(0, 4);
            if ("1231,1232,1234,1664,1661,5681".indexOf(stringAccountNo4 + "") != -1) {
              if (!"3".equals(stringAcctountType))
                stringAcctountType = ("2".equals(stringAcctountType)) ? "3" : "1";
            } else {
              if (!"3".equals(stringAcctountType))
                stringAcctountType = ("1".equals(stringAcctountType)) ? "3" : "2";
            }
          } else {
            if (!"3".equals(stringAcctountType))
              stringAcctountType = ("1".equals(stringAcctountType)) ? "3" : "2";
          }
        }
      }
      if ("1".equals(stringAcctountType)) {
        doubleAmt2146 += exeUtil.doParseDouble(stringRealTotalMoney);
      } else {
        doubleAmt2147 += exeUtil.doParseDouble(stringRealTotalMoney);
      }
      stringKey = stringAccountNo + "---" + stringDepartNoSet + "---" + stringFactoryNo + "---" + (intNo + 1);
      System.out.println(intNo + "--------------------------------stringKey[" + stringKey + "]");
      //
      arrayTempData = new String[10];
      vectorVoucherDataKey.add(stringKey);
      vectorVoucherData.add(arrayTempData);
      vectorDescrip.add(arrayDescript);
      //
      if (",F282302,F282303,".indexOf("," + stringCostID + ",") != -1) {
        // 2013-05-30 修正
        stringCostName = getCost4Name(stringCostID);
      } else {
        stringCostName = "";
      }
      //
      retFED1005 = getFED1005(stringFactoryNo);
      if (retFED1005.length == 0)
        stringFactoryNo = "Z0001";
      arrayTempData[0] = "D".equals(stringDbCrCd) ? "A" : "B";
      arrayTempData[1] = "" + (intNo + 1);
      arrayTempData[2] = stringAccountNo;
      arrayTempData[3] = stringDepartNoSet;
      arrayTempData[4] = stringFactoryNo;
      arrayTempData[5] = convert.FourToFive("" + Math.abs(exeUtil.doParseDouble(stringRealMoney) + exeUtil.doParseDouble(arrayTempData[5])), 0);
      arrayTempData[6] = "";
      arrayTempData[7] = "";
      arrayTempData[8] = stringRowtype;
      arrayTempData[9] = stringCostName;
      // NEW END
      // if(exeUtil.doParseDouble(stringRealMoney) < 0) {
      // arrayTempData[0] = "A" ; // NEW
      // stringRealMoney = convert.FourToFive(""+
      // Math.abs(exeUtil.doParseDouble(stringRealMoney)),0) ;
      // } else {
      // arrayTempData[0] = "B" ; // NEW
      // }
      // arrayTempData[5] =
      // convert.FourToFive(""+(exeUtil.doParseDouble(stringRealMoney) +
      // exeUtil.doParseDouble(arrayTempData[5])), 0) ;
    }
    //
    if (vectorNormalDoc2M012.size() == 0
        && "F273701,F282201,F282301,F283601,F283701,F283702,F283703,F283704,F283802,F282303,F282302,F283101,F283102,F283103,F283201,F283202,F283203,F283204,F283205,F283206,F283207,F283299,F283301,F283401,F283501,F283502,"
            .indexOf(stringCostID) != -1) {
      // 無營業稅憑證大於費用合計之金額，使用 8111
      if (",F282302,F282303,".indexOf("," + stringCostID + ",") != -1) {
        // 2013-05-30 修正
        doubleTotalAmt = doF282302_2(stringBarCode, stringCostID, stringDepartNoFirst, "B", doubleTotalAmt, vectorDescrip, vectorVoucherData, vectorVoucherDataKey, retDoc2M013,
            exeUtil);
      }
      // else {
      // doubleTotalAmt = doF282302(stringBarCode, stringCostID, stringDepartNoFirst,
      // stringRowtype, doubleTotalAmt, vectorDescrip, vectorVoucherData,
      // vectorVoucherDataKey,retDoc2M013, exeUtil) ;
      // }
      doubleTotalNoTaxAmt = doubleTotalAmt;
    }
    System.out.println("doubleTotalAmt[" + doubleTotalAmt + "]----------------------------");
    System.out.println("doubleTotalNoTaxAmt[" + doubleTotalNoTaxAmt + "]----------------------------");
    System.out.println("doF282302[" + intFlowNo + "]vectorVoucherData[" + vectorVoucherData.size() + "]-----------------------");
    //
    Object objectTemp;
    int intPosL = 0;
    boolean booleanFlag = false;
    String[] arrayKey = (String[]) vectorVoucherDataKey.toArray(new String[0]);
    Arrays.sort(arrayKey);
    for (int intNo = 0; intNo < vectorVoucherData.size(); intNo++) {
      intPosL = intNo;
      //
      stringKey = arrayKey[intNo].trim(); // System.out.println(intNo+"---------------------["+stringKey+"]") ;
      intPosL = vectorVoucherDataKey.indexOf(stringKey);
      arrayTempData = (String[]) vectorVoucherData.get(intPosL);
      //
      objectTemp = vectorDescrip.get(intPosL);
      if (objectTemp == null) {
        arrayDescript = null;
      } else {
        arrayDescript = (String[]) objectTemp;
        for (int intNoL = 0; intNoL < arrayDescript.length; intNoL++) {
          if ("null".equals("" + arrayDescript[intNoL])) {
            arrayDescript = null;
            break;
          }
          if (!"".equals("" + arrayDescript[intNoL]))
            booleanFlag = true;
        }
      }
      if (!booleanFlag)
        arrayDescript = null;
      if ("".equals(arrayTempData[9])) {
        hashtableDoc2M010.put("Descrip", stringDescript);
      } else {
        hashtableDoc2M010.put("Descrip", arrayTempData[9]);
      }
      //
      if ("A".equals(arrayTempData[0])) {
        putIntoVector2(arrayTempData[8], arrayTempData[1], intFlowNo, "C", arrayTempData[2], arrayTempData[3], arrayTempData[4], arrayTempData[5], "", arrayTempData[6],
            arrayTempData[7], hashtableDoc2M010, arrayDescript, retVectorNeg, exeUtil);
      } else {
        intFlowNo = putIntoVector2(arrayTempData[8], arrayTempData[1], intFlowNo, "D", arrayTempData[2], arrayTempData[3], arrayTempData[4], arrayTempData[5], "", arrayTempData[6],
            arrayTempData[7], hashtableDoc2M010, arrayDescript, retVector, exeUtil);
        System.out.println("intFlowNo[" + intFlowNo + "]------------------------");
      }
    }
    // 非立沖之費用表格新增傳票分錄 2013-08-13 START
    String stringDepartNo = "";
    String stringInOut = "";
    String stringProjectID = "";
    String stringProjectID1 = "";
    String[] arrayDoc2M012 = null;
    Hashtable hashtableInOut = new Hashtable();
    //
    if (vectorNormalDoc2M012.size() > 0) {
      if (retDoc2M013.length > 0) {
        stringFactoryNo = retDoc2M013[retDoc2M013.length - 1][0].trim();
      }
      for (int intNo = 0; intNo < vectorNormalDoc2M012.size(); intNo++) {
        arrayDoc2M012 = (String[]) vectorNormalDoc2M012.get(intNo);
        if (arrayDoc2M012 == null)
          continue;
        //
        stringAcctNoType = arrayDoc2M012[0].trim();
        stringInOut = getInOutDoc7M0551H(stringAcctNoType, hashtableInOut);
        stringDepartNo = arrayDoc2M012[1].trim();
        stringProjectID = arrayDoc2M012[2].trim();
        stringProjectID1 = arrayDoc2M012[3].trim();
        stringCostID = arrayDoc2M012[4].trim();
        stringRealMoney = arrayDoc2M012[6].trim();
        // 會計科目
        // 特殊公司-請款代碼之會計科目
        stringAccountNo = getAcctNoDoc7M057(stringComNo, stringCostID, stringAcctNoType);
        // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD 4 ACCT_OUT(分攤)
        if ("".equals(stringAccountNo)) {
          retDoc7M0552 = getDoc7M0552(stringCostID, stringComNoType, stringAcctNoType, "");
          if (retDoc7M0552.length == 0) {
            System.out.println("查無 Doc7M0552 --------------------------------");
            return 0;
          }
          stringAccountNo = retDoc7M0552[0][3].trim();
        }
        // 新部門邏輯
        stringDepartNoSet = getVoucherDepartNoDoc5(stringComNo, stringComNoType, stringAcctNoType, stringDepartNo, stringProjectID, stringProjectID1, stringAccountNo,
            hashtableInOut, exeUtil);
        //
        if ("1".equals(stringAcctountType)) {
          doubleAmt2146 += exeUtil.doParseDouble(stringRealTotalMoney);
        } else {
          doubleAmt2147 += exeUtil.doParseDouble(stringRealTotalMoney);
        }
        // 公司為 東源，部門為 034H851.034H931. 234O61 時，將會計科目 1234 置換為 5881
        if ("10".equals(stringComNo) && ",034H851,034H931,234O61,".indexOf(stringDepartNoSet) != -1) {
          stringAccountNo = stringAccountNo.replaceAll("1234", "5881");
        }
        //
        if ("12".equals(stringComNo) && "234D1E".equals(arrayTempData[3])) {
          Vector vectorTemp = new Vector();
          String[] arrayTemp = null;
          String[] arrayData = null;
          String[] arrayMoney = null;
          String[] arrayRatio = { "50", "32", "18" };
          String[] arrayDepartNo = { "234D1E", "234D1F", "234D1G" };
          putIntoVector2(stringRowtype, "" + (retVector.size() + 1), intFlowNo, "D", stringAccountNo, stringDepartNoSet, stringFactoryNo, stringRealMoney, "", "", "",
              hashtableDoc2M010, arrayDescript, vectorTemp, exeUtil);
          //
          arrayData = (String[]) vectorTemp.get(0);
          arrayMoney = exeUtil.getMoneyFromRatio(arrayData[13], arrayRatio);
          for (int intNoL = 0; intNoL < arrayMoney.length; intNoL++) {
            arrayTemp = exeUtil.doCopyArray(arrayData);
            //
            intFlowNo++;
            arrayTemp[6] = "" + intFlowNo;
            arrayTemp[11] = arrayDepartNo[intNoL];
            arrayTemp[13] = arrayMoney[intNoL];
            retVector.add(arrayTemp);
          }
        } else {
          intFlowNo = putIntoVector2(stringRowtype, "" + (retVector.size() + 1), intFlowNo, "D", stringAccountNo, stringDepartNoSet, stringFactoryNo, stringRealMoney, "", "", "",
              hashtableDoc2M010, arrayDescript, retVector, exeUtil);
        }
      }
    }
    // 非立沖之費用表格新增傳票分錄 2013-08-13 END
    // System.out.println("vectorVoucherData["+intFlowNo+"]------------------------");
    // System.out.println("doubleTotalAmt["+doubleTotalAmt+"]----------------3------------");
    // System.out.println("doubleTotalNoTaxAmt["+doubleTotalNoTaxAmt+"]------3----------------------");
    //
    String string110301 = boolean110301 ? "Y" : "N";
    // 回傳
    hashtableDoc2M010.put("Descrip", stringDescript); // 摘要
    hashtableDoc2M010.put("AccFirst", stringAccountNoFirst);
    hashtableDoc2M010.put("DepartNoFirst", stringDepartNoFirst);
    hashtableDoc2M010.put("AcctountType", stringAcctountType);
    hashtableDoc2M010.put("Amt2146", convert.FourToFive("" + doubleAmt2146, 0));
    hashtableDoc2M010.put("Amt2147", convert.FourToFive("" + doubleAmt2147, 0));
    hashtableDoc2M010.put("TotalNoTaxAmt", convert.FourToFive("" + doubleTotalNoTaxAmt, 0));
    hashtableDoc2M010.put("TotalAmt", convert.FourToFive("" + doubleTotalAmt, 0));
    hashtableDoc2M010.put("Temp", stringType + "%-%" + string110301);
    System.out.println("[putDebitDoc2M012_2]---------------------------------------E");
    return intFlowNo;
  }

  // 退保留款
  public int putDebitDoc2M012_3(int intFlowNo, String stringRetainBarCode, String stringRowtype, Hashtable hashtableDoc2M010, Vector retVector, Vector retVectorNeg,
      FargloryUtil exeUtil) throws Throwable {
    System.out.println("[putDebitDoc2M012_3]---------------------------------------S");
    String stringAmt = "";
    String stringBarCode = "" + hashtableDoc2M010.get("BarCode");
    String stringBarCodeL = "";
    String stringComNo = "" + hashtableDoc2M010.get("ComNo");
    String stringFactoryNo = "" + hashtableDoc2M010.get("FactoryNo");
    String stringSql = "";
    String stringWriteRetainMoney = "" + hashtableDoc2M010.get("TotalAmt");
    String stringKindNo = "" + hashtableDoc2M010.get("KindNoPur");
    String stringKindNoL = "" + hashtableDoc2M010.get("KindNo");
    String stringAmt2146 = "" + hashtableDoc2M010.get("Amt2146");
    String stringAmt2147 = "" + hashtableDoc2M010.get("Amt2147");
    String[] arrayTemp = null;
    String[][] retDoc5M020 = getDoc2M010Union("Doc5M020", stringRetainBarCode);
    Vector vectorDoc5M02201 = new Vector();
    double doubleAmt2146 = exeUtil.doParseDouble(stringAmt2146);
    double doubleAmt2147 = exeUtil.doParseDouble(stringAmt2147);
    if (retDoc5M020.length == 0) {
      System.out.println("退保留-請購單----------------------");
      // 由 stringRetainBarCode 找到 [所有的請購單號]
      String[][] retDoc5M011 = getDoc3M011Union("Doc5M011", stringRetainBarCode);
      if (retDoc5M011.length == 0) {
        System.out.println("此次轉傳票請款條碼編號(" + stringBarCode + ")，查無對應之請購條碼編號(" + stringRetainBarCode + ")請購資訊。");
        return 0;
      }
      String stringPurchaseNo = retDoc5M011[0][1].trim();
      Vector vectorPurchaseNo = new Vector();
      vectorPurchaseNo.add(stringPurchaseNo);
      Vector vectorAllPurchaseNo = getAllPurchaseNo(stringComNo, stringFactoryNo, vectorPurchaseNo, "", " AND  KindNo  =  '" + stringKindNoL + "' ", false);
      if (vectorAllPurchaseNo.size() == 0) {
        System.out.println("此次轉傳票請款條碼編號(" + stringBarCode + ")，查無對應之請款條碼編號(" + stringRetainBarCode + ")請購資訊。");
        return 0;
      }
      // 由 [所有的請購單號] 找到對應的 [Doc5M020 資料(已轉傳票)(依時間排列)]
      String[][] retDoc5M020L = getDoc5M020(stringComNo, stringFactoryNo, stringKindNoL, vectorAllPurchaseNo, false);
      if (retDoc5M020L.length == 0) {
        System.out.println("此次轉傳票請款條碼編號(" + stringBarCode + ")，查無保留金額之請款條碼編號。");
        return 0;
      }
      // 已使用的退保留金額
      // 0 BarCode 1 RetainMoney
      stringSql = "";
      for (int intNo = 0; intNo < retDoc5M020L.length; intNo++) {
        stringBarCodeL = retDoc5M020L[intNo][0].trim();
        if (!"".equals(stringSql))
          stringSql += ", ";
        stringSql += " '" + stringBarCodeL + "' ";
      }
      stringSql = " AND  BarCode  <>  '" + stringBarCode + "' " + " AND  BarCodeRef  IN  (" + stringSql + ") ";
      Hashtable hashtableBarCodeRef = new Hashtable();
      String stringBarCodeRef = "";
      String stringBackRetainMoney = "";
      String[][] retDoc5M02201 = getDoc5M02201("", "", stringSql);
      double dobuleBackRetainMoney = 0;
      // 0 BarCode 1 BarCodeRef 2 BackRetainMoney
      for (int intNo = 0; intNo < retDoc5M02201.length; intNo++) {
        stringBarCodeRef = retDoc5M02201[intNo][1].trim();
        stringBackRetainMoney = retDoc5M02201[intNo][2].trim();
        //
        dobuleBackRetainMoney = exeUtil.doParseDouble(stringBackRetainMoney) + exeUtil.doParseDouble("" + hashtableBarCodeRef.get(stringBarCodeRef));
        stringBackRetainMoney = convert.FourToFive("" + dobuleBackRetainMoney, 0);
        hashtableBarCodeRef.put(stringBarCodeRef, stringBackRetainMoney);
      }
      // 依序判斷，建立 [退保留款沖銷表格 Doc5M02201]
      String stringRetainMoneyUseL = "";
      String stringRetainMoneySumL = "";
      String stringRetainMoneyL = "";
      double doubleCanRetainMoneyL = 0;
      double doubleBackRetainMoneyL = 0;
      double doubleThisRetainMoneyL = exeUtil.doParseDouble(stringWriteRetainMoney);
      boolean booleanFlag = true;
      for (int intNo = 0; intNo < retDoc5M020L.length; intNo++) {
        stringBarCodeL = retDoc5M020L[intNo][0].trim();
        stringRetainMoneySumL = retDoc5M020L[intNo][1].trim();
        stringRetainMoneyUseL = "" + hashtableBarCodeRef.get(stringBarCodeL);
        doubleCanRetainMoneyL = exeUtil.doParseDouble(stringRetainMoneySumL) - exeUtil.doParseDouble(stringRetainMoneyUseL);
        booleanFlag = doubleCanRetainMoneyL > doubleThisRetainMoneyL;
        //
        if (doubleCanRetainMoneyL <= 0)
          continue;
        //
        if (booleanFlag) {
          // 結束
          doubleBackRetainMoneyL = doubleThisRetainMoneyL;
        } else {
          doubleBackRetainMoneyL = doubleCanRetainMoneyL;
          doubleThisRetainMoneyL -= doubleCanRetainMoneyL;
        }
        if (doubleBackRetainMoneyL == 0)
          continue;
        //
        arrayTemp = new String[4];
        arrayTemp[0] = stringBarCode;
        arrayTemp[1] = stringBarCodeL;
        arrayTemp[2] = convert.FourToFive("" + doubleBackRetainMoneyL, 0);
        vectorDoc5M02201.add(arrayTemp);
        if (booleanFlag)
          break;// 結束
      }
    } else {
      System.out.println("退保留-請款單----------------------");
      String[][] retDoc5M02201L = getDoc5M02201("", stringRetainBarCode, " AND  BarCode  <>  '" + stringBarCode + "' ");
      double doubleBackRetainMoney = 0;
      for (int intNo = 0; intNo < retDoc5M02201L.length; intNo++) {
        doubleBackRetainMoney += exeUtil.doParseDouble(retDoc5M02201L[intNo][2].trim());
      }
      doubleBackRetainMoney += exeUtil.doParseDouble(stringWriteRetainMoney);
      doubleBackRetainMoney = exeUtil.doParseDouble(convert.FourToFive("" + doubleBackRetainMoney, 0));
      if (doubleBackRetainMoney > exeUtil.doParseDouble(retDoc5M020[0][13].trim())) {
        System.out.println("請款申請書之沖銷合計(" + exeUtil.getFormatNum2("" + doubleBackRetainMoney) + ") 大於可沖銷金額(" + exeUtil.getFormatNum2(stringWriteRetainMoney) + ")");
        return 0;
      }
      arrayTemp = new String[4];
      arrayTemp[0] = stringBarCode;
      arrayTemp[1] = stringRetainBarCode;
      arrayTemp[2] = stringWriteRetainMoney;
      vectorDoc5M02201.add(arrayTemp);
    }
    if (vectorDoc5M02201.size() == 0) {
      System.out.println("Doc5M02201 資料發生錯誤，請洽資訊室。");
      return 0;
    }
    Vector vectorSql = new Vector();
    Vector vectorVoucherDataKey = new Vector();
    Vector vectorVoucherData = new Vector();
    Vector vectorDescrip = new Vector();
    String stringVoucherYMD = "";
    String stringVoucherFlowNo = "";
    String stringVoucherSeqNo = "";
    String stringAccountNoFirst = "";
    String stringAccountNo = "";
    String stringAccountNo4 = "";
    String stringAcctountType = "";
    String stringDepartNoFirst = "";
    String stringDepartNoSet = "";
    String stringKey = "";
    String[] arrayDescript = null;
    String[] arrayTempData = null;
    String[][] retDoc2M014 = null;
    String[][] retFED1012 = null;
    String[][] retFED1005 = null;
    // 刪除 Doc5M02201
    stringSql = "DELETE  FROM  Doc5M02201  WHERE  BarCode  =  '" + stringBarCode + "'  ";
    vectorSql.add(stringSql);
    // 新增 Doc5M02201
    for (int intNo = 0; intNo < vectorDoc5M02201.size(); intNo++) {
      arrayTemp = (String[]) vectorDoc5M02201.get(intNo);
      //
      if (arrayTemp == null) {
        System.out.println("資料發生錯誤，請洽資訊室。");
        return 0;
      }
      // 新增 Doc5M02201 BarCode BarCodeRef BackRetainMoney
      stringBarCode = arrayTemp[0];
      stringBarCodeL = arrayTemp[1];
      stringAmt = arrayTemp[2];
      stringSql = " INSERT  INTO  Doc5M02201 (BarCode,               BarCodeRef,            BackRetainMoney,  RecordNo)  " + " VALUES ( '" + stringBarCode + "',  '"
          + stringBarCodeL + "',  " + stringAmt + ",  " + (intNo + 1) + " ) ";
      vectorSql.add(stringSql);
      // 0 ACCT_NO 1 VOUCHER_YMD 2 VOUCHER_FLOW_NO 3 VOUCHER_SEQ_NO 4 COMPANY_CD
      // 5 KIND 6 AMT
      retDoc2M014 = getDoc2M014Union(stringBarCodeL, "I", "");
      // 0 DB_CR_CD 1 ACCT_NO 2 DEPT_CD 3 OBJECT_CD 4 AMT
      // 5 EXCHANG_AMT 6 MONTEARY 7 STATUS_CD 8 DESCRIPTION_1 9 DESCRIPTION_2
      // 10 DESCRIPTION_3 11 DESCRIPTION_4 12 DESCRIPTION_5 13 DESCRIPTION 14
      // LAST_USER
      // 15 LAST_YMD
      stringVoucherYMD = exeUtil.getDateConvertRoc(retDoc2M014[0][1].trim()).replaceAll("/", "").trim();
      stringVoucherFlowNo = retDoc2M014[0][2].trim();
      stringVoucherSeqNo = retDoc2M014[0][3].trim();
      stringComNo = retDoc2M014[0][4].trim();
      retFED1012 = getFED1012(stringVoucherYMD, stringVoucherFlowNo, stringVoucherSeqNo, stringComNo, "0");
      if (retFED1012.length <= 0) {
        System.out.println("查無立沖資料--------------------------------");
        return 0;
      }
      stringAccountNo = retFED1012[0][1].trim();
      stringDepartNoSet = retFED1012[0][2].trim();
      stringFactoryNo = retFED1012[0][3].trim();
      stringKey = stringAccountNo + "---" + stringDepartNoSet + "---" + stringFactoryNo + "---" + (intNo + 1);
      retFED1005 = getFED1005(stringFactoryNo);
      if (retFED1005.length == 0)
        stringFactoryNo = "Z0001";
      arrayDescript = new String[5]; // 明細一至明細五
      arrayDescript[0] = retFED1012[0][8].trim();
      arrayDescript[1] = retFED1012[0][9].trim();
      arrayDescript[2] = retFED1012[0][10].trim();
      arrayDescript[3] = retFED1012[0][11].trim();
      arrayDescript[4] = retFED1012[0][12].trim();
      //
      arrayTempData = new String[9];
      arrayTempData[0] = "B";// 借方
      arrayTempData[1] = "" + (intNo + 1);
      arrayTempData[2] = stringAccountNo;
      arrayTempData[3] = stringDepartNoSet;
      arrayTempData[4] = stringFactoryNo;
      arrayTempData[5] = convert.FourToFive("" + (exeUtil.doParseDouble(stringAmt)), 0);
      arrayTempData[6] = "";
      arrayTempData[7] = "";
      arrayTempData[8] = stringRowtype;
      //
      vectorVoucherDataKey.add(stringKey);
      vectorVoucherData.add(arrayTempData);
      vectorDescrip.add(arrayDescript);
      //
      if (intNo == 0)
        stringAccountNoFirst = stringAccountNo;
      if (intNo == 0)
        stringDepartNoFirst = stringDepartNoSet;
      // AcctountType
      if ("".equals(stringAcctountType)) {
        if ("12,10,".indexOf(stringComNo) != -1) {
          stringAcctountType = "1";
        } else {
          if (stringAccountNo.length() > 4) {
            stringAccountNo4 = stringAccountNo.substring(0, 4);
            if ("1231,1232,1234,1664,1661,5681".indexOf(stringAccountNo4 + "") != -1) {
              if (!"3".equals(stringAcctountType))
                stringAcctountType = ("2".equals(stringAcctountType)) ? "3" : "1";
            } else {
              if (!"3".equals(stringAcctountType))
                stringAcctountType = ("1".equals(stringAcctountType)) ? "3" : "2";
            }
          } else {
            if (!"3".equals(stringAcctountType))
              stringAcctountType = ("1".equals(stringAcctountType)) ? "3" : "2";
          }
        }
      }
      if ("1".equals(stringAcctountType)) {
        doubleAmt2146 += exeUtil.doParseDouble(stringAmt);
      } else {
        doubleAmt2147 += exeUtil.doParseDouble(stringAmt);
      }
    }
    /*
     * 一次沖銷 intFlowNo = putIntoVector1(stringRowtype, "0", intFlowNo, "D",
     * stringAccountNoFirst, stringDepartNoFirst, "", stringWriteRetainMoney,
     * hashtableDoc2M010, retVector, exeUtil); }
     */
    // 建立 Doc5M02201
    doExecVectorSqlForDoc(vectorSql);
    //
    // if("P02754".equals(stringBarCode)) {
    Object objectTemp;
    int intPosL = 0;
    boolean booleanFlag = false;
    String[] arrayKey = (String[]) vectorVoucherDataKey.toArray(new String[0]);
    // Arrays.sort(arrayKey) ;
    for (int intNo = 0; intNo < vectorVoucherData.size(); intNo++) {
      intPosL = intNo;
      //
      stringKey = arrayKey[intNo].trim(); // System.out.println(intNo+"---------------------["+stringKey+"]") ;
      intPosL = vectorVoucherDataKey.indexOf(stringKey);
      arrayTempData = (String[]) vectorVoucherData.get(intPosL);
      //
      objectTemp = vectorDescrip.get(intPosL);
      if (objectTemp == null) {
        arrayDescript = null;
      } else {
        arrayDescript = (String[]) objectTemp;
        for (int intNoL = 0; intNoL < arrayDescript.length; intNoL++) {
          if ("null".equals("" + arrayDescript[intNoL])) {
            arrayDescript = null;
            break;
          }
          if (!"".equals("" + arrayDescript[intNoL]))
            booleanFlag = true;
        }
      }
      if (!booleanFlag)
        arrayDescript = null;
      if ("A".equals(arrayTempData[0])) {
        putIntoVector2(arrayTempData[8], arrayTempData[1], intFlowNo, "C", arrayTempData[2], arrayTempData[3], arrayTempData[4], arrayTempData[5], "", arrayTempData[6],
            arrayTempData[7], hashtableDoc2M010, arrayDescript, retVectorNeg, exeUtil);
      } else {
        intFlowNo = putIntoVector2(arrayTempData[8], arrayTempData[1], intFlowNo, "D", arrayTempData[2], arrayTempData[3], arrayTempData[4], arrayTempData[5], "", arrayTempData[6],
            arrayTempData[7], hashtableDoc2M010, arrayDescript, retVector, exeUtil);
        System.out.println("intFlowNo[" + intFlowNo + "]------------------------");
      }
    }
    // }
    // System.out.println("vectorVoucherData["+intFlowNo+"]------------------------");
    // System.out.println("doubleTotalAmt["+doubleTotalAmt+"]----------------3------------");
    // System.out.println("doubleTotalNoTaxAmt["+doubleTotalNoTaxAmt+"]------3----------------------");
    //
    hashtableDoc2M010.put("AccFirst", stringAccountNoFirst);
    hashtableDoc2M010.put("DepartNoFirst", stringDepartNoFirst);
    hashtableDoc2M010.put("AcctountType", stringAcctountType);
    hashtableDoc2M010.put("Amt2146", convert.FourToFive("" + doubleAmt2146, 0));
    hashtableDoc2M010.put("Amt2147", convert.FourToFive("" + doubleAmt2147, 0));
    hashtableDoc2M010.put("Temp", "");
    // 回傳
    System.out.println("[putDebitDoc2M012_3]---------------------------------------E");
    return intFlowNo;
  }

  // 由 [所有的請購單號] 找到對應的 [Doc5M020 資料(已轉傳票)(依時間排列)]
  public String[][] getDoc5M020(String stringComNo, String stringFactoryNo, String stringKindNoL, Vector vectorPurchaseNo, boolean booleanSource) throws Throwable {
    String stringTable17 = booleanSource ? "Doc2M017" : "Doc5M027";
    String stringTable10 = booleanSource ? "Doc2M010" : "Doc5M020";
    String stringSql = "";
    String stringPurchaseNoSql = getPurchaseNoSql(vectorPurchaseNo);
    String[][] retDoc5M020 = null;
    Hashtable hashtableDocNo = new Hashtable();
    Hashtable hashtableBarCode = new Hashtable();
    Vector vectorEDateTime = new Vector();
    //
    // 請款 0 BarCode 1 RetainMoney
    stringSql = "SELECT  M10.BarCode,  M10.RetainMoney " + " FROM  " + stringTable17 + " M17,  " + stringTable10 + " M10 " + " WHERE  M17.BarCode  =  M10.BarCode "
        + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.KindNo  =  '" + stringKindNoL + "' " + " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' "
        + " AND  M17.PurchaseNo  IN (" + stringPurchaseNoSql + ") " + " AND  M10.BarCode  IN  (SELECT  BarCode  FROM  Doc2M014  WHERE  STATUS_CD  = 'Z') "
        + " ORDER BY  EDateTime ";
    retDoc5M020 = dbDoc.queryFromPool(stringSql);
    //
    return retDoc5M020;
  }

  // 20090525
  public double doF282302(String stringBarCode, String stringCostID, String stringDepartNoFirst, String stringRowtypeL, double doubleTotalAmt, Vector vectorDescrip,
      Vector vectorVoucherData, Vector vectorVoucherDataKey, String[][] retDoc2M013, FargloryUtil exeUtil) throws Throwable {
    System.out.println("[doF282302]---------------------------------------S");
    String stringFactoryNo = "";
    String stringAmt = "";
    String[][] retDoc5M0224 = getDoc5M0224(stringBarCode, "");
    Hashtable hashtableAmt = new Hashtable();
    //
    if ("F282302,".indexOf(stringCostID) == -1 && retDoc5M0224.length == 0)
      return 0;
    //
    // 0 BarCode 1 VOUCHER_YMD 2 VOUCHER_FLOW_NO 3 VOUCHER_SEQ_NO 4 FactoryNo 5 Amt
    // 6 CostID 7 CostID1
    Vector vectorFactoryNo = new Vector();
    for (int intNo = 0; intNo < retDoc5M0224.length; intNo++) {
      stringFactoryNo = retDoc5M0224[intNo][4].trim();
      stringAmt = "" + (exeUtil.doParseDouble("" + hashtableAmt.get(stringFactoryNo)) + exeUtil.doParseDouble(retDoc5M0224[intNo][5].trim()));
      stringAmt = convert.FourToFive(stringAmt, 0);
      System.out.println((intNo + 1) + "stringFactoryNo[" + stringFactoryNo + "]---------------------------------------stringAmt[" + stringAmt + "]");
      hashtableAmt.put(stringFactoryNo, stringAmt);
      //
      if (vectorFactoryNo.indexOf(stringFactoryNo) == -1)
        vectorFactoryNo.add(stringFactoryNo);
    }
    String stringAmtCF = "";
    String stringAcctNo = "";
    String stringDepartNo = "";
    String[] arrayTempData = null;
    double doubleAmt = 0;

    Hashtable hashtableAmt13 = new Hashtable();
    for (int intNo = 0; intNo < retDoc2M013.length; intNo++) {
      stringFactoryNo = retDoc2M013[intNo][0].trim();
      stringAmt = "" + (exeUtil.doParseDouble("" + hashtableAmt13.get(stringFactoryNo)) + exeUtil.doParseDouble(retDoc2M013[intNo][5].trim()));
      hashtableAmt13.put(stringFactoryNo, stringAmt);
      //
      if (vectorFactoryNo.indexOf(stringFactoryNo) == -1)
        vectorFactoryNo.add(stringFactoryNo);
    }
    for (int intNo = 0; intNo < vectorFactoryNo.size(); intNo++) {
      stringFactoryNo = "" + vectorFactoryNo.get(intNo);
      stringAmtCF = ("" + hashtableAmt13.get(stringFactoryNo)).trim();
      stringAmt = ("" + hashtableAmt.get(stringFactoryNo)).trim();
      System.out.println("stringAmt13[" + stringAmtCF + "]---------------------");
      System.out.println("stringAmt[" + stringAmt + "]---------------------");
      doubleAmt = exeUtil.doParseDouble(stringAmtCF) - exeUtil.doParseDouble(stringAmt);
      System.out.println("doubleAmt[" + doubleAmt + "]---------------------");
      //
      if (doubleAmt == 0)
        continue;
      //
      if ("F282302".equals(stringCostID)) {
        stringAcctNo = "8111";
        stringDepartNo = stringDepartNoFirst;
      } else {
        stringAcctNo = "1282";
        stringDepartNo = "0221";
        stringFactoryNo = "Z0001";
      }
      //
      arrayTempData = new String[10];
      arrayTempData[0] = "";
      arrayTempData[1] = "0";
      arrayTempData[2] = stringAcctNo;
      arrayTempData[3] = stringDepartNo;
      arrayTempData[4] = stringFactoryNo;
      arrayTempData[5] = convert.FourToFive("" + Math.abs(doubleAmt), 0);
      arrayTempData[6] = "";
      arrayTempData[7] = "";
      arrayTempData[8] = stringRowtypeL;
      arrayTempData[9] = "";
      if (doubleAmt < 0) {
        arrayTempData[0] = "A";
      } else {
        arrayTempData[0] = "B";
      }
      vectorVoucherDataKey.add(stringAcctNo + "---" + stringDepartNo + "---" + stringFactoryNo + "---" + (intNo + 1));
      vectorVoucherData.add(arrayTempData);
      vectorDescrip.add(null);
      doubleTotalAmt += doubleAmt;
    }
    System.out.println("[doF282302]---------------------------------------E");
    return doubleTotalAmt;
  }//

  public double doF282302_2(String stringBarCode, String stringCostID, String stringDepartNoFirst, String stringRowtypeL, double doubleTotalAmt, Vector vectorDescrip,
      Vector vectorVoucherData, Vector vectorVoucherDataKey, String[][] retDoc2M013, FargloryUtil exeUtil) throws Throwable {
    System.out.println("[doF282302_2]---------------------------------------S1111111111");
    String stringFactoryNo = "";
    String stringAmt = "";
    String[][] retDoc5M0224 = getDoc5M0224(stringBarCode, "");
    Hashtable hashtableAmt = new Hashtable();
    Hashtable hashtableFactoryNo = new Hashtable();
    //
    if (",F282302,F282303,".indexOf("," + stringCostID + ",") == -1 && retDoc5M0224.length == 0)
      return 0;
    // 0 BarCode 1 VOUCHER_YMD 2 VOUCHER_FLOW_NO 3 VOUCHER_SEQ_NO 4 FactoryNo 5 Amt
    // 6 CostID 7 CostID1
    for (int intNo = 0; intNo < retDoc5M0224.length; intNo++) {
      stringFactoryNo = retDoc5M0224[intNo][4].trim();
      stringCostID = retDoc5M0224[intNo][6].trim();
      stringAmt = "" + (exeUtil.doParseDouble("" + hashtableAmt.get(stringCostID)) + exeUtil.doParseDouble(retDoc5M0224[intNo][5].trim()));
      stringAmt = convert.FourToFive(stringAmt, 0);
      System.out.println((intNo + 1) + "stringFactoryNo[" + stringFactoryNo + "]---------------------------------------stringAmt[" + stringAmt + "]");
      hashtableAmt.put(stringCostID, stringAmt);
      hashtableFactoryNo.put(stringCostID, stringFactoryNo);
    }
    String stringAmtCF = "";
    String stringAcctNo = "8111";
    String stringDescript = "";
    String[] arrayTempData = null;
    double doubleAmt = 0;
    for (int intNo = 0; intNo < retDoc2M013.length; intNo++) {
      stringCostID = retDoc2M013[intNo][0].trim();
      stringAmtCF = retDoc2M013[intNo][5].trim();
      stringAmt = ("" + hashtableAmt.get(stringCostID)).trim();
      stringFactoryNo = "" + hashtableFactoryNo.get(stringCostID);
      System.out.println("stringAmt13[" + stringAmtCF + "]---------------------");
      System.out.println("stringAmt[" + stringAmt + "]---------------------");
      //
      doubleAmt = exeUtil.doParseDouble(stringAmtCF) - exeUtil.doParseDouble(stringAmt);
      System.out.println("doubleAmt[" + doubleAmt + "]---------------------");
      if (doubleAmt == 0)
        continue;
      //
      if (doubleAmt > 0) {
        if ("F282302".equals(stringCostID)) {
          stringDescript = "營所稅低估";
        } else if ("F282303".equals(stringCostID)) {
          stringDescript = "未分配營餘低估";
        } else {
          stringDescript = "";
        }
      } else {
        if ("F282302".equals(stringCostID)) {
          stringDescript = "營所稅高估";
        } else if ("F282303".equals(stringCostID)) {
          stringDescript = "未分配營餘高估";
        } else {
          stringDescript = "";
        }
      }
      //
      arrayTempData = new String[10];
      arrayTempData[0] = "";
      arrayTempData[1] = "0";
      arrayTempData[2] = stringAcctNo;
      arrayTempData[3] = stringDepartNoFirst;
      arrayTempData[4] = stringFactoryNo;
      arrayTempData[5] = convert.FourToFive("" + Math.abs(doubleAmt), 0);
      arrayTempData[6] = "";
      arrayTempData[7] = "";
      arrayTempData[8] = stringRowtypeL;
      arrayTempData[9] = stringDescript;
      System.out.println("[doF282302_2]stringAcctNo(" + stringAcctNo + ")stringFactoryNo(" + stringFactoryNo + ")---------------------------------------E");
      if (doubleAmt < 0) {
        arrayTempData[0] = "A";
      } else {
        arrayTempData[0] = "B";
      }
      vectorVoucherDataKey.add(stringAcctNo + "---" + stringDepartNoFirst + "---" + stringFactoryNo + "---" + (intNo + 1));
      vectorVoucherData.add(arrayTempData);
      vectorDescrip.add(null);
      doubleTotalAmt += doubleAmt;
    }
    System.out.println("[doF282302_2]---------------------------------------E1111111111");
    return doubleTotalAmt;
  }//

  public int putDebitDoc2M011(int intFlowNo, String stringRowtype, String stringAcctDConstant, String stringInputDepartNo, Hashtable hashtableDoc2M010, String[][] retDoc2M011,
      String[][] retDoc5M0226, Vector retVector, FargloryUtil exeUtil) throws Throwable {
    double doubleTotalAmt = exeUtil.doParseDouble("" + hashtableDoc2M010.get("TotalNoTaxAmt"));
    String stringFactoryNo = "";
    String stringInvoiceTax = "";
    String stringInvoiceDate = "";
    String stringInvoiceNo = "";
    String stringInvoiceMoney = "";
    String stringInvoiceTotalMoney = "";
    String stringInvoiceKind = "";
    String stringDeductType = "";
    String stringDeductKind = "";
    String[][] retFED1005 = null;
    boolean booleanF297001 = false;
    if (retDoc5M0226.length > 0) {
      // 零用金 彙總
      booleanF297001 = true;
      String stringSqlAnd = "";
      String stringBarCodeL = "";
      for (int intNo = 0; intNo < retDoc5M0226.length; intNo++) {
        stringBarCodeL = retDoc5M0226[intNo][1].trim();
        if (!"".equals(stringSqlAnd))
          stringSqlAnd += ",";
        stringSqlAnd += " '" + stringBarCodeL + "' ";
      }
      if (!"".equals(stringSqlAnd))
        stringSqlAnd = " AND  BarCode  IN (" + stringSqlAnd + ")";
      retDoc2M011 = getDoc2M011Union("Doc5M051", "", stringSqlAnd);
      //
      double doubleSumAmt = 0;
      for (int intNo = 0; intNo < retDoc2M011.length; intNo++) {
        doubleSumAmt += exeUtil.doParseDouble(retDoc2M011[intNo][5].trim());
      }
      retDoc2M011[0][5] = convert.FourToFive("" + doubleSumAmt, 0);
    }
    // 0 FactoryNo 1 InvoiceKind 2 InvoiceDate 3 InvoiceNo 4 InvoiceMoney
    // 5 InvoiceTax 6 InvoiceTotalMoney 7 DeductKind 8 RecordNo 9 DeductType
    if (retDoc2M011 == null)
      return intFlowNo;
    for (int intDoc2M011 = 0; intDoc2M011 < retDoc2M011.length; intDoc2M011++) {
      stringFactoryNo = retDoc2M011[intDoc2M011][0].trim();
      // retFED1005 = getFED1005(stringFactoryNo) ; if(retFED1005.length == 0)
      // stringFactoryNo = "Z0001" ;
      stringInvoiceKind = retDoc2M011[intDoc2M011][1].trim();
      stringInvoiceDate = retDoc2M011[intDoc2M011][2].trim().replaceAll("/", "");
      stringInvoiceNo = retDoc2M011[intDoc2M011][3].trim();
      stringInvoiceMoney = retDoc2M011[intDoc2M011][4].trim();
      stringInvoiceTax = retDoc2M011[intDoc2M011][5].trim();
      stringInvoiceTotalMoney = retDoc2M011[intDoc2M011][6].trim();
      stringDeductKind = retDoc2M011[intDoc2M011][7].trim();
      stringDeductType = retDoc2M011[intDoc2M011][9].trim();
      //
      if (retDoc5M0226.length > 0 && intDoc2M011 != 0)
        continue;
      // if(booleanF297001) {
      // stringFactoryNo = "Z0001" ;
      // }
      if (!"A".equals(stringDeductType))
        continue;
      if (doParseDouble(stringInvoiceTax) == 0)
        continue;
      doubleTotalAmt += doParseDouble(stringInvoiceTax);
      // 2015-01-14 修改 收據彙總移除
      // if("C,H,X,J,Z,K,Y,O,P,".indexOf(stringInvoiceKind+",")!=-1 &&
      // stringInvoiceNo.length()>10) {
      // 2016-01-07 發票長度不會影?
      // if("C,H,X,O,P,".indexOf(stringInvoiceKind+",")!=-1 &&
      // stringInvoiceNo.length()>10) {
      // stringInvoiceNo = stringInvoiceNo.substring(stringInvoiceNo.length()-10,
      // stringInvoiceNo.length()) ;
      // }
      //
      if (retDoc5M0226.length > 0) {
        stringInvoiceDate = "";
        stringInvoiceNo = "";
        stringInvoiceMoney = "";
        stringInvoiceTotalMoney = "";
        stringInvoiceKind = "";
      }
      hashtableDoc2M010.put("InvoiceDate", stringInvoiceDate);
      hashtableDoc2M010.put("InvoiceNo", stringInvoiceNo);
      hashtableDoc2M010.put("InvoiceMoney", stringInvoiceMoney);
      hashtableDoc2M010.put("InvoiceTotalMoney", stringInvoiceTotalMoney);
      hashtableDoc2M010.put("InvoiceKind", stringInvoiceKind);
      hashtableDoc2M010.put("DeductKind", stringDeductKind);
      System.out.println("stringInvoiceTax----------------------------[" + stringInvoiceTax + "]");
      intFlowNo = putIntoVector1(stringRowtype, "" + (intDoc2M011 + 1), intFlowNo, "D", stringAcctDConstant, stringInputDepartNo, stringFactoryNo, stringInvoiceTax,
          hashtableDoc2M010, retVector, exeUtil);
    }
    // 回傳
    hashtableDoc2M010.put("TotalNoTaxAmt", convert.FourToFive("" + doubleTotalAmt, 0));
    return intFlowNo;
  }

  public int putCeditData(int intFlowNo, double doubleRate, double doubleSpecDiscount, boolean booleanA110103, String stringMailMoney1, String stringRetainMoney,
      String stringRowtype, String stringAccountCount, Hashtable hashtableDoc2M010, String[][] retDoc2M030, Vector vectorPayCondition, Hashtable hashtablePayAmt, Vector retVector,
      FargloryUtil exeUtil) throws Throwable {
    int intPos = 0;
    String stringAcctC = "";
    String stringAcctountType = "" + hashtableDoc2M010.get("AcctountType");
    String stringRealMoney = "";
    String stringDepartNo = "";
    String stringPayCondition = "";
    Hashtable hashtableData = new Hashtable();
    boolean boolean2146 = true;
    double doubleTotalRealMoney = exeUtil.doParseDouble("" + hashtableDoc2M010.get("TotalAmt"));
    double doubleMailMoney = exeUtil.doParseDouble(stringMailMoney1);
    double doubleRetainMoney = exeUtil.doParseDouble(stringRetainMoney);
    double doubleTotalRealMoneyNet = doubleTotalRealMoney - doubleMailMoney - doubleRetainMoney - doubleSpecDiscount;
    double doubleTotalRealMoneyFinal = doubleTotalRealMoneyNet;
    double doublePurchaseMoneySum = exeUtil.doParseDouble("" + hashtablePayAmt.get("ALL"));
    //
    hashtableData.put("A110103", (booleanA110103) ? "Y" : "N");
    System.out.println("貸vectorPayCondition(" + vectorPayCondition.size() + ")-----------------------------------");
    boolean booleanNegative = false;
    for (int intNo = 0; intNo < retDoc2M030.length; intNo++) {
      stringAcctC = retDoc2M030[intNo][0].trim();
      boolean2146 = "2146,2147,".indexOf(stringAcctC + ",") != -1;
      intPos = intNo + 1;
      //
      if (vectorPayCondition.size() > intNo) {
        stringPayCondition = "" + vectorPayCondition.get(intNo);
        doubleRate = exeUtil.doParseDouble("" + hashtablePayAmt.get(stringPayCondition)) / doublePurchaseMoneySum;
        intPos = 1;
        hashtableDoc2M010.put("PayCondition1", stringPayCondition);
        System.out.println("貸(" + (intNo + 1) + ")stringPayCondition(" + stringPayCondition + ")-----------------------------------");
      }
      if (retDoc2M030.length > 1) {
        if (intNo != retDoc2M030.length - 1) {
          stringRealMoney = convert.FourToFive("" + ((doubleTotalRealMoneyFinal) * doubleRate), 0);
          doubleTotalRealMoneyNet -= exeUtil.doParseDouble(stringRealMoney);
        } else {
          stringRealMoney = convert.FourToFive("" + doubleTotalRealMoneyNet, 0);
        }
        System.out.println(intNo + "RealMoney(" + stringRealMoney + ")-------------------------------------------------");
      } else {
        stringRealMoney = convert.FourToFive("" + (doubleTotalRealMoney - doubleMailMoney - doubleRetainMoney - doubleSpecDiscount), 0);
        System.out.println(intNo + "RealMoney(" + stringRealMoney + ")doubleTotalRealMoney(" + doubleTotalRealMoney + ")doubleMailMoney(" + doubleMailMoney + ")doubleRetainMoney("
            + doubleRetainMoney + ")doubleSpecDiscount(" + doubleSpecDiscount + ")-------------------------------------------------");
      }
      if (exeUtil.doParseDouble(stringRealMoney) <= 0) {
        booleanNegative = true;
        break;
      }
      //
      intFlowNo = putIntoVector3(stringRowtype, "" + (intNo + 1), intFlowNo, "C", stringAcctC, "", "", stringRealMoney, "", intPos, stringAccountCount, hashtableDoc2M010,
          retVector, exeUtil, hashtableData);
      System.out.println(intNo + "(" + retVector.size() + ")stringRealMoney(" + stringRealMoney + ")-------------------------------------------------");
    }
    hashtableDoc2M010.put("貸方負值", booleanNegative ? "Y" : "N");
    return intFlowNo;
  }

  public int putCeditDoc2M013(int intFlowNo, String stringRowType, String stringInputDepartNo, String stringAccountCount, Hashtable hashtableDoc2M010, String[][] retDoc2M013,
      String[][] retDoc5M0226, Vector retVector, FargloryUtil exeUtil) throws Throwable {
    String stringFactoryNo = "";
    String stringReceiptKind = "";
    String stringReceiptDate = "";
    String stringReceiptMoney = "";
    String stringReceiptTax = "";
    String stringReceiptTotalMoney = "";
    String stringAcctNo = "";
    String stringPayCondition = "";
    String stringDepartNo = "";
    String stringDepartNo2147 = "" + hashtableDoc2M010.get("DepartNo2147");
    String stringDocNoType = "" + hashtableDoc2M010.get("DocNoType");
    String stringRowTypeL = "";
    double doubleTotalNoTaxAmt = exeUtil.doParseDouble("" + hashtableDoc2M010.get("TotalAmt"));
    // 借款沖銷時，不作此分錄
    if ("D".equals(stringDocNoType))
      return intFlowNo;
    //
    if (retDoc5M0226.length > 0) {
      // 零用金
      // booleanF297001 = true ;
      String stringSqlAnd = "";
      String stringBarCodeL = "";
      for (int intNo = 0; intNo < retDoc5M0226.length; intNo++) {
        stringBarCodeL = retDoc5M0226[intNo][1].trim();
        if (!"".equals(stringSqlAnd))
          stringSqlAnd += ",";
        stringSqlAnd += " '" + stringBarCodeL + "' ";
      }
      if (!"".equals(stringSqlAnd))
        stringSqlAnd = " AND  BarCode  IN (" + stringSqlAnd + ")";
      retDoc2M013 = getDoc2M013MultUnion("Doc5M053", "", stringSqlAnd);
    }
    String stringSupplementMoney = "";
    String stringAccountCountL = "";
    String stringAmt = "";
    String[][] retFED1005 = null;
    for (int intDoc2M013 = 0; intDoc2M013 < retDoc2M013.length; intDoc2M013++) {
      stringFactoryNo = retDoc2M013[intDoc2M013][0].trim();
      // retFED1005 = getFED1005(stringFactoryNo) ; if(retFED1005.length == 0)
      // stringFactoryNo = "Z0001" ;
      stringReceiptKind = retDoc2M013[intDoc2M013][1].trim();
      stringReceiptDate = retDoc2M013[intDoc2M013][2].trim();
      stringReceiptMoney = retDoc2M013[intDoc2M013][3].trim();
      stringReceiptTax = retDoc2M013[intDoc2M013][4].trim();
      stringReceiptTotalMoney = retDoc2M013[intDoc2M013][5].trim();
      stringAcctNo = retDoc2M013[intDoc2M013][7].trim();
      stringPayCondition = retDoc2M013[intDoc2M013][8].trim();
      stringDepartNo = retDoc2M013[intDoc2M013][9].trim();
      stringSupplementMoney = retDoc2M013[intDoc2M013][11].trim();
      //
      if ("".equals(stringDepartNo))
        stringDepartNo = stringInputDepartNo;
      // 1 扣繳金額 2 補充保費
      for (int intNoL = 1; intNoL <= 2; intNoL++) {
        if (intNoL == 1) {
          stringRowTypeL = stringRowType;
          stringAmt = stringReceiptTax;
        } else {
          stringRowTypeL = "Z";
          stringAmt = stringSupplementMoney;
          stringAcctNo = "228231";
        }
        stringAccountCountL = stringAccountCount;
        if (exeUtil.doParseDouble(stringAmt) == 0)
          continue;
        //
        System.out.println("doubleTotalNoTaxAmt(" + doubleTotalNoTaxAmt + ")stringAmt(" + stringAmt + ")------------------------S");
        doubleTotalNoTaxAmt -= exeUtil.doParseDouble(stringAmt);
        System.out.println("doubleTotalNoTaxAmt(" + doubleTotalNoTaxAmt + ")stringAmt(" + stringAmt + ")------------------------E");
        hashtableDoc2M010.put("InvoiceTotalMoney", stringReceiptTotalMoney);
        hashtableDoc2M010.put("InvoiceKind", stringPayCondition);
        intFlowNo = putIntoVector3(stringRowTypeL, "" + (intDoc2M013 + 1), intFlowNo, "C", stringAcctNo, stringDepartNo, stringFactoryNo, stringAmt, "", (intDoc2M013 + 1),
            stringAccountCountL, hashtableDoc2M010, retVector, exeUtil, new Hashtable());
      }
    }
    //
    hashtableDoc2M010.put("TotalAmt", convert.FourToFive("" + doubleTotalNoTaxAmt, 0));
    hashtableDoc2M010.put("InvoiceTotalMoney", "");
    hashtableDoc2M010.put("InvoiceKind", "");
    return intFlowNo;
  }

  public int putCedit2Doc2M013(boolean boolean110301, Vector vectorPayCondition, int intFlowNo, int intMaxCount, String stringRowType, String stringInputDepartNo,
      String stringType, String stringAcctCSession, String stringAccountCount, Hashtable hashtableDoc2M010, String[][] retDoc2M013, Vector retVector, FargloryUtil exeUtil)
      throws Throwable {
    System.out.println("putCedit2Doc2M013-stringAccountCount(" + stringAccountCount + ")-------------------------------------------S");
    String stringFactoryNo = "";
    String stringReceiptMoney = "";
    String stringAcctNo = "";
    String stringKind = "B";
    String stringComType = "" + hashtableDoc2M010.get("ComType");
    Vector vectorFactoryNo = getDoc2M0402();
    boolean booleanComNoType = "E".equals(stringComType);
    //
    if ("".equals(stringAcctCSession) || "null".equals(stringAcctCSession)) {
      String[][] retDoc2M030 = getAcctC(boolean110301, vectorPayCondition, intMaxCount, "Z", "", "", hashtableDoc2M010, exeUtil);
      if (retDoc2M030.length > 0)
        stringAcctCSession = retDoc2M030[0][0].trim();
      System.out.println("stringAcctCSession[" + stringAcctCSession + "]-stringAccountCount[" + stringAccountCount + "]----------------------------");
    }
    if ("110301".equals(stringAcctCSession)) {
      stringKind = "A";
    } else if ("2121,2131,".indexOf(stringAcctCSession + ",") != -1) {
      stringKind = "B";
      // stringAccountCount = "1" ;
    } else if ("2122,2132,".indexOf(stringAcctCSession + ",") != -1) {
      stringKind = "C";
      // stringAccountCount = "1" ;
    } else if ("2143,2153,".indexOf(stringAcctCSession + ",") != -1) {
      stringKind = "D";
      stringAccountCount = "1";
    } else if ("2258,2191,".indexOf(stringAcctCSession + ",") != -1) {
      stringKind = "E";
      stringAccountCount = "1";
    } else {
      stringKind = "B";
      stringAccountCount = "1";
    }
    //
    int intMaxNo = ("C".equals(stringType) || "A".equals(stringKind)) ? 1 : retDoc2M013.length;
    System.out.println("stringType(" + stringType + ")intMaxNo(" + intMaxNo + ")stringAccountCount(" + stringAccountCount + ")--------------------------------------------");
    String[][] retFED1005 = null;
    for (int intDoc2M013 = 0; intDoc2M013 < intMaxNo; intDoc2M013++) {
      if ("C".equals(stringType)) {
        stringFactoryNo = "" + hashtableDoc2M010.get("FactoryNo");
      } else {
        stringFactoryNo = retDoc2M013[intDoc2M013][0].trim();
        stringReceiptMoney = "" + (exeUtil.doParseDouble(retDoc2M013[intDoc2M013][3].trim()) - exeUtil.doParseDouble(retDoc2M013[intDoc2M013][11].trim()));
      }
      retFED1005 = getFED1005(stringFactoryNo);
      if (retFED1005.length == 0)
        stringFactoryNo = "Z0001";
      //
      if (!"A".equals(stringKind)) {
        if (vectorFactoryNo.indexOf(stringFactoryNo) != -1) {
          switch (stringKind.charAt(0)) {
          case 'B':
            stringAcctNo = "2131";
            break;
          case 'C':
            stringAcctNo = "2132";
            break;
          case 'D':
            stringAcctNo = "2153";
            break;
          case 'E':
            stringAcctNo = "2191";
            break;
          }
        } else {
          switch (stringKind.charAt(0)) {
          case 'B':
            stringAcctNo = "2121";
            break;
          case 'C':
            stringAcctNo = "2122";
            break;
          case 'D':
            stringAcctNo = "2143";
            break;
          case 'E':
            stringAcctNo = "2258";
            break;
          }
        }
      } else {
        stringAcctNo = "110301";
      }
      //
      System.out.println(intDoc2M013 + "stringAccountCount(" + stringAccountCount + ")-------------------------------------------");
      intFlowNo = putIntoVector3(stringRowType, " ", intFlowNo, "C", stringAcctNo, "", stringFactoryNo, stringReceiptMoney, "", (intDoc2M013 + 1), stringAccountCount,
          hashtableDoc2M010, retVector, exeUtil, new Hashtable());
    }
    //
    System.out.println("putCedit2Doc2M013--------------------------------------------E");
    return intFlowNo;
  }

  public int putCedit2Doc5M0202(int intFlowNo, double doubleRate, String stringRowType, String stringMailMoney1, String stringAccountCount, Hashtable hashtableDoc2M010,
      String[][] retDoc2M030, Vector vectrorDoc5M0202, Vector vectorPayCondition, boolean booleanA110103, Hashtable hashtablePayAmt, FargloryUtil exeUtil, Vector retVector)
      throws Throwable {
    // 所有借方金額
    String stringCreditMoney = getCreditMoney(retVector, exeUtil);
    String stringRealMoney = getBorrowMoney(vectrorDoc5M0202, exeUtil);
    // 取得借方沖銷的傳票及金額
    System.out.println("getBorrowVoucherData--------------------------------------------S");
    String stringWriteVouchcerData = getBorrowVoucherData(hashtableDoc2M010, vectrorDoc5M0202, exeUtil);
    System.out.println("getBorrowVoucherData--------------------------------------------E");
    if (stringWriteVouchcerData.startsWith("ERROR")) {
      return -1;
    }
    Hashtable hashtableData = new Hashtable();
    hashtableData.put("WRITE_VOUCHER_DATA", stringWriteVouchcerData);
    //
    intFlowNo = putIntoVector3(stringRowType, "1", intFlowNo, "C", "1281", "", "", stringRealMoney, "", 1, "1", hashtableDoc2M010, retVector, exeUtil, hashtableData);
    double doubleCreditMoney = exeUtil.doParseDouble(stringCreditMoney) - exeUtil.doParseDouble(stringRealMoney);
    if (doubleCreditMoney > 0) {
      stringRowType = "C";
      hashtableDoc2M010.put("到期日", "貸方");
      hashtableDoc2M010.put("TotalAmt", convert.FourToFive("" + doubleCreditMoney, 0));
      //
      if (vectrorDoc5M0202.size() <= 0 && retDoc2M030.length == 0)
        return -1;
      // 本次請款新增部份-貸方
      intFlowNo = putCeditData(intFlowNo, doubleRate, 0, booleanA110103, stringMailMoney1, "0", stringRowType, stringAccountCount, hashtableDoc2M010, retDoc2M030,
          vectorPayCondition, hashtablePayAmt, retVector, exeUtil);

    }
    return intFlowNo;
  }

  public String getCreditMoney(Vector retVector, FargloryUtil exeUtil) throws Throwable {
    String stringAmt = "";
    String stringDbCrCd = "";
    String[] arrayTemp = null;
    double doubleAmt = 0;
    for (int intNo = 0; intNo < retVector.size(); intNo++) {
      arrayTemp = (String[]) retVector.get(intNo);
      stringDbCrCd = arrayTemp[9];
      stringAmt = arrayTemp[13];
      //
      if ("D".equals(stringDbCrCd)) {
        // 借方
        doubleAmt += exeUtil.doParseDouble(stringAmt);
      } else {
        doubleAmt -= exeUtil.doParseDouble(stringAmt);
      }
    }
    return convert.FourToFive("" + doubleAmt, 0);
  }

  public String getBorrowVoucherData(Hashtable hashtableDoc2M010, Vector vectrorDoc5M0202, FargloryUtil exeUtil) throws Throwable {
    String stringComNo = "" + hashtableDoc2M010.get("ComNo");
    String stringBarCodeBorrow = "";
    String stringBorrowNo = "";
    String stringKindNo = "26";
    String stringVoucherYMD = "";
    String stringVoucherFlowNo = "";
    String stringVoucherSeqNo = "";
    String stringKind = "";
    String stringTemp = "";
    String stringBorrowMoney = "";
    String stringBorrowVoucher = "";
    Vector vectorDoc2M014 = new Vector();
    Vector vectorFED1012 = new Vector();
    Vector vectorFED1013 = new Vector();
    Hashtable hashtableDoc5M0202 = null;
    Hashtable hashtableDoc2M014 = null;
    Hashtable hashtableFED1012 = null;
    Hashtable hashtableFED1013 = null;
    Hashtable hashtableData = new Hashtable();
    Hashtable hashtableAnd = new Hashtable();
    double doubleBorrowMoney = 0;
    double doubleCanBorrowMoney = 0;
    for (int intNo = 0; intNo < vectrorDoc5M0202.size(); intNo++) {
      hashtableDoc5M0202 = (Hashtable) vectrorDoc5M0202.get(intNo);
      if (hashtableDoc5M0202 == null)
        continue;
      stringBorrowNo = "" + hashtableDoc5M0202.get("BorrowNo");
      stringBorrowMoney = "" + hashtableDoc5M0202.get("BorrowNoTaxMoney");
      doubleBorrowMoney = exeUtil.doParseDouble(stringBorrowMoney);
      //
      if (exeUtil.doParseDouble(stringBorrowMoney) <= 0)
        continue;
      // 取得 借款-條碼編號
      hashtableAnd.put("ComNo", stringComNo);
      hashtableAnd.put("KindNo", stringKindNo);
      hashtableAnd.put("DocNo", stringBorrowNo);
      stringBarCodeBorrow = getNameUnionDoc("BarCode", "Doc5M030", "", hashtableAnd, exeUtil);
      if ("".equals(stringBorrowNo))
        return "ERROR";
      // 取得 借款-傳票
      hashtableAnd.put("BarCode", stringBarCodeBorrow);
      hashtableAnd.put("ACCT_NO", "1281");
      hashtableAnd.put("DB_CR_CD", "D");
      vectorDoc2M014 = getQueryDataHashtableDoc("Doc2M014", hashtableAnd, "", new Vector(), exeUtil);
      for (int intNoL = 0; intNoL < vectorDoc2M014.size(); intNoL++) {
        hashtableDoc2M014 = (Hashtable) vectorDoc2M014.get(intNoL);
        if (hashtableDoc2M014 == null)
          continue;
        stringVoucherYMD = "" + hashtableDoc2M014.get("VOUCHER_YMD");
        stringVoucherFlowNo = "" + hashtableDoc2M014.get("VOUCHER_FLOW_NO");
        stringVoucherSeqNo = "" + hashtableDoc2M014.get("VOUCHER_SEQ_NO");
        stringComNo = "" + hashtableDoc2M014.get("COMPANY_CD");
        stringKind = "" + hashtableDoc2M014.get("KIND");
        //
        stringVoucherYMD = exeUtil.getDateConvertRoc(stringVoucherYMD).replaceAll("/", "");
        // 取得可沖銷金額 FED1012.AMT - FED1013(LAST_WRITE_OFF_TOT_AMT + THIS_WRITE_OFF_TOT_AMT
        // + UNPOST_WRITE_OFF_TOT_AMT)
        hashtableAnd.put("VOUCHER_YMD", stringVoucherYMD);
        hashtableAnd.put("VOUCHER_FLOW_NO", stringVoucherFlowNo);
        hashtableAnd.put("VOUCHER_SEQ_NO", stringVoucherSeqNo);
        hashtableAnd.put("COMPANY_CD", stringComNo);
        hashtableAnd.put("KIND", stringKind);
        vectorFED1012 = getQueryDataHashtableFED1("FED1012", hashtableAnd, "", new Vector(), exeUtil);
        if (vectorFED1012.size() <= 0)
          return "ERROR";
        hashtableFED1012 = (Hashtable) vectorFED1012.get(0);
        if (hashtableFED1012 == null)
          return "ERROR";
        stringTemp = "" + hashtableFED1012.get("AMT");
        doubleCanBorrowMoney = exeUtil.doParseDouble(stringTemp);
        // 取得可沖銷金額 FED1012.AMT - FED1013(LAST_WRITE_OFF_TOT_AMT + THIS_WRITE_OFF_TOT_AMT
        // + UNPOST_WRITE_OFF_TOT_AMT)
        hashtableAnd.put("VOUCHER_YMD", stringVoucherYMD);
        hashtableAnd.put("VOUCHER_FLOW_NO", stringVoucherFlowNo);
        hashtableAnd.put("VOUCHER_SEQ_NO", stringVoucherSeqNo);
        hashtableAnd.put("COMPANY_CD", stringComNo);
        hashtableAnd.put("KIND", stringKind);
        vectorFED1013 = getQueryDataHashtableFED1("FED1013", hashtableAnd, "", new Vector(), exeUtil);
        if (vectorFED1013.size() <= 0)
          return "ERROR";
        hashtableFED1013 = (Hashtable) vectorFED1013.get(0);
        if (hashtableFED1013 == null)
          return "ERROR";
        stringTemp = "" + hashtableFED1013.get("LAST_WRITE_OFF_TOT_AMT");
        doubleCanBorrowMoney -= exeUtil.doParseDouble(stringTemp);
        stringTemp = "" + hashtableFED1013.get("THIS_WRITE_OFF_TOT_AMT");
        doubleCanBorrowMoney -= exeUtil.doParseDouble(stringTemp);
        stringTemp = "" + hashtableFED1013.get("UNPOST_WRITE_OFF_TOT_AMT");
        doubleCanBorrowMoney -= exeUtil.doParseDouble(stringTemp);
        // 判斷 可沖銷金額 及 本次沖銷 正確
        if (doubleBorrowMoney <= 0)
          continue;
        //
        if (doubleBorrowMoney <= doubleCanBorrowMoney) {
          stringTemp = convert.FourToFive("" + (doubleBorrowMoney), 0);
          doubleBorrowMoney = 0;
        } else {
          stringTemp = convert.FourToFive("" + (doubleCanBorrowMoney), 0);
          doubleBorrowMoney -= doubleCanBorrowMoney;
        }
        //
        if (!"".equals(stringBorrowVoucher))
          stringBorrowVoucher += "%-%";
        stringBorrowVoucher += stringVoucherYMD + "-" + stringVoucherFlowNo + "-" + stringVoucherSeqNo + "-" + stringTemp;
      }
      if (doubleBorrowMoney > 0)
        return "ERROR";
    }
    return stringBorrowVoucher;
  }

  public String getBorrowMoney(Vector vectrorDoc5M0202, FargloryUtil exeUtil) throws Throwable {
    String stringBorrowMoney = "";
    double dobuleBorrowMoney = 0;
    Hashtable hashtableDoc5M0202 = null;
    for (int intNo = 0; intNo < vectrorDoc5M0202.size(); intNo++) {
      hashtableDoc5M0202 = (Hashtable) vectrorDoc5M0202.get(intNo);
      if (hashtableDoc5M0202 == null)
        continue;
      stringBorrowMoney = "" + hashtableDoc5M0202.get("BorrowNoTaxMoney");
      //
      dobuleBorrowMoney += exeUtil.doParseDouble(stringBorrowMoney);
    }
    return convert.FourToFive("" + dobuleBorrowMoney, 0);
  }

  public int putCeditDoc2M015(int intFlowNo, String stringRowType, String stringAcctDConstant, String stringInputDepartNo, Hashtable hashtableDoc2M010, Vector vectorDoc5M022,
      String[][] retDoc2M015, Hashtable hashtableDiscountMoney, Hashtable hashtableInvoice, Vector retVector, FargloryUtil exeUtil) throws Throwable {
    String stringComNo = "" + hashtableDoc2M010.get("ComNo");
    String stringUsedCd = "";
    String stringItemCd = "";
    String stringAccountNo = "";
    String stringInOut = "";
    String stringDepartNo = "";
    String stringProjectID = "";
    String stringProjectID1 = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String stringKey = "";
    String stringTemp = "";
    String stringDiscountTotalMoney = "";
    String stringRecordNoDoc2M011 = "";
    String stringDiscountTotalNoTaxMoney = "";
    String stringInvoiceNo = "";
    String stringDiscountName = "";
    String[] arrayDoc2M011 = null;
    String[] arrayTempData = null;
    String[] arrayInvoiceData = null;
    String[][] retDoc2M020 = null;
    Object objectTemp = null;
    Vector vectorInvoiceNo = new Vector();
    Hashtable hashtableInvoiceL = new Hashtable();
    double doubleDiscountTax = 0;
    double doubleDiscountTotalMoneySum = 0;
    double doubleDiscountTotalNoTaxMoneySum = 0;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 DiscountMoney 7 RecordNo 8 DiscountNoTaxMoney 9 InvoiceNo
    for (int intNo = 0; intNo < retDoc2M015.length; intNo++) {
      System.out.println(intNo + "putCeditDoc2M015----------------------------S" + retDoc2M015[0].length);
      stringInOut = retDoc2M015[intNo][0].trim();
      stringDepartNo = retDoc2M015[intNo][1].trim();
      stringProjectID = retDoc2M015[intNo][2].trim();
      stringProjectID1 = retDoc2M015[intNo][3].trim();
      stringCostID = retDoc2M015[intNo][4].trim();
      stringDiscountTotalMoney = retDoc2M015[intNo][6].trim();
      stringDiscountTotalNoTaxMoney = retDoc2M015[intNo][8].trim();
      stringInvoiceNo = retDoc2M015[intNo][9].trim();
      stringKey = stringInOut + "-" + stringDepartNo + "-" + stringProjectID + "-" + stringProjectID1 + "-" + stringCostID + "-" + stringCostID1;
      System.out.println(intNo + "putCeditDoc2M015----------------------------E");
      // 折讓金額
      // 一般
      /*
       * stringTemp = (""+hashtableDiscountMoney.get(stringKey)).trim( ) ;
       * arrayTempData = convert.StringToken(stringTemp, "-") ;
       * stringDiscountTotalMoney = "0" ; if(arrayTempData.length == 4) {
       * stringDiscountTotalMoney = arrayTempData[0] ; stringRecordNoDoc2M011 =
       * arrayTempData[1] ; stringDiscountTotalNoTaxMoney = arrayTempData[2] ;
       * stringInvoiceNo = arrayTempData[3] ; }
       */
      // System.out.println(intDoc2M012+"--------"+stringDiscountTotalMoney+"-------------"+stringRecordNoDoc2M011)
      // ;
      doubleDiscountTotalMoneySum = exeUtil.doParseDouble(stringDiscountTotalMoney);
      if (doubleDiscountTotalMoneySum <= 0)
        continue;
      doubleDiscountTotalNoTaxMoneySum = exeUtil.doParseDouble(stringDiscountTotalNoTaxMoney);
      doubleDiscountTax = doubleDiscountTotalMoneySum - doubleDiscountTotalNoTaxMoneySum;
      // 特殊折讓
      /*
       * stringTemp = (""+hashtableDiscountMoneyS.get(stringKey)).trim( ) ;
       * arrayTempData = convert.StringToken(stringTemp, "-") ;
       * stringDiscountTotalMoney = "0" ; if(arrayTempData.length == 2) {
       * stringDiscountTotalMoney = arrayTempData[0] ; stringRecordNoDoc5M010 =
       * arrayTempData[1] ; }
       * //System.out.println(intDoc2M012+"--------"+stringDiscountTotalMoney+
       * "-------------"+stringRecordNoDoc5M010) ; doubleDiscountTotalMoneySum +=
       * doParseDouble(stringDiscountTotalMoney) ; doubleDiscountTotalNoTaxMoneySum +=
       * doParseDouble(stringDiscountTotalMoney) / (1+(doubleTaxRate/100)) ;
       * doubleDiscountTotalNoTaxMoneySum =
       * doParseDouble(convert.FourToFive(""+doubleDiscountTotalNoTaxMoneySum, 0)) ;
       */
      /*
       * retDoc2M020 = getDoc7M055(stringComNo, stringCostID, stringInOut) ;
       * if(retDoc2M020.length == 0) {System.out.println("找不到請款代碼") ;return 0 ;} //
       * 錯誤回傳 0 stringItemCd = retDoc2M020[0][2].trim( ) ; stringUsedCd =
       * retDoc2M020[0][3].trim( ) ; if("I".equals(stringInOut)) { stringAccountNo =
       * retDoc2M020[0][0].trim( ) ; } else if("O".equals(stringInOut)) {
       * stringAccountNo = retDoc2M020[0][1].trim( ) ; } else { stringAccountNo =
       * retDoc2M020[0][4].trim( ) ; } if(stringDepartNo.indexOf("BH3") != -1 ||
       * stringDepartNo.indexOf("SH3") != -1) stringAccountNo = "128401" ; // 借
       * intFlowNo = putIntoVector2(stringRowType, stringRecordNoDoc2M011, intFlowNo,
       * "C", stringAccountNo, stringDepartNo, "", stringDiscountTotalNoTaxMoney, "",
       * stringItemCd, stringUsedCd, hashtableDoc2M010, null, retVector, exeUtil) ;
       */
      // 發票1264
      objectTemp = hashtableInvoice.get(stringInvoiceNo);
      if (objectTemp == null) {
        System.out.println("找不到發票(" + stringInvoiceNo + ")");
        return 0;
      }
      arrayTempData = (String[]) objectTemp;
      //
      objectTemp = hashtableInvoiceL.get(stringInvoiceNo);
      if (objectTemp == null) {
        arrayInvoiceData = new String[7];
        hashtableInvoiceL.put(stringInvoiceNo, arrayInvoiceData);
      }
      if (vectorInvoiceNo.indexOf(stringInvoiceNo) == -1)
        vectorInvoiceNo.add(stringInvoiceNo);
      arrayDoc2M011 = (String[]) hashtableInvoice.get(stringInvoiceNo);
      if (arrayDoc2M011 != null) {
        // G收銀機收執聯 C收據 HX收據內含稅 R載具號碼25
        if (",G,C,H,X,R,S,".indexOf(arrayDoc2M011[1].trim()) != -1) {
          stringDiscountName = "折讓單24";
        } else {
          stringDiscountName = "折讓單23";
        }
        if ("B".equals(arrayDoc2M011[7].trim()))
          stringDiscountName += "-資產";
      } else {
        stringDiscountName = "折讓單23";
      }
      arrayInvoiceData[0] = arrayTempData[2];
      arrayInvoiceData[1] = stringInvoiceNo;
      arrayInvoiceData[2] = convert.FourToFive("" + (doubleDiscountTotalNoTaxMoneySum + exeUtil.doParseDouble(arrayInvoiceData[2])), 0);
      arrayInvoiceData[3] = convert.FourToFive("" + (doubleDiscountTotalMoneySum + exeUtil.doParseDouble(arrayInvoiceData[3])), 0);
      arrayInvoiceData[4] = arrayTempData[1];
      arrayInvoiceData[5] = stringDiscountName;
      arrayInvoiceData[6] = convert.FourToFive("" + (doubleDiscountTax + exeUtil.doParseDouble(arrayInvoiceData[6])), 0);
    }
    for (int intNo = 0; intNo < vectorInvoiceNo.size(); intNo++) {
      stringInvoiceNo = "" + vectorInvoiceNo.get(intNo);
      objectTemp = hashtableInvoiceL.get(stringInvoiceNo);
      if (objectTemp == null) {
        System.out.println("找不到折讓");
        return 0;
      }
      arrayInvoiceData = (String[]) objectTemp;
      //
      hashtableDoc2M010.put("InvoiceDate", arrayInvoiceData[0].replaceAll("/", ""));
      hashtableDoc2M010.put("InvoiceNo", arrayInvoiceData[1]);
      hashtableDoc2M010.put("InvoiceMoney", arrayInvoiceData[2]);
      hashtableDoc2M010.put("InvoiceTotalMoney", arrayInvoiceData[3]);
      hashtableDoc2M010.put("InvoiceKind", arrayInvoiceData[4]);
      hashtableDoc2M010.put("到期日", arrayInvoiceData[5]);
      intFlowNo = putIntoVector1("H", "0", intFlowNo, "C", stringAcctDConstant, "", "", arrayInvoiceData[6], hashtableDoc2M010, retVector, exeUtil);
      hashtableDoc2M010.put("到期日", "");
    }
    hashtableDoc2M010.put("InvoiceDate", "");
    hashtableDoc2M010.put("InvoiceNo", "");
    hashtableDoc2M010.put("InvoiceMoney", "");
    hashtableDoc2M010.put("InvoiceTotalMoney", "");
    hashtableDoc2M010.put("InvoiceKind", "");
    return intFlowNo;
  }

  public Hashtable getHashtableDoc2M015(String[][] retDoc2M015) throws Throwable {
    String stringCostID = "";
    String stringCostID1 = "";
    String stringDepartNo = "";
    String stringInOut = "";
    String stringProjectID = "";
    String stringProjectID1 = "";
    String stringRecordNo = "";
    String stringDiscountMoney = "";
    String stringDiscountNoTaxMoney = "";
    String stringKey = "";
    String stringInvoiceNo = "";
    Hashtable hashtableDiscountMoney = new Hashtable();
    // 折讓
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 DiscountMoney 7 RecordNo 8 DiscountNoTaxMoney 9 InvoiceNo
    for (int intDoc2M015 = 0; intDoc2M015 < retDoc2M015.length; intDoc2M015++) {
      stringInOut = retDoc2M015[intDoc2M015][0].trim();
      stringDepartNo = retDoc2M015[intDoc2M015][1].trim();
      stringProjectID = retDoc2M015[intDoc2M015][2].trim();
      stringProjectID1 = retDoc2M015[intDoc2M015][3].trim();
      stringCostID = retDoc2M015[intDoc2M015][4].trim();
      stringDiscountMoney = retDoc2M015[intDoc2M015][6].trim();
      stringRecordNo = retDoc2M015[intDoc2M015][7].trim();
      stringDiscountNoTaxMoney = retDoc2M015[intDoc2M015][8].trim();
      stringInvoiceNo = retDoc2M015[intDoc2M015][9].trim();
      stringKey = stringInOut + "-" + stringDepartNo + "-" + stringProjectID + "-" + stringProjectID1 + "-" + stringCostID + "-" + stringCostID1;
      hashtableDiscountMoney.put(stringKey, stringDiscountMoney + "-" + stringRecordNo + "-" + stringDiscountNoTaxMoney + "-" + stringInvoiceNo);
    }
    return hashtableDiscountMoney;
  }

  public int putCeditAssetFront(int intFlowNo, String stringRowtype, String stringPurchaseNo, Hashtable hashtableDoc2M010, Vector retVector, FargloryUtil exeUtil)
      throws Throwable {
    String stringBarCode = "" + hashtableDoc2M010.get("BarCode");
    String stringDocNo = "" + hashtableDoc2M010.get("DocNo");
    String stringComNo = "" + hashtableDoc2M010.get("ComNo");
    String stringDescript = "" + hashtableDoc2M010.get("Descrip");
    String stringBankNo = "" + hashtableDoc2M010.get("BankNo");
    String stringKindNo = "" + hashtableDoc2M010.get("KindNo");
    //
    String stringVoucherYMD = "";
    String stringVoucherFlowNo = "";
    String stringVoucherSeqNo = "";
    String stringFactoryNo = "" + hashtableDoc2M010.get("FactoryNo");
    String stringDepartNo = "";
    String stringAmt = "";
    String stringSql = "";
    String[] arrayTemp = null;
    String[] arrayDescript = new String[5];
    String[][] retDocData = null;
    String[][] retDoc2M014 = null;
    String[][] retFED1012 = null;
    Vector vectorBarCode = new Vector();
    Hashtable hashtableData = new Hashtable();
    // 請款
    stringSql = " SELECT  DISTINCT  M10.BarCode " + " FROM  Doc5M027 M17,  Doc5M020 M10 " + " WHERE  M10.BarCode  =  M17.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M10.BarCode  <>  '" + stringBarCode + "' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.KindNo  =  '" + stringKindNo + "' "
        + " AND  M17.PurchaseNo  =  '" + stringPurchaseNo + "' " + " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' " + " ORDER BY  M10.BarCode ";
    retDocData = getTableDataDoc(stringSql);
    for (int intNo = 0; intNo < retDocData.length; intNo++)
      vectorBarCode.add(retDocData[intNo][0].trim());
    if (vectorBarCode.size() == 0) {
      return intFlowNo;
    }
    for (int intNo = 0; intNo < vectorBarCode.size(); intNo++) {
      stringBarCode = "" + vectorBarCode.get(intNo);
      // 前期傳票 借方-1252
      retDoc2M014 = getDoc2M014(stringBarCode);
      if (retDoc2M014.length == 0) {
        return 0;
      }
      stringVoucherYMD = retDoc2M014[0][4].trim();
      stringVoucherYMD = exeUtil.getDateConvertRoc(stringVoucherYMD).replaceAll("/", "");
      stringVoucherFlowNo = retDoc2M014[0][5].trim();
      retFED1012 = getFED1012ForFED1013(stringVoucherYMD, stringVoucherFlowNo, stringComNo, "0", "1252");
      //
      for (int intNoL = 0; intNoL < retFED1012.length; intNoL++) {
        stringVoucherSeqNo = retFED1012[intNoL][6].trim();
        stringDepartNo = retFED1012[intNoL][11].trim();
        stringFactoryNo = retFED1012[intNoL][12].trim();
        stringAmt = retFED1012[intNoL][13].trim();
        //
        hashtableDoc2M010.put("Descrip", retFED1012[intNoL][23].trim());
        //
        arrayDescript[0] = retFED1012[intNoL][18].trim();
        arrayDescript[1] = retFED1012[intNoL][19].trim();
        arrayDescript[2] = retFED1012[intNoL][20].trim();
        arrayDescript[3] = retFED1012[intNoL][21].trim();
        arrayDescript[4] = retFED1012[intNoL][22].trim();
        //
        System.out.println("putCeditAssetFront-----------------------------S");
        hashtableData.put("WRITE_VOUCHER_DATA", stringVoucherYMD + "-" + stringVoucherFlowNo + "-" + stringVoucherSeqNo);
        // // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 補充保費Z 折讓(稅)-貸H 退保留款-貸I
        intFlowNo = putIntoVectorFull(stringRowtype, "" + (intNo + 1), intFlowNo, "C", "1252", stringDepartNo, "", stringAmt, "", "", "", 0, "1", hashtableDoc2M010, arrayDescript,
            retVector, exeUtil, hashtableData);
        System.out.println("putCeditAssetFront-----------------------------E" + hashtableData.get("WRITE_VOUCHER_DATA"));
      }
    }
    //
    hashtableDoc2M010.put("Descrip", stringDescript);
    return intFlowNo;
  }

  // 特別折讓
  // 0 BarCode 1 DocNo 2 VoucherYMD014 3 ComNo 4 Descrip
  // 5 FactoryNo 6 AccFirst 7 DepartNoFirst 8 PayCondition1 9 PayCond
  // 10 (到期日) 11 BankCd 12 BankNo 13 Amt2146 14 Amt2147
  public double getHashtableDoc5M010(String stringComNo, String[][] retDoc5M010, Hashtable hashtableDiscountMoneyS, Hashtable hashtableDoc2M010, FargloryUtil exeUtil)
      throws Throwable {
    String stringAccountNo = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String stringDepartNo = "";
    String stringInOut = "";
    String stringProjectID = "";
    String stringProjectID1 = "";
    String stringRecordNo = "";
    String stringDiscountMoney = "";
    String stringKey = "";
    String[][] retDoc2M020 = null;
    double doubleSpecDiscount = 0;
    double doubleAmt2146 = exeUtil.doParseDouble("" + hashtableDoc2M010.get("Amt2146"));
    double doubleAmt2147 = exeUtil.doParseDouble("" + hashtableDoc2M010.get("Amt2147"));
    // 折讓
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 DiscountMoney 7 RecordNo 8 DiscountNoTaxMoney
    for (int intDoc5M010 = 0; intDoc5M010 < retDoc5M010.length; intDoc5M010++) {
      stringInOut = retDoc5M010[intDoc5M010][0].trim();
      stringDepartNo = retDoc5M010[intDoc5M010][1].trim();
      stringProjectID = retDoc5M010[intDoc5M010][2].trim();
      stringProjectID1 = retDoc5M010[intDoc5M010][3].trim();
      stringCostID = retDoc5M010[intDoc5M010][4].trim();
      stringDiscountMoney = retDoc5M010[intDoc5M010][6].trim();
      stringRecordNo = retDoc5M010[intDoc5M010][7].trim();
      stringKey = stringInOut + "-" + stringDepartNo + "-" + stringProjectID + "-" + stringProjectID1 + "-" + stringCostID + "-" + stringCostID1;
      hashtableDiscountMoneyS.put(stringKey, stringDiscountMoney + "-" + stringRecordNo);
      //
      doubleSpecDiscount += doParseDouble(stringDiscountMoney);
      // 統計
      // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD
      retDoc2M020 = getDoc7M055(stringComNo, stringCostID, stringInOut);
      if (retDoc2M020.length == 0) {
        doubleAmt2147 += exeUtil.doParseDouble(stringDiscountMoney);
        continue;
      }
      if ("I".equals(stringInOut)) {
        stringAccountNo = retDoc2M020[0][0].trim();
      } else if ("O".equals(stringInOut)) {
        stringAccountNo = retDoc2M020[0][1].trim();
      } else {
        stringAccountNo = retDoc2M020[0][4].trim();
      }
      if (stringAccountNo.length() > 4) {
        if ("5681".equals(stringAccountNo.substring(0, 4))) {
          doubleAmt2146 += exeUtil.doParseDouble(stringDiscountMoney);
        } else if ("6201".equals(stringAccountNo.substring(0, 4))) {
          doubleAmt2147 += exeUtil.doParseDouble(stringDiscountMoney);
        } else {
          doubleAmt2147 += exeUtil.doParseDouble(stringDiscountMoney);
        }
      }
    }
    hashtableDoc2M010.put("Amt2146", convert.FourToFive("" + doubleAmt2146, 0));
    hashtableDoc2M010.put("Amt2147", convert.FourToFive("" + doubleAmt2147, 0));
    return doubleSpecDiscount;
  }

  public int putFuture(int intFlowNo, Hashtable hashtableDoc2M010, Vector retVector, FargloryUtil exeUtil) throws Throwable {
    String stringBarCode = "" + hashtableDoc2M010.get("BarCode");
    String stringDocNo = "" + hashtableDoc2M010.get("DocNo");
    String stringVoucherYMD014 = "" + hashtableDoc2M010.get("VoucherYMD014");
    String stringComNo = "" + hashtableDoc2M010.get("ComNo");
    String stringComNoType = "" + hashtableDoc2M010.get("ComType");
    //
    String stringID = getIDForDoc2M010("Doc5M020", stringBarCode);
    String stringRemark = "預估";
    String[][] retData = getTableDataDoc("SELECT  ID_Def,  UseMoney  FROM  Doc2M0801  WHERE  ID_BarCode  =  " + stringID + " ORDER BY ID_Def  ");
    boolean booleanComNoType = "E".equals(stringComNoType);
    boolean booleanExist = true;
    if (retData.length == 0) {
      booleanExist = false;
      stringRemark = "請款";
      if (!"".equals(stringID)) {
        retData = new String[1][2];
        retData[0][0] = stringID;
        retData[0][1] = "0";
      }
    }
    int intDbCrCd = 0;
    int intDbCrCdCount = 0;
    int intEndPos = 0;
    int intStartPos = 0;
    String stringAmt = "";
    String stringDbCrCd = "";
    String stringDbCrCdData = "";
    String stringDescript = "";
    String stringVoucherDate = "";
    String stringVoucherFlowNo = "";
    String stringKind = "0";
    String[] arrayTempL = null;
    String[] retDataTemp = null;
    String[][] retDoc2M080 = null;
    String[][] retFED1012 = null;
    double doubleAmt = 0;
    double dobuleUseMoney = 0;
    double dobuleUseMoneyFinal = 0;
    double doubleAmtSumFinal = 0;
    Vector vectorPos = new Vector();
    for (int intID = 0; intID < retData.length; intID++) {
      stringID = retData[intID][0];
      dobuleUseMoney = exeUtil.doParseDouble(retData[intID][1].trim());
      dobuleUseMoneyFinal = dobuleUseMoney;
      intDbCrCdCount = 0;
      intDbCrCd = 0;
      retDoc2M080 = getDoc2M080_2(stringID, stringRemark, stringComNo);
      /*
       * 1 BarCode 2 FactoryNo 3 InOut 4 CostID 5 CostID1 6 Descript 7 PurchaseNo 8
       * DocNo 9 DocNo1 10 DocNo2 11 DocNo3 12 FutureMoney 13 InvoiceDate 14 InvoiceNo
       * 15 InvoiceMoney 16 InvoiceTax 17 InvoiceTotalMoney 18 Remark 19 Status 20
       * LastUser 21 LastDate 22 ID_Def 23 VOUCHER_NO 24 BarCodeOrder 25 UseStatus
       */
      for (int intNo = 0; intNo < retDoc2M080.length; intNo++) {
        // 971231-0074-0-1 傳票日期-傳票序號-傳票流水號(起)-傳票流水號(訖)
        stringVoucherFlowNo = retDoc2M080[intNo][23].trim();
        arrayTempL = convert.StringToken(stringVoucherFlowNo, "-");
        if (arrayTempL.length <= 2)
          continue;
        //
        stringVoucherDate = arrayTempL[0].trim();
        stringVoucherFlowNo = "" + exeUtil.doParseInteger(arrayTempL[1].trim());
        intStartPos = exeUtil.doParseInteger(arrayTempL[2].trim());
        retFED1012 = getFED1012(stringVoucherDate, stringVoucherFlowNo, stringComNo, stringKind, booleanComNoType);
        if (retFED1012.length == 0) {
          System.out.println("查無 [預估對沖傳票]，請洽資訊室。");
          return 0;
        }
        // 取得傳票位置
        // 1. 指定每個分錄位置：以 0 起始。
        // 2. 指定頭尾位置 ：以 0 起始。
        if (arrayTempL[2].indexOf(",") != -1) {
          arrayTempL = convert.StringToken(arrayTempL[2].trim(), ",");
          for (int intNoL2 = 0; intNoL2 < arrayTempL.length; intNoL2++) {
            vectorPos.add("" + (1 + exeUtil.doParseInteger(arrayTempL[intNoL2].trim())));
          }
          intStartPos = 0;
          intEndPos = retFED1012.length - 1;
        } else {
          intEndPos = exeUtil.doParseInteger(arrayTempL[3].trim());
        }
        // 0 空白(BarCode) 1 (空白)DocNo 2 (空白)RowType 3 RecordNo 4 VOUCHER_YMD
        // 5 VOUCHER_FLOW_NO 6 VOUCHER_SEQ_NO 7 COMPANY_CD 8 KIND 9 DB_CR_CD
        // 10 ACCT_NO 11 DEPT_CD 12 OBJECT_CD 13 AMT 14 EXCHANG_AMT
        // 15 MONTEARY 16 ClaimerMoney 17 STATUS_CD 18 DESCRIPTION_1 19 DESCRIPTION_2
        // 20 DESCRIPTION_3 21 DESCRIPTION_4 22 DESCRIPTION_5 23 DESCRIPTION 24
        // LAST_USER
        // 25 LAST_YMD 26 空白
        for (int intFED1012 = intEndPos; intFED1012 >= intStartPos; intFED1012--) {
          stringDbCrCd = retFED1012[intFED1012][9].trim();
          //
          if (vectorPos.size() > 0 && vectorPos.indexOf(retFED1012[intFED1012][6].trim()) == -1)
            continue;
          //
          if ("C".equals(stringDbCrCd)) { // 貸方
            doubleAmtSumFinal = exeUtil.doParseDouble(retFED1012[intFED1012][13].trim());
          } else {
            intDbCrCdCount++;
          }
        }
        //
        for (int intFED1012 = intEndPos; intFED1012 >= intStartPos; intFED1012--) {
          stringDbCrCdData = retFED1012[intFED1012][9].trim();
          stringAmt = retFED1012[intFED1012][13].trim();
          stringDbCrCd = "C".equals(stringDbCrCdData) ? "D" : "C";
          //
          if (vectorPos.size() > 0 && vectorPos.indexOf(retFED1012[intFED1012][6].trim()) == -1)
            continue;
          //
          if ("D".equals(stringDbCrCdData))
            intDbCrCd++;
          //
          stringDescript = "沖" + stringVoucherDate + "-" + convert.add0(stringVoucherFlowNo, "4") + " " + retFED1012[intFED1012][23].trim();
          stringDescript = exeUtil.doCutStringBySize(30, stringDescript)[0];
          stringDescript = convert.replace(stringDescript, "'", "''");
          //
          if (booleanExist) {
            // 年底預估之分次沖銷
            if ("C".equals(stringDbCrCdData)) {
              stringAmt = convert.FourToFive("" + dobuleUseMoneyFinal, 0);
            } else {
              if (intDbCrCdCount == intDbCrCd) {
                // 最後一筆
                stringAmt = convert.FourToFive("" + dobuleUseMoney, 0);
              } else {
                doubleAmt = dobuleUseMoneyFinal * doParseDouble(stringAmt) / doubleAmtSumFinal;
                stringAmt = convert.FourToFive("" + doubleAmt, 0);
                dobuleUseMoney -= doParseDouble(stringAmt);
              }
            }
          } else {
            // 請款
          }
          intFlowNo++;
          retDataTemp = new String[27];
          retDataTemp[0] = stringBarCode; // 條碼編號 0
          retDataTemp[1] = stringDocNo; // 公文代號 1
          retDataTemp[2] = "W"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H 沖銷W
          retDataTemp[3] = ""; // No 3
          retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
          retDataTemp[5] = "0"; // 傳票流水號 5
          retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
          retDataTemp[7] = stringComNo; // 公司代號 7
          retDataTemp[8] = stringKind; // Kind 8
          retDataTemp[9] = stringDbCrCd; // 借貸 9
          retDataTemp[10] = retFED1012[intFED1012][10].trim(); // 會計科目 10
          retDataTemp[11] = retFED1012[intFED1012][11].trim(); // 部門 11
          retDataTemp[12] = retFED1012[intFED1012][12].trim(); // 對象 12
          retDataTemp[13] = stringAmt; // 金額 13
          retDataTemp[14] = "0"; // 匯率 14
          retDataTemp[15] = "0"; // 原類金額 15
          retDataTemp[16] = "0"; // 請款金額 16
          retDataTemp[17] = "U"; // 狀態-未過帳 17
          retDataTemp[18] = retFED1012[intFED1012][18].trim(); // 明細一 18
          retDataTemp[19] = retFED1012[intFED1012][19].trim(); // 明細二 19
          retDataTemp[20] = retFED1012[intFED1012][20].trim(); // 明細三 20
          retDataTemp[21] = retFED1012[intFED1012][21].trim(); // 明細四 21
          retDataTemp[22] = retFED1012[intFED1012][22].trim(); // 明細五 22
          retDataTemp[23] = stringDescript; // 摘要 23
          retDataTemp[24] = getUser(); // 修改者 24
          retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
          retDataTemp[26] = "A"; //
          //
          retVector.add(retDataTemp);
        }
      }
    }
    return intFlowNo;
  }

  // 無
  public int putIntoVector1(String stringRowtype, String stringNo, int intFlowNo, String stringDbCrCd, String stringAccountNo, String stringDepartNo, String stringFactoryNo,
      String stringRealMoney, Hashtable hashtableDoc2M010, Vector retVector, FargloryUtil exeUtil) throws Throwable {
    Hashtable hashtableDescript = new Hashtable();
    return putIntoVectorFull(stringRowtype, stringNo, intFlowNo, stringDbCrCd, stringAccountNo, stringDepartNo, stringFactoryNo, stringRealMoney, "", "", "", 0, "1",
        hashtableDoc2M010, null, retVector, exeUtil, new Hashtable());
  }

  // 預設項目
  public int putIntoVector2(String stringRowtype, String stringNo, int intFlowNo, String stringDbCrCd, String stringAccountNo, String stringDepartNo, String stringFactoryNo,
      String stringRealMoney, String stringCostID, String stringItemCd, String stringUsedCd, Hashtable hashtableDoc2M010, String[] arrayDescript, Vector retVector,
      FargloryUtil exeUtil) throws Throwable {
    Hashtable hashtableDescript = new Hashtable();
    return putIntoVectorFull(stringRowtype, stringNo, intFlowNo, stringDbCrCd, stringAccountNo, stringDepartNo, stringFactoryNo, stringRealMoney, stringCostID, stringItemCd,
        stringUsedCd, 0, "1", hashtableDoc2M010, arrayDescript, retVector, exeUtil, new Hashtable());
  }

  // 到期日
  public int putIntoVector3(String stringRowtype, String stringNo, int intFlowNo, String stringDbCrCd, String stringAccountNo, String stringDepartNo, String stringFactoryNo,
      String stringRealMoney, String stringCostID, int intPosition, String stringCount, Hashtable hashtableDoc2M010, Vector retVector, FargloryUtil exeUtil,
      Hashtable hashtableData) throws Throwable {
    Hashtable hashtableDescript = new Hashtable();
    return putIntoVectorFull(stringRowtype, stringNo, intFlowNo, stringDbCrCd, stringAccountNo, stringDepartNo, stringFactoryNo, stringRealMoney, stringCostID, "", "", intPosition,
        stringCount, hashtableDoc2M010, null, retVector, exeUtil, hashtableData);
  }

  // 全部
  public int putIntoVectorFull(String stringRowtype, String stringNo, int intFlowNo, String stringDbCrCd, String stringAccountNo, String stringDepartNo, String stringFactoryNo,
      String stringRealMoney, String stringCostID, String stringItemCd, String stringUsedCd, int intPosition, String stringCount, Hashtable hashtableDoc2M010,
      String[] arrayDescript, Vector retVector, FargloryUtil exeUtil, Hashtable hashtableData) throws Throwable {
    // 0 BarCode 1 DocNo 2 VoucherYMD014 3 ComNo 4 Descript
    // 5 FactoryNo 6 AccFirst 7 DepartNoFirst 8 PayCondition1 9 PayCondition2
    // 10 (到期日) 11 BankCd 12 BankNo 13 Amt2146 14 Amt2147
    String stringBarCode = "" + hashtableDoc2M010.get("BarCode");
    String stringDocNo = "" + hashtableDoc2M010.get("DocNo");
    String stringVoucherYMD014 = "" + hashtableDoc2M010.get("VoucherYMD014");
    String stringComNo = "" + hashtableDoc2M010.get("ComNo");
    String stringDescript = "" + hashtableDoc2M010.get("Descript");
    String stringFactoryNoUnion = "" + hashtableDoc2M010.get("FactoryNo");
    String stringAccFirst = "" + hashtableDoc2M010.get("AccFirst");
    String stringDepartNoFirst = "" + hashtableDoc2M010.get("DepartNoFirst");
    String stringPayC1 = "" + hashtableDoc2M010.get("PayCondition1");
    String stringPayC2 = "" + hashtableDoc2M010.get("PayCondition2");
    String stringKind = "" + hashtableDoc2M010.get("到期日");
    String stringBankCd = "" + hashtableDoc2M010.get("BankCd");
    String stringBankNo = "" + hashtableDoc2M010.get("BankNo");
    String stringAccountCountStatusS = "" + hashtableDoc2M010.get("AccountCountStatusS");
    String stringComNoType = "" + hashtableDoc2M010.get("ComType");
    String stringItemCdL = "";
    String stringAcctountType = "" + hashtableDoc2M010.get("AcctountType");
    String stringUseName = "";
    String stringWriteVoucherData = "" + hashtableData.get("WRITE_VOUCHER_DATA");
    if ("null".equals(stringWriteVoucherData))
      stringWriteVoucherData = "";
    String stringTemp = "";
    System.out.println("stringWriteVoucherData(" + stringWriteVoucherData + ")-------------------------------");
    String[] arrayDescription = { "", "", "", "", "" };
    String[] retDataTemp = new String[27];
    String[][] retFED1004 = null;
    double doubleMoney2146 = exeUtil.doParseDouble("" + hashtableDoc2M010.get("Temp"));
    double doubleAmt2146 = exeUtil.doParseDouble("" + hashtableDoc2M010.get("Amt2146"));
    double doubleAmt2147 = exeUtil.doParseDouble("" + hashtableDoc2M010.get("Amt2147"));
    double doubleMoneySum = 0;
    double doubleSpecDiscount2146 = 0;
    double doubleUseSpecDiscount2146 = 0;
    double doubleSpecDiscount2147 = 0;
    double doubleUseSpecDiscount2147 = 0;
    boolean booleanFlag = true;
    boolean boolean2146 = true;
    boolean booleanComNoType = "E".equals(stringComNoType);
    boolean booleanA110103 = "Y".equals("" + hashtableData.get("A110103")); // true 立沖 false 非立沖
    boolean booleanDESCRIPT = "Y".equals("" + hashtableData.get("DESCRIPT")); //
    // Hashtable hashtableDoc2M042 = getDoc2M042( ) ;
    int intAcctCount = 0;
    int intMaxCount = exeUtil.doParseInteger(stringCount);
    if (intMaxCount <= 0)
      intMaxCount = 1;
    //
    System.out.println("intMaxCount(" + intMaxCount + ")---------------------------");
    //
    if ("null".equals(stringWriteVoucherData)) {
      stringWriteVoucherData = getToday("yymmdd");
    }
    if ("".equals(stringFactoryNo))
      stringFactoryNo = stringFactoryNoUnion;
    if ("".equals(stringDepartNo))
      stringDepartNo = stringDepartNoFirst;
    if ("110301".equals(stringAccountNo))
      stringDepartNo = "";
    // 明細一、明細二、明細三、明細四、明細五 18-22
    retFED1004 = getFED1004(stringAccountNo, booleanComNoType);
    if (arrayDescript != null) {
      boolean booleanFlagL = false;
      for (int intNo = 0; intNo < arrayDescript.length; intNo++) {
        if ("null".equals("" + arrayDescript[intNo])) {
          arrayDescript = null;
          break;
        }
        if (!"".equals("" + arrayDescript[intNo]))
          booleanFlagL = true;
      }
      if (!booleanFlagL)
        arrayDescript = null;
    }
    for (int intNo = 0; intNo < 5; intNo++) {
      if (arrayDescript != null) {
        arrayDescription[intNo] = arrayDescript[intNo];
        continue;
      }
      arrayDescription[intNo] = "";
      if ("2146".equals(stringAccountNo) || "2147".equals(stringAccountNo)) {
        if (intNo == 2)
          arrayDescription[intNo] = stringBankCd;
        if (intNo == 3)
          arrayDescription[intNo] = stringBankNo;
      }
      if (intNo >= retFED1004.length)
        continue;
      //
      stringItemCdL = retFED1004[intNo][0].trim();
      //
      if (stringItemCd.equals(stringItemCdL))
        arrayDescription[intNo] = getUseName(stringItemCd, stringUsedCd);
      // 扣繳
      if ("G20".equals(stringItemCdL)) {
        stringTemp = "" + hashtableDoc2M010.get("InvoiceTotalMoney");
        if ("null".equals(stringTemp))
          stringTemp = "";
        arrayDescription[intNo] = stringTemp; // ReceiptTotalMoney
      }
      if ("G06".equals(stringItemCdL)) {
        stringTemp = "" + hashtableDoc2M010.get("InvoiceTotalMoney");
        if ("null".equals(stringTemp))
          stringTemp = "";
        arrayDescription[intNo] = stringTemp; // ReceiptTotalMoney
      }
      if ("228203".equals(stringAccountNo) && "C07".equals(stringItemCdL)) {
        arrayDescription[intNo] = stringAccFirst;// 原立帳借方會計科目 C07
      }
      if ("G08".equals(stringItemCdL) && !"".equals(stringVoucherYMD014)) {
        stringTemp = "" + hashtableDoc2M010.get("InvoiceKind");
        if ("null".equals(stringTemp))
          stringTemp = "";
        arrayDescription[intNo] = getExpiredDateUnion(intPosition, stringAccountNo, stringVoucherYMD014, stringTemp, "", "G", stringComNo, exeUtil);
      }
      if ("G07".equals(stringItemCdL) && !"".equals(stringVoucherYMD014)) {
        arrayDescription[intNo] = stringRealMoney;
      }
      if ("C13".equals(stringItemCdL)) {
        arrayDescription[intNo] = stringDocNo; // 請款申請書編號
      }
      if ("Y12".equals(stringItemCdL)) {
        Vector vectorCostID = new Vector();
        Vector vectorCostIDName = new Vector();
        vectorCostIDName.add("無");
        Vector vectorDoc5M022 = getQueryDataHashtableDoc("Doc5M022", new Hashtable(), " AND RecordNo = '" + stringNo + "' AND  BarCode  =  '" + stringBarCode + "' ", new Vector(),
            exeUtil);
        String stringCostIDL = "";
        String stringCostIDName = "";
        String stringTempL = "";
        Hashtable hashtableCostID = new Hashtable();
        for (int intNoL = 0; intNoL < vectorDoc5M022.size(); intNoL++) {
          stringCostIDL = exeUtil.getVectorFieldValue(vectorDoc5M022, intNoL, "CostID");
          //
          doCheckCostIDName(stringCostIDL, exeUtil, vectorCostIDName, hashtableCostID);

        }
        for (int intNoL = 0; intNoL < vectorCostIDName.size(); intNoL++) {
          stringCostIDName = "" + vectorCostIDName.get(intNoL);
          //
          vectorCostID = (Vector) hashtableCostID.get(stringCostIDName);
          if (vectorCostID == null)
            continue;
          stringTempL = "";
          //
          for (int intL = 0; intL < vectorCostID.size(); intL++) {
            stringCostIDL = "" + vectorCostID.get(intL);
            //
            if (!"".equals(stringTempL))
              stringTempL += ",";
            stringTempL += stringCostIDL;
          }
          if ("無".equals(stringCostIDName))
            stringCostIDName = "";
          if (!"".equals(stringTempL))
            stringTemp += stringCostIDName + stringTempL + " ";
        }
        arrayDescription[intNo] = stringTemp; // 營業部請款代碼
      }
      // 發票
      stringTemp = "" + hashtableDoc2M010.get("InvoiceDate");
      if ("null".equals(stringTemp))
        stringTemp = "";
      if ("B08".equals(stringItemCdL))
        arrayDescription[intNo] = exeUtil.getDateConvertRoc(stringTemp).replaceAll("/", ""); // InvoiceDate
      stringTemp = "" + hashtableDoc2M010.get("InvoiceNo");
      if ("null".equals(stringTemp))
        stringTemp = "";
      if ("B09".equals(stringItemCdL))
        arrayDescription[intNo] = stringTemp; // InvoiceNo
      stringTemp = "" + hashtableDoc2M010.get("InvoiceMoney");
      if ("null".equals(stringTemp))
        stringTemp = "";
      if ("B10".equals(stringItemCdL))
        arrayDescription[intNo] = stringTemp; // InvoiceMoney
      stringTemp = "" + hashtableDoc2M010.get("InvoiceTotalMoney");
      if ("null".equals(stringTemp))
        stringTemp = "";
      if ("B11".equals(stringItemCdL))
        arrayDescription[intNo] = stringTemp; // InvoiceTotalMoney
      doSetBankNo(stringAccountNo, stringFactoryNo, arrayDescription);
      if ("B40".equals(stringItemCdL)) {
        String stringInvoiceKind = "" + hashtableDoc2M010.get("InvoiceKind");
        String stringDeductKind = "" + hashtableDoc2M010.get("DeductKind");
        boolean booleanComNo = "Z6".equals(stringComNo);// oce
        if (!stringKind.startsWith("折讓")) {
          stringInvoiceKind = getInvoiceKindName(stringInvoiceKind);
          if (!"".equals(stringInvoiceKind) && "B".equals(stringDeductKind))
            stringInvoiceKind += "-資產";
        } else {
          stringInvoiceKind = stringKind;
        }
        arrayDescription[intNo] = stringInvoiceKind;
      }
      // 佣金支出
      if ("462".equals(stringItemCdL))
        arrayDescription[intNo] = "房屋介紹費";
      if ("A02".equals(stringItemCdL) && "110301".equals(stringAccountNo)) {
        if ("Z6".equals(stringComNo)) {
          arrayDescription[intNo] = "12675-0";
          stringFactoryNo = "0095289";
        } else if ("71".equals(stringComNo)) {
          arrayDescription[intNo] = "13187-7";
          stringFactoryNo = "0095289";
        } else if ("72".equals(stringComNo)) {
          arrayDescription[intNo] = "14403-4";
          stringFactoryNo = "0095289";
        } else if ("73".equals(stringComNo)) {
          arrayDescription[intNo] = "15264-3";
          stringFactoryNo = "0095289";
        } else if ("Z4".equals(stringComNo)) {
          arrayDescription[intNo] = "12673-2";
          stringFactoryNo = "0095289";
        } else if ("Z5".equals(stringComNo)) {
          arrayDescription[intNo] = "1561-8";
          stringFactoryNo = "0095289";
        } else if ("20".equals(stringComNo)) {
          arrayDescription[intNo] = "102362";
          stringFactoryNo = "0170077";
        } else if ("00".equals(stringComNo)) {
          arrayDescription[intNo] = "9516-1-00";
          stringFactoryNo = "0095289";
        } else if ("Z3".equals(stringComNo)) {
          arrayDescription[intNo] = "5438-4";
          stringFactoryNo = "0095289";
        } else if ("Z0".equals(stringComNo)) {
          arrayDescription[intNo] = "13188-6";
          stringFactoryNo = "0095289";
        } else if ("Z2".equals(stringComNo)) {
          arrayDescription[intNo] = "12676-1";
          stringFactoryNo = "0095289";
        } else if ("10".equals(stringComNo)) {
          arrayDescription[intNo] = "107-0";
          stringFactoryNo = "0095289";
        } else if ("ZD".equals(stringComNo)) {
          arrayDescription[intNo] = "86666000";
          stringFactoryNo = "0095289";
        } else if ("01".equals(stringComNo)) {
          arrayDescription[intNo] = "7978-3";
          stringFactoryNo = "0095289";
        } else if ("76".equals(stringComNo)) {
          arrayDescription[intNo] = "07288200";
          stringFactoryNo = "0095289";
        } else if ("12".equals(stringComNo)) {
          arrayDescription[intNo] = "3237-9";
          stringFactoryNo = "0095289";
        } else if ("ZA".equals(stringComNo)) {
          arrayDescription[intNo] = "12712-2";
          stringFactoryNo = "0095289";
        } else if ("02".equals(stringComNo)) {
          arrayDescription[intNo] = "20885500";
          stringFactoryNo = "0095289";
        }
        // else if("Z2".equals(stringComNo)) {arrayDescription[intNo] = "3237-9" ;
        // stringFactoryNo = "0095289" ;}
      }
      // 到期日 A04
      System.out.println("到期日(" + stringItemCdL + ")(" + stringVoucherYMD014 + ")-----------------------S");
      if ("A04".equals(stringItemCdL) && !"".equals(stringVoucherYMD014)) {
        String stringExpiredDate = "";
        System.out.println("stringPayC1(" + stringPayC1 + ")stringPayC2(" + stringPayC2 + ")-----------------------1");
        if ("退保留款".equals(stringKind)) {
          // int intDay = 0 ;
          // String[] arrayDate = convert.StringToken(stringVoucherYMD014, "/") ;
          String[][] retDoc5M0220 = getDoc5M0220("", "", stringBarCode, "");
          // stringPayC1
          // 0 BarCode 1 BarCodeRef 2 FactoryNo 3 RecordNo 4 BackRetainMoney 5 EDateTime
          for (int intNoL = 0; intNoL < retDoc5M0220.length; intNoL++) {
            if (!"0".equals(retDoc5M0220[intNoL][3].trim())) {
              stringPayC1 = "120";
              break;
            }
          }
          if ("999".equals(stringPayC1))
            stringPayC1 = "120";
          /*
           * intDay = doParseInteger(arrayDate[2].trim()) ; if(intDay>=1 && intDay<=10) {
           * stringExpiredDate = arrayDate[0] + arrayDate[1] + "25" ; } else if
           * (intDay>=11 && intDay<=25) { stringExpiredDate = arrayDate[0] + arrayDate[1]
           * + "25" ; } else { stringExpiredDate =
           * datetime.dateAdd(arrayDate[0]+arrayDate[1]+"01", "m", 1) ; stringExpiredDate
           * = stringExpiredDate.trim().substring(0,6) + "10" ; } stringExpiredDate =
           * datetime.dateAdd(stringExpiredDate, "m", 4) ; stringExpiredDate =
           * convert.ac2roc(stringExpiredDate) ;
           */
          //
          stringExpiredDate = getExpiredDateUnion(1, stringAccountNo, stringVoucherYMD014, stringPayC1, stringPayC2, stringRowtype, stringComNo, exeUtil);
          arrayDescription[intNo] = stringExpiredDate;
          System.out.println("到期日-------------------------1-退保留款");
        } else if (!"".equals(stringPayC1) && !"".equals(stringPayC2)) {
          stringExpiredDate = getExpiredDateUnion(intPosition, stringAccountNo, stringVoucherYMD014, stringPayC1, stringPayC2, stringRowtype, stringComNo, exeUtil);
          arrayDescription[intNo] = stringExpiredDate;
          System.out.println("到期日(" + intNo + ")-----------------------2");
        }
        System.out.println("到期日-stringExpiredDate(" + stringExpiredDate + ")----------------------");
        if (booleanA110103 && !"".equals(stringExpiredDate)) {
          for (int intL = 0; intL < retVector.size(); intL++) {
            retDataTemp = (String[]) retVector.get(intL);
            if ("D".equals(retDataTemp[9].trim()) && "2821".equals(retDataTemp[10].trim())) {
              retDataTemp[18] = stringExpiredDate;
            }
          }
          retDataTemp = new String[27];
        }
      }
      System.out.println("到期日-----------------------E");
      // 其他應付費用 E05
      if ("E05".equals(stringItemCdL))
        arrayDescription[intNo] = "其他";
      if (booleanDESCRIPT) {
        stringUseName = ("" + hashtableData.get(stringItemCdL)).trim();
        System.out.println("booleanDESCRIPT(" + booleanDESCRIPT + ")stringUseName(" + stringUseName + ")-----------------------");
        if (!"null".equals(stringUseName)) {
          arrayDescription[intNo] = stringUseName;
        }
      }
    }
    if ("2285".equals(stringAccountNo)) {
      stringDepartNo = "";
      stringFactoryNo = "";
    }
    if (booleanA110103 && !"".equals(stringVoucherYMD014) && "110301".equals(stringAccountNo)) {
      for (int intL = 0; intL < retVector.size(); intL++) {
        retDataTemp = (String[]) retVector.get(intL);
        if ("D".equals(retDataTemp[9].trim()) && "2821".equals(retDataTemp[10].trim())) {
          retDataTemp[18] = exeUtil.getDateConvertRoc(stringVoucherYMD014).replaceAll("/", "");
        }
      }
      retDataTemp = new String[27];
    }
    if ("8111".equals(stringAccountNo))
      stringFactoryNo = "";
    //
    intFlowNo++;
    retDataTemp[0] = stringBarCode; // 條碼編號 0
    retDataTemp[1] = stringDocNo; // 公文代號 1
    retDataTemp[2] = stringRowtype; //
    retDataTemp[3] = stringNo; // No 3
    retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
    retDataTemp[5] = "0"; // 傳票流水號 5
    retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
    retDataTemp[7] = stringComNo; // 公司代號 7
    retDataTemp[8] = "0"; // Kind 8
    retDataTemp[9] = stringDbCrCd; // 借貸 9
    retDataTemp[10] = stringAccountNo; // 會計科目 10
    retDataTemp[11] = stringDepartNo; // 部門 11
    retDataTemp[12] = stringFactoryNo; // 對象 12
    retDataTemp[13] = stringRealMoney; // 金額 13
    retDataTemp[14] = "0"; // 匯率 14
    retDataTemp[15] = "0"; // 原類金額 15
    retDataTemp[16] = "0"; // 請款金額 16
    retDataTemp[17] = "U"; // 狀態-未過帳 17
    retDataTemp[18] = arrayDescription[0]; // 明細一 18
    retDataTemp[19] = arrayDescription[1]; // 明細二 19
    retDataTemp[20] = arrayDescription[2]; // 明細三 20
    retDataTemp[21] = arrayDescription[3]; // 明細四 21
    retDataTemp[22] = arrayDescription[4]; // 明細五 22
    retDataTemp[23] = stringDescript; // 摘要 23
    retDataTemp[24] = getUser(); // 修改者 24
    retDataTemp[25] = stringWriteVoucherData; // 修改日期 25
    retDataTemp[26] = "A"; //
    //
    if ("借方".equals(stringKind)) {
      stringCostID = "" + hashtableDoc2M010.get("Temp");
      if ("A170701".equals(stringCostID)) {
        // 0 BorrowAmt 1 DateStart 2 DateEnd 3 AccrualRate 4 Formula 5 Accrual
        //
        double doubleAmt = 0;
        String stringAmt = "";
        String[] retDataTempL = null;
        String[][] retDoc5M0221 = getDoc5M0221("Doc5M0221", stringBarCode);
        for (int intNoL = 0; intNoL < retDoc5M0221.length; intNoL++) {
          for (int i = 0; i < 5; i++) {
            arrayDescription[i] = "";
            if (i < retFED1004.length) {
              stringItemCdL = retFED1004[i][0].trim();
              // 利息支出
              if ("463".equals(stringItemCdL))
                arrayDescription[i] = "銀行利息";
              // 利率
              if ("B03".equals(stringItemCdL))
                arrayDescription[i] = exeUtil.getFormatNum2(retDoc5M0221[intNoL][3].trim()) + "%";
              // 期間
              if ("B06".equals(stringItemCdL)) {
                stringTemp = exeUtil.getDateConvertRoc(retDoc5M0221[intNoL][1].trim()).replaceAll("/", "") + "-"
                    + exeUtil.getDateConvertRoc(retDoc5M0221[intNoL][2].trim()).replaceAll("/", "");
                arrayDescription[i] = stringTemp;
              }
              // 計息金額
              if ("B07".equals(stringItemCdL))
                arrayDescription[i] = retDoc5M0221[intNoL][0].trim();
            }
          }
          doubleAmt = exeUtil.doParseDouble(retDoc5M0221[intNoL][5].trim());
          stringAmt = convert.FourToFive("" + Math.abs(doubleAmt), 0);
          //
          retDataTempL = exeUtil.doCopyArray(retDataTemp);
          retDataTempL[2] = "P";
          retDataTempL[6] = "" + intFlowNo;
          retDataTempL[9] = doubleAmt > 0 ? "D" : "C"; // 借貸 9
          retDataTempL[13] = stringAmt;
          retDataTempL[18] = arrayDescription[0]; // 明細一 18
          retDataTempL[19] = arrayDescription[1]; // 明細二 19
          retDataTempL[20] = arrayDescription[2]; // 明細三 20
          retDataTempL[21] = arrayDescription[3]; // 明細四 21
          retDataTempL[22] = arrayDescription[4]; // 明細五 22
          retVector.add(retDataTempL);
          if ((intNoL + 1) != retDoc5M0221.length)
            intFlowNo++;
        }
      } else if ("F293001".equals(stringCostID)) {
        // 0 InvestmentTrust 1 FundNo 2 BandNo 3 AccountNo 4 AccountName
        // 5 Amt 6 Unit 7 NetAmt
        String[] retDataTempL = null;
        String[][] retDoc5M0222 = getDoc5M0222("Doc5M0222", stringBarCode);
        System.out.println("F293001-------------------------------(retDoc5M0222.length)" + retDoc5M0222.length);
        for (int intNoL = 0; intNoL < retDoc5M0222.length; intNoL++) {
          for (int i = 0; i < 5; i++) {
            arrayDescription[i] = "";
            if (i < retFED1004.length) {
              stringItemCdL = retFED1004[i][0].trim();
              // 單位數
              if ("C02".equals(stringItemCdL))
                arrayDescription[i] = exeUtil.getFormatNum2(retDoc5M0222[intNoL][6].trim());
              // 淨值
              if ("C03".equals(stringItemCdL))
                arrayDescription[i] = exeUtil.getFormatNum2(retDoc5M0222[intNoL][7].trim());
              // 投信公司
              if ("C04".equals(stringItemCdL))
                arrayDescription[i] = retDoc5M0222[intNoL][0].trim();
            }
          }
          retDataTempL = exeUtil.doCopyArray(retDataTemp);
          retDataTempL[2] = "P";
          retDataTempL[6] = "" + intFlowNo;
          retDataTempL[12] = retDoc5M0222[intNoL][1].trim();
          retDataTempL[13] = retDoc5M0222[intNoL][5].trim();
          retDataTempL[18] = arrayDescription[0]; // 明細一 18
          retDataTempL[19] = arrayDescription[1]; // 明細二 19
          retDataTempL[20] = arrayDescription[2]; // 明細三 20
          retDataTempL[21] = arrayDescription[3]; // 明細四 21
          retDataTempL[22] = arrayDescription[4]; // 明細五 22
          retVector.add(retDataTempL);
          System.out.println("F293001-------------------------------" + retVector.size());
          if ((intNoL + 1) != retDoc5M0222.length) {
            intFlowNo++;
          }
        }
      } else {
        retVector.add(retDataTemp);
      }
      //
      return intFlowNo;
    }
    boolean2146 = "2147,2146,".indexOf(stringAccountNo + ",") != -1;
    // 2147、2146
    if ("貸方".equals(stringKind)) {
      intAcctCount = (boolean2146 && exeUtil.doParseInteger(stringAcctountType) == 3) ? 2 : 1;
    } else {
      intAcctCount = 1;
    }
    if (!"Y".equals(stringAccountCountStatusS) && "扣繳".equals(stringKind)) {
      intMaxCount = 1;
    }
    //
    System.out.println(
        "stringKind(" + stringKind + ")intMaxCount(" + intMaxCount + ")boolean2146(" + boolean2146 + ")stringAcctountType(" + stringAcctountType + ")---------------------------");
    for (int intAcctNo = 0; intAcctNo < intAcctCount; intAcctNo++) {
      //
      if ("貸方".equals(stringKind)) {
        if (boolean2146 && exeUtil.doParseInteger(stringAcctountType) == 3) {
          if (intPosition == 0) {
            if (intAcctNo == 0) {
              // 2146
              // 2146 = 付款總金額 * (2146 / 2146+2147)
              doubleMoney2146 = exeUtil.doParseDouble(stringRealMoney) * doubleAmt2146 / (doubleAmt2146 + doubleAmt2147);
              // 2146特 = 特別折讓 * (付款比例)
              // doubleUseSpecDiscount2146 = doubleSpecDiscount2146 * doubleRate ;
              // doubleUseSpecDiscount2146 =
              // doParseDouble(convert.FourToFive(""+doubleUseSpecDiscount2146, 0)) ;
              // 本次 = 2146 - 2146特
              doubleMoneySum = doubleMoney2146 - doubleUseSpecDiscount2146;
              retDataTemp[10] = "2146";
            } else {
              // 2147
              // 2147特 = 特別折讓 * (2147 / 2146+2147 特折比)
              // doubleUseSpecDiscount2147 = doubleSpecDiscount2147 * doubleRate ;
              // doubleUseSpecDiscount2147 =
              // doParseDouble(convert.FourToFive(""+doubleUseSpecDiscount2147, 0)) ;
              // 本次 = 2147 - 2146特
              doubleMoneySum = exeUtil.doParseDouble(stringRealMoney) - doubleMoney2146 - doubleUseSpecDiscount2147;
              retDataTemp[10] = "2147";
            }
          } else {
            if (intAcctNo == 0) {
              // 2146
              // 2146(2) = 付款總金額(2) - 2146
              doubleMoney2146 = doubleAmt2146 - doubleMoney2146;
              // 本次 = 2146(2) - (特別 - 2146 特別)
              doubleMoneySum = doubleMoney2146 - (doubleSpecDiscount2146 - doubleUseSpecDiscount2146);
              retDataTemp[10] = "2146";
            } else {
              // 2147(2) = 付款總金額(2) - 2146(2)
              doubleMoneySum = exeUtil.doParseDouble(stringRealMoney) - doubleMoney2146;
              // 本次 = 2147(2) - (特別 - 2147特別)
              doubleMoneySum = doubleMoneySum - (doubleSpecDiscount2147 - doubleUseSpecDiscount2147);
              retDataTemp[10] = "2147";
            }
          }
        } else {
          doubleMoneySum = exeUtil.doParseDouble(stringRealMoney);
        }
      } else {
        doubleMoneySum = exeUtil.doParseDouble(stringRealMoney);
      }
      //
      String stringDate = "";
      String stringFlow = "";
      String[] arrayTemp = null;
      double doubleMoneySumFinal = doubleMoneySum;
      double doubleMoney = 0;
      double doubleMoneyFinal = doubleMoneySumFinal / intMaxCount;
      doubleMoneyFinal = exeUtil.doParseDouble(convert.FourToFive("" + doubleMoneyFinal, 0));
      for (int intCount = 0; intCount < intMaxCount; intCount++) {
        arrayTemp = exeUtil.doCopyArray(retDataTemp);
        if (intCount == 0 && intAcctNo == 0) {
        } else
          intFlowNo++;
        if (intCount != 0) {
          stringFlow = "" + intCount;
        } else {
          stringFlow = "";
        }
        arrayTemp[6] = "" + intFlowNo; // 傳票序號 6
        arrayTemp[2] = stringRowtype + stringFlow; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
        // 金額
        if (intCount == intMaxCount - 1) {
          // 最後一筆
          doubleMoney = doubleMoneySumFinal - doubleMoneyFinal * intCount;
        } else {
          doubleMoney = doubleMoneyFinal;
        }
        arrayTemp[13] = convert.FourToFive("" + doubleMoney, 0); // 金額 13
        // 到期
        for (int intNoL = 0; intNoL < 5; intNoL++) {
          if (intNoL >= retFED1004.length)
            continue;
          stringItemCd = retFED1004[intNoL][0].trim();
          // 到期日
          if ("A04".equals(stringItemCd)) {
            stringDate = arrayTemp[18 + intNoL].trim();
            if (!"".equals(stringDate)) {
              if ("0".equals(stringPayC1) && intCount != 0 && "11".equals(datetime.getDate(stringDate))) {
                stringDate = datetime.dateAdd(stringDate, "d", -1);
              }
              stringDate = datetime.dateAdd(stringDate, "m", intCount);
              arrayTemp[18 + intNoL] = stringDate;
            }
          }
          // 到期日 G08
          if ("G08".equals(stringItemCd)) {
            stringDate = arrayTemp[18 + intNoL].trim();
            if (!"".equals(stringDate)) {
              if ("0".equals(stringPayC1) && intCount != 0 && "11".equals(datetime.getDate(stringDate))) {
                stringDate = datetime.dateAdd(stringDate, "d", -1);
              }
              stringDate = datetime.dateAdd(stringDate, "m", intCount);
              arrayTemp[18 + intNoL] = stringDate;
            }
          }
          // G20 所得總額
          if ("G20".equals(stringItemCd)) {
            doubleMoneySum = exeUtil.doParseDouble(arrayTemp[18 + intNoL].trim());
            doubleMoney = doubleMoneySum / intMaxCount;
            doubleMoney = exeUtil.doParseDouble(convert.FourToFive("" + doubleMoney, 0));
            if (intCount == intMaxCount - 1) {
              doubleMoney = doubleMoneySum - doubleMoney * intCount;
            }
            arrayTemp[18 + intNoL] = convert.FourToFive("" + doubleMoney, 0);
          }
          if ("G06".equals(stringItemCd)) {
            doubleMoneySum = exeUtil.doParseDouble(arrayTemp[18 + intNoL].trim());
            doubleMoney = doubleMoneySum / intMaxCount;
            doubleMoney = exeUtil.doParseDouble(convert.FourToFive("" + doubleMoney, 0));
            if (intCount == intMaxCount - 1) {
              doubleMoney = doubleMoneySum - doubleMoney * intCount;
            }
            arrayTemp[18 + intNoL] = convert.FourToFive("" + doubleMoney, 0);
          }
        }
        retVector.add(arrayTemp);
      }
    }
    hashtableDoc2M010.put("InvoiceDate", "");
    hashtableDoc2M010.put("InvoiceNo", "");
    hashtableDoc2M010.put("InvoiceMoney", "");
    hashtableDoc2M010.put("InvoiceTotalMoney", "");
    hashtableDoc2M010.put("InvoiceKind", "");
    hashtableDoc2M010.put("Temp", "" + doubleMoney2146);
    return intFlowNo;
  }

  public String[] getSpecCostIDName() throws Throwable {
    String[] arrayCostIDName = { "設計缺失", "營造缺失", "行銷缺失", "營業缺失", "協商補償", "專案費用" };
    return arrayCostIDName;
  }

  public String[][] getSpecCostID() throws Throwable {
    String[][] retCostID = { { "D0101", "D0201", "D0301" }, // 設計缺失
        { "D0102", "D0202", "D0302" }, // 營造缺失
        { "D0103", "D0203", "D0303" }, // 行銷承諾
        { "D0104", "D0204", "D0304" }, // 營業缺失
        { "D0105", "D0205", "D0305" }, // 協商補償
        { "D0401", "D0402", "D0403", "D0404", "D0405" } }; // 專案費用
    return retCostID;
  }

  public Vector getSpecCostIDV() throws Throwable {
    String stringCostID = "";
    String[][] retCostID = getSpecCostID();
    Vector vectorSpecCostID = new Vector();
    for (int intNo = 0; intNo < retCostID.length; intNo++) {
      for (int intNoL = 0; intNoL < retCostID[intNo].length; intNoL++) {
        stringCostID = retCostID[intNo][intNoL].trim();
        //
        vectorSpecCostID.add(stringCostID);
      }
    }
    return vectorSpecCostID;
  }

  public void doCheckCostIDName(String stringCostIDQ, FargloryUtil exeUtil, Vector vectorCostIDName, Hashtable hashtableCostID) throws Throwable {
    String stringCostID = "";
    String stringCostID5 = exeUtil.doSubstring(stringCostIDQ, 0, 5);
    String stringCostIDName = "";
    String[] arrayCostIDName = getSpecCostIDName();
    String[][] retCostID = getSpecCostID();
    for (int intNo = 0; intNo < arrayCostIDName.length; intNo++) {
      stringCostIDName = arrayCostIDName[intNo].trim();
      for (int intNoL = 0; intNoL < retCostID[intNo].length; intNoL++) {
        stringCostID = retCostID[intNo][intNoL].trim();
        if (stringCostID.equals(stringCostID5)) {
          if (vectorCostIDName.indexOf(stringCostIDName) == -1)
            vectorCostIDName.add(stringCostIDName);
          //
          Vector vectorCostID = (Vector) hashtableCostID.get(stringCostIDName);
          if (vectorCostID == null) {
            vectorCostID = new Vector();
            hashtableCostID.put(stringCostIDName, vectorCostID);
          }
          if (vectorCostID.indexOf(stringCostIDQ) == -1)
            vectorCostID.add(stringCostIDQ);
          break;
        }
      }

    }
    // 不包含
    Vector vectorCostID = (Vector) hashtableCostID.get("無");
    if (vectorCostID == null) {
      vectorCostID = new Vector();
      hashtableCostID.put("無", vectorCostID);
    }
    if (vectorCostID.indexOf(stringCostIDQ) == -1)
      vectorCostID.add(stringCostIDQ);
  }

  // stringType A:請款
  public String getFactoryNo(String stringType, String stringBarCode, FargloryUtil exeUtil) throws Throwable {
    String stringFactoryNo = "";
    String[][] retFactoryNo = null;
    //
    if ("A".equals(stringType)) { // 請款
      retFactoryNo = getDoc2M011Union("Doc5M021", stringBarCode);// Doc5M021
      if (retFactoryNo.length > 0)
        return retFactoryNo[0][0].trim();
      retFactoryNo = getDoc2M011Union("Doc5M0211", stringBarCode);// Doc2M0211
      if (retFactoryNo.length > 0)
        return retFactoryNo[0][0].trim();
      retFactoryNo = getDoc2M013Union("Doc5M023", stringBarCode);// Doc2M023
      if (retFactoryNo.length > 0)
        return retFactoryNo[0][0].trim();
    } else if ("B".equals(stringType)) { // 借款沖銷
      stringFactoryNo = getNameUnionDoc("FactoryNo", "Doc5M030", " AND  BarCode  =  '" + stringBarCode + "' ", new Hashtable(), exeUtil);
      if (stringFactoryNo.length() > 0)
        return stringFactoryNo;
      stringFactoryNo = getNameUnionDoc("FactoryNo", "Doc5M031", " AND  BarCode  =  '" + stringBarCode + "' ", new Hashtable(), exeUtil);
      if (stringFactoryNo.length() > 0)
        return stringFactoryNo;
      stringFactoryNo = getNameUnionDoc("FactoryNo", "Doc5M033", " AND  BarCode  =  '" + stringBarCode + "' ", new Hashtable(), exeUtil);
      if (stringFactoryNo.length() > 0)
        return stringFactoryNo;
    }
    return stringFactoryNo;
  }

  public String[][] getErrorArray(String stringMessage) throws Throwable {
    String[][] retTable = new String[1][1];
    //
    if ("".equals(stringMessage))
      stringMessage = "發生錯誤，請洽資訊室";
    //
    retTable[0][0] = stringMessage;
    return retTable;
  }

  // 一般物料轉傳票 END
  // 2008/06/09 修正 獎金
  public String[][] getConvertToArrayBonus(boolean booleanTEST, boolean booleanSource, String[][] retDoc2M010, String[][] retDoc2M012, FargloryUtil exeUtil) throws Throwable {
    //
    String stringVoucherYMD014 = ("" + get("Doc2M014_VOUCHER_YMD")).trim();
    String stringAccountCountS = ("" + get("Doc2M014_AccountCount")).trim();
    String stringAccountCountStatusS = ("" + get("Doc2M014_AccountCount_Status")).trim();
    if ("null".equals(stringVoucherYMD014))
      stringVoucherYMD014 = "";
    //
    int intFlowNo = 0;
    String stringComNo = retDoc2M010[0][0].trim();
    String stringKind = "0";
    String stringDescript = retDoc2M010[0][1].trim().replaceAll("\n", "");
    String stringDescriptFinit = "";
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringFactoryNo = "Z0001"; // retDoc2M010[0][28].trim( ) ;
    String stringInputDepartNo = retDoc2M010[0][12].trim();
    String stringOriEmployeeNo = retDoc2M010[0][17].trim();
    String stringRealMoney = "";
    String stringTemp = "";
    String[] retDataTemp = null;
    String stringTotalAmt = "";
    String[][] retTable = new String[1][1];
    double doubleTotalAmt = 0;
    double doubleTotalNoTaxAmt = 0;
    //
    Vector retVector = new Vector();
    Vector retVectorC = new Vector();
    // System.out.println("---------------------借方" );
    // 摘要
    char charWord = 'A';
    boolean booleanDigit = true;
    for (int intNo = 0; intNo < 4; intNo++) {
      charWord = stringDescript.charAt(intNo);
      if (!Character.isDigit(charWord)) {
        booleanDigit = false;
      }
    }
    if (!booleanDigit) {
      stringDescriptFinit = "";
    } else {
      boolean booleanStart = false;
      for (int intNo = 4; intNo < stringDescript.length(); intNo++) {
        stringTemp = stringDescript.substring(intNo, intNo + 1);
        if (!booleanStart && "(".equals(stringTemp))
          booleanStart = true;
        if (booleanStart && ")".equals(stringTemp)) {
          stringDescriptFinit = stringDescript.substring(0, intNo + 1);
          break;
        }
      }
    }
    stringDescript = stringTemp;
    stringDescript = convert.replace(stringDescript, "'", "''");
    //
    int intNum = 0;
    String stringUsedCd = "";
    String stringItemCd = "";
    String stringItemCdS = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String stringDepartNo = "";
    String stringProjectID1 = "";
    String stringInOut = "";
    String stringCostIDNum = "";
    String stringAccountNo = "";
    String stringAccountNoFirst = "";
    String stringPosition = "";
    String stringCostIDPosition = "";
    String stringDate = "";
    String stringFlow = "";
    String stringTemp1 = "";
    String stringTemp2 = "";
    String[] arrayTemp = null;
    double doubleMoneySum = 0;
    double doubleMoney = 0;
    double doubleRealMoney = 0;
    String[][] retDoc2M020 = null;
    String[][] retFED1004 = null;
    boolean booleanFlag = true;
    //
    for (int intNo = 0; intNo < retDoc2M012.length; intNo++) {
      stringInOut = retDoc2M012[intNo][0].trim();
      stringDepartNo = retDoc2M012[intNo][1].trim();
      stringProjectID1 = retDoc2M012[intNo][3].trim();
      stringCostID = retDoc2M012[intNo][4].trim();
      stringCostID1 = retDoc2M012[intNo][5].trim();
      stringRealMoney = retDoc2M012[intNo][6].trim();
      doubleRealMoney = exeUtil.doParseDouble(stringRealMoney);
      booleanFlag = doubleRealMoney > 0;
      stringRealMoney = convert.FourToFive("" + Math.abs(doubleRealMoney), 0);
      //
      intFlowNo++;
      //
      stringTemp = "銷獎出售" + (("132".equals(stringCostID + stringCostID1) ? "公積金" : "訴訟公積金"));
      stringTemp1 = code.StrToByte(stringDescriptFinit);
      stringTemp2 = code.StrToByte(stringTemp);
      intNum = stringTemp1.length() + stringTemp2.length();
      if (intNum > 30) {
        intNum = intNum - 30;
        stringTemp2 = exeUtil.doSubstring(stringTemp1, 0, stringTemp1.length() - intNum);
        stringTemp2 = code.ByteToStr(stringTemp2);
        if (stringDescriptFinit.indexOf(stringTemp2) == -1) {
          stringTemp2 = exeUtil.doSubstring(stringTemp1, 0, stringTemp1.length() - intNum - 1);
          stringTemp2 = code.ByteToStr(stringTemp2);
        }
        if (code.StrToByte(stringTemp2).endsWith("("))
          stringTemp2 = stringTemp2.substring(0, stringTemp2.length() - 1);
        stringDescript = stringTemp2 + stringTemp;
      } else {
        stringDescript = stringDescriptFinit + stringTemp;
      }
      //
      retDataTemp = new String[27];
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "L"; //
      retDataTemp[3] = "" + (intNo + 1); // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = booleanFlag ? "D" : "C"; // 借貸 9
      retDataTemp[10] = "125199"; // 會計科目 10
      retDataTemp[11] = stringDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNo; // 對象 12
      retDataTemp[13] = stringRealMoney; // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 請款金額 16
      retDataTemp[17] = "U"; // 狀態-未過帳 17
      retDataTemp[18] = ""; // 明細一 18
      retDataTemp[19] = ""; // 明細二 19
      retDataTemp[20] = ""; // 明細三 20
      retDataTemp[21] = ""; // 明細四 21
      retDataTemp[22] = ""; // 明細五 22
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 24
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
      retDataTemp[26] = "A"; //
      //
      if (booleanFlag) {
        retVector.add(retDataTemp);
      } else {
        retVectorC.add(retDataTemp);
      }
      // intFlowNo++ ;
      //
      retDataTemp = new String[27];
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "C"; //
      retDataTemp[3] = ""; // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = booleanFlag ? "C" : "D"; // 借貸 9
      retDataTemp[10] = "2258"; // 會計科目 10
      retDataTemp[11] = stringDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNo; // 對象 12
      retDataTemp[13] = stringRealMoney; // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 請款金額 16
      retDataTemp[17] = "U"; // 狀態-未過帳 17
      retDataTemp[18] = ""; // 明細一 18
      retDataTemp[19] = "提撥公積金"; // 明細二 19
      retDataTemp[20] = ""; // 明細三 20
      retDataTemp[21] = ""; // 明細四 21
      retDataTemp[22] = ""; // 明細五 22
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 24
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
      retDataTemp[26] = "A"; //
      //
      if (booleanFlag) {
        retVectorC.add(retDataTemp);
      } else {
        retVector.add(retDataTemp);
      }
    }
    for (int intNo = 0; intNo < retVectorC.size(); intNo++) {
      retDataTemp = (String[]) retVectorC.get(intNo);
      //
      intFlowNo++;
      retDataTemp[6] = "" + intFlowNo;
      //
      retVector.add(retDataTemp);
    }
    // System.out.println("--------------------年底預估傳票1START") ;
    // System.out.println("--------------------年底預估傳票1(對沖)END") ;
    // 轉換
    retTable = (String[][]) retVector.toArray(new String[0][0]);
    return retTable;
  }

  // 事後補發票
  public String[][] getConvertToArrayDocTypeB(boolean booleanTEST, boolean booleanSource, String[][] retDoc2M010, String[][] retDoc2M012, FargloryUtil exeUtil) throws Throwable {
    //
    String stringVoucherYMD014 = ("" + get("Doc2M014_VOUCHER_YMD")).trim();
    String stringAccountCountS = ("" + get("Doc2M014_AccountCount")).trim();
    if ("null".equals(stringVoucherYMD014))
      stringVoucherYMD014 = "";
    //
    int intFlowNo = 0;
    int intY10 = 0;
    String stringComNo = retDoc2M010[0][0].trim();
    String stringKind = "0";
    String stringDescript = retDoc2M010[0][1].trim().replaceAll("\n", "");
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringFactoryNo = retDoc2M010[0][28].trim();
    String stringInputDepartNo = retDoc2M010[0][12].trim();
    String stringOriEmployeeNo = retDoc2M010[0][17].trim();
    String stringPayCondition1 = retDoc2M010[0][14].trim();
    String stringPayCondition2 = retDoc2M010[0][15].trim();
    String stringItemCdL = "";
    String stringRealMoney = "";
    String stringTemp = "";
    String stringAccountCount = !"".equals(stringAccountCountS) ? stringAccountCountS : retDoc2M010[0][24].trim();
    String[] retDataTemp = null;
    String[] arrayDescription = { "", "", "", "", "" };
    String stringTotalAmt = "";
    String[][] retTable = new String[1][1];
    double doubleTotalAmt = 0;
    double doubleTotalNoTaxAmt = 0;
    Hashtable hashtableDoc2M041 = getDoc2M041();
    // Hashtable hashtableDoc2M042 = getDoc2M042( ) ;
    Vector vectorDoc2M042 = new Vector();
    //
    Vector retVector = new Vector();
    // System.out.println("---------------------借方" );
    // 摘要
    stringTemp = exeUtil.doSubstring(code.StrToByte(stringDescript), 0, 30);
    stringTemp = code.ByteToStr(stringTemp);
    if (stringDescript.indexOf(stringTemp) == -1) {
      stringTemp = exeUtil.doSubstring(code.StrToByte(stringDescript), 0, 29);
      stringTemp = code.ByteToStr(stringTemp);
    }
    stringDescript = stringTemp;
    stringDescript = convert.replace(stringDescript, "'", "''");
    // 月數
    if (doParseDouble(stringAccountCount) <= 0)
      stringAccountCount = "1";
    //
    String stringUsedCd = "";
    String stringItemCd = "";
    String stringItemCdS = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String stringDepartNo = "";
    String stringProjectID = "";
    String stringProjectID1 = "";
    String stringInOut = "";
    String stringCostIDNum = "";
    String stringAccountNo = "";
    String stringAccountNoFirst = "";
    String stringPosition = "";
    String stringCostIDPosition = "";
    String stringDate = "";
    String stringFlow = "";
    String stringDepartNoOrigin = "";
    String stringTodayAC = datetime.getToday("YYYY/mm/dd");
    String stringAcctCNew = "";
    String stringAccNo = "";
    String stringSpecBudgetVoucher = ",017PR,033FG,"; // +get("SPEC_BUDGET_VOUCHER") ;
    String[] arrayTemp = null;
    double doubleMoneySum = 0;
    double doubleMoney = 0;
    String[][] retDoc2M020 = null;
    String[][] retFED1004 = null;
    String[] retDoc2M040 = getDoc2M040();
    String stringMailMoney1 = retDoc2M040[2].trim();
    boolean booleanInOut = true;
    Vector vectorItemCd = new Vector();
    Vector vectorFactoryNo = getDoc2M0402(); // 關係人
    //
    if (!"".equals(stringVoucherYMD014)) {
      stringTodayAC = exeUtil.getDateConvert(stringVoucherYMD014);
    }
    for (int intNo = 0; intNo < retDoc2M012.length; intNo++) {
      stringInOut = retDoc2M012[intNo][0].trim();
      stringDepartNo = retDoc2M012[intNo][1].trim();
      stringProjectID = retDoc2M012[intNo][2].trim();
      stringProjectID1 = retDoc2M012[intNo][3].trim();
      stringCostID = retDoc2M012[intNo][4].trim();
      stringCostID1 = retDoc2M012[intNo][5].trim();
      stringRealMoney = retDoc2M012[intNo][6].trim();
      stringCostIDNum = stringCostID + stringCostID1;
      doubleTotalNoTaxAmt += exeUtil.doParseDouble(stringRealMoney);
      doubleTotalAmt += exeUtil.doParseDouble(retDoc2M012[intNo][7].trim());
      booleanInOut = isDepartCdIsOut(stringDepartNo);
      //
      stringDepartNo = getVoucherDepartNo(stringInOut, stringDepartNo, stringProjectID, stringProjectID1, exeUtil);
      /*
       * stringDepartNoOrigin = getVoucherDepartNo(stringInOut, stringDepartNo,
       * stringProjectID, stringProjectID1, "A", exeUtil) ;
       * /if("033GT".equals(stringDepartNoOrigin) &&
       * !stringDepartNo.equals(stringDepartNoOrigin)) { retDataTemp = new String[2] ;
       * retDataTemp[0] = "I05" ; retDataTemp[1] = "04" ;
       * vectorItemCd.add(retDataTemp) ; } else {
       */
      vectorItemCd = new Vector();
      // }
      // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD 4 ACCT_OUT(分攤)
      retDoc2M020 = getDoc2M020All(stringComNo, stringCostID, stringCostID1);
      if (retDoc2M020.length != 0) {
        stringItemCdS = retDoc2M020[0][2].trim();
        stringUsedCd = retDoc2M020[0][3].trim();
      } //
      if (booleanInOut) {
        stringInOut = "O";
      }
      //
      if ("I".equals(stringInOut)) {
        stringAccountNo = retDoc2M020[0][0].trim();
      } else if ("O".equals(stringInOut)) {
        stringAccountNo = retDoc2M020[0][1].trim();
      } else {
        stringAccountNo = retDoc2M020[0][4].trim();
      }
      if (intNo == 0) {
        stringAcctCNew = ("I".equals(stringInOut)) ? retDoc2M020[0][5].trim() : retDoc2M020[0][6].trim();
        stringAccNo = stringAccountNo;
      }
      // 明細資料
      if (stringDepartNo.indexOf("BH3") != -1 || stringDepartNo.indexOf("SH3") != -1)
        stringAccountNo = "128401";
      if ("720,601,".indexOf(stringCostID + stringCostID1) != -1)
        stringAccountNo = "125103";
      if (intNo == 0)
        stringAccountNoFirst = stringAccountNo;
      retFED1004 = getFED1004(stringAccountNo);
      // 明細一、明細二、明細三、明細四、明細五 18-22

      stringPosition = ("" + hashtableDoc2M041.get(stringAccountNo)).trim();
      intY10 = getDescriptionUnionFinal(stringComNo, stringAccountNo, stringCostID, stringCostID1, stringItemCdS, stringUsedCd, stringPosition, arrayDescription, retFED1004,
          vectorItemCd, exeUtil, false);
      //
      if (intNo == 0)
        stringInputDepartNo = stringDepartNo;
      // 遠雄建設公司 5681 開頭之會計科目修正
      if ("01".equals(stringComNo) && stringAccountNo.startsWith("5681")) {
        /*
         * if("2012/12/31".compareTo(stringTodayAC) < 0) { // 2012/12/31 以後 改成 6801
         * stringAccountNo = stringAccountNo.replaceAll("5681", "6801") ; } else {
         */
        // 2012/12/31 以前 改成 1836
        stringAccountNo = stringAccountNo.replaceAll("5681", "1836");
        // }
      }
      intFlowNo++;
      //
      retDataTemp = new String[27];
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "S"; //
      retDataTemp[3] = "" + (intNo + 1); // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "D"; // 借貸 9
      retDataTemp[10] = stringAccountNo; // 會計科目 10
      retDataTemp[11] = stringDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNo; // 對象 12
      retDataTemp[13] = stringRealMoney; // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 請款金額 16
      retDataTemp[17] = "U"; // 狀態-未過帳 17
      retDataTemp[18] = arrayDescription[0]; // 明細一 18
      retDataTemp[19] = arrayDescription[1]; // 明細二 19
      retDataTemp[20] = arrayDescription[2]; // 明細三 20
      retDataTemp[21] = arrayDescription[3]; // 明細四 21
      retDataTemp[22] = arrayDescription[4]; // 明細五 22
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 24
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
      retDataTemp[26] = "A"; //
      //
      if ("110301".equals(stringAccountNo))
        retDataTemp[12] = "0095289";
      //
      if (intY10 != 0) {
        stringCostIDNum = getCostIDNumUnion(stringVoucherYMD014, stringCostIDNum, stringInOut, stringBarCode);
        retDataTemp[17 + intY10] = stringCostIDNum;
      }
      //
      retVector.add(retDataTemp);
    }
    intFlowNo++;
    stringAccountNo = "1282";
    stringRealMoney = convert.FourToFive("" + (doubleTotalAmt - doubleTotalNoTaxAmt), 0);
    stringInputDepartNo = getVoucherDepartNo(stringInputDepartNo, exeUtil);
    //
    if (exeUtil.doParseDouble(stringRealMoney) > 0) {
      retDataTemp = new String[27];
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "K"; //
      retDataTemp[3] = "1"; // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "D"; // 借貸 9
      retDataTemp[10] = stringAccountNo; // 會計科目 10
      retDataTemp[11] = stringInputDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNo; // 對象 12
      retDataTemp[13] = stringRealMoney; // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 請款金額 16
      retDataTemp[17] = "U"; // 狀態-未過帳 17
      retDataTemp[18] = ""; // 明細一 18
      retDataTemp[19] = ""; // 明細二 19
      retDataTemp[20] = ""; // 明細三 20
      retDataTemp[21] = ""; // 明細四 21
      retDataTemp[22] = ""; // 明細五 22
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 24
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
      retDataTemp[26] = "A"; //
      //
      retVector.add(retDataTemp);
    }
    // System.out.println("---------------------貸方資料") ;
    String stringAcctC = "1281";
    String stringAcctCSession = ("" + get("Doc2M014_AcctNo")).trim();
    //
    System.out.println("--------------------貸方-會計科目(" + retVector.size() + ")");
    String[] arrayTable = new String[9];
    String[][] retDoc5M0224 = new String[0][0];
    arrayTable[0] = "N";
    arrayTable[1] = "N";
    arrayTable[2] = stringAccountNo;
    arrayTable[3] = stringAcctCNew;
    arrayTable[4] = vectorFactoryNo.indexOf(stringFactoryNo) != -1 ? "Y" : "N"; // 關係人判斷
    arrayTable[5] = stringMailMoney1;
    arrayTable[6] = "N"; // 非人壽
    arrayTable[7] = "N"; // 非固資
    arrayTable[8] = stringFactoryNo;
    String[][] retDoc2M030 = getAttNoC(retDoc2M010, retDoc5M0224, exeUtil, arrayTable);
    System.out.println("retDoc2M030.length(" + retDoc2M030.length + ")-------------");
    if (retDoc2M030.length > 0) {
      stringAcctC = retDoc2M030[0][0].trim();
    }
    //
    if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession))
      stringAcctC = stringAcctCSession;
    //
    intFlowNo++;
    //
    stringTotalAmt = convert.FourToFive("" + doubleTotalAmt, 0);
    retFED1004 = getFED1004(stringAcctC);
    for (int intNo = 0; intNo < 5; intNo++) {
      arrayDescription[intNo] = "";
      if (intNo >= retFED1004.length)
        continue;
      stringItemCd = retFED1004[intNo][0].trim();
      // 經辦人
      // if("E02".equals(stringItemCd)) arrayDescription[intNo] =
      // exeFun.getEmpName(stringOriEmployeeNo) ;
      if ("110301".equals(stringAcctC) && intNo == 0)
        arrayDescription[intNo] = "12675-0";
      // 到期日 A04
      if ("A04".equals(stringItemCd) && !"".equals(stringVoucherYMD014)) {
        arrayDescription[intNo] = getExpiredDateUnion(1, stringAcctC, stringVoucherYMD014, stringPayCondition1, stringPayCondition2, "C", stringComNo, exeUtil);
      }
      // 其他應付費用 E05
      if ("E05".equals(stringItemCd))
        arrayDescription[intNo] = "其他";
      if ("110301".equals(stringAcctC) && intNo == 0)
        arrayDescription[intNo] = "12675-0";
      if ("228203".equals(stringAcctC) && "C07".equals(stringItemCd))
        arrayDescription[intNo] = stringAccountNoFirst;
    }
    // 放入陣列中
    retDataTemp = new String[27];
    retDataTemp[0] = stringBarCode; // 條碼編號 0
    retDataTemp[1] = stringDocNo; // 公文代號 1
    retDataTemp[2] = "T"; //
    retDataTemp[3] = "1"; // No 3
    retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
    retDataTemp[5] = "0"; // 傳票流水號 5
    retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
    retDataTemp[7] = stringComNo; // 公司代號 7
    retDataTemp[8] = stringKind; // Kind 8
    retDataTemp[9] = "C"; // 借貸 9
    retDataTemp[10] = stringAcctC; // 會計科目 10
    retDataTemp[11] = stringInputDepartNo; // 部門 11
    retDataTemp[12] = stringFactoryNo; // 對象 12
    retDataTemp[13] = stringTotalAmt; // 金額 13
    retDataTemp[14] = "0"; // 匯率 14
    retDataTemp[15] = "0"; // 原類金額 15
    retDataTemp[16] = "0"; // 16
    retDataTemp[17] = "U"; // 狀態-未過帳 17
    retDataTemp[18] = arrayDescription[0]; // 明細一 18
    retDataTemp[19] = arrayDescription[1]; // 明細二 19
    retDataTemp[20] = arrayDescription[2]; // 明細三 20
    retDataTemp[21] = arrayDescription[3]; // 明細四 21
    retDataTemp[22] = arrayDescription[4]; // 明細五 22
    retDataTemp[23] = stringDescript; // 摘要 23
    retDataTemp[24] = getUser(); // 修改者 23
    retDataTemp[25] = getToday("yymmdd"); // 修改日期 24
    retDataTemp[26] = "A"; //
    if (exeUtil.doParseInteger(stringAccountCount) <= 1) {
      retVector.add(retDataTemp);
    } else {
      // 月數
      for (int intCount = 0; intCount < exeUtil.doParseInteger(stringAccountCount); intCount++) {
        arrayTemp = exeUtil.doCopyArray(retDataTemp);
        //
        if (intCount != 0) {
          intFlowNo++;
          stringFlow = "" + intCount;
        } else {
          stringFlow = "";
        }
        arrayTemp[6] = "" + intFlowNo; // 傳票序號 6
        arrayTemp[2] = "C" + stringFlow; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
        // 金額
        doubleMoneySum = exeUtil.doParseDouble(stringTotalAmt);
        doubleMoney = doubleMoneySum / exeUtil.doParseDouble(stringAccountCount);
        doubleMoney = exeUtil.doParseDouble(convert.FourToFive("" + doubleMoney, 0));
        if (intCount == exeUtil.doParseInteger(stringAccountCount) - 1) {
          doubleMoney = doubleMoneySum - doubleMoney * intCount;
        }
        arrayTemp[13] = convert.FourToFive("" + doubleMoney, 0); // 金額 13
        // 到期
        for (int intNoL = 0; intNoL < 5; intNoL++) {
          if (intNoL >= retFED1004.length)
            continue;
          stringItemCd = retFED1004[intNoL][0].trim();
          // 到期日
          if ("A04".equals(stringItemCd)) {
            stringDate = arrayTemp[18 + intNoL].trim();
            if (!"".equals(stringDate)) {
              if ("0".equals(stringPayCondition1) && intCount != 0 && "11".equals(datetime.getDate(stringDate))) {
                stringDate = datetime.dateAdd(stringDate, "d", -1);
              }
              stringDate = datetime.dateAdd(stringDate, "m", intCount);
              arrayTemp[18 + intNoL] = stringDate;
            }
          }
        }
        //
        retVector.add(arrayTemp);
      }
    }
    //
    // System.out.println("--------------------年底預估傳票1START") ;
    int intStartPos = 0;
    int intEndPos = 0;
    int intDbCrCd = 0;
    int intDbCrCdCount = 0;
    String stringID = getIDForDoc2M010("Doc2M010", stringBarCode);
    String stringVoucherDate = "";
    String stringVoucherFlowNo = "";
    String stringDbCrCd = "";
    String stringDbCrCdData = "";
    String stringAmt = "";
    String stringRemark = "預估";
    String stringSql = "";
    String[] arrayTempL = null;
    String[][] retDoc2M080 = null;
    String[][] retFED1012 = null;
    double doubleAmt = 0;
    double doubleAmtSumFinal = 0;
    double dobuleUseMoney = 0;
    double dobuleUseMoneyFinal = 0;
    boolean booleanExist = true;
    Vector vectorSql = new Vector();
    //
    String[][] retData = getTableDataDoc(
        "SELECT  ID_Def,  UseMoney " + " FROM  Doc2M0801 " + " WHERE  ID_BarCode  =  " + stringID + " " + " AND  ComNo  =  '" + stringComNo + "' " + " ORDER BY  ID_Def  ");
    if (retData.length == 0) {
      booleanExist = false;
      stringRemark = "請款";
      if (!"".equals(stringID)) {
        retData = new String[1][2];
        retData[0][0] = stringID;
        retData[0][1] = "0";
      }
    }
    //
    Vector vectorPos = new Vector();
    for (int intID = 0; intID < retData.length; intID++) {
      stringID = retData[intID][0];
      dobuleUseMoney = exeUtil.doParseDouble(retData[intID][1].trim());
      dobuleUseMoneyFinal = dobuleUseMoney;

      retDoc2M080 = getDoc2M080_2(stringID, stringRemark, stringComNo);
      intDbCrCdCount = 0;
      intDbCrCd = 0;
      for (int intNo = 0; intNo < retDoc2M080.length; intNo++) {
        stringVoucherFlowNo = retDoc2M080[intNo][23].trim();
        arrayTempL = convert.StringToken(stringVoucherFlowNo, "-");
        if (arrayTempL.length > 2) {
          stringVoucherDate = arrayTempL[0].trim();
          stringVoucherFlowNo = "" + exeUtil.doParseInteger(arrayTempL[1].trim());
          intStartPos = exeUtil.doParseInteger(arrayTempL[2].trim());
          intEndPos = exeUtil.doParseInteger(arrayTempL[3].trim());
          // 取代
          // retFED1012 = getFED1012(stringVoucherDate, stringVoucherFlowNo, stringComNo,
          // stringKind) ;
          retFED1012 = getFED1012YearEndData(stringBarCode, stringComNo, arrayTempL, stringKind, stringID, exeUtil);
          intEndPos = retFED1012.length - 1;
          intStartPos = 0;
          //
          if (retFED1012.length == 0) {
            // retTable[0][0] = "查無 [預估對沖傳票]，請洽資訊室。" ;
            // return retTable ;
            continue;
          }
          for (int intFED1012 = intEndPos; intFED1012 >= intStartPos; intFED1012--) {
            stringDbCrCd = retFED1012[intFED1012][9].trim();
            //
            if ("C".equals(stringDbCrCd)) {
              doubleAmtSumFinal = exeUtil.doParseDouble(retFED1012[intFED1012][13].trim());
            } else {
              intDbCrCdCount++;
            }
          }
          //
          for (int intFED1012 = intEndPos; intFED1012 >= intStartPos; intFED1012--) {
            stringDbCrCdData = retFED1012[intFED1012][9].trim();
            stringAmt = retFED1012[intFED1012][13].trim();
            stringDbCrCd = "C".equals(stringDbCrCdData) ? "D" : "C";
            //
            if ("D".equals(stringDbCrCdData))
              intDbCrCd++;
            //
            stringDescript = "沖" + stringVoucherDate + "-" + convert.add0(stringVoucherFlowNo, "4") + " " + retFED1012[intFED1012][23].trim();
            stringDescript = exeUtil.doSubstring(code.StrToByte(stringDescript), 0, 30);
            stringDescript = code.ByteToStr(stringDescript);
            //
            if (booleanExist) {
              // 年底預估之分次沖銷
              if ("C".equals(stringDbCrCdData)) {
                stringAmt = convert.FourToFive("" + dobuleUseMoneyFinal, 0);
              } else {
                if (intDbCrCdCount == intDbCrCd) {
                  // 最後一筆
                  stringAmt = convert.FourToFive("" + dobuleUseMoney, 0);
                } else {
                  doubleAmt = dobuleUseMoneyFinal * exeUtil.doParseDouble(stringAmt) / doubleAmtSumFinal;
                  stringAmt = convert.FourToFive("" + doubleAmt, 0);
                  dobuleUseMoney -= exeUtil.doParseDouble(stringAmt);
                }
              }
            } else {
              // 請款
            }
            //
            if ("03335,033622,03365,".indexOf(retFED1012[intFED1012][11].trim() + ",") != -1) {
              retFED1012[intFED1012][10] = retFED1012[intFED1012][10].trim().replaceAll("6201", "5681");
            }
            //
            intFlowNo++;
            retDataTemp = new String[27];
            retDataTemp[0] = stringBarCode; // 條碼編號 0
            retDataTemp[1] = stringDocNo; // 公文代號 1
            retDataTemp[2] = "W"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H 沖銷W
            retDataTemp[3] = ""; // No 3
            retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
            retDataTemp[5] = "0"; // 傳票流水號 5
            retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
            retDataTemp[7] = stringComNo; // 公司代號 7
            retDataTemp[8] = stringKind; // Kind 8
            retDataTemp[9] = stringDbCrCd; // 借貸 9
            retDataTemp[10] = retFED1012[intFED1012][10].trim(); // 會計科目 10
            retDataTemp[11] = retFED1012[intFED1012][11].trim(); // 部門 11
            retDataTemp[12] = retFED1012[intFED1012][12].trim(); // 對象 12
            retDataTemp[13] = stringAmt; // 金額 13
            retDataTemp[14] = "0"; // 匯率 14
            retDataTemp[15] = "0"; // 原類金額 15
            retDataTemp[16] = "0"; // 請款金額 16
            retDataTemp[17] = "U"; // 狀態-未過帳 17
            retDataTemp[18] = retFED1012[intFED1012][18].trim(); // 明細一 18
            retDataTemp[19] = retFED1012[intFED1012][19].trim(); // 明細二 19
            retDataTemp[20] = retFED1012[intFED1012][20].trim(); // 明細三 20
            retDataTemp[21] = retFED1012[intFED1012][21].trim(); // 明細四 21
            retDataTemp[22] = retFED1012[intFED1012][22].trim(); // 明細五 22
            retDataTemp[23] = stringDescript; // 摘要 23
            retDataTemp[24] = getUser(); // 修改者 24
            retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
            retDataTemp[26] = "A"; //
            //
            retVector.add(retDataTemp);
          }
        }
      }
    }
    // System.out.println("--------------------年底預估傳票1(對沖)END") ;
    // 轉換
    retTable = (String[][]) retVector.toArray(new String[0][0]);
    return retTable;
  }

  public String[][] getFED1012YearEndData(String stringBarCode, String stringComNo, String[] arrayVoucher, String stringKind, String stringID, FargloryUtil exeUtil)
      throws Throwable {
    String stringVoucherDate = arrayVoucher[0].trim();
    String stringVoucherFlowNo = "" + exeUtil.doParseInteger(arrayVoucher[1].trim());
    String stringVoucherSeqNo = "";
    String stringUseStatus = "";
    String[] arrayFED1012 = null;
    int intStartPos = exeUtil.doParseInteger(arrayVoucher[2].trim());
    int intEndPos = exeUtil.doParseInteger(arrayVoucher[3].trim());
    Vector vectorFED1012 = new Vector();
    Vector vectorDoc2M0803 = new Vector();
    // 整理 FED1012
    Hashtable hashtableFED1012 = getFED1012H(stringVoucherDate, stringVoucherFlowNo, stringComNo, stringKind);
    Hashtable hashtableAnd = new Hashtable();
    Hashtable hashtableDoc2M0803 = null;
    // 查詢 Doc2M0803
    hashtableAnd.put("COMPANY_CD", stringComNo);
    hashtableAnd.put("VOUCHER_YMD", exeUtil.getDateConvert(stringVoucherDate));
    hashtableAnd.put("VOUCHER_FLOW_NO", "" + exeUtil.doParseInteger(stringVoucherFlowNo));
    hashtableAnd.put("KIND", "0");
    hashtableAnd.put("ID_Def", stringID);
    vectorDoc2M0803 = getQueryDataHashtableDoc("Doc2M0803", hashtableAnd, " ORDER BY   VOUCHER_SEQ_NO ", new Vector(), exeUtil);
    if (vectorDoc2M0803.size() > 0) {
      // 依 Doc2M0803 取得此筆 對應 年底預估傳票
      for (int intNo = 0; intNo < vectorDoc2M0803.size(); intNo++) {
        hashtableDoc2M0803 = (Hashtable) vectorDoc2M0803.get(intNo);
        stringVoucherSeqNo = "" + (hashtableDoc2M0803.get("VOUCHER_SEQ_NO"));
        stringUseStatus = "" + (hashtableDoc2M0803.get("UseStatus"));
        //
        if ("N".equals(stringUseStatus)) {
          continue;
        }
        //
        arrayFED1012 = (String[]) hashtableFED1012.get(stringVoucherSeqNo);
        if (arrayFED1012 == null)
          return new String[0][0];
        //
        vectorFED1012.add(arrayFED1012);
      }
    } else {
      // 依 起尾
      for (int intNo = intStartPos; intNo <= intEndPos; intNo++) {
        stringVoucherSeqNo = "" + (intNo + 1);
        arrayFED1012 = (String[]) hashtableFED1012.get(stringVoucherSeqNo);
        //
        vectorFED1012.add(arrayFED1012);
      }
    }
    String[][] retFED1012 = (String[][]) vectorFED1012.toArray(new String[0][0]);
    return retFED1012;
  }

  public Hashtable getFED1012H(String stringVoucherDate, String stringVoucherFlowNo, String stringComNo, String stringKind) throws Throwable {
    String stringVoucherSeqNo = "";
    String[][] retFED1012 = getFED1012(stringVoucherDate, stringVoucherFlowNo, stringComNo, stringKind);
    Hashtable hashtableFED1012Ret = new Hashtable();
    for (int intNo = 0; intNo < retFED1012.length; intNo++) {
      stringVoucherSeqNo = retFED1012[intNo][6].trim();
      //
      hashtableFED1012Ret.put(stringVoucherSeqNo, retFED1012[intNo]);
    }
    return hashtableFED1012Ret;
  }

  public String[][] getConvertToArrayForRetainMoney(boolean booleanSource, String[][] retDoc2M010, FargloryUtil exeUtil) throws Throwable {
    //
    String stringVoucherYMD014 = ("" + get("Doc2M014_VOUCHER_YMD")).trim();
    String stringAccountCountS = ("" + get("Doc2M014_AccountCount")).trim();
    if ("null".equals(stringVoucherYMD014))
      stringVoucherYMD014 = "";
    if ("null".equals(stringAccountCountS))
      stringAccountCountS = "";
    int intFlowNo = 0;
    String stringComNo = retDoc2M010[0][0].trim();
    String stringKind = "0";
    String stringDescript = retDoc2M010[0][1].trim().replaceAll("\n", "");
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringFactoryNo = "";
    String stringInputDepartNo = retDoc2M010[0][12].trim();
    stringInputDepartNo = getVoucherDepartNo(stringInputDepartNo, exeUtil);
    String stringWriteRetainMoney = retDoc2M010[0][25].trim();
    String stringRetainBarCode = retDoc2M010[0][26].trim();
    String stringAccountNo = "2143";
    String stringAcctCConstant = "";
    String stringMailMoney1 = "";
    String stringTemp = "";
    String stringStatus = "U";
    String[] retDoc2M040 = getDoc2M040();
    String[] retDataTemp = null;
    String[] arrayDescription = { "", "", "", "", "" };
    String[][] retDB = null;
    String[][] retTable = new String[1][1];
    Vector retVector = new Vector();
    //
    stringTemp = exeUtil.doSubstring(code.StrToByte(stringDescript), 0, 30);
    stringTemp = code.ByteToStr(stringTemp);
    if (stringDescript.indexOf(stringTemp) == -1) {
      stringTemp = exeUtil.doSubstring(code.StrToByte(stringDescript), 0, 29);
      stringTemp = code.ByteToStr(stringTemp);
    }
    stringDescript = stringTemp;
    stringDescript = convert.replace(stringDescript, "'", "''");
    //
    stringAcctCConstant = retDoc2M040[1].trim();
    stringMailMoney1 = retDoc2M040[2].trim();
    //
    // 取得不同的統一編號
    retDB = booleanSource ? getDoc2M011(stringRetainBarCode) : getDoc5M021(stringRetainBarCode);
    if (retDB.length == 0) {
      retDB = booleanSource ? getDoc2M013(stringRetainBarCode) : getDoc5M023(stringRetainBarCode);
    }
    stringFactoryNo = retDB[0][0].trim();
    //
    String stringAcctC = "2121";
    String stringAcctCSession = ("" + get("Doc2M014_AcctNo")).trim();
    String stringAcctountType = "0"; // 0預設 1(5681-2146) 2(6201-2147) 3(5681-6201,2146/2147)
    String stringBankCd = "";
    String stringBankNo = "";
    if (!isExistForFED1047(stringFactoryNo) && !isExistForFED1073(stringFactoryNo)) {
      // 0 LAST_YMD 1 LAST_USER 2 OBJECT_CD 3 OBJECT_SHORT_NAME 4 OBJECT_FULL_NAME
      // 5 CHAIRMAN 6 CONTACT_MAN 7 COMPANY_TEL_NO 8 COMPANY_FAX_NO 9 INVOICE_ADDR
      // 10 MAIL_ADDR 11 OBJECT_TYPE 12 OBJECT_KIND 13 EMAIL 14 OBJECT_ID
      // 15 VOUCHER_KIND 16 BANK_CD 17 BANK_NO
      String stringVoucherKind = "";
      String[][] retFED1005 = getFED1005(stringFactoryNo);
      //
      stringVoucherKind = retFED1005[0][15].trim();
      stringBankCd = retFED1005[0][16].trim();
      stringBankNo = retFED1005[0][17].trim();
      // 廠商憑證(VOUCHER_KIND)不為其他類(3)
      if (!"3".equals(stringVoucherKind) && !"".equals(stringBankCd) && !"".equals(stringBankNo)) {
        // 銀行代號 BANK_CD
        // 帳號 BANK_NO
        if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession)) {
          // System.out.println("1stringAcctountType--------------------"+stringAcctountType)
          // ;
        } else {
          // System.out.println("22stringAcctountType--------------------"+stringAcctountType)
          // ;
          stringAcctCSession = "01".equals(stringComNo) ? "2147" : "2146";
        }
      } else {
        if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession) && ("2146".equals(stringAcctCSession) || "2147".equals(stringAcctCSession)))
          stringAcctCSession = "";
      }
    } else {
      if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession) && ("2146".equals(stringAcctCSession) || "2147".equals(stringAcctCSession)))
        stringAcctCSession = "";
    }
    //
    if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession))
      stringAcctC = stringAcctCSession;
    String[][] retFED1003 = getFED1003(stringAcctC);
    // 當 [會計科目名稱] 內含"關係人"時，不會有郵電費
    // 當 [會計科目名稱] 內含"票據"，會有郵電費
    // 特例：2258。
    boolean booleanFlow = (retFED1003[0][7].trim().indexOf("票據") != -1) && (retFED1003[0][7].trim().indexOf("關係人") == -1);
    if (!booleanFlow)
      stringMailMoney1 = "0";
    //
    String stringItemCd = "";
    String[][] retFED1004 = null;
    double doubleAmt = exeUtil.doParseDouble(stringWriteRetainMoney) - exeUtil.doParseDouble(stringMailMoney1);
    //
    if (stringInputDepartNo.indexOf("ST") != -1)
      stringInputDepartNo = "03327";//
    //
    intFlowNo++;
    retDataTemp = new String[27];
    retDataTemp[0] = stringBarCode; // 條碼編號 0
    retDataTemp[1] = stringDocNo; // 公文代號 1
    retDataTemp[2] = "J"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H 保留款I 退保留款J
    retDataTemp[3] = "0"; // No 3
    retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
    retDataTemp[5] = "0"; // 傳票流水號 5
    retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
    retDataTemp[7] = stringComNo; // 公司代號 7
    retDataTemp[8] = stringKind; // Kind 8
    retDataTemp[9] = "D"; // 借貸 9
    retDataTemp[10] = stringAccountNo; // 會計科目 10
    retDataTemp[11] = stringInputDepartNo; // 部門 11
    retDataTemp[12] = stringFactoryNo; // 對象 12
    retDataTemp[13] = stringWriteRetainMoney; // 金額 13
    retDataTemp[14] = "0"; // 匯率 14
    retDataTemp[15] = "0"; // 原類金額 15
    retDataTemp[16] = "0"; // 請款金額 16
    retDataTemp[17] = stringStatus; // 狀態-未過帳 17
    retDataTemp[18] = arrayDescription[0]; // 明細一 18
    retDataTemp[19] = arrayDescription[1]; // 明細二 19
    retDataTemp[20] = arrayDescription[2]; // 明細三 20
    retDataTemp[21] = arrayDescription[3]; // 明細四 21
    retDataTemp[22] = arrayDescription[4]; // 明細五 22
    retDataTemp[23] = stringDescript; // 摘要 23
    retDataTemp[24] = getUser(); // 修改者 24
    retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
    retDataTemp[26] = "A"; //
    retVector.add(retDataTemp);
    System.out.println("---------------------貸方資料");
    //
    retFED1004 = getFED1004(stringAcctC);
    for (int intNo = 0; intNo < 5; intNo++) {
      arrayDescription[intNo] = "";
      if (intNo >= retFED1004.length)
        continue;
      stringItemCd = retFED1004[intNo][0].trim();
      // 到期日 A04
      if ("A04".equals(stringItemCd) && !"".equals(stringVoucherYMD014)) {
        int intDay = 0;
        String stringExpiredDate = "";
        String[] arrayDate = convert.StringToken(stringVoucherYMD014, "/");
        //
        intDay = exeUtil.doParseInteger(arrayDate[2].trim());
        if (intDay >= 1 && intDay <= 10) {
          stringExpiredDate = arrayDate[0] + arrayDate[1] + "10";
        } else if (intDay >= 11 && intDay <= 25) {
          stringExpiredDate = arrayDate[0] + arrayDate[1] + "25";
        } else {
          stringExpiredDate = datetime.dateAdd(arrayDate[0] + arrayDate[1] + "01", "m", 1);
          stringExpiredDate = stringExpiredDate.trim().substring(0, 6) + "10";
        }
        stringExpiredDate = datetime.dateAdd(stringExpiredDate, "m", 4);
        stringExpiredDate = convert.ac2roc(stringExpiredDate);
        //
        arrayDescription[intNo] = stringExpiredDate;
      }
      // 其他應付費用 E05
      if ("E05".equals(stringItemCd))
        arrayDescription[intNo] = "其他";
      if ("110301".equals(stringAcctC) && intNo == 0)
        arrayDescription[intNo] = "12675-0";
    }
    arrayDescription = doSetBankNo(stringAcctC, stringFactoryNo, arrayDescription);
    // 放入陣列中
    intFlowNo++;
    retDataTemp = new String[27];
    retDataTemp[0] = stringBarCode; // 條碼編號 0
    retDataTemp[1] = stringDocNo; // 公文代號 1
    retDataTemp[2] = "C"; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
    retDataTemp[3] = "0"; // No 3
    retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
    retDataTemp[5] = "0"; // 傳票流水號 5
    retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
    retDataTemp[7] = stringComNo; // 公司代號 7
    retDataTemp[8] = stringKind; // Kind 8
    retDataTemp[9] = "C"; // 借貸 9
    retDataTemp[10] = stringAcctC; // 會計科目 10
    retDataTemp[11] = stringInputDepartNo; // 部門 11
    retDataTemp[12] = stringFactoryNo; // 對象 12
    retDataTemp[13] = convert.FourToFive("" + doubleAmt, 0); // 金額 13
    retDataTemp[14] = "0"; // 匯率 14
    retDataTemp[15] = "0"; // 原類金額 15
    retDataTemp[16] = "0"; // 16
    retDataTemp[17] = stringStatus; // 狀態-未過帳 17
    retDataTemp[18] = arrayDescription[0]; // 明細一 18
    retDataTemp[19] = arrayDescription[1]; // 明細二 19
    retDataTemp[20] = ("2146".equals(stringAcctC) || "2147".equals(stringAcctC)) ? stringBankCd : arrayDescription[2]; // 明細三 20
    retDataTemp[21] = ("2146".equals(stringAcctC) || "2147".equals(stringAcctC)) ? stringBankNo : arrayDescription[3]; // 明細四 21
    retDataTemp[22] = arrayDescription[4]; // 明細五 22
    retDataTemp[23] = stringDescript; // 摘要 23
    retDataTemp[24] = getUser(); // 修改者 23
    retDataTemp[25] = getToday("yymmdd"); // 修改日期 24
    retDataTemp[26] = "A"; //
    //
    retVector.add(retDataTemp);
    // System.out.println("---------------------郵電費") ;
    //
    if (booleanFlow) {
      intFlowNo++;
      retDataTemp = new String[27];
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "E"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H
      retDataTemp[3] = ""; // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "C"; // 借貸 9
      retDataTemp[10] = stringAcctCConstant; // 會計科目 10
      retDataTemp[11] = ""; // stringInputDepartNo ; // 部門 11
      retDataTemp[12] = ""; // 對象 12
      retDataTemp[13] = convert.FourToFive("" + stringMailMoney1, 0); // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 請款金額 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = ""; // 明細一 18
      retDataTemp[19] = ""; // 明細二 19
      retDataTemp[20] = ""; // 明細三 20
      retDataTemp[21] = ""; // 明細四 21
      retDataTemp[22] = ""; // 明細五 22
      retDataTemp[23] = ""; // stringDescript ; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 24
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
      retDataTemp[26] = "A"; //
      //
      retVector.add(retDataTemp);
    }
    // 轉換
    retTable = (String[][]) retVector.toArray(new String[0][0]);
    return retTable;
  }

  public String[][] getConvertToArrayForInvoice(boolean booleanTEST, String[][] retDoc2M010, String[][] retDoc2M011, String[][] retDoc2M012, boolean booleanDoc2M0201ForB,
      FargloryUtil exeUtil) throws Throwable {
    //
    String stringVoucherYMD014 = ("" + get("Doc2M014_VOUCHER_YMD")).trim();
    String stringAccountCountS = ("" + get("Doc2M014_AccountCount")).trim();
    String stringAccountCountStatusS = ("" + get("Doc2M014_AccountCount_Status")).trim();
    if ("null".equals(stringVoucherYMD014))
      stringVoucherYMD014 = "";
    if ("null".equals(stringAccountCountS))
      stringAccountCountS = "";
    int intFlowNo = 0;
    int intCostIDPos = 0;
    int intY10 = 0;
    String stringComNo = retDoc2M010[0][0].trim();
    String stringEDateTime = retDoc2M010[0][22].trim();
    String stringKind = "0";
    String stringDescript = retDoc2M010[0][1].trim().replaceAll("\n", "");
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringDocNo1 = retDoc2M010[0][9].trim();
    String stringPurchaseNo1 = "";//
    String stringPurchaseNo2 = "";//
    String stringPurchaseNo3 = "";//
    String stringPurchaseNo4 = "";//
    String stringInputDepartNo = retDoc2M010[0][12].trim();
    String stringAccountCount = !"".equals(stringAccountCountS) ? stringAccountCountS : retDoc2M010[0][24].trim();
    String stringRealMoney = "";
    String stringRealTotalMoney = "";
    String stringAcctDConstant = "";
    String stringAcctCConstant = "";
    String stringPositionConstant = "";
    String stringMailMoney1 = "";
    String stringMailMoney2 = "";
    String stringCostIDPosition = "";
    String stringCostIDNum = "";
    String stringKey = "";
    String stringStatus = "U";
    String stringTemp = "";
    String stringDepartNoOrigin = "";
    String[] retDoc2M040 = getDoc2M040();
    String[] retDataTemp = null;
    String[] arrayDescription = { "", "", "", "", "" };
    String[][] retDoc2M020 = null;
    String[][] retTable = new String[1][1];
    String[][] retDoc2M015 = getDoc2M015Union("Doc2M015", stringBarCode);
    String[][] retDoc2M017 = getDoc2M017Union("Doc2M017", stringBarCode);
    String[][] retDoc5M010 = getDoc5M010(stringBarCode);
    Vector retVector = new Vector();
    Vector retVectorNegative = new Vector();
    Vector vectorAcctNoS = new Vector();
    double doubleTotalMoney = 0;
    double doubleTaxRate = exeUtil.doParseDouble(retDoc2M040[4].trim());
    double doubleRetainMoney = exeUtil.doParseDouble(retDoc2M010[0][13].trim()); // 退保留款
    double doublePurchaseMoney = 0;
    double doubleSpecDiscount = 0;
    boolean booleanCostID130 = false;
    // Hashtable hashtableDoc2M042 = getDoc2M042( ) ;
    Hashtable hashtableDoc2M041 = getDoc2M041();
    Vector vectorItemCd = new Vector();
    //
    // 月數
    if (doParseDouble(stringAccountCount) <= 0)
      stringAccountCount = "1";
    //
    stringTemp = exeUtil.doSubstring(code.StrToByte(stringDescript), 0, 30);
    stringTemp = code.ByteToStr(stringTemp);
    if (stringDescript.indexOf(stringTemp) == -1) {
      stringTemp = exeUtil.doSubstring(code.StrToByte(stringDescript), 0, 29);
      stringTemp = code.ByteToStr(stringTemp);
    }
    stringDescript = stringTemp;
    stringDescript = convert.replace(stringDescript, "'", "''");
    //
    if (retDoc2M017.length > 0) {
      stringPurchaseNo1 = retDoc2M017[0][0].trim();
      stringPurchaseNo2 = retDoc2M017[0][1].trim();
      stringPurchaseNo3 = retDoc2M017[0][2].trim();
      stringPurchaseNo4 = retDoc2M017[0][5].trim();
    }
    stringAcctDConstant = retDoc2M040[0].trim();
    stringAcctCConstant = retDoc2M040[1].trim();
    stringMailMoney1 = retDoc2M040[2].trim();
    stringMailMoney2 = retDoc2M040[3].trim();
    //
    Vector vectorBarCode = new Vector();
    vectorBarCode.add("G70740");
    if (vectorBarCode.indexOf(stringBarCode) != -1)
      stringStatus = "Z";
    // 取得不同的統一編號
    String stringFactoryNo = "";
    String stringFactoryNoTop1 = "";
    if (retDoc2M011.length > 0)
      stringFactoryNoTop1 = retDoc2M011[0][0].trim();
    if ("".equals(stringFactoryNoTop1))
      stringFactoryNoTop1 = retDoc2M010[0][28].trim();
    System.out.println("---------------------轉換資料-費用");
    String stringInOut = null;
    String stringDepartNo = "";
    String stringDepartNo2146 = "";
    String stringDepartNo2147 = "";
    String stringProjectID = "";
    String stringProjectID1 = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String stringAccountNo = "";
    String stringAccountNoFirst = "";
    String stringItemCd = "";
    String stringUsedCd = "";
    String stringPosition = "";
    String stringDiscountMoney = "";
    String stringRecordNo = "";
    String stringDiscountNoTaxMoney = "";
    String stringAcctountType = "0"; // 0預設 1(5681-2146) 2(6201-2147) 3(5681-6201,2146/2147)
    String stringAcctCNew = "";
    String[] arrayTempData = null;
    String[][] retFED1004 = null;
    double doubleInvoiceMoneySum = 0;
    double doubleTotalRealMoney = 0;
    double doubleRealMoney = 0;
    double doubleTaxMoney = 0;
    double doubleAmt2146 = 0;
    double doubleAmt2147 = 0;
    double doubleSpecDiscount2146 = 0;
    double doubleSpecDiscount2147 = 0;
    Hashtable hashtableDiscountMoney = new Hashtable();
    Hashtable hashtableDiscountMoneyS = new Hashtable();
    boolean booleanInOut = true;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 DiscountMoney 7 RecordNo 8 DiscountNoTaxMoney
    for (int intDoc2M015 = 0; intDoc2M015 < retDoc2M015.length; intDoc2M015++) {
      stringInOut = retDoc2M015[intDoc2M015][0].trim();
      stringDepartNo = retDoc2M015[intDoc2M015][1].trim();
      stringProjectID = retDoc2M015[intDoc2M015][2].trim();
      stringProjectID1 = retDoc2M015[intDoc2M015][3].trim();
      stringCostID = retDoc2M015[intDoc2M015][4].trim();
      stringCostID1 = retDoc2M015[intDoc2M015][5].trim();
      stringDiscountMoney = retDoc2M015[intDoc2M015][6].trim();
      stringRecordNo = retDoc2M015[intDoc2M015][7].trim();
      stringDiscountNoTaxMoney = retDoc2M015[intDoc2M015][8].trim();
      stringKey = stringInOut + "-" + stringDepartNo + "-" + stringProjectID + "-" + stringProjectID1 + "-" + stringCostID + "-" + stringCostID1;
      System.out.println("折讓(" + stringKey + ")---------------------[" + (stringDiscountMoney + "-" + stringRecordNo + "-" + stringDiscountNoTaxMoney) + "]");
      hashtableDiscountMoney.put(stringKey, stringDiscountMoney + "-" + stringRecordNo + "-" + stringDiscountNoTaxMoney);
    }
    // 特別折讓
    String stringSpecBudgetVoucher = ",017PR,033FG,"; // +get("SPEC_BUDGET_VOUCHER") ;
    for (int intNo = 0; intNo < retDoc5M010.length; intNo++) {
      stringInOut = retDoc5M010[intNo][0].trim();
      stringDepartNo = retDoc5M010[intNo][1].trim();
      stringProjectID = retDoc5M010[intNo][2].trim();
      stringProjectID1 = retDoc5M010[intNo][3].trim();
      stringCostID = retDoc5M010[intNo][4].trim();
      stringCostID1 = retDoc5M010[intNo][5].trim();
      stringDiscountMoney = retDoc5M010[intNo][6].trim();
      stringRecordNo = retDoc5M010[intNo][7].trim();
      booleanInOut = isDepartCdIsOut(stringDepartNo);
      stringKey = stringInOut + "-" + stringDepartNo + "-" + stringProjectID + "-" + stringProjectID1 + "-" + stringCostID + "-" + stringCostID1;
      hashtableDiscountMoneyS.put(stringKey, stringDiscountMoney + "-" + stringRecordNo);
      doubleSpecDiscount += exeUtil.doParseDouble(retDoc5M010[intNo][6].trim());
      // 借方會計科目
      // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD 4 InvoiceType
      // 5 ACCT_C_IN 6 ACCT_C_OUT
      retDoc2M020 = getDoc2M020All(stringComNo, stringCostID, stringCostID1);
      if (retDoc2M020.length == 0) {
        retTable[0][0] = "於 [費用-借方會計科目] 中，查無相對應的會計科目。";
        return retTable;
      }
      if (booleanInOut)
        stringInOut = "O";
      if ("I".equals(stringInOut)) {
        stringAccountNo = retDoc2M020[0][0].trim();
      } else if ("O".equals(stringInOut)) {
        stringAccountNo = retDoc2M020[0][1].trim();
      } else {
        stringAccountNo = retDoc2M020[0][4].trim();
      }
      if (stringAccountNo.length() > 4) {
        if ("5681".equals(stringAccountNo.substring(0, 4))) {
          doubleSpecDiscount2146 += exeUtil.doParseDouble(stringRealTotalMoney);
        } else if ("6201".equals(stringAccountNo.substring(0, 4))) {
          doubleSpecDiscount2147 += exeUtil.doParseDouble(stringRealTotalMoney);
        } else {
          doubleSpecDiscount2147 += exeUtil.doParseDouble(stringRealTotalMoney);
        }
      }
    }
    // 特殊案別及請款代碼 使用 125104預付廣告費S
    Vector vectorCost = new Vector();
    Vector vectorDoc2M042 = new Vector();
    Vector vectorProjectID1 = getDoc2M014ProjectID1("Y");
    boolean booleanSpecAcctNo = false;
    double doubleRealMoneyL = 0;
    double doubleTotalMoneySum32 = 0;
    double doubleCostID009 = 0; // 2011-04-01
    boolean booleanCostID32 = false;
    boolean booleanCostID009 = false; // 2011-04-01
    //
    vectorCost.add("701");
    vectorCost.add("702");
    vectorCost.add("710");
    vectorCost.add("730");
    vectorCost.add("760");
    // 特殊案別及請款代碼 使用 125104預付廣告費E
    // if(retDoc2M012.length == 1) stringInputDepartNo = retDoc2M012[0][1].trim( ) ;
    // 2011-04-08 特殊案別控管 修正
    String stringTodayAC = datetime.getToday("YYYY/mm/dd");
    String[][] retDoc2M0121 = null;
    boolean boolean033FG = true;
    boolean boolean831 = false;
    //
    if (!"".equals(stringVoucherYMD014)) {
      stringTodayAC = exeUtil.getDateConvert(stringVoucherYMD014);
    }
    for (int intDoc2M012 = 0; intDoc2M012 < retDoc2M012.length; intDoc2M012++) {
      retDataTemp = new String[27];
      //
      stringRealMoney = retDoc2M012[intDoc2M012][6].trim();
      stringRealTotalMoney = retDoc2M012[intDoc2M012][7].trim();
      stringInOut = retDoc2M012[intDoc2M012][0].trim();
      stringDepartNo = retDoc2M012[intDoc2M012][1].trim();
      stringProjectID = retDoc2M012[intDoc2M012][2].trim();
      stringProjectID1 = retDoc2M012[intDoc2M012][3].trim();
      stringCostID = retDoc2M012[intDoc2M012][4].trim();
      stringCostID1 = retDoc2M012[intDoc2M012][5].trim();
      stringCostIDNum = stringCostID + stringCostID1;
      booleanInOut = isDepartCdIsOut(stringDepartNo);
      stringKey = stringInOut + "-" + stringDepartNo + "-" + stringProjectID + "-" + stringProjectID1 + "-" + stringCostID + "-" + stringCostID1;
      //
      if ("831".equals(stringCostID + stringCostID1))
        boolean831 = true;
      boolean033FG = stringSpecBudgetVoucher.indexOf(stringDepartNo) != -1;// 2011-04-08 特殊案別控管轉傳票 修正 oce
      //
      if ("009".equals(stringCostID + stringCostID1) && exeUtil.doParseDouble(stringRealTotalMoney) < 0) {
        booleanCostID009 = true; // 2011-04-01
        doubleCostID009 += exeUtil.doParseDouble(stringRealTotalMoney);
        System.out.println("doubleCostID009(" + doubleCostID009 + ")--------------------");
      }
      // 2011-04-01
      if (!booleanCostID009) {
        doubleTotalMoneySum32 += exeUtil.doParseDouble(stringRealTotalMoney);
      }
      if (stringDocNo.startsWith("023") && "149".equals(stringCostID + stringCostID1))
        booleanCostID32 = true;
      //
      if ("130".equals(stringCostIDNum))
        booleanCostID130 = true;
      //
      doubleTaxMoney = exeUtil.doParseDouble(stringRealTotalMoney) - exeUtil.doParseDouble(stringRealMoney);
      doubleRealMoney = exeUtil.doParseDouble(stringRealMoney);
      // 一般折讓
      stringTemp = ("" + hashtableDiscountMoney.get(stringKey)).trim();
      arrayTempData = convert.StringToken(stringTemp, "-");
      stringDiscountMoney = "0";
      stringDiscountNoTaxMoney = "0";
      if (arrayTempData.length == 3) {
        stringDiscountMoney = arrayTempData[0];
        stringDiscountNoTaxMoney = arrayTempData[2];
      }
      doubleRealMoney += exeUtil.doParseDouble(convert.FourToFive("" + (exeUtil.doParseDouble(stringDiscountNoTaxMoney)), 0));
      doubleTotalMoney += doubleRealMoney;
      //
      if (!booleanCostID009) { // 2011-04-01
        if (doParseDouble(stringRealTotalMoney) == 0) {
          doubleTotalRealMoney += exeUtil.doParseDouble(convert.FourToFive("" + (exeUtil.doParseDouble(stringRealMoney) * (doubleTaxRate / 100 + 1)), 0));
        } else {
          doubleTotalRealMoney += exeUtil.doParseDouble(stringRealTotalMoney);
        }
      }
      if (!"01".equals(stringComNo)) {
        // 特殊案別及請款代碼 使用 125104預付廣告費S
        booleanSpecAcctNo = (vectorCost.indexOf(stringCostID + stringCostID1) != -1 && vectorProjectID1.indexOf(stringProjectID1) != -1);
        // 特殊案別及請款代碼 使用 125104預付廣告費E
      }
      stringDepartNo = getVoucherDepartNo(stringInOut, stringDepartNo, stringProjectID, stringProjectID1, exeUtil);
      /*
       * stringDepartNoOrigin = getVoucherDepartNo(stringInOut, stringDepartNo,
       * stringProjectID, stringProjectID1, "A", exeUtil) ;
       * if("033GT".equals(stringDepartNoOrigin) &&
       * !stringDepartNo.equals(stringDepartNoOrigin)) { retDataTemp = new String[2] ;
       * retDataTemp[0] = "I05" ; retDataTemp[1] = "04" ;
       * vectorItemCd.add(retDataTemp) ; } else {
       */
      vectorItemCd = new Vector();
      // }
      if ("990".equals(stringCostID + stringCostID1)) {
        retDataTemp = new String[2];
        retDataTemp[0] = "Y09";
        retDataTemp[1] = retDoc2M011.length > 0 ? "01" : "04";
        vectorItemCd.add(retDataTemp);
      }
      //
      // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD
      retDoc2M020 = getDoc2M020All(stringComNo, stringCostID, stringCostID1);
      if (retDoc2M020.length == 0) {
        retTable[0][0] = "於 [費用-借方會計科目] 中，查無相對應的會計科目。";
        return retTable;
      } else {
        stringItemCd = retDoc2M020[0][2].trim();
        stringUsedCd = retDoc2M020[0][3].trim();
      }
      // 貸方會計科目
      if (booleanInOut)
        stringInOut = "O";
      if (intDoc2M012 == 0) {
        stringAcctCNew = ("I".equals(stringInOut)) ? retDoc2M020[0][5].trim() : retDoc2M020[0][6].trim();
      }
      if ("I".equals(stringInOut)) {
        stringAccountNo = retDoc2M020[0][0].trim();
      } else if ("O".equals(stringInOut)) {
        stringAccountNo = retDoc2M020[0][1].trim();
      } else {
        stringAccountNo = retDoc2M020[0][4].trim();
      }
      // if(retDoc2M012[intDoc2M012][2].equals("ST")) stringDepartNo = "03327" ;//
      if (stringDepartNo.indexOf("BH3") != -1 || stringDepartNo.indexOf("SH3") != -1)
        stringAccountNo = "128401";
      if (!"01".equals(stringComNo)) {
        // 特殊案別及請款代碼 使用 125104預付廣告費S
        if (booleanSpecAcctNo)
          stringAccountNo = "125104";
        // 特殊案別及請款代碼 使用 125104預付廣告費E
      }
      // 遠雄建設公司 5681 開頭之會計科目修正
      if ("01".equals(stringComNo) && stringAccountNo.startsWith("5681")) {
        /*
         * if("2012/12/31".compareTo(stringTodayAC) < 0) { // 2012/12/31 以後 改成 6801
         * stringAccountNo = stringAccountNo.replaceAll("5681", "6801") ; } else {
         */
        // 2012/12/31 以前 改成 1836
        stringAccountNo = stringAccountNo.replaceAll("5681", "1836");
        // }
        stringItemCd = "";
        stringUsedCd = "";
      }
      if (intDoc2M012 == 0)
        stringAccountNoFirst = stringAccountNo;
      System.out.println("getFED1004-----------------1111111111----------------" + stringAccountNo);
      retFED1004 = getFED1004(stringAccountNo);
      // 明細一、明細二、明細三、明細四、明細五 18-22
      stringPosition = ("" + hashtableDoc2M041.get(stringAccountNo)).trim();
      intY10 = getDescriptionUnionFinal(stringComNo, stringAccountNo, stringCostID, stringCostID1, stringItemCd, stringUsedCd, stringPosition, arrayDescription, retFED1004,
          vectorItemCd, exeUtil, false);
      //
      if (intDoc2M012 == 0)
        stringInputDepartNo = stringDepartNo;
      //
      if (!booleanCostID009) { // 2011-04-01
        if ("0".equals(stringAcctountType)) {
          if (stringAccountNo.length() > 4 && "5681".equals(stringAccountNo.substring(0, 4))) {
            if (!"3".equals(stringAcctountType))
              stringAcctountType = ("2".equals(stringAcctountType)) ? "3" : "1";
            if ("".equals(stringDepartNo2146))
              stringDepartNo2146 = stringDepartNo;
          } else {
            if (!"3".equals(stringAcctountType))
              stringAcctountType = ("1".equals(stringAcctountType)) ? "3" : "2";
            if ("".equals(stringDepartNo2147))
              stringDepartNo2147 = stringDepartNo;
          }
        }
        if ("1".equals(stringAcctountType)) {
          doubleAmt2146 += exeUtil.doParseDouble(stringRealTotalMoney);
        } else {
          doubleAmt2147 += exeUtil.doParseDouble(stringRealTotalMoney);
        }
      }
      //
      if (doubleRealMoney > 0)
        intFlowNo++;
      retDataTemp = new String[27];
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "B"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H 退保留款I
      retDataTemp[3] = "" + (intDoc2M012 + 1); // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = (doubleRealMoney > 0) ? "D" : "C"; // 借貸 9
      retDataTemp[10] = stringAccountNo; // 會計科目 10
      retDataTemp[11] = stringDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNoTop1; // 對象 12
      retDataTemp[13] = convert.FourToFive("" + Math.abs(doubleRealMoney), 0); // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 請款金額 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = arrayDescription[0]; // 明細一 18
      retDataTemp[19] = arrayDescription[1]; // 明細二 19
      retDataTemp[20] = arrayDescription[2]; // 明細三 20
      retDataTemp[21] = arrayDescription[3]; // 明細四 21
      retDataTemp[22] = arrayDescription[4]; // 明細五 22
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 24
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
      retDataTemp[26] = "A"; //
      //
      if ("110301".equals(stringAccountNo))
        retDataTemp[12] = "0095289";
      //
      if (intY10 != 0) {
        stringCostIDNum = getCostIDNumUnion(stringVoucherYMD014, stringCostIDNum, stringInOut, stringBarCode);
        retDataTemp[17 + intY10] = stringCostIDNum;
      }
      //
      if (doubleRealMoney > 0) {
        // 2011-04-08 特殊案別控管 修正
        if (boolean033FG) {
          if (retDoc2M0121 == null) {
            retDoc2M0121 = getDoc2M0121(stringBarCode, "A", "");
          }
        }
        if (retDoc2M0121 != null && retDoc2M0121.length > 0) {
          for (int intNoL = 0; intNoL < 5; intNoL++) {
            System.out.println(intNoL + "---------------------------------");
            if (intNoL < retFED1004.length) {
              System.out.println(intNoL + "(" + retFED1004[intNoL][0].trim() + ")(" + stringDocNo1 + ")---------------------------------");
              if ("I05".equals(retFED1004[intNoL][0].trim()))
                retDataTemp[18 + intNoL] = stringDocNo1;
            }
          }
          // 分攤 特別案別控管
          hashtableDoc2M041.put("033FG", stringDocNo1);
          intFlowNo = getConvertProjectID(stringBarCode, intFlowNo, stringCostID, stringCostID1, retDataTemp, retDoc2M0121, retDoc2M020, exeUtil, hashtableDoc2M041, vectorDoc2M042,
              retVector);
        } else {
          retVector.add(retDataTemp);
        }
      } else {
        retVectorNegative.add(retDataTemp);
      }
    }
    System.out.println("---------------------轉換資料-發票(進項稅額)");
    String stringInvoiceTax = "";
    String stringInvoiceDate = "";
    String stringInvoiceNo = "";
    String stringInvoiceMoney = "";
    String stringInvoiceTotalMoney = "";
    String stringInvoiceKind = "";
    String[] arrayTemp = null;
    Vector vectorFactoryNo = getDoc2M0402(); // 關係人
    Vector vectorDoc2M011 = new Vector();
    boolean booleanRationMan = false;
    boolean booleanLife = false;
    double doubleInvoiceTotalMoney = 0;
    double doubleTotalMoneySpecial = doubleTotalMoney;
    // 0 FactoryNo 1 InvoiceKind 2 InvoiceDate 3 InvoiceNo 4 InvoiceMoney
    // 5 InvoiceTax 6 InvoiceTotalMoney 7 DeductKind
    for (int intDoc2M011 = 0; intDoc2M011 < retDoc2M011.length; intDoc2M011++) {
      retDataTemp = new String[27];
      stringFactoryNo = retDoc2M011[intDoc2M011][0].trim();
      stringInvoiceKind = retDoc2M011[intDoc2M011][1].trim();
      stringInvoiceDate = retDoc2M011[intDoc2M011][2].trim();
      stringInvoiceNo = retDoc2M011[intDoc2M011][3].trim();
      stringInvoiceMoney = retDoc2M011[intDoc2M011][4].trim();
      stringInvoiceTax = retDoc2M011[intDoc2M011][5].trim();
      stringInvoiceTotalMoney = retDoc2M011[intDoc2M011][6].trim();
      //
      if ("84703052".equals(stringFactoryNo) && boolean831)
        booleanLife = true;
      // 關係人
      if (intDoc2M011 == 0 && vectorFactoryNo.indexOf(stringFactoryNo) != -1) {
        booleanRationMan = true;
      }
      //
      doubleTotalMoney += exeUtil.doParseDouble(stringInvoiceTax);
      //
      if ("D".equals(stringInvoiceKind))
        doubleTaxRate = 0;
      //
      intFlowNo++;
      retFED1004 = getFED1004(stringAcctDConstant);
      // 明細資料處理(預設為 B08、B09、B10、B11、B40，非上述之 ITEM_CD 時，空白處理)
      if (retFED1004.length != 5) {
        stringInvoiceDate = "";
        stringInvoiceNo = "";
        stringInvoiceMoney = "";
        stringInvoiceTotalMoney = "";
        stringInvoiceKind = "";
      } else {
        if (!"B08".equals(retFED1004[0][0].trim()))
          stringInvoiceDate = "";
        if (!"B09".equals(retFED1004[1][0].trim()))
          stringInvoiceNo = "";
        if (!"B10".equals(retFED1004[2][0].trim()))
          stringInvoiceMoney = "";
        if (!"B11".equals(retFED1004[3][0].trim()))
          stringInvoiceTotalMoney = "";
        if ("B40".equals(retFED1004[4][0].trim())) {
          stringInvoiceKind = getInvoiceKindName(stringInvoiceKind);
        } else {
          stringInvoiceKind = "";
        }
      }
      //
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "A"; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
      retDataTemp[3] = "" + (intDoc2M011 + 1); // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "D"; // 借貸 9
      retDataTemp[10] = stringAcctDConstant; // 會計科目 10
      retDataTemp[11] = stringInputDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNo; // 對象 12
      retDataTemp[13] = convert.FourToFive(stringInvoiceTax, 0); // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 請款金額 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = exeUtil.getDateConvertRoc(stringInvoiceDate).replaceAll("/", ""); // 發票日期 18
      retDataTemp[19] = stringInvoiceNo; // 發票號碼 19
      retDataTemp[20] = stringInvoiceMoney; // 發票未稅金額 20
      retDataTemp[21] = stringInvoiceTotalMoney; // 發票總金額 21
      retDataTemp[22] = stringInvoiceKind; // 發票格式 22
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 23
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 24
      retDataTemp[26] = "A"; //
      //
      /*
       * stringCostIDPosition = (""+hashtableDoc2M042.get(stringAcctDConstant)).trim(
       * ) ; if(!"".equals(stringCostIDPosition) &&
       * !"null".equals(stringCostIDPosition)) { if(check.isNum(stringCostIDPosition))
       * { intCostIDPos = Integer.parseInt(stringCostIDPosition) ;
       * retDataTemp[17+intCostIDPos] = stringCostIDNum ; } }
       */
      //
      if (exeUtil.doParseDouble(stringInvoiceTax) > 0) {
        retVector.add(retDataTemp);
      }
      // if(retDoc2M015.length>0 && intDoc2M011==0) {
      vectorDoc2M011.add(retDataTemp);
      // }
    }
    System.out.println("---------------------貸方資料");
    // 負值
    for (int intNo = 0; intNo < retVectorNegative.size(); intNo++) {
      intFlowNo++;
      retDataTemp = (String[]) retVectorNegative.get(intNo);
      retDataTemp[6] = "" + intFlowNo;
      retVector.add(retDataTemp);
    }
    int intMaxCount = 0; // 貸方之資料筆數
    int intMailCount = 0;
    int intPayCondition1 = 0;
    int intPayCondition2 = 0;
    String stringFlow = "";
    String stringPayCondition1 = retDoc2M010[0][14].trim();
    String stringPayCondition2 = retDoc2M010[0][15].trim();
    String stringAcctC = "";
    String stringAcctCSession = ("" + get("Doc2M014_AcctNo")).trim();
    String stringAcctCSession2 = "";
    String stringBankCd = "";
    String stringBankNo = "";
    String stringInvoiceTotalMoneyD = "";
    String stringDate = "";
    String[][] retDoc3M010 = null;
    String[][] retDoc2M030 = null;
    String[][] retFED1003 = null;
    double doubleMailMoney = 0;
    double doubleMoney = 0;
    double doubleMoneySum = 0;
    double doubleRate = 0;
    boolean booleanFlow = true;
    boolean boolean2146 = false;
    //
    // 取得付款條件，判斷是否有第二張發票。
    intMaxCount = ("999".equals(stringPayCondition2)) ? 1 : 2;
    // 由 [借方會計科目] 取得 [貸方會計科目]
    // System.out.println("stringAcctCSession---------------------------"+stringAcctCSession)
    // ;
    if (booleanLife) {
      retDoc2M030 = new String[1][1];
      retDoc2M030[0][0] = "2153";
    } else {
      if (!"".equals(stringAcctCNew)) {
        retDoc2M030 = new String[1][1];
        retDoc2M030[0][0] = stringAcctCNew;
      } else {
        retDoc2M030 = getDoc2M030(stringAccountNo);
      }
      if (retDoc2M030.length == 0) {
        String[][] retArray = new String[1][1];
        retArray[0][0] = "借方會計科目 " + stringAccountNo + " 找不到對應的貸方會計科目，請至[借方會計科目-貸方會計科目(Doc2M030)] 新增資料。";
        return retArray;
      }
      arrayTemp = convert.StringToken(stringAcctCNew, "/");
      if (!isExistForFED1047(stringFactoryNoTop1) && !isExistForFED1073(stringFactoryNoTop1)) {
        // 0 LAST_YMD 1 LAST_USER 2 OBJECT_CD 3 OBJECT_SHORT_NAME 4 OBJECT_FULL_NAME
        // 5 CHAIRMAN 6 CONTACT_MAN 7 COMPANY_TEL_NO 8 COMPANY_FAX_NO 9 INVOICE_ADDR
        // 10 MAIL_ADDR 11 OBJECT_TYPE 12 OBJECT_KIND 13 EMAIL 14 OBJECT_ID
        // 15 VOUCHER_KIND 16 BANK_CD 17 BANK_NO
        String stringVoucherKind = "";
        String[][] retFED1005 = getFED1005(stringFactoryNoTop1);
        //
        System.out.println("chekc retFED1005 data exists");
        if (retFED1005.length > 0) {
          stringVoucherKind = retFED1005[0][15].trim();
          stringBankCd = retFED1005[0][16].trim();
          stringBankNo = retFED1005[0][17].trim();
        }
        // 廠商憑證(VOUCHER_KIND)不為其他類(3)
        if (!"3".equals(stringVoucherKind) && !"".equals(stringBankCd) && !"".equals(stringBankNo)) {
          // 銀行代號 BANK_CD
          // 帳號 BANK_NO
          if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession)) {
            System.out.println("1stringAcctountType--------------------" + stringAcctountType);
          } else {
            System.out.println("22stringAcctountType--------------------" + stringAcctountType);
            if ("01".equals(stringComNo)) {
              stringAcctCSession = "2147";
            } else {
              if (!"".equals(stringAcctCNew)) {
                if (arrayTemp.length == 3) {
                  if (booleanRationMan) {
                    // 關係人
                    stringAcctCSession = arrayTemp[2].trim();
                  } else {
                    // 匯款廠商
                    stringAcctCSession = arrayTemp[0].trim();
                    // boolean2146 = true ;
                  }
                }
              } else {
                switch (exeUtil.doParseInteger(stringAcctountType)) {
                case 0:
                  stringAcctCSession = "2146";
                  break;
                case 1:
                  stringAcctCSession = "2146";
                  break;
                case 2:
                  stringAcctCSession = "2147";
                  break;
                case 3:
                  stringAcctCSession = "2146";
                  stringAcctCSession2 = "2147";
                  break;
                }
                boolean2146 = true;
              }
            }
          }
        } else {
          if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession)) {
            if ("2146".equals(stringAcctCSession) || "2147".equals(stringAcctCSession)) {
              stringAcctCSession = "";
              if (arrayTemp.length == 3) {
                if (booleanRationMan) {
                  // 關係人
                  stringAcctCSession = arrayTemp[2].trim();
                } else {
                  // 匯款廠商
                  stringAcctCSession = arrayTemp[1].trim();
                }
              }
            }
          } else {
            if (arrayTemp.length == 3) {
              if (booleanRationMan) {
                // 關係人
                stringAcctCSession = arrayTemp[2].trim();
              } else {
                // 匯款廠商
                stringAcctCSession = arrayTemp[1].trim();
              }
            }
          }
        }
      } else {
        if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession)) {
          if ("2146".equals(stringAcctCSession) || "2147".equals(stringAcctCSession)) {
            stringAcctCSession = "";
            if (arrayTemp.length == 3) {
              if (booleanRationMan) {
                // 關係人
                stringAcctCSession = arrayTemp[2].trim();
              } else {
                // 匯款廠商
                stringAcctCSession = arrayTemp[1].trim();
              }
            }
          }
        } else {
          if (arrayTemp.length == 3) {
            if (booleanRationMan) {
              // 關係人
              stringAcctCSession = arrayTemp[2].trim();
            } else {
              // 匯款廠商
              stringAcctCSession = arrayTemp[1].trim();
            }
          }
        }
      }
    }
    System.out.println("stringAcctCSession--------------------" + stringAcctCSession);
    System.out.println("stringAcctCSession2--------------------" + stringAcctCSession2);
    for (int intDoc2M030 = 0; intDoc2M030 < intMaxCount; intDoc2M030++) {
      // 20060710 更改不管是否為即期，只要符合條件皆有郵電費
      // Doc2M013 為 [即期]，借方會計科目內含票據時，以 [即期] 為主)
      // if("0".equals(stringPayCondition1)) continue ; //即期(不開郵電費)
      // 貸方會計科目(由 Doc2M040)
      if (intDoc2M030 < retDoc2M030.length) {
        stringAcctC = retDoc2M030[intDoc2M030][0].trim();
        if (intDoc2M030 == 0) {
          put("Doc2M014_AcctNo2", stringAcctC);
          // System.out.println("Doc2M014_AcctNo2---------------------------"+stringAcctC)
          // ;
        }
      }
      if (!booleanLife && !"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession))
        stringAcctC = stringAcctCSession;
      retFED1003 = getFED1003(stringAcctC);
      // 當 [會計科目名稱] 內含"關係人"時，不會有郵電費
      // 當 [會計科目名稱] 內含"票據"，會有郵電費
      // 特例：2258。
      booleanFlow = (retFED1003[0][7].trim().indexOf("票據") != -1) && (retFED1003[0][7].trim().indexOf("關係人") == -1);
      // booleanFlow = booleanFlow || "2258".equals(stringAcctC) ;
      if (booleanFlow) {
        intMailCount++;
      }
      // System.out.println((intDoc2M030+1)+"stringAcctC---------------------------"+stringAcctC+"
      // "+retFED1003[0][7].trim( )+"---------"+intMailCount) ;
    }
    // 付款比例 doubleRate 計算
    if (intMaxCount > 1) {
      // 有兩個付款條件
      if (retDoc2M017.length > 0) {
        // 多筆請購單
        // 0 PurchaseNo1 1 PurchaseNo2 2 PurchaseNo3 3 RetainMoney 4 PurchaseMoney
        // 5 PurchaseNo4 6 FactoryNo
        String stringFactoryNoL = "";
        String stringPurchaseNo1L = "";
        String stringPurchaseNo2L = "";
        String stringPurchaseNo3L = "";
        String stringPurchaseNoL = "";
        String stringPayCondition1L = "";
        String stringPayCondition2L = "";
        String[][] retDoc3M013L = null;
        double doubleThisPurchaseMoneyL = 0;
        double doublePayConditionPurchaseMoneyL = 0;
        double doublePayCondition1PurchaseMoneyL = 0;
        double doublePayCondition2PurchaseMoneyL = 0;
        double doubleUsePurchaseMoneyL = 0;
        double doubleUsePurchaseMoneySumL = 0;
        double doublePurchaseMoneySumL = 0;
        double doubleTempL = 0;
        Hashtable hashtablePayCondition = new Hashtable();
        if ("Z".equals(retDoc2M017[0][5].trim())) {
          // 來自 [正式請購流程]
          for (int intDoc2M017 = 0; intDoc2M017 < retDoc2M017.length; intDoc2M017++) {
            doubleThisPurchaseMoneyL = exeUtil.doParseDouble(retDoc2M017[intDoc2M017][4].trim());
            stringFactoryNoL = retDoc2M017[intDoc2M017][6].trim();
            stringPurchaseNo1L = retDoc2M017[intDoc2M017][0].trim();
            stringPurchaseNo2L = retDoc2M017[intDoc2M017][1].trim();
            stringPurchaseNo3L = retDoc2M017[intDoc2M017][2].trim();
            stringPurchaseNoL = stringPurchaseNo1L + stringPurchaseNo2L + stringPurchaseNo3L;
            // 已申請的請款金額不包含本次(Doc7M017)
            doubleUsePurchaseMoneyL = exeUtil.doParseDouble(
                getExistFactoryNoRealMoneyForDoc2M010(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1L, stringPurchaseNo2L, stringPurchaseNo3L, stringFactoryNoL))
                + exeUtil.doParseDouble(getExistFactoryNoRealMoneyBorrowForDoc6M010(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1L, stringPurchaseNo2L,
                    stringPurchaseNo3L, stringFactoryNoL));
            // System.out.println("已申請的請款金額不包含本次(Doc7M017)---------------------------"+convert.FourToFive(""+doubleUsePurchaseMoneyL,0))
            // ;
            // 取得請購單資料 Doc3M013
            // 0 FactoryNo 1 PurchaseSumMoney 2 PercentRate 3 MonthNum 4 PurchaseMoney
            // 5 PayCondition1 6 PayCondition2 7 Descript
            retDoc3M013L = getDoc3M013(stringComNo, stringPurchaseNoL, stringFactoryNoL);
            doublePurchaseMoneySumL = 0;
            doubleUsePurchaseMoneySumL = doubleUsePurchaseMoneyL + doubleThisPurchaseMoneyL; // 已申請的金額(合計)(包含本次)
            System.out.println("已申請的金額(合計)---------------------------" + convert.FourToFive("" + doubleUsePurchaseMoneySumL, 0));
            for (int intDoc3M013L = 0; intDoc3M013L < retDoc3M013L.length; intDoc3M013L++) {
              doublePurchaseMoneySumL += exeUtil.doParseDouble(retDoc3M013L[intDoc3M013L][4].trim());
              stringPayCondition1L = retDoc3M013L[intDoc3M013L][5].trim();
              stringPayCondition2L = retDoc3M013L[intDoc3M013L][6].trim();
              //
              // [合約金額(階段)加總] 大於 [已申請金額(不包含本次)]
              if (doublePurchaseMoneySumL > doubleUsePurchaseMoneyL) {
                if (doublePurchaseMoneySumL <= doubleUsePurchaseMoneySumL) {
                  // [合約金額(階段)加總] 小於等於 [已申請的金額(合計)(包含本次)]
                  // [付款條件金額] = [合約金額(階段)加總] - [已請購金額(不包含本次)]
                  doublePayConditionPurchaseMoneyL = doublePurchaseMoneySumL - doubleUsePurchaseMoneyL;
                  System.out.println(intDoc3M013L + "---------------" + doublePayConditionPurchaseMoneyL);
                } else {
                  // [付款條件金額] = [已申請的金額(合計)(包含本次)] - [已請購金額(不包含本次)]
                  doublePayConditionPurchaseMoneyL = doubleUsePurchaseMoneySumL - doubleUsePurchaseMoneyL;
                  System.out.println(intDoc3M013L + "---------------" + doublePayConditionPurchaseMoneyL);
                }
                // [已請購金額(不包含本次)] = [合約金額(階段)加總]
                doubleUsePurchaseMoneyL = doublePurchaseMoneySumL;
                // 放入對應的 付款條件中
                if (!"999".equals(stringPayCondition2L)) {
                  doublePayCondition1PurchaseMoneyL = doublePayConditionPurchaseMoneyL / 2;
                  doublePayCondition1PurchaseMoneyL = exeUtil.doParseDouble(convert.FourToFive("" + doublePayCondition1PurchaseMoneyL, 0));
                  doublePayCondition2PurchaseMoneyL = doublePayConditionPurchaseMoneyL - doublePayCondition1PurchaseMoneyL;
                  // 付款條件 2
                  doublePayConditionPurchaseMoneyL = exeUtil.doParseDouble("" + hashtablePayCondition.get(stringPayCondition2L)) + doublePayCondition2PurchaseMoneyL;
                  doublePayConditionPurchaseMoneyL = exeUtil.doParseDouble(convert.FourToFive("" + doublePayConditionPurchaseMoneyL, 0));
                  hashtablePayCondition.put(stringPayCondition2L, "" + doublePayConditionPurchaseMoneyL);
                } else {
                  doublePayCondition1PurchaseMoneyL = doublePayConditionPurchaseMoneyL;
                }

                doublePayConditionPurchaseMoneyL = exeUtil.doParseDouble("" + hashtablePayCondition.get(stringPayCondition1L)) + doublePayCondition1PurchaseMoneyL;
                doublePayConditionPurchaseMoneyL = exeUtil.doParseDouble(convert.FourToFive("" + doublePayConditionPurchaseMoneyL, 0));
                System.out.println(intDoc3M013L + "---------" + stringPayCondition1L + "------" + doublePayConditionPurchaseMoneyL);
                hashtablePayCondition.put(stringPayCondition1L, "" + doublePayConditionPurchaseMoneyL);
              }
              // [合約金額(階段)加總] 大於等於 [已申請的金額(合計)(包含本次)]
              if (doublePurchaseMoneySumL >= doubleUsePurchaseMoneySumL)
                break;
            }
          }
          System.out.println("stringPayCondition1---------" + stringPayCondition1);
          System.out.println("stringPayCondition2---------" + stringPayCondition2);
          double doublePay1 = exeUtil.doParseDouble("" + hashtablePayCondition.get(stringPayCondition1));
          double doublePay2 = exeUtil.doParseDouble("" + hashtablePayCondition.get(stringPayCondition2));
          System.out.println("---------" + doublePay1 + "------" + doublePay2);
          //
          doubleRate = doublePay1 / (doublePay1 + doublePay2);
        } else {
          // 來自 [請購維護作業]
          doubleRate = 0.5;
        }
      } else {
        // 只有一個請購單
        doubleRate = 0.5;
      }
    } else {
      // 只有一個付款條件
      doubleRate = 1;
    }
    // System.out.println("intMailCount---------------------------"+intMailCount) ;
    switch (intMailCount) {
    case 1:
    case 2:
      doubleMailMoney = exeUtil.doParseDouble(stringMailMoney1);
      break;
    // case 2 :
    // doubleMailMoney = exeUtil.doParseDouble(stringMailMoney2) ;
    // break ;
    default:
      doubleMailMoney = 0;
      break;
    }
    System.out.println("2014-06-25 doubleTotalRealMoney--------------" + doubleTotalRealMoney + "-----doubleTotalMoney--------------------" + doubleTotalMoney
        + "---------------doubleSpecDiscount--" + doubleSpecDiscount);
    // if(boolean2146 && doParseInteger(stringAcctountType) == 3) intMaxCount = 2 ;
    // System.out.println("boolean2146--------------------"+boolean2146) ;
    // System.out.println("stringAcctountType--------------------"+stringAcctountType)
    // ;
    // System.out.println("doubleRate--------------------"+doubleRate) ;
    //
    int intAcctCount = 0;
    double doubleInvoiceTotalMoneyD = 0;
    double doubleMoney2146 = 0;
    double doubleUseSpecDiscount2146 = 0;
    double doubleUseSpecDiscount2147 = 0;
    boolean booleanNegative = false;
    for (int intDoc2M030 = 0; intDoc2M030 < intMaxCount; intDoc2M030++) {
      retDataTemp = new String[27];
      if (intDoc2M030 < retDoc2M030.length)
        stringAcctC = retDoc2M030[intDoc2M030][0].trim();
      if (intDoc2M030 == 0 && !"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession))
        stringAcctC = stringAcctCSession;
      /*
       * if(intDoc2M030==1) { if(!"".equals(stringAcctCSession2) &&
       * !"null".equals(stringAcctCSession2)) { stringAcctC = stringAcctCSession2 ; }
       * else if(!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession))
       * { stringAcctC = stringAcctCSession ; } }
       */
      //
      if (intMaxCount > 1) {
        if (boolean2146 && exeUtil.doParseInteger(stringAcctountType) == 3) {
          if (intDoc2M030 == 0) {
            stringInvoiceTotalMoneyD = convert.FourToFive("" + ((doubleTotalRealMoney - doubleMailMoney - doubleRetainMoney + doubleCostID009) * doubleRate), 0);
          } else {
            stringInvoiceTotalMoneyD = convert.FourToFive("" + (doubleTotalRealMoney - doParseDouble(stringInvoiceTotalMoneyD) - doubleMailMoney), 0);
          }
        } else {
          if (intDoc2M030 == 0) {
            stringInvoiceTotalMoneyD = convert.FourToFive("" + ((doubleTotalRealMoney - doubleMailMoney - doubleRetainMoney - doubleSpecDiscount) * doubleRate), 0);
          } else {
            stringInvoiceTotalMoneyD = convert
                .FourToFive("" + (doubleTotalRealMoney - doParseDouble(stringInvoiceTotalMoneyD) - doubleRetainMoney - doubleSpecDiscount - doubleMailMoney), 0);
          }
        }
      } else {
        System.out.println("0000000---------------------doubleCostID009(" + doubleCostID009 + ")--------------------");
        stringInvoiceTotalMoneyD = convert.FourToFive("" + (doubleTotalRealMoney - doubleMailMoney - doubleRetainMoney - doubleSpecDiscount + doubleCostID009), 0);
      }
      System.out.println(intDoc2M030 + "stringInvoiceTotalMoneyD(" + stringInvoiceTotalMoneyD + ")--------------------");
      if (exeUtil.doParseDouble(stringInvoiceTotalMoneyD) <= 0) {
        booleanNegative = true;
        continue;
      }
      retFED1004 = getFED1004(stringAcctC);
      for (int intNo = 0; intNo < 5; intNo++) {
        arrayDescription[intNo] = "";
        if (intNo >= retFED1004.length)
          continue;
        stringItemCd = retFED1004[intNo][0].trim();
        // 到期日 A04
        if (!booleanLife && "A04".equals(stringItemCd) && !"".equals(stringVoucherYMD014)) {
          arrayDescription[intNo] = getExpiredDateUnion((intDoc2M030 + 1), stringAcctC, stringVoucherYMD014, stringPayCondition1, stringPayCondition2, "C", stringComNo, exeUtil);
        }
        // 帳號
        /*
         * if(("2146".equals(stringAcctC)||"2147".equals(stringAcctC)) &&
         * "A02".equals(stringItemCd)) { arrayDescription[intNo] = "036478" ; }
         */
        // 其他應付費用 E05
        if ("E05".equals(stringItemCd))
          arrayDescription[intNo] = "其他";
        if ("110301".equals(stringAcctC) && intNo == 0)
          arrayDescription[intNo] = "12675-0";
        if ("228203".equals(stringAcctC) && "C07".equals(stringItemCd))
          arrayDescription[intNo] = stringAccountNoFirst;
      }
      arrayDescription = doSetBankNo(stringAcctC, stringFactoryNoTop1, arrayDescription);
      //
      if ("2147,2146,".indexOf(stringAcctC) != -1) {
        if (!"".equals(stringDepartNo2146))
          stringDepartNo = stringDepartNo2146;
        if (!"".equals(stringDepartNo2147))
          stringDepartNo = stringDepartNo2147;
        if ("".equals(stringDepartNo))
          stringDepartNo = stringInputDepartNo;
      } else if ("110301".equals(stringAcctC)) {
        stringDepartNo = "";
      } else {
        stringDepartNo = stringInputDepartNo;
      }
      // 放入陣列中
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "C"; // 發票-借A 費用-借B 貸C 折讓-貸D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
      retDataTemp[3] = "" + (intDoc2M030 + 1); // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "C"; // 借貸 9
      retDataTemp[10] = stringAcctC; // 會計科目 10
      retDataTemp[11] = stringDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNoTop1; // 對象 12
      retDataTemp[13] = convert.FourToFive(stringInvoiceTotalMoneyD, 0); // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = arrayDescription[0]; // 明細一 18
      retDataTemp[19] = arrayDescription[1]; // 明細二 19
      retDataTemp[20] = ("2146".equals(stringAcctC) || "2147".equals(stringAcctC)) ? stringBankCd : arrayDescription[2]; // 明細三 20
      retDataTemp[21] = ("2146".equals(stringAcctC) || "2147".equals(stringAcctC)) ? stringBankNo : arrayDescription[3]; // 明細四 21
      retDataTemp[22] = arrayDescription[4]; // 明細五 22
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 24
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
      retDataTemp[26] = "A"; //
      //
      if ("110301".equals(stringAcctC))
        retDataTemp[12] = "0095289";
      //
      /*
       * stringCostIDPosition = (""+hashtableDoc2M042.get(stringAcctC)).trim( ) ;
       * if(!"".equals(stringCostIDPosition) && !"null".equals(stringCostIDPosition))
       * { if(check.isNum(stringCostIDPosition)) { intCostIDPos =
       * Integer.parseInt(stringCostIDPosition) ; retDataTemp[17+intCostIDPos] =
       * stringCostIDNum ; } }
       */
      //
      intAcctCount = (boolean2146 && exeUtil.doParseInteger(stringAcctountType) == 3) ? 2 : 1;
      // System.out.println("boolean2146---------------------"+boolean2146) ;
      // System.out.println("stringAcctountType---------------------"+stringAcctountType)
      // ;
      // System.out.println("intAcctCount---------------------"+intAcctCount) ;
      /* retVector.add(retDataTemp) ; */
      doubleInvoiceTotalMoneyD = doParseDouble(stringInvoiceTotalMoneyD);
      for (int intAcctNo = 0; intAcctNo < intAcctCount; intAcctNo++) {
        //
        if (boolean2146 && doParseInteger(stringAcctountType) == 3) {
          if (intDoc2M030 == 0) {
            if (intAcctNo == 0) {
              // 2146
              // 2146 = 付款總金額 * (2146 / 2146+2147)
              doubleMoney2146 = doubleInvoiceTotalMoneyD * doubleAmt2146 / (doubleAmt2146 + doubleAmt2147);
              // 2146特 = 特別折讓 * (付款比例)
              doubleUseSpecDiscount2146 = doubleSpecDiscount2146 * doubleRate;
              doubleUseSpecDiscount2146 = exeUtil.doParseDouble(convert.FourToFive("" + doubleUseSpecDiscount2146, 0));
              // 本次 = 2146 - 2146特
              doubleMoneySum = doubleMoney2146 - doubleUseSpecDiscount2146;
              retDataTemp[10] = "2146";
              retDataTemp[11] = stringDepartNo2146;
            } else {
              // 2147
              // 2147特 = 特別折讓 * (2147 / 2146+2147 特折比)
              doubleUseSpecDiscount2147 = doubleSpecDiscount2147 * doubleRate;
              doubleUseSpecDiscount2147 = exeUtil.doParseDouble(convert.FourToFive("" + doubleUseSpecDiscount2147, 0));
              // 本次 = 2147 - 2146特
              doubleMoneySum = doubleInvoiceTotalMoneyD - doubleMoney2146 - doubleUseSpecDiscount2147;
              retDataTemp[10] = "2147";
              retDataTemp[11] = stringDepartNo2147;
            }
          } else {
            if (intAcctNo == 0) {
              // 2146
              // 2146(2) = 付款總金額(2) - 2146
              doubleMoney2146 = doubleAmt2146 - doubleMoney2146;
              // 本次 = 2146(2) - (特別 - 2146 特別)
              doubleMoneySum = doubleMoney2146 - (doubleSpecDiscount2146 - doubleUseSpecDiscount2146);
              retDataTemp[10] = "2146";
              retDataTemp[11] = stringDepartNo2146;
            } else {
              // 2147(2) = 付款總金額(2) - 2146(2)
              doubleMoneySum = doubleInvoiceTotalMoneyD - doubleMoney2146;
              // 本次 = 2147(2) - (特別 - 2147特別)
              doubleMoneySum = doubleMoneySum - (doubleSpecDiscount2147 - doubleUseSpecDiscount2147);
              retDataTemp[10] = "2147";
              retDataTemp[11] = stringDepartNo2147;
            }
          }
        } else {
          doubleMoneySum = doubleInvoiceTotalMoneyD;
        }
        //
        doubleMoney = doubleMoneySum / exeUtil.doParseDouble(stringAccountCount);
        doubleMoney = exeUtil.doParseDouble(convert.FourToFive("" + doubleMoney, 0));
        for (int intCount = 0; intCount < exeUtil.doParseInteger(stringAccountCount); intCount++) {
          // System.out.println(intCount+"---------------------") ;
          arrayTemp = exeUtil.doCopyArray(retDataTemp);
          //
          if (intCount != 0) {
            stringFlow = "" + intCount;
          } else {
            stringFlow = "";
          }
          if (intCount == exeUtil.doParseInteger(stringAccountCount) - 1) {
            doubleMoney = doubleMoneySum;
          } else {
            doubleMoneySum -= doubleMoney;
          }
          // 到期
          for (int intNo = 0; intNo < 5; intNo++) {
            if (intNo >= retFED1004.length)
              continue;
            stringItemCd = retFED1004[intNo][0].trim();
            // 到期日 A04
            if (!booleanLife && "A04".equals(stringItemCd)) {
              stringDate = arrayTemp[18 + intNo].trim();
              if (!"".equals(stringDate)) {
                if ("0".equals(stringPayCondition1) && intCount != 0 && "11".equals(datetime.getDate(stringDate))) {
                  stringDate = datetime.dateAdd(stringDate, "d", -1);
                }
                stringDate = datetime.dateAdd(stringDate, "m", intCount);
                arrayTemp[18 + intNo] = stringDate;
              }
            }
          }
          //
          intFlowNo++;
          arrayTemp[2] = "C" + stringFlow; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
          arrayTemp[6] = "" + intFlowNo; // 傳票序號 6
          arrayTemp[13] = convert.FourToFive("" + doubleMoney, 0); // 金額 13
          System.out.println("金額2---------------------" + doubleMoney);
          //
          retVector.add(arrayTemp);
        }
      }
    }
    System.out.println("---------------------退保留款");
    stringInputDepartNo = retDoc2M010[0][12].trim();
    if (Pattern.matches("023\\d", stringInputDepartNo))
      stringInputDepartNo = "0231";
    if (doubleRetainMoney > 0) {
      intFlowNo++;
      retDataTemp = new String[27];
      //
      stringAccountNo = booleanCostID130 ? "228299" : "2143";
      stringInputDepartNo = getVoucherDepartNo(stringInputDepartNo, exeUtil);
      // 放入陣列中
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "I"; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
      retDataTemp[3] = "0"; // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "C"; // 借貸 9
      retDataTemp[10] = stringAccountNo; // 會計科目 10
      retDataTemp[11] = stringInputDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNoTop1; // 對象 12
      retDataTemp[13] = "" + doubleRetainMoney; // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = ""; // 明細一 18(未決定)
      retDataTemp[19] = ""; // 明細二 19(未決定)
      retDataTemp[20] = ""; // 明細三 20(未決定)
      retDataTemp[21] = ""; // 明細四 21(未決定)
      retDataTemp[22] = ""; // 明細五 22(未決定)
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 23
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 24
      retDataTemp[26] = "A"; //
      retVector.add(retDataTemp);
    }
    System.out.println("---------------------！折讓" + retDoc2M011.length);
    int intNowPos = vectorDoc2M011.size();
    int intCountDoc2M015 = retDoc2M015.length;
    int intDoc2M011 = 0;
    double doubleTotalDiscountMoney = doubleTotalMoney - doubleTotalRealMoney;
    double doubleDiscountMoney = 0;
    double doubleDiscountTax = 0;
    double doubleDiscountTaxL = 0;
    // double doubleDiscountMoneySum = 0 ;
    // double doubleDiscountTaxSum = 0 ;
    double doubleInvoiceMoney = 0;
    double doubleDiscountTotalMoneySum = 0;
    double doubleDiscountTotalTaxMoneySum = 0;
    double doubleDiscountTotalNoTaxMoneySum = 0;
    double doubleDiscountTotalNoTaxMoneySumL = 0;
    double doubleDiscountTotalMoneySumL = 0;
    double doubleDiscountTotalMoneyUse = 0;
    double doubleDiscountNoTaxMoneyUse = 0;
    String stringDiscountTotalMoney = "";
    String stringDiscountTotalNoTaxMoney = "";
    String stringRecordNoDoc2M011 = "";
    String stringRecordNoDoc5M010 = "";
    String[] arrayStringInvoiceNoTaxMoney = new String[retDoc2M011.length];
    String[] arrayStringInvoiceTotalMoney = new String[retDoc2M011.length];
    String[] arrayUse = null;
    boolean booleanDiscountFlag = false;
    //
    // doubleDiscountMoneySum =
    // exeUtil.doParseDouble(convert.FourToFive(""+doubleTotalDiscountMoney /
    // (1+(doubleTaxRate/100)), 0)) ;
    // doubleDiscountTaxSum = doubleTotalDiscountMoney - doubleDiscountMoneySum ;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID 5 CostID1 6
    // DiscountMoney
    for (int intDoc2M012 = 0; intDoc2M012 < retDoc2M012.length; intDoc2M012++) {
      stringInOut = retDoc2M012[intDoc2M012][0].trim();
      stringDepartNo = retDoc2M012[intDoc2M012][1].trim();
      stringProjectID = retDoc2M012[intDoc2M012][2].trim();
      stringProjectID1 = retDoc2M012[intDoc2M012][3].trim();
      stringCostID = retDoc2M012[intDoc2M012][4].trim();
      stringCostID1 = retDoc2M012[intDoc2M012][5].trim();
      stringCostIDNum = stringCostID + stringCostID1;
      booleanInOut = (stringSpecBudgetVoucher + ",03335,033622,03365,").indexOf(stringDepartNo + ",") != -1;
      stringKey = stringInOut + "-" + stringDepartNo + "-" + stringProjectID + "-" + stringProjectID1 + "-" + stringCostID + "-" + stringCostID1;
      //
      stringRecordNoDoc2M011 = "0";
      stringRecordNoDoc5M010 = "0";
      doubleDiscountMoney = 0;
      doubleDiscountTotalMoneySum = 0;
      // 折讓金額
      // 一般
      stringTemp = ("" + hashtableDiscountMoney.get(stringKey)).trim();
      arrayTempData = convert.StringToken(stringTemp, "-");
      stringDiscountTotalMoney = "0";
      if (arrayTempData.length == 3) {
        stringDiscountTotalMoney = arrayTempData[0];
        stringRecordNoDoc2M011 = arrayTempData[1];
        stringDiscountTotalNoTaxMoney = arrayTempData[2];
      }
      System.out.println(intDoc2M012 + "--------" + stringDiscountTotalMoney + "-------------" + stringRecordNoDoc2M011);
      doubleDiscountTotalMoneySum = exeUtil.doParseDouble(stringDiscountTotalMoney);
      doubleDiscountTotalNoTaxMoneySum = exeUtil.doParseDouble(stringDiscountTotalNoTaxMoney);
      // 特殊折讓
      /*
       * stringTemp = (""+hashtableDiscountMoneyS.get(stringKey)).trim( ) ;
       * arrayTempData = convert.StringToken(stringTemp, "-") ;
       * stringDiscountTotalMoney = "0" ; if(arrayTempData.length == 2) {
       * stringDiscountTotalMoney = arrayTempData[0] ; stringRecordNoDoc5M010 =
       * arrayTempData[1] ; }
       * System.out.println(intDoc2M012+"--------"+stringDiscountTotalMoney+
       * "-------------"+stringRecordNoDoc5M010) ; doubleDiscountTotalMoneySum +=
       * exeUtil.doParseDouble(stringDiscountTotalMoney) ;
       * doubleDiscountTotalNoTaxMoneySum +=
       * exeUtil.doParseDouble(stringDiscountTotalNoTaxMoney) ;
       */
      //
      if (doubleDiscountTotalMoneySum == 0) {
        // 無下一筆資料時，新增進項稅額
        if (intDoc2M012 == retDoc2M012.length - 1 && arrayUse != null) {
          if (stringSpecBudgetVoucher.indexOf(arrayUse[11].trim()) != -1 && retDoc2M0121 == null) {
            retDoc2M0121 = getDoc2M0121(stringBarCode, "A", "");
          }
          if (retDoc2M0121 != null && retDoc2M0121.length > 0) {
            for (int intNoL = 0; intNoL < 5; intNoL++) {
              if (intNoL < retFED1004.length) {
                if ("I05".equals(retFED1004[intNoL][0].trim()))
                  retDataTemp[18 + intNoL] = stringDocNo1;
              }
            }
            // 分攤 特殊案別控管
            hashtableDoc2M041.put("033FG", stringDocNo1);
            intFlowNo = getConvertProjectID(stringBarCode, intFlowNo, stringCostID, stringCostID1, arrayUse, retDoc2M0121, retDoc2M020, exeUtil, hashtableDoc2M041, vectorDoc2M042,
                retVector);
          } else {
            intFlowNo++;
            arrayUse[6] = "" + intFlowNo;
            retVector.add(arrayUse);
          }
          arrayUse = null;
        }
        continue;
      }
      doubleDiscountTax = doubleDiscountTotalMoneySum - doubleDiscountTotalNoTaxMoneySum;
      //
      // 會計科目、部門
      // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD
      retDoc2M020 = getDoc2M020All(stringComNo, stringCostID, stringCostID1);
      if (retDoc2M020.length == 0) {
        retTable[0][0] = "於 [費用-借方會計科目] 中，查無相對應的會計科目。";
        return retTable;
      } else {
        stringItemCd = retDoc2M020[0][2].trim();
        stringUsedCd = retDoc2M020[0][3].trim();
      }
      //
      System.out.println("折讓stringInOut(" + stringInOut + ")stringDepartNo(" + stringDepartNo + ")stringProjectID(" + stringProjectID + ")stringProjectID1(" + stringProjectID1
          + ")------------------------------------------------S");
      stringDepartNo = getVoucherDepartNo(stringInOut, stringDepartNo, stringProjectID, stringProjectID1, exeUtil);
      System.out.println("折讓stringDepartNo(" + stringDepartNo + ")------------------------------------------------");
      if (booleanInOut)
        stringInOut = "O";
      if ("I".equals(stringInOut)) {
        stringAccountNo = retDoc2M020[0][0].trim();
      } else {
        stringAccountNo = retDoc2M020[0][1].trim();
      }
      if (stringDepartNo.indexOf("BH3") != -1 || stringDepartNo.indexOf("SH3") != -1)
        stringAccountNo = "128401";
      // 遠雄建設公司 5681 開頭之會計科目修正
      if ("01".equals(stringComNo) && stringAccountNo.startsWith("5681")) {
        /*
         * if("2012/12/31".compareTo(stringTodayAC) < 0) { // 2012/12/31 以後 改成 6801
         * stringAccountNo = stringAccountNo.replaceAll("5681", "6801") ; } else {
         */
        // 2012/12/31 以前 改成 1836
        stringAccountNo = stringAccountNo.replaceAll("5681", "1836");
        // }
        stringItemCd = "";
        stringUsedCd = "";
      }
      retFED1004 = getFED1004(stringAccountNo);
      // 明細一、明細二、明細三、明細四、明細五 18-22
      stringPosition = ("" + hashtableDoc2M041.get(stringAccountNo)).trim();
      intY10 = 0;
      for (int intNo = 0; intNo < 5; intNo++) {
        arrayDescription[intNo] = "";
        if (intNo < retFED1004.length) {
          String stringItemCdL = retFED1004[intNo][0].trim();
          if ("Y10".equals(stringItemCdL)) {
            intY10 = intNo + 1;
          }
          if (stringItemCd.equals(stringItemCdL)) {
            arrayDescription[intNo] = getUseName(stringItemCd, stringUsedCd);
          }
        }
        if (!"".equals(stringPosition) && !"null".equals(stringPosition)) {
          // 例外
          if (Integer.parseInt(stringPosition) == (intNo + 1)) {
            arrayDescription[intNo] = getUseName(stringItemCd, stringUsedCd);
          }
        }
      }
      //
      intFlowNo++;
      retDataTemp = new String[27];
      // 放入陣列中
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "D"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H
      retDataTemp[3] = stringRecordNoDoc2M011; // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "C"; // 借貸 9
      retDataTemp[10] = stringAccountNo; // 會計科目 10
      retDataTemp[11] = stringDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNoTop1; // 對象 12
      retDataTemp[13] = convert.FourToFive("" + doubleDiscountTotalNoTaxMoneySum, 0); // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = stringRecordNoDoc5M010; // 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = arrayDescription[0]; // 明細一 18
      retDataTemp[19] = arrayDescription[1]; // 明細二 19
      retDataTemp[20] = arrayDescription[2]; // 明細三 20
      retDataTemp[21] = arrayDescription[3]; // 明細四 21
      retDataTemp[22] = arrayDescription[4]; // 明細五 22
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 24
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
      retDataTemp[26] = "A"; //
      //
      if (intY10 != 0) {
        stringCostIDNum = getCostIDNumUnion(stringVoucherYMD014, stringCostIDNum, stringInOut, stringBarCode);
        retDataTemp[17 + intY10] = stringCostIDNum;
      }
      if (stringSpecBudgetVoucher.indexOf(retDataTemp[11].trim()) != -1 && retDoc2M0121 == null) {
        retDoc2M0121 = getDoc2M0121(stringBarCode, "A", "");
      }
      if (retDoc2M0121 != null && retDoc2M0121.length > 0) {
        for (int intNoL = 0; intNoL < 5; intNoL++) {
          if (intNoL < retFED1004.length) {
            // System.out.println(intNoL+"("+retFED1004[intNoL][0].trim(
            // )+")---------------------------------") ;
            if ("I05".equals(retFED1004[intNoL][0].trim()))
              retDataTemp[18 + intNoL] = stringDocNo1;
          }
        }
        // 分攤 特殊案別控管
        hashtableDoc2M041.put("033FG", stringDocNo1);
        intFlowNo = getConvertProjectID(stringBarCode, intFlowNo, stringCostID, stringCostID1, retDataTemp, retDoc2M0121, retDoc2M020, exeUtil, hashtableDoc2M041, vectorDoc2M042,
            retVector);
      } else {
        retVector.add(retDataTemp);
      }
      // 發票 A 費用 B 貸 C 折讓 D 郵電 E 2
      // 最後一筆時，主(無折讓金額為零)及副皆新增進項稅額
      // 發票扣完時
      System.out.println("7777  intDoc2M011(" + intDoc2M011 + ")intNowPos(" + intNowPos + ")----------------------------");
      for (int intNo = intDoc2M011; intNo < intNowPos; intNo++) {
        System.out.println("8888  intNo(" + intNo + ")----------------------------vectorDoc2M011");
        arrayTemp = exeUtil.doCopyArray((String[]) vectorDoc2M011.get(intNo));
        booleanDiscountFlag = false;
        if (!"A".equals(arrayTemp[2].trim())) {
          if (intDoc2M012 == retDoc2M012.length - 1 && intNo == intNowPos - 1 && arrayUse != null) {
            intFlowNo++;
            arrayUse[6] = "" + intFlowNo;
            retVector.add(arrayUse);
            arrayUse = null;
          }
          continue;
        }
        if (doubleDiscountTotalMoneySum == 0) {
          // 如果有資料，則新增進項稅額
          if (intDoc2M012 == retDoc2M012.length - 1 && arrayUse != null) {
            intFlowNo++;
            arrayUse[6] = "" + intFlowNo;
            retVector.add(arrayUse);
            arrayUse = null;
          }
          break;
        }
        // 初始化
        System.out.println("6----------------------------END[" + intNo + "][" + arrayStringInvoiceTotalMoney.length + "]");
        if ("null".equals("" + arrayStringInvoiceTotalMoney[intNo])) {
          arrayStringInvoiceTotalMoney[intNo] = arrayTemp[21].trim(); // 發票總金額
          arrayStringInvoiceNoTaxMoney[intNo] = arrayTemp[20].trim(); // 發票未稅金額
          //
          System.out.println("發票(" + arrayTemp[19] + ")(" + arrayStringInvoiceTotalMoney[intNo] + ")---------------------------------");
          // 2015-06-11
          if ("Q94446".equals(stringBarCode)) {
            if ("PL49016609,".indexOf(arrayTemp[19]) != -1) {
              arrayStringInvoiceTotalMoney[intNo] = "1958625";
              arrayStringInvoiceNoTaxMoney[intNo] = "1865357";
            }
            /*
             * if("PG52878087,".indexOf(arrayTemp[19]) != -1) {
             * arrayStringInvoiceTotalMoney[intNo] = "2000" ;
             * arrayStringInvoiceNoTaxMoney[intNo] = "1905" ; }
             */
          }
          if ("AB1918".equals(stringBarCode)) {
            if ("QB53592054,".indexOf(arrayTemp[19]) != -1) {
              arrayStringInvoiceTotalMoney[intNo] = "576";
              arrayStringInvoiceNoTaxMoney[intNo] = "549";
            }
            /*
             * if("PG52878087,".indexOf(arrayTemp[19]) != -1) {
             * arrayStringInvoiceTotalMoney[intNo] = "2000" ;
             * arrayStringInvoiceNoTaxMoney[intNo] = "1905" ; }
             */
          }
        }
        System.out.println("7----------------------------END");
        System.out.println("doubleDiscountTotalMoneySum(" + doubleDiscountTotalMoneySum + ")---------------------------------0");
        if (doubleDiscountTotalMoneySum > exeUtil.doParseDouble(arrayStringInvoiceTotalMoney[intNo])) {
          // 發票已使用完時，新增進項稅額
          doubleDiscountTotalMoneySumL = exeUtil.doParseDouble(arrayStringInvoiceTotalMoney[intNo]); // 本次折讓金額
          System.out.println("發票之折讓金額(" + doubleDiscountTotalMoneySumL + ")---------------------------------1");
          System.out.println("發票之折讓金額累計(" + doubleDiscountTotalMoneyUse + ")---------------------------------1");
          doubleDiscountTotalMoneySumL += doubleDiscountTotalMoneyUse; // 發票之折讓金額累計
          System.out.println("發票之折讓金額本次(" + doubleDiscountTotalMoneySumL + ")---------------------------------1");

          doubleDiscountTotalNoTaxMoneySumL = exeUtil.doParseDouble(arrayStringInvoiceNoTaxMoney[intNo]);
          System.out.println("發票之折讓未稅金額(" + doubleDiscountTotalNoTaxMoneySumL + ")---------------------------------1");
          System.out.println("發票之折讓未稅金額累計(" + doubleDiscountNoTaxMoneyUse + ")---------------------------------1");
          doubleDiscountTotalNoTaxMoneySumL += doubleDiscountNoTaxMoneyUse; // 發票之折讓金額累計
          System.out.println("發票之折讓未稅金額本次(" + doubleDiscountTotalNoTaxMoneySumL + ")---------------------------------1");
          doubleDiscountTaxL = doubleDiscountTotalMoneySumL - doubleDiscountTotalNoTaxMoneySumL;
          // 可用折讓 扣除本次
          doubleDiscountTotalMoneySum = doubleDiscountTotalMoneySum - doParseDouble(arrayStringInvoiceTotalMoney[intNo]);
          doubleDiscountTotalNoTaxMoneySum = doubleDiscountTotalNoTaxMoneySum - doParseDouble(arrayStringInvoiceNoTaxMoney[intNo]);
          //
          arrayStringInvoiceTotalMoney[intNo] = "0";
          arrayStringInvoiceNoTaxMoney[intNo] = "0";
          booleanDiscountFlag = true;
          doubleDiscountTotalMoneyUse = 0;
          doubleDiscountNoTaxMoneyUse = 0;
          intDoc2M011 = intNo + 1;
        } else {
          // 累計
          System.out.println("發票之折讓總金額  (" + doubleDiscountTotalMoneySum + ")---------------------------------2");
          System.out.println("發票之折讓金額-累計(" + doubleDiscountTotalMoneyUse + ")---------------------------------2");
          doubleDiscountTotalMoneyUse += doubleDiscountTotalMoneySum; // 發票之折讓金額-總金額 累計

          System.out.println("發票之折讓未稅金額 累計(" + doubleDiscountNoTaxMoneyUse + ")---------------------------------2");
          System.out.println("發票之折讓未稅金額(" + doubleDiscountTotalNoTaxMoneySum + ")---------------------------------2");
          doubleDiscountNoTaxMoneyUse += doubleDiscountTotalNoTaxMoneySum; // 發票之折讓金額-未稅金額累計

          // 本次
          doubleDiscountTotalMoneySumL = doubleDiscountTotalMoneyUse;
          doubleDiscountTotalNoTaxMoneySumL = doubleDiscountNoTaxMoneyUse;
          doubleDiscountTaxL = doubleDiscountTotalMoneySumL - doubleDiscountTotalNoTaxMoneySumL;
          System.out.println("發票之折讓總金額 本次 (" + doubleDiscountTotalMoneySumL + ")---------------------------------2");
          System.out.println("發票之折讓未稅金額 本次 (" + doubleDiscountTotalNoTaxMoneySumL + ")---------------------------------2");
          // 設定該發票仍可折讓金額
          arrayStringInvoiceTotalMoney[intNo] = "" + (exeUtil.doParseDouble(arrayStringInvoiceTotalMoney[intNo]) - doubleDiscountTotalMoneySum);
          arrayStringInvoiceTotalMoney[intNo] = convert.FourToFive(arrayStringInvoiceTotalMoney[intNo], 0);
          arrayStringInvoiceNoTaxMoney[intNo] = "" + (exeUtil.doParseDouble(arrayStringInvoiceNoTaxMoney[intNo]) - doubleDiscountTotalNoTaxMoneySum);
          arrayStringInvoiceNoTaxMoney[intNo] = convert.FourToFive(arrayStringInvoiceNoTaxMoney[intNo], 0);
          System.out.println("該發票仍可折讓  總金額(" + arrayStringInvoiceTotalMoney[intNo] + ")---------------------------------");
          System.out.println("該發票仍可折讓未稅金額(" + arrayStringInvoiceNoTaxMoney[intNo] + ")---------------------------------");
          //
          if ("J13636".equals(stringBarCode)) {
            if ("VK86696519,".indexOf(arrayTemp[19]) != -1) {
              doubleDiscountTaxL = 1666;
              doubleDiscountTotalNoTaxMoneySumL = 33334;
            }
          }
          // 可折讓金額
          doubleDiscountTotalMoneySum = 0;
          // 無下一筆時，新增進項稅額
          if (intDoc2M012 == retDoc2M012.length - 1) {
            booleanDiscountFlag = true;
            doubleDiscountTotalMoneyUse = 0;
          }
        }
        if (!arrayTemp[22].startsWith("折讓單")) {
          if ("收銀機收執聯".equals(arrayTemp[22].trim())) {
            arrayTemp[22] = "折讓單24";
          } else if ("收據".equals(arrayTemp[22].trim())) {
            arrayTemp[22] = "折讓單24";
          } else if ("載具號碼25".equals(arrayTemp[22].trim())) {
            arrayTemp[22] = "折讓單24";
          } else if ("載具號碼分攤25".equals(arrayTemp[22].trim())) {
            arrayTemp[22] = "折讓單24";
          } else if ("收據內含稅".equals(arrayTemp[22].trim())) {
            arrayTemp[22] = "折讓單24";
          } else {
            System.out.println("JackLee 2折讓單23");
            arrayTemp[22] = "折讓單23";
          }
        }
        if ("P14794".equals(stringBarCode)) {
          if ("ZV53133020,AQ53124725,".indexOf(arrayTemp[19]) != -1) {
            doubleDiscountTaxL = 2897;
            doubleDiscountTotalNoTaxMoneySumL = 57943;
          }
        }
        //
        // 部門、金額、明細三(銷售額)、明細四(銷售總額)
        arrayTemp[2] = "H";
        arrayTemp[3] = stringRecordNoDoc2M011;
        // arrayTemp[6] = ""+intFlowNo ;
        arrayTemp[9] = "C";
        arrayTemp[11] = stringDepartNo;
        arrayTemp[13] = convert.FourToFive("" + doubleDiscountTaxL, 0); // 稅額
        arrayTemp[16] = stringRecordNoDoc5M010;
        arrayTemp[20] = convert.FourToFive("" + doubleDiscountTotalNoTaxMoneySumL, 0); // 未稅
        arrayTemp[21] = convert.FourToFive("" + doubleDiscountTotalMoneySumL, 0); // 總金額
        // arrayTemp[22] = "折讓" ; // 明細五 22
        arrayUse = arrayTemp;
        System.out.println("JackLee booleanDiscountFlag=" + booleanDiscountFlag);
        if (booleanDiscountFlag) {
          intFlowNo++;
          arrayUse[6] = "" + intFlowNo;
          retVector.add(arrayUse);
          arrayUse = null;
        }
      }
    }
    System.out.println("intMailCount(" + intMailCount + ")booleanNegative(" + booleanNegative + ")---------------------郵電費");
    if (!booleanNegative && intMailCount > 0) {
      intFlowNo++;
      retDataTemp = new String[27];
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "E"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H
      retDataTemp[3] = ""; // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "C"; // 借貸 9
      retDataTemp[10] = stringAcctCConstant; // 會計科目 10
      retDataTemp[11] = ""; // stringInputDepartNo ; // 部門 11
      retDataTemp[12] = ""; // 對象 12
      retDataTemp[13] = convert.FourToFive("" + doubleMailMoney, 0); // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 請款金額 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = ""; // 明細一 18
      retDataTemp[19] = ""; // 明細二 19
      retDataTemp[20] = ""; // 明細三 20
      retDataTemp[21] = ""; // 明細四 21
      retDataTemp[22] = ""; // 明細五 22
      retDataTemp[23] = ""; // stringDescript ; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 24
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
      retDataTemp[26] = "A"; //
      //
      /*
       * stringCostIDPosition = (""+hashtableDoc2M042.get(stringAcctC)).trim( ) ;
       * if(!"".equals(stringCostIDPosition) && !"null".equals(stringCostIDPosition))
       * { if(check.isNum(stringCostIDPosition)) { intCostIDPos =
       * Integer.parseInt(stringCostIDPosition) ; retDataTemp[17+intCostIDPos] =
       * stringCostIDNum ; } }
       */
      //
      retVector.add(retDataTemp);
    }
    // 公積金 32 特別處理
    String[] arrayAcct = { "2258", "125199" };
    String[] arrayDbCrCd = { "D", "C" };
    if (booleanCostID32) {
      for (int intNo = 0; intNo < arrayDescription.length; intNo++)
        arrayDescription[intNo] = "";
      for (int intNo = 0; intNo < arrayAcct.length; intNo++) {
        intFlowNo++;
        retDataTemp = new String[27];
        retDataTemp[0] = stringBarCode; // 條碼編號 0
        retDataTemp[1] = stringDocNo; // 公文代號 1
        retDataTemp[2] = "Y"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H 退保留款I
        retDataTemp[3] = "" + (intNo + 1); // No 3
        retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
        retDataTemp[5] = "0"; // 傳票流水號 5
        retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
        retDataTemp[7] = stringComNo; // 公司代號 7
        retDataTemp[8] = stringKind; // Kind 8
        retDataTemp[9] = arrayDbCrCd[intNo]; // 借貸 9
        retDataTemp[10] = arrayAcct[intNo]; // 會計科目 10
        retDataTemp[11] = "0331"; // 部門 11
        retDataTemp[12] = "Z0001"; // 對象 12
        retDataTemp[13] = convert.FourToFive("" + doubleTotalMoneySum32, 0); // 金額 13
        retDataTemp[14] = "0"; // 匯率 14
        retDataTemp[15] = "0"; // 原類金額 15
        retDataTemp[16] = "0"; // 請款金額 16
        retDataTemp[17] = stringStatus; // 狀態-未過帳 17
        retDataTemp[18] = arrayDescription[0]; // 明細一 18
        retDataTemp[19] = arrayDescription[1]; // 明細二 19
        retDataTemp[20] = arrayDescription[2]; // 明細三 20
        retDataTemp[21] = arrayDescription[3]; // 明細四 21
        retDataTemp[22] = arrayDescription[4]; // 明細五 22
        retDataTemp[23] = stringDescript; // 摘要 23
        retDataTemp[24] = getUser(); // 修改者 24
        retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
        retDataTemp[26] = "A"; //
        retVector.add(retDataTemp);
      }
    }
    //
    if (",P25577,J61848,".indexOf("," + stringBarCode + ",") != -1) {
      retTable = (String[][]) retVector.toArray(new String[0][0]);
      return retTable;
    }
    //
    System.out.println("--------------------年底預估傳票1START");
    int intStartPos = 0;
    int intEndPos = 0;
    int intDbCrCd = 0;
    int intDbCrCdCount = 0;
    String stringID = getIDForDoc2M010("Doc2M010", stringBarCode);
    String stringVoucherDate = "";
    String stringVoucherFlowNo = "";
    String stringDbCrCd = "";
    String stringDbCrCdData = "";
    String stringAmt = "";
    String stringRemark = "預估";
    String[] arrayTempL = null;
    String[][] retDoc2M080 = null;
    String[][] retFED1012 = null;
    double doubleAmt = 0;
    double doubleAmtSumFinal = 0;
    double dobuleUseMoney = 0;
    double dobuleUseMoneyFinal = 0;
    boolean booleanExist = true;
    //
    String[][] retData = getTableDataDoc(
        "SELECT  ID_Def,  UseMoney " + " FROM  Doc2M0801 " + " WHERE  ID_BarCode  =  " + stringID + " " + " AND  ComNo  =  '" + stringComNo + "' " + " ORDER BY  ID_Def  ");
    if (retData.length == 0) {
      booleanExist = false;
      stringRemark = "請款";
      if (!"".equals(stringID)) {
        retData = new String[1][2];
        retData[0][0] = stringID;
        retData[0][1] = "0";
      }
    }
    Vector vectorPos = new Vector();
    for (int intID = 0; intID < retData.length; intID++) {
      stringID = retData[intID][0];
      dobuleUseMoney = exeUtil.doParseDouble(retData[intID][1].trim());
      dobuleUseMoneyFinal = dobuleUseMoney;
      retDoc2M080 = getDoc2M080_2(stringID, stringRemark, stringComNo);
      intDbCrCdCount = 0;
      intDbCrCd = 0;
      for (int intNo = 0; intNo < retDoc2M080.length; intNo++) {
        stringVoucherFlowNo = retDoc2M080[intNo][23].trim();
        arrayTempL = convert.StringToken(stringVoucherFlowNo, "-");
        if (arrayTempL.length > 2) {
          stringVoucherDate = arrayTempL[0].trim();
          stringVoucherFlowNo = "" + exeUtil.doParseInteger(arrayTempL[1].trim());
          intStartPos = exeUtil.doParseInteger(arrayTempL[2].trim());
          intEndPos = exeUtil.doParseInteger(arrayTempL[3].trim());
          //
          // retFED1012 = getFED1012(stringVoucherDate, stringVoucherFlowNo, stringComNo,
          // stringKind) ;
          retFED1012 = getFED1012YearEndData(stringBarCode, stringComNo, arrayTempL, stringKind, stringID, exeUtil);
          intEndPos = retFED1012.length - 1;
          intStartPos = 0;
          //
          if (retFED1012.length == 0) {
            // retTable[0][0] = "查無 [預估對沖傳票]，請洽資訊室。" ;
            // return retTable;
            continue;
          }
          //
          for (int intFED1012 = intEndPos; intFED1012 >= intStartPos; intFED1012--) {
            stringDbCrCd = retFED1012[intFED1012][9].trim();
            //
            //
            if ("C".equals(stringDbCrCd)) {
              doubleAmtSumFinal = exeUtil.doParseDouble(retFED1012[intFED1012][13].trim());
            } else {
              intDbCrCdCount++;
            }
          }
          //
          for (int intFED1012 = intEndPos; intFED1012 >= intStartPos; intFED1012--) {
            stringDbCrCdData = retFED1012[intFED1012][9].trim();
            stringAmt = retFED1012[intFED1012][13].trim();
            stringDbCrCd = "C".equals(stringDbCrCdData) ? "D" : "C";
            //
            if ("D".equals(stringDbCrCdData))
              intDbCrCd++;
            //
            stringDescript = "沖" + stringVoucherDate + "-" + convert.add0(stringVoucherFlowNo, "4") + " " + retFED1012[intFED1012][23].trim();
            stringDescript = exeUtil.doSubstring(code.StrToByte(stringDescript), 0, 30);
            stringDescript = code.ByteToStr(stringDescript);
            //
            if (booleanExist) {
              // 年底預估之分次沖銷
              if ("C".equals(stringDbCrCdData)) {
                stringAmt = convert.FourToFive("" + dobuleUseMoneyFinal, 0);
              } else {
                if (intDbCrCdCount == intDbCrCd) {
                  // 最後一筆
                  stringAmt = convert.FourToFive("" + dobuleUseMoney, 0);
                } else {
                  doubleAmt = dobuleUseMoneyFinal * exeUtil.doParseDouble(stringAmt) / doubleAmtSumFinal;
                  stringAmt = convert.FourToFive("" + doubleAmt, 0);
                  dobuleUseMoney -= exeUtil.doParseDouble(stringAmt);
                }
              }
            } else {
              // 請款
            }
            //
            if ("03335,033622,03365,".indexOf(retFED1012[intFED1012][11].trim() + ",") != -1) {
              retFED1012[intFED1012][10] = retFED1012[intFED1012][10].trim().replaceAll("6201", "5681");
            }
            //
            intFlowNo++;
            retDataTemp = new String[27];
            retDataTemp[0] = stringBarCode; // 條碼編號 0
            retDataTemp[1] = stringDocNo; // 公文代號 1
            retDataTemp[2] = "W"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H 沖銷W
            retDataTemp[3] = ""; // No 3
            retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
            retDataTemp[5] = "0"; // 傳票流水號 5
            retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
            retDataTemp[7] = stringComNo; // 公司代號 7
            retDataTemp[8] = stringKind; // Kind 8
            retDataTemp[9] = stringDbCrCd; // 借貸 9
            retDataTemp[10] = retFED1012[intFED1012][10].trim(); // 會計科目 10
            retDataTemp[11] = retFED1012[intFED1012][11].trim(); // 部門 11
            retDataTemp[12] = retFED1012[intFED1012][12].trim(); // 對象 12
            retDataTemp[13] = stringAmt; // 金額 13
            retDataTemp[14] = "0"; // 匯率 14
            retDataTemp[15] = "0"; // 原類金額 15
            retDataTemp[16] = "0"; // 請款金額 16
            retDataTemp[17] = stringStatus; // 狀態-未過帳 17
            retDataTemp[18] = retFED1012[intFED1012][18].trim(); // 明細一 18
            retDataTemp[19] = retFED1012[intFED1012][19].trim(); // 明細二 19
            retDataTemp[20] = retFED1012[intFED1012][20].trim(); // 明細三 20
            retDataTemp[21] = retFED1012[intFED1012][21].trim(); // 明細四 21
            retDataTemp[22] = retFED1012[intFED1012][22].trim(); // 明細五 22
            retDataTemp[23] = stringDescript; // 摘要 23
            retDataTemp[24] = getUser(); // 修改者 23
            retDataTemp[25] = getToday("yymmdd"); // 修改日期 24
            retDataTemp[26] = "A"; //
            retVector.add(retDataTemp);
          }
        }
      }
    }
    System.out.println("--------------------年底預估傳票1(對沖)END");
    // 轉換
    retTable = (String[][]) retVector.toArray(new String[0][0]);
    return retTable;
  }

  public String[][] getConvertToArrayForPocketMoney(boolean booleanTEST, boolean booleanSource, String[][] retDoc2M010, String[][] retDoc2M011, String[][] retDoc2M012,
      String[][] retDoc2M013, FargloryUtil exeUtil) throws Throwable {
    //
    String stringVoucherYMD014 = ("" + get("Doc2M014_VOUCHER_YMD")).trim();
    if ("null".equals(stringVoucherYMD014))
      stringVoucherYMD014 = "";
    //
    int intFlowNo = 0;
    int intCostIDPos = 0;
    int intY10 = 0;
    String stringComNo = retDoc2M010[0][0].trim();
    String stringKind = "0";
    String stringDescript = retDoc2M010[0][1].trim().replaceAll("\n", "");
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringPurchaseNo1 = retDoc2M010[0][6].trim();
    String stringPurchaseNo2 = retDoc2M010[0][7].trim();
    String stringPurchaseNo3 = retDoc2M010[0][8].trim();
    String stringDocNo1 = retDoc2M010[0][9].trim();
    String stringInputDepartNo = retDoc2M010[0][12].trim();
    String stringCDate = retDoc2M010[0][16].trim();
    String stringOriEmployeeNo = retDoc2M010[0][17].trim();
    String stringCDateAC = exeUtil.getDateConvert(stringCDate);
    String stringEDateTime = retDoc2M010[0][22].trim();
    String stringStatus = "U";
    String stringRealMoney = "";
    String stringRealTotalMoney = "";
    String stringAcctDConstant = "";
    String stringAcctCConstant = "";
    String stringPositionConstant = "";
    String stringMailMoney1 = "";
    String stringMailMoney2 = "";
    String stringCostIDPosition = "";
    String stringCostIDNum = "";
    String stringTemp = "";
    String[] retDoc2M040 = getDoc2M040();
    String[] retDataTemp = null;
    String[] arrayDescription = { "", "", "", "", "" };
    String[][] retDoc2M020 = null;
    String[][] retDoc2M015 = getDoc2M015Union("Doc2M015", stringBarCode);
    String[][] retTable = new String[1][1];
    Vector retVector = new Vector();
    Vector vectorAcctNoS = new Vector();
    double doubleTotalMoney = 0;
    double doubleTaxRate = exeUtil.doParseDouble(retDoc2M040[4].trim());
    double doubleRetainMoney = exeUtil.doParseDouble(retDoc2M010[0][13].trim()); // 退保留款
    Hashtable hashtableDoc2M041 = getDoc2M041();
    Vector vectorDoc2M042 = new Vector();
    //
    stringTemp = exeUtil.doSubstring(code.StrToByte(stringDescript), 0, 30);
    stringTemp = code.ByteToStr(stringTemp);
    if (stringDescript.indexOf(stringTemp) == -1) {
      stringTemp = exeUtil.doSubstring(code.StrToByte(stringDescript), 0, 29);
      stringTemp = code.ByteToStr(stringTemp);
    }
    stringDescript = stringTemp;
    stringDescript = convert.replace(stringDescript, "'", "''");
    //
    stringAcctDConstant = retDoc2M040[0].trim();
    stringAcctCConstant = retDoc2M040[1].trim();
    stringMailMoney1 = retDoc2M040[2].trim();
    stringMailMoney2 = retDoc2M040[3].trim();
    //
    Vector vectorBarCode = new Vector();
    if (vectorBarCode.indexOf(stringBarCode) != -1)
      stringStatus = "Z";
    System.out.println("---------------------轉換資料-費用");
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 RealMoney 7 RealTotalMoney
    String stringInOut = null;
    String stringDepartNo = "";
    String stringProjectID = "";
    String stringProjectID1 = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String stringAccountNo = "";
    String stringItemCd = "";
    String stringUsedCd = "";
    String stringPosition = "";
    String stringDiscountMoney = "";
    String stringRecordNo = "";
    String stringFactoryNo = "";
    String stringFactoryNo11 = "";
    String stringFactoryNo2258 = "";
    String stringAccountNoFirst = "";
    String stringSpecBudgetVoucher = ",017PR,033FG,"; // +get("SPEC_BUDGET_VOUCHER") ;
    String stringAcctCNew = "";
    String stringAcctountType = "0"; // 0預設 1(5681-2146) 2(6201-2147) 3(5681-6201,2146/2147)
    String stringDepartNo2146 = "";
    String stringDepartNo2147 = "";
    String[] arrayTemp = null;
    String[] arrayTempData = null;
    String[][] retFED1004 = null;
    double doubleInvoiceMoneySum = 0;
    double doubleTotalRealMoney = 0;
    double doubleRealMoney = 0;
    double doubleTotalRealMoneySum = 0;
    //
    stringCostID = retDoc2M012[0][4].trim();
    // 資料處理
    double doubleRealTotalMoney = 0;
    double doubleMoneySum = 0;
    double doubleTotalMoneySum = 0;
    double doubleTotalMoneySum32 = 0;
    Hashtable hashtableTotalMoney = new Hashtable();
    Hashtable hashtableMoney = new Hashtable();
    Vector vectorDepartNo = new Vector();
    boolean booleanCostID32 = false;
    boolean booleanInOut = true;
    //
    if (retDoc2M011.length > 0) {
      stringFactoryNo11 = retDoc2M011[0][0].trim();
    }
    String stringDepartNoOrigin = "";
    Vector vectorItemCd = new Vector();
    boolean booleanSpec = false;
    for (int intNo = 0; intNo < retDoc2M012.length; intNo++) {
      stringInOut = retDoc2M012[intNo][0].trim();
      stringDepartNo = retDoc2M012[intNo][1].trim();
      stringProjectID = retDoc2M012[intNo][2].trim();
      stringProjectID1 = retDoc2M012[intNo][3].trim();
      stringCostID = retDoc2M012[intNo][4].trim();
      stringCostID1 = retDoc2M012[intNo][5].trim();
      booleanInOut = isDepartCdIsOut(stringDepartNo);
      doubleRealMoney = exeUtil.doParseDouble(retDoc2M012[intNo][6].trim());
      doubleRealTotalMoney = exeUtil.doParseDouble(retDoc2M012[intNo][7].trim());
      //
      if ("32".equals(stringCostID))
        booleanCostID32 = true;
      //
      stringDepartNo = getVoucherDepartNo(stringInOut, stringDepartNo, stringProjectID, stringProjectID1, exeUtil);
      /*
       * stringDepartNoOrigin = getVoucherDepartNo(stringInOut, stringDepartNo,
       * stringProjectID, stringProjectID1, "A", exeUtil) ;
       * if("033GT".equals(stringDepartNoOrigin) &&
       * !stringDepartNo.equals(stringDepartNoOrigin)) { retDataTemp = new String[2] ;
       * retDataTemp[0] = "I05" ; retDataTemp[1] = "04" ;
       * vectorItemCd.add(retDataTemp) ; } else {
       */
      vectorItemCd = new Vector();
      // }
      if (intNo == 0)
        stringInputDepartNo = stringDepartNo;
      if (booleanInOut)
        stringInOut = "O";
      //
      stringFactoryNo = ("I".equals(retDoc2M012[0][0].trim())) ? "Z0001" : "Z0007";
      stringFactoryNo2258 = stringFactoryNo;
      //
      if ("32".equals(stringCostID) && "O".equals(retDoc2M012[0][0].trim()) && !"".equals(stringFactoryNo11)) {
        stringFactoryNo = stringFactoryNo11;
      }
      if (vectorDepartNo.indexOf(stringDepartNo + "---" + stringFactoryNo) == -1)
        vectorDepartNo.add(stringDepartNo + "---" + stringFactoryNo);
      // 未稅金額
      doubleMoneySum = exeUtil.doParseDouble(("" + hashtableMoney.get(stringDepartNo + "---" + stringFactoryNo + "---" + stringCostID1)).trim());
      doubleMoneySum += doubleRealMoney;
      hashtableMoney.put(stringDepartNo + "---" + stringFactoryNo + "---" + stringCostID1, "" + doubleMoneySum);
      // 含稅金額
      doubleTotalMoneySum32 += doubleRealTotalMoney;
      doubleTotalMoneySum = exeUtil.doParseDouble(("" + hashtableTotalMoney.get(stringDepartNo + "---" + stringFactoryNo + "---" + stringCostID1)).trim());
      doubleTotalMoneySum += doubleRealTotalMoney;
      hashtableTotalMoney.put(stringDepartNo + "---" + stringFactoryNo + "---" + stringCostID1, "" + doubleTotalMoneySum);
    }
    Hashtable hashtableDiscountMoney = new Hashtable();
    String stringDiscountNoTaxMoney = "";
    String stringKey = "";
    for (int intDoc2M015 = 0; intDoc2M015 < retDoc2M015.length; intDoc2M015++) {
      stringInOut = retDoc2M015[intDoc2M015][0].trim();
      stringDepartNo = retDoc2M015[intDoc2M015][1].trim();
      stringProjectID = retDoc2M015[intDoc2M015][2].trim();
      stringProjectID1 = retDoc2M015[intDoc2M015][3].trim();
      stringCostID = retDoc2M015[intDoc2M015][4].trim();
      stringCostID1 = retDoc2M015[intDoc2M015][5].trim();
      stringDiscountMoney = retDoc2M015[intDoc2M015][6].trim();
      stringRecordNo = retDoc2M015[intDoc2M015][7].trim();
      stringDiscountNoTaxMoney = retDoc2M015[intDoc2M015][8].trim();
      booleanInOut = isDepartCdIsOut(stringDepartNo);
      stringDepartNo = getVoucherDepartNo(stringInOut, stringDepartNo, stringProjectID, stringProjectID1, exeUtil);
      //
      if (booleanInOut)
        stringInOut = "O";
      stringFactoryNo = (booleanInOut) ? "Z0001" : "Z0007";
      if ("32".equals(stringCostID) && "O".equals(retDoc2M012[0][0].trim()) && !"".equals(stringFactoryNo11)) {
        stringFactoryNo = stringFactoryNo11;
      }
      //
      // 未稅金額
      stringKey = stringDepartNo + "---" + stringFactoryNo + "---" + stringCostID1 + "---A";
      doubleMoneySum = exeUtil.doParseDouble(("" + hashtableDiscountMoney.get(stringKey)).trim());
      doubleMoneySum += exeUtil.doParseDouble(stringDiscountNoTaxMoney);
      System.out.println(intDoc2M015 + "stringKey(" + stringKey + ")doubleMoneySum(" + doubleMoneySum + ")-----------------------------------");
      hashtableDiscountMoney.put(stringKey, "" + doubleMoneySum);
      // 含稅金額
      stringKey = stringDepartNo + "---" + stringFactoryNo + "---" + stringCostID1 + "---B";
      doubleTotalMoneySum = exeUtil.doParseDouble(("" + hashtableDiscountMoney.get(stringKey)).trim());
      doubleTotalMoneySum += exeUtil.doParseDouble(stringDiscountMoney);
      System.out.println(intDoc2M015 + "stringKey(" + stringKey + ")doubleTotalMoneySum(" + doubleTotalMoneySum + ")-----------------------------------");
      hashtableDiscountMoney.put(stringKey, "" + doubleTotalMoneySum);
    }
    //
    String stringTodayAC = datetime.getToday("YYYY/mm/dd");
    String stringDepartNoF = "";
    Vector retDiscountVector = new Vector();
    // 2011-04-08 特殊案別控管 修正
    String[][] retDoc2M0121 = null;
    boolean boolean033FG = true;
    //
    if (!"".equals(stringVoucherYMD014)) {
      stringTodayAC = exeUtil.getDateConvert(stringVoucherYMD014);
    }
    for (int intDepartNo = 0; intDepartNo < vectorDepartNo.size(); intDepartNo++) {
      stringDepartNo = ("" + vectorDepartNo.get(intDepartNo)).trim();
      arrayTempData = convert.StringToken(stringDepartNo, "---");
      if (arrayTempData.length == 2) {
        stringDepartNoF = arrayTempData[0].trim();
        stringFactoryNo = arrayTempData[1].trim();
      } else {
        continue;
      }
      booleanInOut = (stringSpecBudgetVoucher + ",03335,033622,03365,").indexOf(stringDepartNoF + ",") == -1 && exeUtil.isDigitNum(stringDepartNoF);
      boolean033FG = stringSpecBudgetVoucher.indexOf(stringDepartNo) != -1;// 2011-04-08 特別案別控管 修正
      for (int intDoc2M012 = 0; intDoc2M012 < 20; intDoc2M012++) {
        stringCostID1 = "" + (intDoc2M012);
        stringCostIDNum = stringCostID + stringCostID1;
        stringRealMoney = ("" + hashtableMoney.get(stringDepartNoF + "---" + stringFactoryNo + "---" + stringCostID1)).trim();
        stringRealMoney = convert.FourToFive(stringRealMoney, 0);
        stringRealTotalMoney = ("" + hashtableTotalMoney.get(stringDepartNoF + "---" + stringFactoryNo + "---" + stringCostID1)).trim();
        stringRealTotalMoney = convert.FourToFive(stringRealTotalMoney, 0);
        //
        if (doParseDouble(stringRealMoney) <= 0)
          continue;
        //
        intFlowNo++;
        retDataTemp = new String[27];
        //
        doubleTotalRealMoneySum += exeUtil.doParseDouble(stringRealTotalMoney);
        // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD 4 InvoiceType
        // 5 ACCT_C_IN 6 ACCT_C_OUT
        System.out.println("getDoc2M020All(stringComNo---------------------S");
        retDoc2M020 = getDoc2M020All(stringComNo, stringCostID, stringCostID1);
        System.out.println("getDoc2M020All(stringComNo---------------------S");
        if (retDoc2M020.length == 0) {
          retTable[0][0] = "於 [費用-借方會計科目] 中，查無相對應的會計科目。";
          return retTable;
        } else {
          stringItemCd = retDoc2M020[0][2].trim();
          stringUsedCd = retDoc2M020[0][3].trim();
        }
        // 貸方會計科目
        if ("".equals(stringAcctCNew)) {
          stringAcctCNew = (booleanInOut) ? retDoc2M020[0][5].trim() : retDoc2M020[0][6].trim();
        }
        //
        if (booleanInOut) {
          stringAccountNo = retDoc2M020[0][0].trim();
        } else {
          stringAccountNo = retDoc2M020[0][1].trim();
        }
        if (stringDepartNo.indexOf("BH3") != -1 || stringDepartNo.indexOf("SH3") != -1)
          stringAccountNo = "128401";
        // 遠雄建設公司 5681 開頭之會計科目修正
        if ("01".equals(stringComNo) && stringAccountNo.startsWith("5681")) {
          /*
           * if("2012/12/31".compareTo(stringTodayAC) < 0) { // 2012/12/31 以後 改成 6801
           * stringAccountNo = stringAccountNo.replaceAll("5681", "6801") ; } else {
           */
          // 2012/12/31 以前 改成 1836
          stringAccountNo = stringAccountNo.replaceAll("5681", "1836");
          // }
          stringItemCd = "";
          stringUsedCd = "";
        }
        if (intDoc2M012 == 0)
          stringAccountNoFirst = stringAccountNo;
        //
        retFED1004 = getFED1004(stringAccountNo);
        // 明細一、明細二、明細三、明細四、明細五 18-22
        stringPosition = ("" + hashtableDoc2M041.get(stringAccountNo)).trim();
        intY10 = getDescriptionUnionFinal(stringComNo, stringAccountNo, stringCostID, stringCostID1, stringItemCd, stringUsedCd, stringPosition, arrayDescription, retFED1004,
            vectorItemCd, exeUtil, false);
        if ("0".equals(stringAcctountType)) {
          if (stringAccountNo.length() > 4 && "5681".equals(stringAccountNo.substring(0, 4))) {
            if (!"3".equals(stringAcctountType))
              stringAcctountType = ("2".equals(stringAcctountType)) ? "3" : "1";
            // doubleAmt2146 += exeUtil.doParseDouble(stringRealTotalMoney) ;
            if ("".equals(stringDepartNo2146))
              stringDepartNo2146 = stringDepartNo;
            // System.out.println(intDoc2M012+"---2146------E-----------------"+stringDepartNo2146+"----------------------"+stringDepartNo)
            // ;
          } else { // if("6201".equals(stringAccountNo.substring(0,4)))
            if (!"3".equals(stringAcctountType))
              stringAcctountType = ("1".equals(stringAcctountType)) ? "3" : "2";
            // doubleAmt2147 += exeUtil.doParseDouble(stringRealTotalMoney) ;
            if ("".equals(stringDepartNo2147))
              stringDepartNo2147 = stringDepartNo;
            // System.out.println("2147-----------------------"+doubleAmt2147+"----------------------"+stringDepartNo2147)
            // ;
          }
        }
        // 折讓
        stringKey = stringDepartNoF + "---" + stringFactoryNo + "---" + stringCostID1 + "---A";
        doubleTotalMoneySum = exeUtil.doParseDouble(("" + hashtableDiscountMoney.get(stringKey)).trim());
        System.out.println(intDoc2M012 + "stringKey(" + stringKey + ")doubleTotalMoneySum(" + doubleTotalMoneySum + ")-----------------------------------");
        if (doubleTotalMoneySum > 0) {
          doubleTotalMoneySum += exeUtil.doParseDouble(stringRealMoney);
          stringRealMoney = convert.FourToFive("" + doubleTotalMoneySum, 0);
        }
        //
        retDataTemp[0] = stringBarCode; // 條碼編號 0
        retDataTemp[1] = stringDocNo; // 公文代號 1
        retDataTemp[2] = "B"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H 退保留款I
        retDataTemp[3] = "" + (intDoc2M012 + 1); // No 3
        retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
        retDataTemp[5] = "0"; // 傳票流水號 5
        retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
        retDataTemp[7] = stringComNo; // 公司代號 7
        retDataTemp[8] = stringKind; // Kind 8
        retDataTemp[9] = "D"; // 借貸 9
        retDataTemp[10] = stringAccountNo; // 會計科目 10
        retDataTemp[11] = stringDepartNoF; // 部門 11
        retDataTemp[12] = stringFactoryNo; // 對象 12
        retDataTemp[13] = convert.FourToFive(stringRealMoney, 0); // 金額 13
        retDataTemp[14] = "0"; // 匯率 14
        retDataTemp[15] = "0"; // 原類金額 15
        retDataTemp[16] = "0"; // 請款金額 16
        retDataTemp[17] = stringStatus; // 狀態-未過帳 17
        retDataTemp[18] = arrayDescription[0]; // 明細一 18
        retDataTemp[19] = arrayDescription[1]; // 明細二 19
        retDataTemp[20] = arrayDescription[2]; // 明細三 20
        retDataTemp[21] = arrayDescription[3]; // 明細四 21
        retDataTemp[22] = arrayDescription[4]; // 明細五 22
        retDataTemp[23] = stringDescript; // 摘要 23
        retDataTemp[24] = getUser(); // 修改者 24
        retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
        retDataTemp[26] = "A"; //
        //
        if ("110301".equals(stringAccountNo))
          retDataTemp[12] = "0095289";
        //
        if (intY10 != 0) {
          stringCostIDNum = getCostIDNumUnion(stringVoucherYMD014, stringCostIDNum, stringInOut, stringBarCode);
          retDataTemp[17 + intY10] = stringCostIDNum;
        }
        //
        // 2011-04-08 特別案別控管 修正
        if (boolean033FG) {
          if (retDoc2M0121 == null) {
            retDoc2M0121 = getDoc2M0121(stringBarCode, "A", "");
          }
        }
        if (retDoc2M0121 != null && retDoc2M0121.length > 0) {
          for (int intNoL = 0; intNoL < 5; intNoL++) {
            if (intNoL < retFED1004.length) {
              if ("I05".equals(retFED1004[intNoL][0].trim()))
                retDataTemp[18 + intNoL] = stringDocNo1;
            }
          }
          // 分攤 033FG
          hashtableDoc2M041.put("033FG", stringDocNo1);
          intFlowNo = getConvertProjectID(stringBarCode, intFlowNo, stringCostID, stringCostID1, retDataTemp, retDoc2M0121, retDoc2M020, exeUtil, hashtableDoc2M041, vectorDoc2M042,
              retVector);
        } else {
          retVector.add(retDataTemp);
        }
        // 折讓
        if (doubleTotalMoneySum > 0) {
          retDataTemp = exeUtil.doCopyArray(retDataTemp);
          //
          doubleTotalMoneySum = exeUtil.doParseDouble(("" + hashtableDiscountMoney.get(stringDepartNoF + "---" + stringFactoryNo + "---" + stringCostID1 + "---A")).trim());
          retDataTemp[13] = convert.FourToFive("" + doubleTotalMoneySum, 0);
          doubleTotalMoneySum = exeUtil.doParseDouble(("" + hashtableDiscountMoney.get(stringDepartNoF + "---" + stringFactoryNo + "---" + stringCostID1 + "---B")).trim());
          retDataTemp[16] = convert.FourToFive("" + doubleTotalMoneySum, 0);
          //
          retDiscountVector.add(retDataTemp);
        }
      }
    }
    // System.out.println("---------------------轉換資料-發票(進項稅額)"+stringAcctDConstant)
    // ;
    String stringInvoiceTax = "";
    String stringInvoiceDate = "";
    String stringInvoiceNo = "";
    String stringInvoiceMoney = "";
    String stringInvoiceTotalMoney = "";
    String stringInvoiceKind = "";
    double doubleInvoiceTotalMoney = 0;
    double doubleTotalMoneySpecial = doubleTotalMoney;
    Vector vectorFactoryNo = getDoc2M0402();
    boolean booleanRationMan = false;
    // 0 FactoryNo 1 InvoiceKind 2 InvoiceDate 3 InvoiceNo 4 InvoiceMoney
    // 5 InvoiceTax 6 InvoiceTotalMoney 7 DeductKind
    for (int intDoc2M011 = 0; intDoc2M011 < retDoc2M011.length; intDoc2M011++) {
      intFlowNo++;
      retDataTemp = new String[27];
      stringFactoryNo = retDoc2M011[intDoc2M011][0].trim();
      stringInvoiceKind = retDoc2M011[intDoc2M011][1].trim();
      stringInvoiceDate = retDoc2M011[intDoc2M011][2].trim();
      stringInvoiceNo = retDoc2M011[intDoc2M011][3].trim();
      stringInvoiceMoney = retDoc2M011[intDoc2M011][4].trim();
      stringInvoiceTax = retDoc2M011[intDoc2M011][5].trim();
      stringInvoiceTotalMoney = retDoc2M011[intDoc2M011][6].trim();
      // 關係人
      if (intDoc2M011 == 0 && vectorFactoryNo.indexOf(stringFactoryNo) != -1) {
        booleanRationMan = true;
      }
      //
      doubleTotalMoney += exeUtil.doParseDouble(stringInvoiceTax);
      //
      if (doParseDouble(stringInvoiceTax) == 0)
        continue;
      //
      if ("D".equals(stringInvoiceKind))
        doubleTaxRate = 0;
      retFED1004 = getFED1004(stringAcctDConstant);
      // 明細資料處理(預設為 B08、B09、B10、B11、B40，非上述之 ITEM_CD 時，空白處理)
      if (retFED1004.length != 5) {
        stringInvoiceDate = "";
        stringInvoiceNo = "";
        stringInvoiceMoney = "";
        stringInvoiceTotalMoney = "";
        stringInvoiceKind = "";
      } else {
        if (!"B08".equals(retFED1004[0][0].trim()))
          stringInvoiceDate = "";
        if (!"B09".equals(retFED1004[1][0].trim()))
          stringInvoiceNo = "";
        if (!"B10".equals(retFED1004[2][0].trim()))
          stringInvoiceMoney = "";
        if (!"B11".equals(retFED1004[3][0].trim()))
          stringInvoiceTotalMoney = "";
        if ("B40".equals(retFED1004[4][0].trim())) {
          stringInvoiceKind = getInvoiceKindName(stringInvoiceKind);
        } else {
          stringInvoiceKind = "";
        }
      }
      //
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "A"; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
      retDataTemp[3] = "" + (intDoc2M011 + 1); // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "D"; // 借貸 9
      retDataTemp[10] = stringAcctDConstant; // 會計科目 10
      retDataTemp[11] = stringInputDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNo; // 對象 12
      retDataTemp[13] = convert.FourToFive(stringInvoiceTax, 0); // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 請款金額 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = exeUtil.getDateConvertRoc(stringInvoiceDate).replaceAll("/", ""); // 發票日期 18
      retDataTemp[19] = stringInvoiceNo; // 發票號碼 19
      retDataTemp[20] = stringInvoiceMoney; // 發票未稅金額 20
      retDataTemp[21] = stringInvoiceTotalMoney; // 發票總金額 21
      retDataTemp[22] = stringInvoiceKind; // 發票格式 22
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 23
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 24
      retDataTemp[26] = "A"; //
      //
      /*
       * stringCostIDPosition = (""+hashtableDoc2M042.get(stringAcctDConstant)).trim(
       * ) ; if(!"".equals(stringCostIDPosition) &&
       * !"null".equals(stringCostIDPosition)) { if(check.isNum(stringCostIDPosition))
       * { intCostIDPos = Integer.parseInt(stringCostIDPosition) ;
       * retDataTemp[17+intCostIDPos] = stringCostIDNum ; } }
       */
      //
      retVector.add(retDataTemp);
    }
    // System.out.println("---------------------貸方資料"+stringAccountNo) ;
    int intMaxCount = 0; // 貸方之資料筆數
    int intMailCount = 0;
    int intPayCondition1 = 0;
    int intPayCondition2 = 0;
    String stringPayCondition1 = retDoc2M010[0][14].trim();
    String stringPayCondition2 = retDoc2M010[0][15].trim();
    String stringAcctC = "";
    String stringInvoiceTotalMoneyD = "";
    String stringAcctCSession = ("" + get("Doc2M014_AcctNo")).trim();
    String[][] retDoc3M010 = null;
    String[][] retDoc2M030 = null;
    String[][] retFED1003 = null;
    double doubleMailMoney = 0;
    boolean booleanFlow = true;
    boolean booleanNoReceipt = false;
    // 取得付款條件，判斷是否有第二張發票。
    intMaxCount = ("999".equals(stringPayCondition2)) ? 1 : 2;
    // 由 [借方會計科目] 取得 [貸方會計科目]
    if (!"".equals(stringAcctCNew)) {
      retDoc2M030 = new String[1][1];
      retDoc2M030[0][0] = stringAcctCNew;
    } else {
      retDoc2M030 = getDoc2M030(stringAccountNo);
    }
    if (retDoc2M030.length == 0) {
      String[][] retArray = new String[1][1];
      retArray[0][0] = "借方會計科目 " + stringAccountNo + " 找不到對應的貸方會計科目，請至[借方會計科目-貸方會計科目(Doc2M030)] 新增資料。";
      return retArray;
    }
    // 零用金及公積金，預設無匯款
    arrayTemp = convert.StringToken(stringAcctCNew, "/");
    if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession)) {
      // 使用者自行選擇
    } else if (arrayTemp.length == 3) {
      if (booleanRationMan) {
        // 關係人
        stringAcctCSession = arrayTemp[2].trim();
      } else {
        //
        stringAcctCSession = arrayTemp[1].trim();
      }
    }
    String stringBankCd = "";
    String stringBankNo = "";
    String stringAcctCSession2 = "";
    boolean boolean2146 = false;
    System.out.println("isExistForFED1047--------------------");
    if (!"".equals(stringFactoryNo11) && !"".equals(stringFactoryNo11) && !isExistForFED1047(stringFactoryNo11) && !isExistForFED1073(stringFactoryNo11)) {
      // 0 LAST_YMD 1 LAST_USER 2 OBJECT_CD 3 OBJECT_SHORT_NAME 4 OBJECT_FULL_NAME
      // 5 CHAIRMAN 6 CONTACT_MAN 7 COMPANY_TEL_NO 8 COMPANY_FAX_NO 9 INVOICE_ADDR
      // 10 MAIL_ADDR 11 OBJECT_TYPE 12 OBJECT_KIND 13 EMAIL 14 OBJECT_ID
      // 15 VOUCHER_KIND 16 BANK_CD 17 BANK_NO
      String stringVoucherKind = "";
      String[][] retFED1005 = getFED1005(stringFactoryNo11);
      //
      stringVoucherKind = retFED1005[0][15].trim();
      stringBankCd = retFED1005[0][16].trim();
      stringBankNo = retFED1005[0][17].trim();
      // 廠商憑證(VOUCHER_KIND)不為其他類(3)
      if (!"3".equals(stringVoucherKind) && !"".equals(stringBankCd) && !"".equals(stringBankNo)) {
        // 銀行代號 BANK_CD
        // 帳號 BANK_NO
        if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession)) {
          // System.out.println("1stringAcctountType--------------------"+stringAcctountType)
          // ;
        } else {
          // System.out.println("22stringAcctountType--------------------"+stringAcctountType)
          // ;
          if ("01".equals(stringComNo)) {
            stringAcctCSession = "2147";
          } else {
            if (!"".equals(stringAcctCNew)) {
              if (arrayTemp.length == 3) {
                if (booleanRationMan) {
                  // 關係人
                  stringAcctCSession = arrayTemp[2].trim();
                } else {
                  // 匯款廠商
                  stringAcctCSession = arrayTemp[0].trim();
                }
              }
            } else {
              switch (exeUtil.doParseInteger(stringAcctountType)) {
              case 0:
                stringAcctCSession = "2146";
                break;
              case 1:
                stringAcctCSession = "2146";
                break;
              case 2:
                stringAcctCSession = "2147";
                break;
              case 3:
                stringAcctCSession = "2146";
                stringAcctCSession2 = "2147";
                break;
              }
              boolean2146 = true;
            }
          }
        }
      } else {
        if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession)) {
          if ("2146".equals(stringAcctCSession) || "2147".equals(stringAcctCSession)) {
            stringAcctCSession = "";
            if (arrayTemp.length == 3) {
              if (booleanRationMan) {
                // 關係人
                stringAcctCSession = arrayTemp[2].trim();
              } else {
                //
                stringAcctCSession = arrayTemp[1].trim();
              }
            }
          }
        } else {
          if (arrayTemp.length == 3) {
            if (booleanRationMan) {
              // 關係人
              stringAcctCSession = arrayTemp[2].trim();
            } else {
              //
              stringAcctCSession = arrayTemp[1].trim();
            }
          }
        }
      }
    } else {
      if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession)) {
        if ("2146".equals(stringAcctCSession) || "2147".equals(stringAcctCSession)) {
          stringAcctCSession = "";
          if (arrayTemp.length == 3) {
            if (booleanRationMan) {
              // 關係人
              stringAcctCSession = arrayTemp[2].trim();
            } else {
              //
              stringAcctCSession = arrayTemp[1].trim();
            }
          }
        }
      } else {
        if (arrayTemp.length == 3) {
          if (booleanRationMan) {
            // 關係人
            stringAcctCSession = arrayTemp[2].trim();
          } else {
            //
            stringAcctCSession = arrayTemp[1].trim();
          }
        }
      }
    }
    for (int intDoc2M030 = 0; intDoc2M030 < intMaxCount; intDoc2M030++) {
      // Doc2M013 為 [即期]，借方會計科目內含票據時，以 [即期] 為主)
      // if("0".equals(stringPayCondition1)) continue ; //即期(不開郵電費)
      // 當 [會計科目名稱] 內含"票據"，會有貸方會計科目(由 Doc2M040)
      if (intDoc2M030 < retDoc2M030.length) {
        stringAcctC = retDoc2M030[intDoc2M030][0].trim();
        if (intDoc2M030 == 0) {
          put("Doc2M014_AcctNo2", stringAcctC);
          // System.out.println("Doc2M014_AcctNo2---------------------------"+stringAcctC)
          // ;
        }
      }
      if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession))
        stringAcctC = stringAcctCSession;
      if ("2258".equals(stringAcctC) || "2191".equals(stringAcctC)) {
        booleanNoReceipt = true;
      }
      //
      retFED1003 = getFED1003(stringAcctC);
      booleanFlow = (retFED1003[0][7].trim().indexOf("票據") != -1) && (retFED1003[0][7].trim().indexOf("關係人") == -1);
      if (booleanFlow) {
        intMailCount++;
      }
    }
    switch (intMailCount) {
    case 1:
    case 2:
      doubleMailMoney = exeUtil.doParseDouble(stringMailMoney1);
      break;
    default:
      doubleMailMoney = 0;
      break;
    }
    // 付款比例 doubleRate 計算
    double doubleRate = 0;
    if (intMaxCount > 1) {
      // 有兩個付款條件
      String[][] retDoc2M017 = getDoc2M017(stringBarCode);
      if (retDoc2M017.length > 0) {
        // 多筆請購單
        // 0 PurchaseNo1 1 PurchaseNo2 2 PurchaseNo3 3 RetainMoney 4 PurchaseMoney
        // 5 PurchaseNo4 6 FactoryNo
        String stringFactoryNoL = "";
        String stringPurchaseNo1L = "";
        String stringPurchaseNo2L = "";
        String stringPurchaseNo3L = "";
        String stringPurchaseNoL = "";
        String stringPayCondition1L = "";
        String stringPayCondition2L = "";
        String[][] retDoc3M013L = null;
        double doubleThisPurchaseMoneyL = 0;
        double doublePayConditionPurchaseMoneyL = 0;
        double doubleUsePurchaseMoneyL = 0;
        double doublePayCondition1PurchaseMoneyL = 0;
        double doublePayCondition2PurchaseMoneyL = 0;
        double doubleUsePurchaseMoneySumL = 0;
        double doublePurchaseMoneySumL = 0;
        double doubleTempL = 0;
        Hashtable hashtablePayCondition = new Hashtable();
        if ("Z".equals(retDoc2M017[0][5].trim())) {
          // 來自 [正式請購流程]
          for (int intDoc2M017 = 0; intDoc2M017 < retDoc2M017.length; intDoc2M017++) {
            doubleThisPurchaseMoneyL = exeUtil.doParseDouble(retDoc2M017[intDoc2M017][4].trim());
            stringFactoryNoL = retDoc2M017[intDoc2M017][6].trim();
            stringPurchaseNo1L = retDoc2M017[intDoc2M017][0].trim();
            stringPurchaseNo2L = retDoc2M017[intDoc2M017][1].trim();
            stringPurchaseNo3L = retDoc2M017[intDoc2M017][2].trim();
            stringPurchaseNoL = stringPurchaseNo1L + stringPurchaseNo2L + stringPurchaseNo3L;
            // 已申請的請款金額不包含本次(Doc7M017)
            if (booleanSource) {
              doubleUsePurchaseMoneyL = exeUtil.doParseDouble(
                  getExistFactoryNoRealMoneyForDoc2M010(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1L, stringPurchaseNo2L, stringPurchaseNo3L, stringFactoryNoL))
                  + exeUtil.doParseDouble(getExistFactoryNoRealMoneyBorrowForDoc6M010(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1L, stringPurchaseNo2L,
                      stringPurchaseNo3L, stringFactoryNoL));
            } else {
              doubleUsePurchaseMoneyL = exeUtil.doParseDouble(
                  getExistFactoryNoRealMoneyForDoc5M020(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1L, stringPurchaseNo2L, stringPurchaseNo3L, stringFactoryNoL))
                  + exeUtil.doParseDouble(getExistFactoryNoRealMoneyBorrowForDoc5M030(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1L, stringPurchaseNo2L,
                      stringPurchaseNo3L, stringFactoryNoL));
            }
            // 取得請購單資料 Doc3M013
            // 0 FactoryNo 1 PurchaseSumMoney 2 PercentRate 3 MonthNum 4 PurchaseMoney
            // 5 PayCondition1 6 PayCondition2 7 Descript
            retDoc3M013L = getDoc3M013(stringComNo, stringPurchaseNoL, stringFactoryNoL);
            doublePurchaseMoneySumL = 0;
            doubleUsePurchaseMoneySumL = doubleUsePurchaseMoneyL + doubleThisPurchaseMoneyL;// 已申請的金額(合計)(包含本次)
            for (int intDoc3M013L = 0; intDoc3M013L < retDoc3M013L.length; intDoc3M013L++) {
              doublePurchaseMoneySumL += exeUtil.doParseDouble(retDoc3M013L[intDoc3M013L][4].trim());
              stringPayCondition1L = retDoc3M013L[intDoc3M013L][5].trim();
              stringPayCondition2L = retDoc3M013L[intDoc3M013L][6].trim();
              // [合約金額(階段)加總] 大於 [已申請金額(不包含本次)]
              if (doublePurchaseMoneySumL > doubleUsePurchaseMoneyL) {
                if (doublePurchaseMoneySumL <= doubleUsePurchaseMoneySumL) {
                  // [合約金額(階段)加總] 小於等於 [已申請的金額(合計)(包含本次)]
                  // [付款條件金額] = [合約金額(階段)加總] - [已請購金額(不包含本次)]
                  doublePayConditionPurchaseMoneyL = doublePurchaseMoneySumL - doubleUsePurchaseMoneyL;
                } else {
                  // [付款條件金額] = [已申請的金額(合計)(包含本次)] - [已請購金額(不包含本次)]
                  doublePayConditionPurchaseMoneyL = doubleUsePurchaseMoneySumL - doubleUsePurchaseMoneyL;
                }
                // [已請購金額(不包含本次)] = [合約金額(階段)加總]
                doubleUsePurchaseMoneyL = doublePurchaseMoneySumL;
                // 放入對應的 付款條件中
                if (!"999".equals(stringPayCondition2L)) {
                  doublePayCondition1PurchaseMoneyL = doublePayConditionPurchaseMoneyL / 2;
                  doublePayCondition1PurchaseMoneyL = exeUtil.doParseDouble(convert.FourToFive("" + doublePayCondition1PurchaseMoneyL, 0));
                  doublePayCondition2PurchaseMoneyL = doublePayConditionPurchaseMoneyL - doublePayCondition1PurchaseMoneyL;
                  // 付款條件 2
                  doublePayConditionPurchaseMoneyL = exeUtil.doParseDouble("" + hashtablePayCondition.get(stringPayCondition2L)) + doublePayCondition2PurchaseMoneyL;
                  doublePayConditionPurchaseMoneyL = exeUtil.doParseDouble(convert.FourToFive("" + doublePayConditionPurchaseMoneyL, 0));
                  hashtablePayCondition.put(stringPayCondition2L, "" + doublePayConditionPurchaseMoneyL);
                } else {
                  doublePayCondition1PurchaseMoneyL = doublePayConditionPurchaseMoneyL;
                }

                doublePayConditionPurchaseMoneyL = exeUtil.doParseDouble("" + hashtablePayCondition.get(stringPayCondition1L)) + doublePayCondition1PurchaseMoneyL;
                doublePayConditionPurchaseMoneyL = exeUtil.doParseDouble(convert.FourToFive("" + doublePayConditionPurchaseMoneyL, 0));
                hashtablePayCondition.put(stringPayCondition1L, "" + doublePayConditionPurchaseMoneyL);
              }
              // [合約金額(階段)加總] 大於等於 [已申請的金額(合計)(包含本次)]
              if (doublePurchaseMoneySumL >= doubleUsePurchaseMoneySumL)
                break;
            }
          }
          double doublePay1 = exeUtil.doParseDouble("" + hashtablePayCondition.get(stringPayCondition1));
          double doublePay2 = exeUtil.doParseDouble("" + hashtablePayCondition.get(stringPayCondition2));
          //
          doubleRate = doublePay1 / (doublePay1 + doublePay2);
        } else {
          // 來自 [請購維護作業]
          doubleRate = 0.5;
        }
      } else {
        // 只有一個請購單
        doubleRate = 0.5;
      }
    } else {
      // 只有一個付款條件
      doubleRate = 1;
    }
    // 轉換資料-扣繳(扣繳金額)
    String stringReceiptTax = "";
    String stringReceiptDate = "";
    String stringReceiptMoney = "";
    String stringReceiptTotalMoney = "";
    String stringReceiptKind = "";
    String stringAcctTax = "";
    String stringAcctNo = "";
    String stringFlow = "";
    String stringDate = "";
    String stringPayCondition = "";
    String stringRowType = "";
    String stringAmtL = "";
    String stringSupplementMoney = "";
    int intReceiptTaxType = (retDoc2M013.length > 0) ? exeUtil.doParseInteger(retDoc2M013[0][6].trim()) : 0;
    double doubleMoney = 0;
    double doubleReceiptKindBMoneySum = 0;
    double doubleReceiptTaxSum = 0;
    // 6 % 會計科目對應 228202
    // 10 % 當借方為[620160]或[568160] 時，為[228208]，否則為[228203]。
    // 0 FactoryNo 1 ReceiptKind 2 ReceiptDate 3 ReceiptMoney 4 ReceiptTax
    // 5 ReceiptTotalMoney 6 ReceiptTaxType 7 ACCT_NO
    for (int intDoc2M013 = 0; intDoc2M013 < retDoc2M013.length; intDoc2M013++) {
      if (booleanNoReceipt)
        continue;
      //
      stringFactoryNo = retDoc2M013[intDoc2M013][0].trim();
      stringReceiptKind = retDoc2M013[intDoc2M013][1].trim();
      stringReceiptDate = retDoc2M013[intDoc2M013][2].trim();
      stringReceiptMoney = retDoc2M013[intDoc2M013][3].trim();
      stringReceiptTax = retDoc2M013[intDoc2M013][4].trim();
      stringReceiptTotalMoney = retDoc2M013[intDoc2M013][5].trim();
      stringAcctNo = retDoc2M013[intDoc2M013][7].trim();
      stringPayCondition = retDoc2M013[intDoc2M013][8].trim();
      stringSupplementMoney = retDoc2M013[intDoc2M013][11].trim();
      //

      /*
       * if("B".equals(stringReceiptKind)) { doubleReceiptKindBMoneySum +=
       * doParseDouble(stringReceiptTotalMoney) ; }
       */
      // 1 扣繳金額 2 補充保費
      for (int intNoL = 1; intNoL <= 2; intNoL++) {
        if (intNoL == 1) {
          stringRowType = "G";
          stringAmtL = stringReceiptTax;
          if (!"".equals(stringAcctNo))
            stringAcctTax = stringAcctNo;
        } else {
          stringRowType = "Z";
          stringAmtL = stringSupplementMoney;
          stringAcctTax = "228231";
        }
        if (exeUtil.doParseDouble(stringAmtL) == 0)
          continue;
        //
        doubleReceiptTaxSum += exeUtil.doParseDouble(stringAmtL);
        //
        retFED1004 = getFED1004(stringAcctTax);
        // 明細資料處理 G08、B04、G07、，非上述之 ITEM_CD 時，空白處理
        for (int intNo = 0; intNo < 5; intNo++) {
          arrayDescription[intNo] = "";
          if (intNo >= retFED1004.length)
            continue;
          // 所得給付票據到期日
          if ("G08".equals(retFED1004[intNo][0].trim()) && !"".equals(stringVoucherYMD014)) {
            arrayDescription[intNo] = getExpiredDateUnion((intDoc2M013 + 1), stringAcctTax, stringVoucherYMD014, stringPayCondition, stringPayCondition2, "G", stringComNo,
                exeUtil);
          }
          if ("G20".equals(retFED1004[intNo][0].trim()))
            arrayDescription[intNo] = stringReceiptTotalMoney; // G20 所得總額
          if ("G06".equals(retFED1004[intNo][0].trim()))
            arrayDescription[intNo] = stringReceiptTotalMoney; // G06 每月給付所得總額
          if ("G07".equals(retFED1004[intNo][0].trim()))
            arrayDescription[intNo] = stringReceiptTax; // G07 每月代扣繳金額
          if ("228203".equals(stringAcctTax) && "C07".equals(retFED1004[intNo][0].trim()))
            arrayDescription[intNo] = stringAccountNoFirst; // C07 原立帳借方科目
          // H02 月份
          // B04 期間
        }
        intFlowNo++;
        retDataTemp = new String[27];
        retDataTemp[0] = stringBarCode; // 條碼編號 0
        retDataTemp[1] = stringDocNo; // 公文代號 1
        retDataTemp[2] = stringRowType; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 補充保費Z 折讓(稅)-貸H 退保留款-貸I
        retDataTemp[3] = "" + (intDoc2M013 + 1); // No 3
        retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
        retDataTemp[5] = "0"; // 傳票流水號 5
        retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
        retDataTemp[7] = stringComNo; // 公司代號 7
        retDataTemp[8] = stringKind; // Kind 8
        retDataTemp[9] = "C"; // 借貸 9
        retDataTemp[10] = stringAcctTax; // 會計科目 10
        retDataTemp[11] = stringInputDepartNo; // 部門 11
        retDataTemp[12] = stringFactoryNo; // 對象 12
        retDataTemp[13] = convert.FourToFive(stringAmtL, 0); // 金額 13
        retDataTemp[14] = "0"; // 匯率 14
        retDataTemp[15] = "0"; // 原類金額 15
        retDataTemp[16] = stringReceiptMoney; // 折讓未稅金額 16
        retDataTemp[17] = stringStatus; // 狀態-未過帳 17
        retDataTemp[18] = arrayDescription[0]; // 明細一 18
        retDataTemp[19] = arrayDescription[1]; // 明細二 19
        retDataTemp[20] = arrayDescription[2]; // 明細三 20
        retDataTemp[21] = arrayDescription[3]; // 明細四 21
        retDataTemp[22] = arrayDescription[4]; // 明細五 22
        retDataTemp[23] = stringDescript; // 摘要 23
        retDataTemp[24] = getUser(); // 修改者 24
        retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
        retDataTemp[26] = "A"; //
        //
        /*
         * stringCostIDPosition = (""+hashtableDoc2M042.get(stringAcctDConstant)).trim(
         * ) ; if(!"".equals(stringCostIDPosition) &&
         * !"null".equals(stringCostIDPosition)) { if(check.isNum(stringCostIDPosition))
         * { intCostIDPos = Integer.parseInt(stringCostIDPosition) ;
         * retDataTemp[17+intCostIDPos] = stringCostIDNum ; } }
         */
        //
        retVector.add(retDataTemp);
      }
    }
    System.out.println("doubleTotalMoney--------------------" + doubleTotalMoney);
    System.out.println("intMaxCount--------------------" + intMaxCount);
    boolean booleanNegative = false;
    for (int intDoc2M030 = 0; intDoc2M030 < intMaxCount; intDoc2M030++) {
      intFlowNo++;
      retDataTemp = new String[27];
      if (intDoc2M030 < retDoc2M030.length)
        stringAcctC = retDoc2M030[intDoc2M030][0].trim();
      if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession))
        stringAcctC = stringAcctCSession;
      //
      if (intMaxCount > 1) {
        if (intDoc2M030 == 0) {
          stringInvoiceTotalMoneyD = convert.FourToFive("" + ((doubleTotalRealMoneySum - doubleMailMoney - doubleRetainMoney - doubleReceiptTaxSum) * doubleRate), 0);
        } else {
          stringInvoiceTotalMoneyD = convert
              .FourToFive("" + (doubleTotalRealMoneySum - doParseDouble(stringInvoiceTotalMoneyD) - doubleRetainMoney - doubleReceiptTaxSum - doubleMailMoney), 0);
        }
      } else {
        stringInvoiceTotalMoneyD = convert.FourToFive("" + (doubleTotalRealMoneySum - doubleMailMoney - doubleRetainMoney - doubleReceiptTaxSum), 0);
      }
      if (exeUtil.doParseDouble(stringInvoiceTotalMoneyD) <= 0) {
        booleanNegative = true;
        continue;
      }
      retFED1004 = getFED1004(stringAcctC);
      for (int intNo = 0; intNo < 5; intNo++) {
        arrayDescription[intNo] = "";
        if (intNo >= retFED1004.length)
          continue;
        //
        stringItemCd = retFED1004[intNo][0].trim();
        if ("A04".equals(stringItemCd) && !"".equals(stringVoucherYMD014)) {
          arrayDescription[intNo] = getExpiredDateUnion((intDoc2M030 + 1), stringAcctC, stringVoucherYMD014, stringPayCondition1, stringPayCondition2, "C", stringComNo, exeUtil);
        }
        if ("E05".equals(stringItemCd))
          arrayDescription[intNo] = "其他";
        if ("110301".equals(stringAcctC) && intNo == 0)
          arrayDescription[intNo] = "12675-0";
      }
      doSetBankNo(stringAcctC, stringFactoryNo, arrayDescription);
      // 放入陣列中
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "C"; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
      retDataTemp[3] = "" + (intDoc2M030 + 1); // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "C"; // 借貸 9
      retDataTemp[10] = stringAcctC; // 會計科目 10
      retDataTemp[11] = "110301".equals(stringAcctC) ? "" : stringInputDepartNo; // 部門 11
      retDataTemp[12] = "2258".equals(stringAcctC) ? stringFactoryNo2258 : stringFactoryNo; // 對象 12
      retDataTemp[13] = convert.FourToFive(stringInvoiceTotalMoneyD, 0); // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = arrayDescription[0]; // 明細一 18
      retDataTemp[19] = arrayDescription[1]; // 明細二 19
      retDataTemp[20] = ("2146".equals(stringAcctC) || "2147".equals(stringAcctC)) ? stringBankCd : arrayDescription[2]; // 明細三 20
      retDataTemp[21] = ("2146".equals(stringAcctC) || "2147".equals(stringAcctC)) ? stringBankNo : arrayDescription[3]; // 明細四 21
      retDataTemp[22] = arrayDescription[4]; // 明細五 22
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 24
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
      retDataTemp[26] = "A"; //
      //
      if ("110301".equals(stringAcctC))
        retDataTemp[12] = "0095289";
      //
      /*
       * stringCostIDPosition = (""+hashtableDoc2M042.get(stringAcctC)).trim( ) ;
       * if(!"".equals(stringCostIDPosition) && !"null".equals(stringCostIDPosition))
       * { if(check.isNum(stringCostIDPosition)) { intCostIDPos =
       * Integer.parseInt(stringCostIDPosition) ; retDataTemp[17+intCostIDPos] =
       * stringCostIDNum ; } }
       */
      retVector.add(retDataTemp);
    }
    // System.out.println("---------------------退保留款") ;
    stringInputDepartNo = retDoc2M010[0][12].trim();
    stringInputDepartNo = getVoucherDepartNo(stringInputDepartNo, exeUtil);
    if (Pattern.matches("023\\d", stringInputDepartNo))
      stringInputDepartNo = "0231";
    if (doubleRetainMoney > 0) {
      intFlowNo++;
      retDataTemp = new String[27];
      // 放入陣列中
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "I"; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
      retDataTemp[3] = "0"; // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "C"; // 借貸 9
      retDataTemp[10] = "2143"; // 會計科目 10
      retDataTemp[11] = stringInputDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNo; // 對象 12
      retDataTemp[13] = "" + doubleRetainMoney; // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = ""; // 明細一 18(未決定)
      retDataTemp[19] = ""; // 明細二 19(未決定)
      retDataTemp[20] = ""; // 明細三 20(未決定)
      retDataTemp[21] = ""; // 明細四 21(未決定)
      retDataTemp[22] = ""; // 明細五 22(未決定)
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 23
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 24
      retDataTemp[26] = "A"; //
      retVector.add(retDataTemp);
    }
    System.out.println("---------------------折讓");
    if ("E66238".equals(stringBarCode)) {
      System.out.println("---------------------折讓S" + retVector.size());
      intFlowNo = doDiscountVoucher(retVector, retDiscountVector, intFlowNo, doubleTaxRate, retDoc2M011, exeUtil);
      System.out.println("---------------------折讓E" + retVector.size());
    }
    // System.out.println("---------------------郵電費") ;
    if (!booleanNegative && intMailCount > 0) {
      intFlowNo++;
      retDataTemp = new String[27];
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "E"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H
      retDataTemp[3] = ""; // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "C"; // 借貸 9
      retDataTemp[10] = stringAcctCConstant; // 會計科目 10
      retDataTemp[11] = ""; // stringInputDepartNo ; // 部門 11
      retDataTemp[12] = stringFactoryNo; // 對象 12
      retDataTemp[13] = convert.FourToFive("" + doubleMailMoney, 0); // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 請款金額 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = ""; // 明細一 18
      retDataTemp[19] = ""; // 明細二 19
      retDataTemp[20] = ""; // 明細三 20
      retDataTemp[21] = ""; // 明細四 21
      retDataTemp[22] = ""; // 明細五 22
      retDataTemp[23] = ""; // stringDescript ; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 23
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 24
      retDataTemp[26] = "A"; //
      //
      /*
       * stringCostIDPosition = (""+hashtableDoc2M042.get(stringAcctC)).trim( ) ;
       * if(!"".equals(stringCostIDPosition) && !"null".equals(stringCostIDPosition))
       * { if(check.isNum(stringCostIDPosition)) { intCostIDPos =
       * Integer.parseInt(stringCostIDPosition) ; retDataTemp[17+intCostIDPos] =
       * stringCostIDNum ; } }
       */
      //
      retVector.add(retDataTemp);
    }
    // 公積金 32 特別處理
    String[] arrayAcct = { "2258", "125199" };
    String[] arrayDbCrCd = { "D", "C" };
    if (booleanCostID32) {
      for (int intNo = 0; intNo < arrayDescription.length; intNo++)
        arrayDescription[intNo] = "";
      for (int intNo = 0; intNo < arrayAcct.length; intNo++) {
        intFlowNo++;
        retDataTemp = new String[27];
        retDataTemp[0] = stringBarCode; // 條碼編號 0
        retDataTemp[1] = stringDocNo; // 公文代號 1
        retDataTemp[2] = "Y"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H 退保留款I
        retDataTemp[3] = "" + (intNo + 1); // No 3
        retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
        retDataTemp[5] = "0"; // 傳票流水號 5
        retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
        retDataTemp[7] = stringComNo; // 公司代號 7
        retDataTemp[8] = stringKind; // Kind 8
        retDataTemp[9] = arrayDbCrCd[intNo]; // 借貸 9
        retDataTemp[10] = arrayAcct[intNo]; // 會計科目 10
        retDataTemp[11] = "0331"; // 部門 11
        retDataTemp[12] = "Z0001"; // 對象 12
        retDataTemp[13] = convert.FourToFive("" + doubleTotalMoneySum32, 0); // 金額 13
        retDataTemp[14] = "0"; // 匯率 14
        retDataTemp[15] = "0"; // 原類金額 15
        retDataTemp[16] = "0"; // 請款金額 16
        retDataTemp[17] = stringStatus; // 狀態-未過帳 17
        retDataTemp[18] = arrayDescription[0]; // 明細一 18
        retDataTemp[19] = arrayDescription[1]; // 明細二 19
        retDataTemp[20] = arrayDescription[2]; // 明細三 20
        retDataTemp[21] = arrayDescription[3]; // 明細四 21
        retDataTemp[22] = arrayDescription[4]; // 明細五 22
        retDataTemp[23] = stringDescript; // 摘要 23
        retDataTemp[24] = getUser(); // 修改者 24
        retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
        retDataTemp[26] = "A"; //
        retVector.add(retDataTemp);
      }
    }
    // System.out.println("--------------------年底預估傳票3START") ;
    int intStartPos = 0;
    int intEndPos = 0;
    int intDbCrCd = 0;
    int intDbCrCdCount = 0;
    String stringID = getIDForDoc2M010("Doc2M010", stringBarCode);
    String stringVoucherDate = "";
    String stringVoucherFlowNo = "";
    String stringDbCrCd = "";
    String stringDbCrCdData = "";
    String stringRemark = "預估";
    String stringAmt = "";
    String[] arrayTempL = null;
    String[][] retDoc2M080 = null;
    String[][] retFED1012 = null;
    boolean booleanExist = true;
    double doubleAmt = 0;
    double doubleAmtSumFinal = 0;
    double dobuleUseMoney = 0;
    double dobuleUseMoneyFinal = 0;
    //
    String[][] retData = getTableDataDoc(
        "SELECT  ID_Def,  UseMoney " + " FROM  Doc2M0801 " + " WHERE  ID_BarCode  =  " + stringID + " " + " AND  ComNo  =  '" + stringComNo + "' " + " ORDER BY ID_Def  ");
    if (retData.length == 0) {
      booleanExist = false;
      stringRemark = "請款";
      if (!"".equals(stringID)) {
        retData = new String[1][2];
        retData[0][0] = stringID;
        retData[0][1] = "0";
      }
    }
    for (int intID = 0; intID < retData.length; intID++) {
      stringID = retData[intID][0];
      dobuleUseMoney = exeUtil.doParseDouble(retData[intID][1].trim());
      dobuleUseMoneyFinal = dobuleUseMoney;
      retDoc2M080 = getDoc2M080_2(stringID, stringRemark, stringComNo);
      intDbCrCdCount = 0;
      intDbCrCd = 0;
      for (int intNo = 0; intNo < retDoc2M080.length; intNo++) {
        stringVoucherFlowNo = retDoc2M080[intNo][23].trim();
        arrayTempL = convert.StringToken(stringVoucherFlowNo, "-");
        if (arrayTempL.length == 4) {
          stringVoucherDate = arrayTempL[0].trim();
          stringVoucherFlowNo = "" + exeUtil.doParseInteger(arrayTempL[1].trim());
          intStartPos = exeUtil.doParseInteger(arrayTempL[2].trim());
          intEndPos = exeUtil.doParseInteger(arrayTempL[3].trim());
          //
          // retFED1012 = getFED1012(stringVoucherDate, stringVoucherFlowNo, stringComNo,
          // stringKind) ;
          retFED1012 = getFED1012YearEndData(stringBarCode, stringComNo, arrayTempL, stringKind, stringID, exeUtil);
          intEndPos = retFED1012.length - 1;
          intStartPos = 0;
          // System.out.println(intStartPos+"--------------"+intEndPos) ;
          if (retFED1012.length == 0) {
            // retTable[0][0] = "查無 [預估對沖傳票]，請洽資訊室。" ;
            // return retTable;
            continue;
          }
          //
          for (int intFED1012 = intEndPos; intFED1012 >= intStartPos; intFED1012--) {
            stringDbCrCd = retFED1012[intFED1012][9].trim();
            if ("C".equals(stringDbCrCd)) {
              doubleAmtSumFinal = exeUtil.doParseDouble(retFED1012[intFED1012][13].trim());
            } else {
              intDbCrCdCount++;
            }
          }
          //
          for (int intFED1012 = intEndPos; intFED1012 >= intStartPos; intFED1012--) {
            stringDbCrCdData = retFED1012[intFED1012][9].trim();
            stringAmt = retFED1012[intFED1012][13].trim();
            stringDbCrCd = "C".equals(stringDbCrCdData) ? "D" : "C";
            //
            if ("D".equals(stringDbCrCdData))
              intDbCrCd++;
            //
            //
            stringDescript = "沖" + stringVoucherDate + "-" + convert.add0(stringVoucherFlowNo, "4") + " " + retFED1012[intFED1012][23].trim();
            stringDescript = exeUtil.doSubstring(code.StrToByte(stringDescript), 0, 30);
            stringDescript = code.ByteToStr(stringDescript);
            //
            if (booleanExist) {
              // 年底預估之分次沖銷
              if ("C".equals(stringDbCrCdData)) {
                stringAmt = convert.FourToFive("" + dobuleUseMoneyFinal, 0);
              } else {
                if (intDbCrCdCount == intDbCrCd) {
                  // 最後一筆
                  stringAmt = convert.FourToFive("" + dobuleUseMoney, 0);
                } else {
                  doubleAmt = dobuleUseMoneyFinal * exeUtil.doParseDouble(stringAmt) / doubleAmtSumFinal;
                  stringAmt = convert.FourToFive("" + doubleAmt, 0);
                  dobuleUseMoney -= exeUtil.doParseDouble(stringAmt);
                }
              }
            } else {
              // 請款
            }
            //
            if ("03335,033622,03365,".indexOf(retFED1012[intFED1012][11].trim() + ",") != -1) {
              retFED1012[intFED1012][10] = retFED1012[intFED1012][10].trim().replaceAll("6201", "5681");
            }
            //
            intFlowNo++;
            retDataTemp = new String[27];
            retDataTemp[0] = stringBarCode; // 條碼編號 0
            retDataTemp[1] = stringDocNo; // 公文代號 1
            retDataTemp[2] = "W"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H 沖銷W
            retDataTemp[3] = ""; // No 3
            retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
            retDataTemp[5] = "0"; // 傳票流水號 5
            retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
            retDataTemp[7] = stringComNo; // 公司代號 7
            retDataTemp[8] = stringKind; // Kind 8
            retDataTemp[9] = stringDbCrCd; // 借貸 9
            retDataTemp[10] = retFED1012[intFED1012][10].trim(); // 會計科目 10
            retDataTemp[11] = retFED1012[intFED1012][11].trim(); // 部門 11
            retDataTemp[12] = retFED1012[intFED1012][12].trim(); // 對象 12
            retDataTemp[13] = stringAmt; // 金額 13
            retDataTemp[14] = "0"; // 匯率 14
            retDataTemp[15] = "0"; // 原類金額 15
            retDataTemp[16] = "0"; // 請款金額 16
            retDataTemp[17] = stringStatus; // 狀態-未過帳 17
            retDataTemp[18] = retFED1012[intFED1012][18].trim(); // 明細一 18
            retDataTemp[19] = retFED1012[intFED1012][19].trim(); // 明細二 19
            retDataTemp[20] = retFED1012[intFED1012][20].trim(); // 明細三 20
            retDataTemp[21] = retFED1012[intFED1012][21].trim(); // 明細四 21
            retDataTemp[22] = retFED1012[intFED1012][22].trim(); // 明細五 22
            retDataTemp[23] = stringDescript; // 摘要 23
            retDataTemp[24] = getUser(); // 修改者 24
            retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
            retDataTemp[26] = "A"; //
            retVector.add(retDataTemp);
          }
        }
      }
    }
    // System.out.println("--------------------年底預估傳票3(對沖)END") ;
    // 轉換
    retTable = (String[][]) retVector.toArray(new String[0][0]);
    return retTable;
  }

  public String[][] getConvertToArrayForReceipt(boolean booleanApplyTypeD, boolean booleanTEST, Hashtable hashtbleFunctionType, String[][] retDoc2M010, String[][] retDoc2M011,
      String[][] retDoc2M012, String[][] retDoc2M013, String[][] retDoc5M0224, FargloryUtil exeUtil) throws Throwable {
    System.out.println("getConvertToArrayForReceipt--------------------S");
    String stringVoucherYMD014 = ("" + get("Doc2M014_VOUCHER_YMD")).trim();
    String stringAccountCountS = ("" + get("Doc2M014_AccountCount")).trim();
    String stringAccountCountStatusS = ("" + get("Doc2M014_AccountCount_Status")).trim();
    if ("null".equals(stringVoucherYMD014))
      stringVoucherYMD014 = "";
    if ("null".equals(stringAccountCountS))
      stringAccountCountS = "";
    //
    int intFlowNo = 0;
    String stringComNo = retDoc2M010[0][0].trim();
    String stringKind = "0";
    String stringDescript = retDoc2M010[0][1].trim().replaceAll("\n", "");
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringCDate = retDoc2M010[0][16].trim();
    String stringCDateAC = exeUtil.getDateConvert(stringCDate);
    String stringEDateTime = retDoc2M010[0][22].trim();
    String stringPurchaseNo1 = "";
    String stringPurchaseNo2 = "";
    String stringPurchaseNo3 = "";
    String stringPurchaseNo4 = "";
    String stringAcctDConstant = "";
    String stringAcctCConstant = "";
    String stringMailMoney1 = "";
    String stringMailMoney2 = "";
    String stringCostIDPosition = "";
    String stringStatus = "U";
    String stringAccountCount = !"".equals(stringAccountCountS) ? stringAccountCountS : retDoc2M010[0][24].trim();
    String stringTemp = "";
    String stringTodayAC = datetime.getToday("YYYY/mm/dd");
    String[] retDoc2M040 = getDoc2M040();
    String[] retDataTemp = null;
    String[] arrayDescription = new String[5];
    String[][] retDoc2M020 = null;
    String[][] retDoc2M017 = getDoc2M017Union("Doc2M017", stringBarCode);
    String[][] retTable = new String[1][1];
    Vector retVector = new Vector();
    Vector retVectorNegative = new Vector();
    double doubleRetainMoney = exeUtil.doParseDouble(retDoc2M010[0][13].trim()); // 退保留款
    Hashtable hashtableDoc2M041 = getDoc2M041();
    // 月數
    if (exeUtil.doParseDouble(stringAccountCount) <= 0)
      stringAccountCount = "1";
    // 摘要
    stringTemp = exeUtil.doSubstring(code.StrToByte(stringDescript), 0, 30);
    stringTemp = code.ByteToStr(stringTemp);
    if (stringDescript.indexOf(stringTemp) == -1) {
      stringTemp = exeUtil.doSubstring(code.StrToByte(stringDescript), 0, 29);
      stringTemp = code.ByteToStr(stringTemp);
    }
    stringDescript = stringTemp;
    stringDescript = convert.replace(stringDescript, "'", "''");
    // 狀態
    Vector vectorBarCode = new Vector();
    vectorBarCode.add("G70740");
    if (vectorBarCode.indexOf(stringBarCode) != -1)
      stringStatus = "Z";
    // 傳票日期
    if (!"".equals(stringVoucherYMD014)) {
      stringTodayAC = exeUtil.getDateConvert(stringVoucherYMD014);
    }
    //
    stringAcctDConstant = retDoc2M040[0].trim();
    stringAcctCConstant = retDoc2M040[1].trim();
    stringMailMoney1 = retDoc2M040[2].trim();
    stringMailMoney2 = retDoc2M040[3].trim();
    if (retDoc2M017.length > 0) {
      stringPurchaseNo1 = retDoc2M017[0][0].trim();
      stringPurchaseNo2 = retDoc2M017[0][1].trim();
      stringPurchaseNo3 = retDoc2M017[0][2].trim();
      stringPurchaseNo4 = retDoc2M017[0][5].trim();
    }
    System.out.println("-------------------- 取得不同的統一編號 ");
    // String stringFactoryNo = "" ;
    String stringFactoryNoTop1 = getFactoryNoTop1(retDoc2M010, retDoc2M011, retDoc2M013);
    //
    int intPos = 0;
    int intTemp = 0;
    String stringDepartNo = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String stringAccountNo = "";
    String stringItemCd = "";
    String stringUsedCd = "";
    String stringPosition = "";
    String stringRealMoney = "";
    String stringRowtype = "";
    String[] arrayTemp = null;
    String[] arrayTable = new String[20];
    String[][] retFED1004 = null;
    // double doubleReceiptTotalMoney = 0 ;
    // double doubleReceiptMoney = 0 ;
    //
    // for(int intNo=0 ; intNo<retDoc2M013.length ; intNo++) {
    // doubleReceiptTotalMoney += exeUtil.doParseDouble(retDoc2M013[intNo][5].trim(
    // )) ;
    // doubleReceiptMoney += exeUtil.doParseDouble(retDoc2M013[intNo][3].trim( )) ;
    // }

    System.out.println("--------------------借方");
    // 借方 以 費用 表格 轉分錄
    arrayTable[0] = stringVoucherYMD014;
    arrayTable[1] = stringKind;
    arrayTable[2] = stringStatus;
    arrayTable[3] = stringDescript;
    arrayTable[4] = stringFactoryNoTop1;
    arrayTable[5] = "" + intFlowNo;
    System.out.println("putDebitForReceipt1--------------------S");
    intFlowNo = putDebitForReceipt1(retDoc2M010, retDoc2M012, retDoc2M013, retDoc5M0224, hashtableDoc2M041, hashtbleFunctionType, exeUtil, retVector, retVectorNegative,
        arrayTable);
    System.out.println("putDebitForReceipt1(" + retVector.size() + ")--------------------E");
    if (intFlowNo == 0) {
      retTable[0][0] = arrayTable[0];
      return retTable;
    }
    String stringInputDepartNo = arrayTable[0]; // 部門預設值
    String stringAccountNoCR = arrayTable[2]; // 借方會計科目
    String stringAccountNoFirst = arrayTable[3]; // 借方會計科目
    String stringAcctCNew = arrayTable[5]; // 貸方會計科目
    boolean boolean110301 = "Y".equals(arrayTable[4]); // 貸方 預設為110301 判斷
    boolean booleanCeditType1 = "Y".equals(arrayTable[6]); // 貸方-使用立沖傳票 且 特別貸方處理
    boolean booleanCeditType2 = "Y".equals(arrayTable[7]); // 以 個人收據 轉貸方
    boolean booleanCostID130 = "Y".equals(arrayTable[8]); // 貸方-退保留款 會計科目判斷
    boolean booleanCostID32 = "Y".equals(arrayTable[9]); // 特別貸方處理(公積金 32)判斷
    boolean booleanDoc2M0201ForB = "Y".equals(arrayTable[11]); // 無憑證
    double doubleCostID009 = exeUtil.doParseDouble(arrayTable[1]); // doubleCostID009
    double doubleRealTotalMoneySum = exeUtil.doParseDouble(arrayTable[10]); //
    double doubleTotalMoneySum32 = doubleRealTotalMoneySum; // 特別貸方處理(公積金 32)
    boolean booleanCeditType3 = "Y".equals(arrayTable[12]); // 以 個人收據 轉貸方，非 110301
    boolean booleanCostID831 = "Y".equals(arrayTable[13]); //
    System.out.println("借方 以 費用 表格 轉分錄 金額 合計-------------------- (" + doubleTotalMoneySum32 + ")(" + stringInputDepartNo + ") ");

    // 借方 以 個人收據 表格
    arrayTable[0] = stringVoucherYMD014;
    arrayTable[1] = stringKind;
    arrayTable[2] = stringStatus;
    arrayTable[3] = stringDescript;
    arrayTable[4] = stringFactoryNoTop1;
    arrayTable[5] = "" + intFlowNo;
    System.out.println("putDebitForReceipt2--------------------S");
    retVector = putDebitForReceipt2(booleanCostID831, retDoc2M010, retDoc2M012, retDoc2M013, hashtableDoc2M041, exeUtil, retVector, arrayTable);
    System.out.println("putDebitForReceipt2(" + retVector.size() + ")--------------------E");
    if (retVector.size() == 0) {
      retTable[0][0] = arrayTable[0];
      return retTable;
    }
    boolean booleanRationMan = "Y".equals(arrayTable[0]); // 特別貸方處理(公積金 32)判斷
    // 借方會計科目
    stringTemp = arrayTable[1];
    if (!"".equals(stringTemp))
      stringAccountNoCR = stringTemp;
    // 借方會計科目
    stringTemp = arrayTable[2];
    if (!"".equals(stringTemp))
      stringAccountNoFirst = stringTemp;
    // 部門預設值
    stringTemp = arrayTable[3];
    if (!"".equals(stringTemp))
      stringInputDepartNo = stringTemp;
    //
    intTemp = exeUtil.doParseInteger(arrayTable[4]);
    if (intTemp > 0)
      intFlowNo = intTemp;
    boolean booleanLife2153 = "Y".equals(arrayTable[5]); // 特別貸方2153
    System.out.println("借方 以 個人收據 表格-------------------- (" + doubleRealTotalMoneySum + ")(" + stringInputDepartNo + ") ");

    // 借方 以 立沖表格 與 個人收據 差異金額產生分錄
    arrayTable[0] = stringVoucherYMD014;
    arrayTable[1] = stringKind;
    arrayTable[2] = stringStatus;
    arrayTable[3] = stringDescript;
    arrayTable[4] = stringFactoryNoTop1;
    arrayTable[5] = "" + intFlowNo;
    arrayTable[6] = stringInputDepartNo;
    // arrayTable[7] = ""+doubleReceiptMoney ;
    // arrayTable[8] = ""+doubleReceiptTotalMoney ;
    intFlowNo = putDebitForReceipt3(booleanCostID831, retDoc2M010, retDoc2M012, retDoc2M013, retDoc5M0224, hashtableDoc2M041, exeUtil, retVector, retVectorNegative, arrayTable);
    if (intFlowNo == 0) {
      retTable[0][0] = arrayTable[0];
      return retTable;
    }
    booleanLife2153 = booleanLife2153 || "Y".equals(arrayTable[2]); // 特別貸方2153
    // stringTemp = arrayTable[0] ;
    // if(exeUtil.doParseDouble(stringTemp) > 0) doubleReceiptMoney =
    // exeUtil.doParseDouble(stringTemp) ;
    // stringTemp = arrayTable[1] ;
    // if(exeUtil.doParseDouble(stringTemp) > 0) doubleReceiptTotalMoney =
    // exeUtil.doParseDouble(stringTemp) ;

    // 借方 固資傳票
    talk dbAsset = getTalk("" + get("put_Asset"));
    String[][] retAsAsset = new String[0][0];
    boolean booleanEnd = false;
    if (booleanApplyTypeD && ",P38453,P20829,".indexOf("," + stringBarCode + ",") == -1) {
      System.out.println("借方 固資傳票 booleanApplyTypeD(" + booleanApplyTypeD + ")-----------------------------");
      String stringKindNoPurchase = retDoc2M010[0][33];
      //
      if ("23".equals(stringKindNoPurchase))
        stringKindNoPurchase = "15";
      if ("24".equals(stringKindNoPurchase))
        stringKindNoPurchase = "17";
      if ("26".equals(stringKindNoPurchase))
        stringKindNoPurchase = "17";
      //
      arrayTable[0] = stringVoucherYMD014;
      arrayTable[1] = stringKind;
      arrayTable[2] = stringStatus;
      arrayTable[3] = stringDescript;
      arrayTable[4] = stringComNo;
      arrayTable[5] = stringKindNoPurchase;
      arrayTable[6] = stringPurchaseNo1 + stringPurchaseNo2 + stringPurchaseNo3;
      arrayTable[7] = stringFactoryNoTop1;
      System.out.println("isLastDocVoucher------------------------------------");
      booleanEnd = isLastDocVoucher(true, stringBarCode, stringComNo, retDoc2M010[0][33], arrayTable[6], stringFactoryNoTop1);
      System.out.println("getAsAssetVoucher------------------------------------");
      retAsAsset = getAsAssetVoucher("A", stringComNo, stringKindNoPurchase, arrayTable[6], stringFactoryNoTop1, exeUtil, dbAsset);// 0 會計科目 1 部門代碼 2 金額 3 固資代碼 4 AssId 5 請款代碼
      //
      retVector = new Vector();
      retVectorNegative = new Vector();
      System.out.println("putDebitForAsset------------------------------------S");
      intFlowNo = putDebitForAsset(booleanEnd, retAsAsset, retDoc2M010, hashtableDoc2M041, exeUtil, dbAsset, retVector, retVectorNegative, arrayTable);
      stringInputDepartNo = arrayTable[0]; // 部門預設值
      stringAccountNoCR = arrayTable[2]; // 借方會計科目
      stringAccountNoFirst = arrayTable[3]; // 借方會計科目
      // stringAcctCNew = arrayTable[5] ; // 貸方會計科目 沿用原本機制
      System.out.println("putDebitForAsset------------------------------------E");
    }

    System.out.println("借方-發票 金額 合計--------------------前 (" + doubleRealTotalMoneySum + ")(" + stringInputDepartNo + ") ");
    // 借方-發票
    arrayTable[0] = stringVoucherYMD014;
    arrayTable[1] = stringKind;
    arrayTable[2] = stringStatus;
    arrayTable[3] = stringDescript;
    arrayTable[4] = "" + intFlowNo;
    arrayTable[5] = stringInputDepartNo;
    arrayTable[6] = "" + doubleRealTotalMoneySum;
    intFlowNo = putDebitForReceipt4(booleanCostID831, retDoc2M010, retDoc2M011, exeUtil, retVector, arrayTable);
    doubleRealTotalMoneySum = exeUtil.doParseDouble(arrayTable[0]); //
    booleanLife2153 = booleanLife2153 || "Y".equals(arrayTable[1]); // 特別貸方2153
    System.out.println("借方-發票 金額 合計-------------------- (" + doubleRealTotalMoneySum + ")(" + stringInputDepartNo + ") ");

    //
    String stringPayCondition1 = retDoc2M010[0][14].trim();
    String stringPayCondition2 = retDoc2M010[0][15].trim();
    String stringBankCd = "";
    String stringBankNo = "";
    //
    System.out.println("--------------------貸方-會計科目(" + retVector.size() + ")");
    arrayTable[0] = booleanCeditType1 ? "Y" : "N";
    arrayTable[1] = boolean110301 ? "Y" : "N";
    arrayTable[2] = stringAccountNoFirst;
    arrayTable[3] = stringAcctCNew;
    arrayTable[4] = booleanRationMan ? "Y" : "N";
    arrayTable[5] = stringMailMoney1;
    arrayTable[6] = booleanLife2153 ? "Y" : "N";
    arrayTable[7] = booleanApplyTypeD ? "Y" : "N";
    arrayTable[8] = stringFactoryNoTop1;
    String[][] retDoc2M030 = getAttNoC(retDoc2M010, retDoc5M0224, exeUtil, arrayTable);
    if (retDoc2M030.length == 0) {
      retTable[0][0] = arrayTable[0];
      return retTable;
    }
    boolean booleanNoReceipt = "Y".equals(arrayTable[0]);
    double doubleMailMoney = exeUtil.doParseDouble(arrayTable[1]);
    //
    if (booleanNoReceipt) {
      doubleCostID009 = 0;
    }

    System.out.println("--------------------貸方-負值(" + retVector.size() + ")");
    // 負值
    for (int intNo = 0; intNo < retVectorNegative.size(); intNo++) {
      retDataTemp = (String[]) retVectorNegative.get(intNo);
      //
      if ("B".equals(retDataTemp[26].trim()) && booleanNoReceipt)
        continue;
      //
      intFlowNo++;
      retDataTemp[6] = "" + intFlowNo;
      retVector.add(retDataTemp);
    }

    // 貸方-扣繳(扣繳金額)
    System.out.println("--------------------貸方-扣繳(扣繳金額)");
    arrayTable[0] = stringVoucherYMD014;
    arrayTable[1] = stringKind;
    arrayTable[2] = stringStatus;
    arrayTable[3] = stringDescript;
    arrayTable[4] = stringFactoryNoTop1;
    arrayTable[5] = "" + intFlowNo;
    arrayTable[6] = stringInputDepartNo;
    arrayTable[7] = booleanDoc2M0201ForB ? "Y" : "N";
    arrayTable[8] = booleanNoReceipt ? "Y" : "N";
    arrayTable[9] = "" + doubleRealTotalMoneySum;
    // arrayTable[9] = ""+doubleReceiptMoney ;
    // arrayTable[10] = ""+doubleReceiptTotalMoney ;
    arrayTable[11] = stringAccountNoFirst;
    arrayTable[12] = stringAccountNoCR;
    arrayTable[13] = stringAccountCountStatusS;
    arrayTable[14] = stringAccountCount;
    intFlowNo = putCeditForReceipt1(retDoc2M010, retDoc2M013, exeUtil, retVector, arrayTable);
    double doubleReceiptKindBMoneySum = exeUtil.doParseDouble(arrayTable[0]);
    stringTemp = arrayTable[1];
    if (exeUtil.doParseDouble(stringTemp) > 0)
      doubleRealTotalMoneySum = exeUtil.doParseDouble(stringTemp);
    // stringTemp = arrayTable[1] ; if(exeUtil.doParseDouble(stringTemp) > 0)
    // doubleRealTotalMoneySum = exeUtil.doParseDouble(stringTemp) ;
    // stringTemp = arrayTable[2] ; if(exeUtil.doParseDouble(stringTemp) > 0)
    // doubleReceiptTotalMoney = exeUtil.doParseDouble(stringTemp) ;

    //
    System.out.println("--------------------貸方(" + retVector.size() + ")(" + retDoc2M030.length + ")   doubleReceiptKindBMoneySum(" + doubleReceiptKindBMoneySum
        + ")doubleRealTotalMoneySum(" + doubleRealTotalMoneySum + ")doubleTotalMoneySum32(" + doubleTotalMoneySum32 + ")");
    // 付款比例 doubleRate 計算
    double doubleRate = getRateC(retDoc2M010, retDoc2M017, retDoc2M030, exeUtil);
    String[][] retDoc2M015 = getDoc2M015Union("Doc2M015", stringBarCode);
    double doubleDisCountTax = getDiscountTax(retDoc2M015, exeUtil);
    //
    // if(booleanNoReceipt) doubleReceiptMoney = doubleReceiptTotalMoney ;
    // if(doubleReceiptMoney==0) doubleReceiptMoney = doubleRealTotalMoneySum ;
    // 貸方
    arrayTable[0] = stringVoucherYMD014;
    arrayTable[1] = stringKind;
    arrayTable[2] = stringStatus;
    arrayTable[3] = stringDescript;
    arrayTable[4] = stringFactoryNoTop1;
    arrayTable[5] = "" + intFlowNo;
    arrayTable[6] = stringInputDepartNo;
    arrayTable[7] = booleanCeditType1 ? "Y" : "N";
    // 8
    arrayTable[9] = "" + (doubleRealTotalMoneySum - doubleDisCountTax);
    // arrayTable[9] = ""+doubleReceiptMoney ;
    arrayTable[10] = "" + doubleMailMoney;
    arrayTable[11] = "" + doubleRetainMoney;
    arrayTable[12] = "0"; // ""+doubleCostID009 ;
    arrayTable[13] = "" + doubleRate;
    arrayTable[14] = "" + stringAccountCount;
    arrayTable[15] = "" + doubleReceiptKindBMoneySum;
    arrayTable[16] = booleanCeditType2 ? "Y" : "N";
    arrayTable[17] = booleanCeditType3 ? "Y" : "N";
    arrayTable[18] = booleanLife2153 ? "Y" : "N";
    intFlowNo = putCeditForReceipt2(retDoc2M010, retDoc2M013, retDoc2M030, retDoc5M0224, exeUtil, retVector, arrayTable);
    if (intFlowNo == 0) {
      retTable[0][0] = arrayTable[0];
      System.out.println("貸方 ERROR----------------------------------------");
      return retTable;
    }
    boolean booleanNegative = "Y".equals(arrayTable[0]);
    boolean booleanMult = "Y".equals(arrayTable[1]);

    // 貨方-固資 前期沖轉
    if (booleanEnd && booleanApplyTypeD && retAsAsset.length > 0) {
      System.out.println("貨方-固資 前期沖轉--------------------");
      arrayTable[0] = stringVoucherYMD014;
      arrayTable[1] = stringKind;
      arrayTable[2] = stringStatus;
      arrayTable[3] = stringDescript;
      arrayTable[4] = stringFactoryNoTop1;
      arrayTable[5] = "" + intFlowNo;
      arrayTable[6] = stringPurchaseNo1 + stringPurchaseNo2 + stringPurchaseNo3;
      arrayTable[7] = retDoc2M010[0][33].trim();
      intFlowNo = putCeditForReceipt3(retDoc2M010, exeUtil, retVector, arrayTable);
      if (intFlowNo == 0) {
        retTable[0][0] = arrayTable[0];
        System.out.println("貨方-固資 前期沖轉 ERROR--------------------");
        return retTable;
      }
    }

    // 貸方-折讓
    if (retDoc2M015.length > 0) {
      arrayTable[0] = stringVoucherYMD014;
      arrayTable[1] = stringKind;
      arrayTable[2] = stringStatus;
      arrayTable[3] = stringDescript;
      arrayTable[4] = stringFactoryNoTop1;
      arrayTable[5] = "" + intFlowNo;
      arrayTable[6] = stringInputDepartNo;
      intFlowNo = putCeditForReceiptDiscount(retDoc2M010, retDoc2M011, retDoc2M015, exeUtil, retVector, arrayTable);
      if (intFlowNo == 0) {
        retTable[0][0] = arrayTable[0];
        return retTable;
      }
    }

    System.out.println("--------------------貸方-退保留款" + retVector.size());
    stringInputDepartNo = retDoc2M010[0][12].trim();
    stringInputDepartNo = getVoucherDepartNo(stringInputDepartNo, exeUtil);
    if (Pattern.matches("023\\d", stringInputDepartNo))
      stringInputDepartNo = "0231";
    if (doubleRetainMoney > 0) {
      intFlowNo++;
      retDataTemp = new String[27];
      //
      stringAccountNo = booleanCostID130 ? "228299" : "2143";
      // 放入陣列中
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "I"; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
      retDataTemp[3] = "0"; // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "C"; // 借貸 9
      retDataTemp[10] = stringAccountNo; // 會計科目 10
      retDataTemp[11] = stringInputDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNoTop1; // 對象 12
      retDataTemp[13] = "" + doubleRetainMoney; // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = ""; // 明細一 18(未決定)
      retDataTemp[19] = ""; // 明細二 19(未決定)
      retDataTemp[20] = ""; // 明細三 20(未決定)
      retDataTemp[21] = ""; // 明細四 21(未決定)
      retDataTemp[22] = ""; // 明細五 22(未決定)
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 24
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
      retDataTemp[26] = "A"; //
      retVector.add(retDataTemp);
    }
    System.out.println("--------------------貸方-郵電費MailMoney(" + doubleMailMoney + ")booleanNegative(" + booleanNegative + ")booleanMult(" + booleanMult + ")" + retVector.size());
    if (!booleanNegative && !booleanMult && doubleMailMoney > 0) {
      intFlowNo++;
      retDataTemp = new String[27];
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "E"; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
      retDataTemp[3] = ""; // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "C"; // 借貸 9
      retDataTemp[10] = stringAcctCConstant; // 會計科目 10
      retDataTemp[11] = ""; // 部門 11
      retDataTemp[12] = ""; // stringFactoryNoTop1 ; // 對象 12
      retDataTemp[13] = convert.FourToFive("" + doubleMailMoney, 0); // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 請款金額 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = ""; // 明細一 18
      retDataTemp[19] = ""; // 明細二 19
      retDataTemp[20] = ""; // 明細三 20
      retDataTemp[21] = ""; // 明細四 21
      retDataTemp[22] = ""; // 明細五 22
      retDataTemp[23] = ""; // stringDescript ; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 24
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
      retDataTemp[26] = "A"; //
      //
      /*
       * stringCostIDPosition = (""+hashtableDoc2M042.get(stringAcctC)).trim( ) ;
       * if(!"".equals(stringCostIDPosition) && !"null".equals(stringCostIDPosition))
       * { if(check.isNum(stringCostIDPosition)) { intCostIDPos =
       * Integer.parseInt(stringCostIDPosition) ; retDataTemp[17+intCostIDPos] =
       * stringCostIDNum ; } }
       */
      //
      retVector.add(retDataTemp);
    }
    // 公積金 32 特別處理
    String stringDeptCd = "0331";
    String stringFactory = "Z0001";
    String[] arrayAcct = { "2258", "125199" };
    String[] arrayDbCrCd = { "D", "C" };
    if (booleanCostID32 || booleanCeditType1) {
      if (booleanCeditType1) {
        stringDeptCd = stringInputDepartNo;
        stringFactory = "Z0001";
        arrayAcct[0] = "1107";
        arrayAcct[1] = "110301";
      }
      for (int intNo = 0; intNo < arrayDescription.length; intNo++)
        arrayDescription[intNo] = "";
      for (int intNo = 0; intNo < arrayAcct.length; intNo++) {
        intFlowNo++;
        retDataTemp = new String[27];
        retDataTemp[0] = stringBarCode; // 條碼編號 0
        retDataTemp[1] = stringDocNo; // 公文代號 1
        retDataTemp[2] = "Y"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H 退保留款I
        retDataTemp[3] = "" + (intNo + 1); // No 3
        retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
        retDataTemp[5] = "0"; // 傳票流水號 5
        retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
        retDataTemp[7] = stringComNo; // 公司代號 7
        retDataTemp[8] = stringKind; // Kind 8
        retDataTemp[9] = arrayDbCrCd[intNo]; // 借貸 9
        retDataTemp[10] = arrayAcct[intNo]; // 會計科目 10
        retDataTemp[11] = stringDeptCd; // 部門 11
        retDataTemp[12] = stringFactory; // 對象 12
        retDataTemp[13] = convert.FourToFive("" + doubleTotalMoneySum32, 0); // 金額 13
        retDataTemp[14] = "0"; // 匯率 14
        retDataTemp[15] = "0"; // 原類金額 15
        retDataTemp[16] = "0"; // 請款金額 16
        retDataTemp[17] = stringStatus; // 狀態-未過帳 17
        retDataTemp[18] = arrayDescription[0]; // 明細一 18
        retDataTemp[19] = arrayDescription[1]; // 明細二 19
        retDataTemp[20] = arrayDescription[2]; // 明細三 20
        retDataTemp[21] = arrayDescription[3]; // 明細四 21
        retDataTemp[22] = arrayDescription[4]; // 明細五 22
        retDataTemp[23] = stringDescript; // 摘要 23
        retDataTemp[24] = getUser(); // 修改者 24
        retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
        retDataTemp[26] = "A"; //
        retVector.add(retDataTemp);
      }
    }
    System.out.println("--------------------年底預估傳票2START" + retVector.size());
    int intStartPos = 0;
    int intEndPos = 0;
    int intDbCrCd = 0;
    int intDbCrCdCount = 0;
    String stringID = getIDForDoc2M010("Doc2M010", stringBarCode);
    String stringVoucherDate = "";
    String stringVoucherFlowNo = "";
    String stringDbCrCd = "";
    String stringDbCrCdData = "";
    String stringRemark = "預估";
    String stringAmt = "";
    String[] arrayTempL = null;
    String[][] retDoc2M080 = null;
    String[][] retFED1012 = null;
    boolean booleanExist = true;
    double doubleAmt = 0;
    double doubleAmtSumFinal = 0;
    double dobuleUseMoney = 0;
    double dobuleUseMoneyFinal = 0;
    //
    String[][] retData = getTableDataDoc(
        "SELECT  ID_Def,  UseMoney " + " FROM  Doc2M0801 " + " WHERE  ID_BarCode  =  " + stringID + " " + " AND  ComNo  =  '" + stringComNo + "' " + " ORDER BY  ID_Def  ");
    if (retData.length == 0) {
      booleanExist = false;
      stringRemark = "請款";
      if (!"".equals(stringID)) {
        retData = new String[1][2];
        retData[0][0] = stringID;
        retData[0][1] = "0";
      }
    }
    for (int intID = 0; intID < retData.length; intID++) {
      stringID = retData[intID][0];
      dobuleUseMoney = exeUtil.doParseDouble(retData[intID][1].trim());
      dobuleUseMoneyFinal = dobuleUseMoney;
      retDoc2M080 = getDoc2M080_2(stringID, stringRemark, stringComNo);
      intDbCrCdCount = 0;
      intDbCrCd = 0;
      for (int intNo = 0; intNo < retDoc2M080.length; intNo++) {
        stringVoucherFlowNo = retDoc2M080[intNo][23].trim();
        arrayTempL = convert.StringToken(stringVoucherFlowNo, "-");
        if (arrayTempL.length == 4) {
          stringVoucherDate = arrayTempL[0].trim();
          stringVoucherFlowNo = "" + exeUtil.doParseInteger(arrayTempL[1].trim());
          intStartPos = exeUtil.doParseInteger(arrayTempL[2].trim());
          intEndPos = exeUtil.doParseInteger(arrayTempL[3].trim());
          //
          // retFED1012 = getFED1012(stringVoucherDate, stringVoucherFlowNo, stringComNo,
          // stringKind) ;
          retFED1012 = getFED1012YearEndData(stringBarCode, stringComNo, arrayTempL, stringKind, stringID, exeUtil);
          intEndPos = retFED1012.length - 1;
          intStartPos = 0;
          //
          if (retFED1012.length == 0) {
            // retTable[0][0] = "查無 [預估對沖傳票]，請洽資訊室。" ;
            // return retTable;
            continue;
          }
          for (int intFED1012 = intEndPos; intFED1012 >= intStartPos; intFED1012--) {
            stringDbCrCd = retFED1012[intFED1012][9].trim();
            if ("C".equals(stringDbCrCd)) {
              doubleAmtSumFinal = exeUtil.doParseDouble(retFED1012[intFED1012][13].trim());
            } else {
              intDbCrCdCount++;
            }
          }
          //
          for (int intFED1012 = intEndPos; intFED1012 >= intStartPos; intFED1012--) {
            stringDbCrCdData = retFED1012[intFED1012][9].trim();
            stringAmt = retFED1012[intFED1012][13].trim();
            stringDbCrCd = "C".equals(stringDbCrCdData) ? "D" : "C";
            //
            if ("D".equals(stringDbCrCdData))
              intDbCrCd++;
            //
            stringDescript = "沖" + stringVoucherDate + "-" + convert.add0(stringVoucherFlowNo, "4") + " " + retFED1012[intFED1012][23].trim();
            stringDescript = exeUtil.doSubstring(code.StrToByte(stringDescript), 0, 30);
            stringDescript = code.ByteToStr(stringDescript);
            //
            if (booleanExist) {
              // 年底預估之分次沖銷
              if ("C".equals(stringDbCrCdData)) {
                stringAmt = convert.FourToFive("" + dobuleUseMoneyFinal, 0);
              } else {
                if (intDbCrCdCount == intDbCrCd) {
                  // 最後一筆
                  stringAmt = convert.FourToFive("" + dobuleUseMoney, 0);
                } else {
                  doubleAmt = dobuleUseMoneyFinal * exeUtil.doParseDouble(stringAmt) / doubleAmtSumFinal;
                  stringAmt = convert.FourToFive("" + doubleAmt, 0);
                  dobuleUseMoney -= exeUtil.doParseDouble(stringAmt);
                }
              }
            } else {
              // 請款
            }
            //
            if ("03335,033622,03365,".indexOf(retFED1012[intFED1012][11].trim() + ",") != -1) {
              retFED1012[intFED1012][10] = retFED1012[intFED1012][10].trim().replaceAll("6201", "5681");
            }
            //
            intFlowNo++;
            retDataTemp = new String[27];
            retDataTemp[0] = stringBarCode; // 條碼編號 0
            retDataTemp[1] = stringDocNo; // 公文代號 1
            retDataTemp[2] = "W"; // 發票A 費用B 貸C 折讓D 郵電E 扣繳F 扣繳G(稅) 折讓(稅)H 沖銷W
            retDataTemp[3] = ""; // No 3
            retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
            retDataTemp[5] = "0"; // 傳票流水號 5
            retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
            retDataTemp[7] = stringComNo; // 公司代號 7
            retDataTemp[8] = stringKind; // Kind 8
            retDataTemp[9] = stringDbCrCd; // 借貸 9
            retDataTemp[10] = retFED1012[intFED1012][10].trim(); // 會計科目 10
            retDataTemp[11] = retFED1012[intFED1012][11].trim(); // 部門 11
            retDataTemp[12] = retFED1012[intFED1012][12].trim(); // 對象 12
            retDataTemp[13] = stringAmt; // 金額 13
            retDataTemp[14] = "0"; // 金額 13
            retDataTemp[15] = "0"; // 原類金額 15
            retDataTemp[16] = "0"; // 請款金額 16
            retDataTemp[17] = stringStatus; // 狀態-未過帳 17
            retDataTemp[18] = retFED1012[intFED1012][18].trim(); // 明細一 18
            retDataTemp[19] = retFED1012[intFED1012][19].trim(); // 明細二 19
            retDataTemp[20] = retFED1012[intFED1012][20].trim(); // 明細三 20
            retDataTemp[21] = retFED1012[intFED1012][21].trim(); // 明細四 21
            retDataTemp[22] = retFED1012[intFED1012][22].trim(); // 明細五 22
            retDataTemp[23] = stringDescript; // 摘要 23
            retDataTemp[24] = getUser(); // 修改者 24
            retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
            retDataTemp[26] = "A"; //
            retVector.add(retDataTemp);
          }
        }
      }
    }
    System.out.println("--------------------年底預估傳票2(對沖)END" + retVector.size());
    // 轉換
    retTable = (String[][]) retVector.toArray(new String[0][0]);
    System.out.println("getConvertToArrayForReceipt--------------------E");
    return retTable;
  }

  public double getDiscountTax(String[][] retDoc2M015, FargloryUtil exeUtil) throws Throwable {
    String stringDiscountTotalMoney = "";
    String stringDiscountTotalNoTaxMoney = "";
    double doubleDiscountTax = 0;
    double doubleDiscountTotalMoneySum = 0;
    double doubleDiscountTotalNoTaxMoneySum = 0;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 DiscountMoney 7 RecordNo 8 DiscountNoTaxMoney 9 InvoiceNo
    for (int intNoL = 0; intNoL < retDoc2M015.length; intNoL++) {
      stringDiscountTotalMoney = retDoc2M015[intNoL][6].trim();
      stringDiscountTotalNoTaxMoney = retDoc2M015[intNoL][8].trim();
      doubleDiscountTotalMoneySum = exeUtil.doParseDouble(stringDiscountTotalMoney);
      if (doubleDiscountTotalMoneySum <= 0)
        continue;
      doubleDiscountTotalNoTaxMoneySum = exeUtil.doParseDouble(stringDiscountTotalNoTaxMoney);
      doubleDiscountTax += doubleDiscountTotalMoneySum - doubleDiscountTotalNoTaxMoneySum;
    }
    return doubleDiscountTax;
  }

  public String getFactoryNoTop1(String[][] retDoc2M010, String[][] retDoc2M011, String[][] retDoc2M013) throws Throwable {
    String stringFactoryNoTop1 = "";
    if (retDoc2M013.length > 0) {
      for (int intNo = 0; intNo < retDoc2M013.length; intNo++) {
        stringFactoryNoTop1 = retDoc2M013[intNo][0].trim();
        if (!"Z8000".equals(stringFactoryNoTop1)) {
          break;
        }
      }
    }
    if ("".equals(stringFactoryNoTop1) && retDoc2M011.length > 0) {
      stringFactoryNoTop1 = retDoc2M011[0][0].trim();
    }
    if ("".equals(stringFactoryNoTop1))
      stringFactoryNoTop1 = retDoc2M010[0][28].trim();
    return stringFactoryNoTop1;
  }

  public int putDebitForReceipt1(String[][] retDoc2M010, String[][] retDoc2M012, String[][] retDoc2M013, String[][] retDoc5M0224, Hashtable hashtableDoc2M041,
      Hashtable hashtbleFunctionType, FargloryUtil exeUtil, Vector retVector, Vector retVectorNegative, String[] arrayTable) throws Throwable {
    String stringVoucherYMD014 = arrayTable[0].trim();
    String stringKind = arrayTable[1].trim();
    String stringStatus = arrayTable[2].trim();
    String stringDescript = arrayTable[3].trim();
    String stringFactoryNoTop1 = arrayTable[4].trim();
    int intFlowNo = exeUtil.doParseInteger(arrayTable[5].trim());
    //
    int intPos = 0;
    String stringCostIDNum = "";
    String stringComNo = retDoc2M010[0][0].trim();
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringDocNo1 = retDoc2M010[0][9].trim();
    String stringCDate = retDoc2M010[0][16].trim();
    String stringCDateAC = exeUtil.getDateConvert(stringCDate);
    String stringInOut = "";
    String stringDepartNo = "";
    String stringProjectID = "";
    String stringProjectID1 = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String stringRealMoney = "";
    String stringRealTotalMoney = "";
    String stringKEY = "";
    String stringSpecBudgetVoucher = ",017PR,033FG,"; // +get("SPEC_BUDGET_VOUCHER") ;
    String[] arrayTemp = null;
    double doubleRealTotalMoneySum = 0;
    Vector vectorKEY = new Vector();
    Vector vectorKEYData = new Vector();
    boolean boolean110301 = false;
    boolean booleanCostID32 = false;
    boolean booleanCostID130 = false;
    boolean booleanCeditType2 = false;
    boolean booleanCeditType3 = false;
    boolean boolean0010 = true;
    boolean booleanCostID0010 = false;
    boolean booleanDoc2M0201ForB = false;
    boolean booleanCostID831 = false;
    //
    Vector vectorCostIDTypeB = new Vector();
    Vector vectorCostIDTypeM = new Vector();
    Vector vectorCostIDTypeN = new Vector();
    vectorCostIDTypeB = (Vector) hashtbleFunctionType.get("B");
    if (vectorCostIDTypeB == null)
      vectorCostIDTypeB = new Vector();
    vectorCostIDTypeM = (Vector) hashtbleFunctionType.get("M");
    if (vectorCostIDTypeM == null)
      vectorCostIDTypeM = new Vector();
    vectorCostIDTypeN = (Vector) hashtbleFunctionType.get("N");
    if (vectorCostIDTypeN == null)
      vectorCostIDTypeN = new Vector();
    // 合併處理
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 RealMoney 7 RealTotalMoney
    for (int intDoc2M012 = 0; intDoc2M012 < retDoc2M012.length; intDoc2M012++) {
      stringInOut = retDoc2M012[intDoc2M012][0].trim();
      stringDepartNo = retDoc2M012[intDoc2M012][1].trim();
      stringProjectID = retDoc2M012[intDoc2M012][2].trim();
      stringProjectID1 = retDoc2M012[intDoc2M012][3].trim();
      stringCostID = retDoc2M012[intDoc2M012][4].trim();
      stringCostID1 = retDoc2M012[intDoc2M012][5].trim();
      stringRealMoney = retDoc2M012[intDoc2M012][6].trim();
      stringRealTotalMoney = retDoc2M012[intDoc2M012][7].trim();
      //
      doubleRealTotalMoneySum += exeUtil.doParseDouble(stringRealMoney);
      // 貸方預設 110301 判斷
      if (retDoc5M0224.length > 0 && ",1591,1592,1593,1594,1595,1596,".indexOf("," + stringCostID + stringCostID1 + ",") != -1)
        boolean110301 = true;
      // 以 立沖 轉貸方 判斷
      if (",0010,".indexOf("," + stringCostID + stringCostID1 + ",") != -1) {
        if (retDoc5M0224 == null)
          retDoc5M0224 = getDoc5M0224(stringBarCode, "");
        if (retDoc5M0224.length > 0) {
          booleanCostID0010 = true;
        }
      }
      if (stringDocNo.startsWith("023") && "149".equals(stringCostID + stringCostID1))
        booleanCostID32 = true;// 特別貸方分錄處理
      if ("130".equals(stringCostID + stringCostID1))
        booleanCostID130 = true;// 貸方-退保留款 會計科目判斷
      if ("831".equals(stringCostID + stringCostID1))
        booleanCostID831 = true;//
      if (vectorCostIDTypeM.indexOf(stringCostID + stringCostID1) != -1)
        booleanCeditType2 = true;// 以 個人收據 轉貸方 判斷，且 限定特定貸方會計科目時
      if (vectorCostIDTypeN.indexOf(stringCostID + stringCostID1) != -1)
        booleanCeditType3 = true;// 以 個人收據 轉貸方 判斷且非 貸方會計科目110301 時
      if (vectorCostIDTypeB.indexOf(stringCostID + stringCostID1) != -1)
        booleanDoc2M0201ForB = true;// 無憑證 判斷
      if (",0010,".indexOf("," + stringCostID + stringCostID1 + ",") != -1)
        boolean0010 = false;// 特定請款代碼不作合併處理判斷
      // 合併處理
      stringKEY = stringInOut + "%-%" + stringDepartNo + "%-%" + stringProjectID + "%-%" + stringProjectID1 + "%-%" + stringCostID + "%-%" + stringCostID1;
      intPos = vectorKEY.indexOf(stringKEY);
      if (intPos == -1) {
        arrayTemp = exeUtil.doCopyArray(retDoc2M012[intDoc2M012]);
        vectorKEY.add(stringKEY);
        vectorKEYData.add(arrayTemp);
      } else {
        arrayTemp = (String[]) vectorKEYData.get(intPos);
        arrayTemp[6] = "" + (exeUtil.doParseDouble(arrayTemp[6]) + exeUtil.doParseDouble(retDoc2M012[intDoc2M012][6]));
        arrayTemp[6] = convert.FourToFive(arrayTemp[6], 0);
        arrayTemp[7] = "" + (exeUtil.doParseDouble(arrayTemp[7]) + exeUtil.doParseDouble(retDoc2M012[intDoc2M012][7]));
        arrayTemp[7] = convert.FourToFive(arrayTemp[7], 0);
      }
    }
    if (boolean0010 && retDoc5M0224.length == 0) {
      retDoc2M012 = (String[][]) vectorKEYData.toArray(new String[0][0]);
    }
    int intY10 = 0;
    String stringAccountNo = "";
    String stringAccountNoFirst = "";
    String stringAcctCNew = "";
    String stringAccountNoCR = "";
    String stringDepartNoOrigin = "";
    String stringInputDepartNo = "";
    String stringFactoryNo = "";
    String stringPosition = "";
    String stringRowtype = "";
    String stringItemCd = "";
    String stringUsedCd = "";
    String[] arrayDescription = { "", "", "", "", "" };
    String[] retDataTemp = null;
    String[][] retDoc2M0121 = null;
    String[][] retFED1004 = null;
    String[][] retDoc2M020 = null;
    double doubleCostID009 = 0;
    double doubleRealMoney = 0;
    boolean booleanInOut = true;
    boolean boolean033FG = true;
    boolean boolean009 = false;
    // 特殊案別及請款代碼 使用 125104預付廣告費S
    boolean booleanSpecAcctNo = false;
    Vector vectorProjectID1 = getDoc2M014ProjectID1("Y");
    ;
    Vector vectorCost = new Vector();
    Vector vectorItemCd = new Vector();
    Vector vectorDoc2M042 = new Vector();
    vectorCost.add("701");
    vectorCost.add("702");
    vectorCost.add("710");
    vectorCost.add("730");
    vectorCost.add("760");
    //
    Vector vectorCostIDTypeF = null;
    vectorCostIDTypeF = (Vector) hashtbleFunctionType.get("F");
    if (vectorCostIDTypeF == null)
      vectorCostIDTypeF = new Vector();

    //
    for (int intDoc2M012 = 0; intDoc2M012 < retDoc2M012.length; intDoc2M012++) {
      stringInOut = retDoc2M012[intDoc2M012][0].trim();
      stringDepartNo = retDoc2M012[intDoc2M012][1].trim();
      stringProjectID = retDoc2M012[intDoc2M012][2].trim();
      stringProjectID1 = retDoc2M012[intDoc2M012][3].trim();
      stringCostID = retDoc2M012[intDoc2M012][4].trim();
      stringCostID1 = retDoc2M012[intDoc2M012][5].trim();
      stringRealMoney = retDoc2M012[intDoc2M012][6].trim();
      stringRealTotalMoney = retDoc2M012[intDoc2M012][7].trim();
      stringCostIDNum = stringCostID + stringCostID1;
      //
      doubleRealMoney = exeUtil.doParseDouble(stringRealTotalMoney);
      // 特殊內業以外業處理
      booleanInOut = isDepartCdIsOut(stringDepartNo);
      // 特別案別控管 判斷
      boolean033FG = stringSpecBudgetVoucher.indexOf(stringDepartNo) != -1;// 2011-04-08 特別案別控管 修正
      // 009 暫收款或法院扣款
      boolean009 = false;
      if ("009".equals(stringCostID + stringCostID1) && doubleRealMoney < 0) {
        doubleCostID009 += doubleRealMoney;
        boolean009 = true;
      }
      //
      if (!"01".equals(stringComNo)) {
        // 特殊案別及請款代碼 使用 125104?w付廣告費S
        booleanSpecAcctNo = (vectorCost.indexOf(stringCostID + stringCostID1) != -1 && vectorProjectID1.indexOf(stringProjectID1) != -1);
        // 特殊案別及請款代碼 使用 125104預付廣告費E
      }
      stringDepartNo = getVoucherDepartNo(stringInOut, stringDepartNo, stringProjectID, stringProjectID1, exeUtil);
      /*
       * stringDepartNoOrigin = getVoucherDepartNo(stringInOut, stringDepartNo,
       * stringProjectID, stringProjectID1, "A", exeUtil) ;
       * if("033GT".equals(stringDepartNoOrigin) &&
       * !stringDepartNo.equals(stringDepartNoOrigin)) { retDataTemp = new String[2] ;
       * retDataTemp[0] = "I05" ; retDataTemp[1] = "04" ;
       * vectorItemCd.add(retDataTemp) ; } else {
       */
      vectorItemCd = new Vector();
      // }
      if ("990".equals(stringCostID + stringCostID1)) {
        String stringTemp = "";
        if (retDoc2M013.length > 0) {
          if ("A".equals(retDoc2M013[0][1].trim())) {
            stringTemp = "05";
          } else if ("B".equals(retDoc2M013[0][1].trim())) {
            stringTemp = "04";
          }
        } else {
          stringTemp = "01";
        }
        if (!"".equals(stringTemp)) {
          retDataTemp = new String[2];
          retDataTemp[0] = "Y09";
          retDataTemp[1] = stringTemp;
          vectorItemCd.add(retDataTemp);
        }
      }
      // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD 4 InvoiceType
      // 5 ACCT_C_IN 6 ACCT_C_OUT
      retDoc2M020 = getDoc2M020All(stringComNo, stringCostID, stringCostID1);
      if (retDoc2M020.length == 0) {
        arrayTable[0] = "於 [費用-借方會計科目] 中，查無相對應的會計科目。";
        return 0;
      } else {
        stringItemCd = retDoc2M020[0][2].trim();
        stringUsedCd = retDoc2M020[0][3].trim();
      }
      // 貸方會計科目
      if (booleanInOut)
        stringInOut = "O";
      if (intDoc2M012 == 0) {
        stringAcctCNew = ("I".equals(stringInOut)) ? retDoc2M020[0][5].trim() : retDoc2M020[0][6].trim();
      }
      if ("I".equals(stringInOut)) {
        stringAccountNo = retDoc2M020[0][0].trim();
      } else if ("O".equals(stringInOut)) {
        stringAccountNo = retDoc2M020[0][1].trim();
      } else {
        stringAccountNo = retDoc2M020[0][4].trim();
      }
      // 遠雄建設公司 5681 開頭之會計科目修正
      if ("01".equals(stringComNo) && stringAccountNo.startsWith("5681")) {
        /*
         * if("2012/12/31".compareTo(stringTodayAC) < 0) { // 2012/12/31 以後 改成 6801
         * stringAccountNo = stringAccountNo.replaceAll("5681", "6801") ; } else {
         */
        // 2012/12/31 以前 改成 1836
        stringAccountNo = stringAccountNo.replaceAll("5681", "1836");
        // }
        stringItemCd = "";
        stringUsedCd = "";
      }
      //
      if (intDoc2M012 == 0)
        stringAccountNoCR = stringAccountNo;
      //
      if (stringDepartNo.indexOf("BH3") != -1 || stringDepartNo.indexOf("SH3") != -1)
        stringAccountNo = "128401";
      if (!"01".equals(stringComNo)) {
        // 特殊案別及請款代碼 使用 125104預付廣告費S
        if (booleanSpecAcctNo)
          stringAccountNo = "125104";
        // 特殊案別及請款代碼 使用 125104預付廣告費E
      }
      if (intDoc2M012 == 0)
        stringAccountNoFirst = stringAccountNo;

      retFED1004 = getFED1004(stringAccountNo);
      // 明細一、明細二、明細三、明細四、明細五 18-22
      stringPosition = ("" + hashtableDoc2M041.get(stringAccountNo)).trim();
      intY10 = getDescriptionUnionFinal(stringComNo, stringAccountNo, stringCostID, stringCostID1, stringItemCd, stringUsedCd, stringPosition, arrayDescription, retFED1004,
          vectorItemCd, exeUtil, false);
      // 立沖?y程處理
      // System.out.println("立沖流程處理-------------------S") ;
      stringFactoryNo = stringFactoryNoTop1;
      stringRowtype = "F";
      // System.out.println("-------------------["+(stringCostID+stringCostID1)+"]") ;
      if (vectorCostIDTypeF.indexOf(stringCostID + stringCostID1) != -1 && ",0010,".indexOf("," + stringCostID + stringCostID1 + ",") == -1) {
        if (",P20933,".indexOf(stringBarCode) == -1 && retDoc5M0224.length == 0) {
          arrayTable[0] = "於 [費用-借方會計科目] 中，立沖資料為零。";
          return 0;
        }
        if (intDoc2M012 < retDoc5M0224.length)
          stringFactoryNo = retDoc5M0224[intDoc2M012][4].trim();
        // 0 BarCode 1 VOUCHER_YMD 2 VOUCHER_FLOW_NO 3 VOUCHER_SEQ_NO 4 FactoryNo 5 Amt
        String[][] retFED1012 = getFED1012(retDoc5M0224[intDoc2M012][1].trim(), retDoc5M0224[intDoc2M012][2].trim(), retDoc5M0224[intDoc2M012][3].trim(), stringComNo, "0", false);
        // 明細一至明細五
        if (retFED1012.length > 0) {
          stringAccountNo = retFED1012[0][1].trim();
          arrayDescription[0] = retFED1012[0][8].trim();
          arrayDescription[1] = retFED1012[0][9].trim();
          arrayDescription[2] = retFED1012[0][10].trim();
          arrayDescription[3] = retFED1012[0][11].trim();
          arrayDescription[4] = retFED1012[0][12].trim();

        }
        stringRowtype = "N";
      }
      if (",0010,".indexOf("," + stringCostID + stringCostID1 + ",") != -1) {
        if (retDoc5M0224 == null)
          retDoc5M0224 = getDoc5M0224(stringBarCode, "");
        if (retDoc5M0224.length > 0) {
          booleanCostID0010 = true;
        }
      }
      // System.out.println("立沖流程處理-------------------E") ;
      //
      if (intDoc2M012 == 0)
        stringInputDepartNo = stringDepartNo;
      //
      if (doubleRealMoney > 0)
        intFlowNo++;
      retDataTemp = new String[27];
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = stringRowtype; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
      retDataTemp[3] = "" + (intDoc2M012 + 1); // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = (doubleRealMoney > 0) ? "D" : "C"; // 借D貸C 9
      retDataTemp[10] = stringAccountNo; // 會計科目 10
      retDataTemp[11] = "110301".equals(stringAccountNo) ? "" : stringDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNo; // 對象 12
      retDataTemp[13] = convert.FourToFive("" + Math.abs(doubleRealMoney), 0); // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 請款金額 16(不使用，為了避免亂了，仍沿用，但值統一為 0)
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = arrayDescription[0]; // 明細一 18
      retDataTemp[19] = arrayDescription[1]; // 明細二 19
      retDataTemp[20] = arrayDescription[2]; // 明細三 20
      retDataTemp[21] = arrayDescription[3]; // 明細四 21
      retDataTemp[22] = arrayDescription[4]; // 明細五 22
      retDataTemp[23] = stringDescript; // 摘要 22
      retDataTemp[24] = getUser(); // 修改者 23
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 24
      retDataTemp[26] = boolean009 ? "B" : "A"; // A 應稅 B 零稅 C 免稅
      //
      if ("110301".equals(stringAccountNo))
        retDataTemp[12] = "0095289";
      //
      if (intY10 != 0) {
        stringCostIDNum = getCostIDNumUnion(stringVoucherYMD014, stringCostIDNum, stringInOut, stringBarCode);
        System.out.println("設定費用代碼(" + stringCostIDNum + ")---------------------");
        retDataTemp[17 + intY10] = stringCostIDNum;
      }
      //
      if (doubleRealMoney > 0) {
        // 2011-04-08 特別案別控管 修正
        if (boolean033FG) {
          if (retDoc2M0121 == null) {
            retDoc2M0121 = getDoc2M0121(stringBarCode, "A", "");
          }
        }
        if (retDoc2M0121 != null && retDoc2M0121.length > 0) {
          for (int intNoL = 0; intNoL < 5; intNoL++) {
            if (intNoL < retFED1004.length) {
              if ("I05".equals(retFED1004[intNoL][0].trim()))
                retDataTemp[18 + intNoL] = stringDocNo1;
            }
          }
          // 分攤 特別案別控管
          hashtableDoc2M041.put("033FG", stringDocNo1);
          intFlowNo = getConvertProjectID(stringBarCode, intFlowNo, stringCostID, stringCostID1, retDataTemp, retDoc2M0121, retDoc2M020, exeUtil, hashtableDoc2M041, vectorDoc2M042,
              retVector);
        } else {
          retVector.add(retDataTemp);
        }
      } else {
        retVectorNegative.add(retDataTemp);
      }
    }
    // 回傳
    arrayTable[0] = stringInputDepartNo; // 部門預設值
    arrayTable[1] = "" + doubleCostID009; // doubleCostID009
    arrayTable[2] = stringAccountNoCR; // 借方會計科目
    arrayTable[3] = stringAccountNoFirst; // 借方會計科目
    arrayTable[4] = boolean110301 ? "Y" : "N"; // 貸方 預設為110301 判斷
    arrayTable[5] = stringAcctCNew; // 貸方會計科目
    arrayTable[6] = booleanCostID0010 ? "Y" : "N"; // 貸方-使用立沖傳票
    arrayTable[7] = booleanCeditType2 ? "Y" : "N"; // 以 個人收據 轉貸方
    arrayTable[8] = booleanCostID130 ? "Y" : "N"; // 貸方-退保留款 會計科目判斷
    arrayTable[9] = booleanCostID32 ? "Y" : "N"; // 特別貸方處理(公積金 32)判斷
    arrayTable[10] = "" + doubleRealTotalMoneySum; // 特別貸方處理(公積金 32) doubleRealTotalMoneySum = 金額doubleTotalMoneySum32
    arrayTable[11] = booleanDoc2M0201ForB ? "Y" : "N"; // 無憑證 判斷
    arrayTable[12] = booleanCeditType3 ? "Y" : "N"; // 以 個人收據 轉貸方
    arrayTable[13] = booleanCostID831 ? "Y" : "N"; // 以 個人收據 轉貸方
    //
    return intFlowNo;
  }

  public Vector putDebitForReceipt2(boolean booleanCostID831, String[][] retDoc2M010, String[][] retDoc2M012, String[][] retDoc2M013, Hashtable hashtableDoc2M041,
      FargloryUtil exeUtil, Vector retVector, String[] arrayTable) throws Throwable {
    String stringVoucherYMD014 = arrayTable[0].trim();
    String stringKind = arrayTable[1].trim();
    String stringStatus = arrayTable[2].trim();
    String stringDescript = arrayTable[3].trim();
    String stringFactoryNoTop1 = arrayTable[4].trim();
    int intFlowNo = exeUtil.doParseInteger(arrayTable[5].trim());
    boolean booleanLife = false;
    //
    if (retDoc2M013.length == 0) {
      arrayTable[0] = ""; // 關係人判斷
      arrayTable[1] = "";
      arrayTable[2] = "";
      arrayTable[3] = "";
      return retVector;
    }
    // 0 FactoryNo 1 ReceiptKind 2 ReceiptDate 3 ReceiptMoney 4 ReceiptTax
    // 5 ReceiptTotalMoney 6 ReceiptTaxType 7 ACCT_NO 8 PayCondition1 9 DepartNo
    String stringDepartNo = "";
    String stringFactoryNo = "";
    boolean booleanBreak = false;
    boolean booleanRationMan = false;
    Vector vectorFactoryNo = getDoc2M0402(); // 關係人
    for (int intDoc2M013 = 0; intDoc2M013 < retDoc2M013.length; intDoc2M013++) {
      stringFactoryNo = retDoc2M013[intDoc2M013][0].trim();
      stringDepartNo = retDoc2M013[intDoc2M013][9].trim();
      // 關係人
      if (intDoc2M013 == 0 && vectorFactoryNo.indexOf(stringFactoryNo) != -1) {
        booleanRationMan = true;
      }
      if (booleanCostID831 && "84703052".equals(stringFactoryNo))
        booleanLife = true;
      //
      System.out.println(intDoc2M013 + "stringDepartNo(" + stringDepartNo + ")----------------");
      if ("".equals(stringDepartNo))
        booleanBreak = true;
    }
    if (booleanBreak) {
      arrayTable[0] = booleanRationMan ? "Y" : "N"; // 關係人判斷
      arrayTable[1] = "";
      arrayTable[2] = "";
      arrayTable[3] = "";
      return retVector;
    }
    intFlowNo = 0;
    retVector = new Vector();
    //
    String stringAccountNo = "";
    String stringAccountNoCR = "";
    String stringAccountNoFirst = "";
    String stringComNo = retDoc2M010[0][0].trim();
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringCostID = "";
    String stringCostID1 = "";
    String stringInputDepartNo = "";
    String stringItemCd = "";
    String stringPosition = "";
    String stringRealMoney = "";
    String stringRowtype = "";
    String stringUsedCd = "";
    String stringReceiptKind = "";
    String[] retDataTemp = null;
    String[] arrayDescription = new String[5];
    String[][] retDoc2M020 = null;
    String[][] retFED1004 = null;
    Vector vectorItemCd = new Vector();
    for (int intDoc2M013 = 0; intDoc2M013 < retDoc2M013.length; intDoc2M013++) {
      stringFactoryNo = retDoc2M013[intDoc2M013][0].trim();
      stringReceiptKind = retDoc2M013[intDoc2M013][1].trim();
      stringRealMoney = retDoc2M013[intDoc2M013][5].trim();
      stringDepartNo = retDoc2M013[intDoc2M013][9].trim();
      //
      if (intDoc2M013 == 0) {
        stringCostID = retDoc2M012[0][4].trim();
        stringCostID1 = retDoc2M012[0][5].trim();
        // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD
        retDoc2M020 = getDoc2M020All(stringComNo, stringCostID, stringCostID1);
        if (retDoc2M020.length == 0) {
          arrayTable[0] = "於 [費用-借方會計科目] 中，查無相對會計科目。";
          return retVector;
        } else {
          stringItemCd = retDoc2M020[0][2].trim();
          stringUsedCd = retDoc2M020[0][3].trim();
        }
      }
      if ("420".equals(stringCostID + stringCostID1)) {
        if (",A,B,".indexOf("," + stringReceiptKind + ",") != -1) {
          retDataTemp = new String[2];
          retDataTemp[0] = "Y09";
          retDataTemp[1] = "A".equals(stringReceiptKind) ? "05" : "04";
          vectorItemCd.add(retDataTemp);
        }
      }

      if (exeUtil.isDigitNum(stringDepartNo)) {
        stringAccountNo = retDoc2M020[0][0].trim();
      } else {
        stringAccountNo = retDoc2M020[0][1].trim();
      }
      if (intDoc2M013 == 0)
        stringAccountNoCR = stringAccountNo;
      //
      if (stringDepartNo.indexOf("BH3") != -1 || stringDepartNo.indexOf("SH3") != -1)
        stringAccountNo = "128401";
      // 遠雄建設公司 5681 開頭之會計科目修正
      if ("01".equals(stringComNo) && stringAccountNo.startsWith("5681")) {
        /*
         * if("2012/12/31".compareTo(stringTodayAC) < 0) { // 2012/12/31 以後 改成 6801
         * stringAccountNo = stringAccountNo.replaceAll("5681", "6801") ; } else {
         */
        // 2012/12/31 以前 改成 1836
        stringAccountNo = stringAccountNo.replaceAll("5681", "1836");
        // }
        stringItemCd = "";
        stringUsedCd = "";
      }
      if (intDoc2M013 == 0)
        stringAccountNoFirst = stringAccountNo;
      //
      retFED1004 = getFED1004(stringAccountNo);
      // 明細一、明細二、明細三、明細四、明細五 18-22
      stringPosition = ("" + hashtableDoc2M041.get(stringAccountNo)).trim();
      getDescriptionUnionFinal(stringComNo, stringAccountNo, stringCostID, stringCostID1, stringItemCd, stringUsedCd, stringPosition, arrayDescription, retFED1004, vectorItemCd,
          exeUtil, false);
      if (intDoc2M013 == 0)
        stringInputDepartNo = stringDepartNo;
      //
      stringRowtype = "F";
      intFlowNo++;
      System.out.println("intFlowNo--------------------[" + intFlowNo + "]");
      retDataTemp = new String[27];
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = stringRowtype; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
      retDataTemp[3] = "" + (intDoc2M013 + 1); // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "D"; // 借D貸C 9
      retDataTemp[10] = stringAccountNo; // 會計科目 10
      retDataTemp[11] = "110301".equals(stringAccountNo) ? "" : stringDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNo; // 對象 12
      retDataTemp[13] = stringRealMoney; // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // ?嚆鷖B 15
      retDataTemp[16] = "0"; // 請款金額 16(不使用，為了避免亂了，仍沿用，但值統一為 0)
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = arrayDescription[0]; // 明細一 18
      retDataTemp[19] = arrayDescription[1]; // 明細二 19
      retDataTemp[20] = arrayDescription[2]; // 明細三 20
      retDataTemp[21] = arrayDescription[3]; // 明細四 21
      retDataTemp[22] = arrayDescription[4]; // 明細五 22
      retDataTemp[23] = stringDescript; // 摘要 22
      retDataTemp[24] = getUser(); // 修改者 23
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 24
      retDataTemp[26] = "A"; //
      //
      if ("110301".equals(stringAccountNo))
        retDataTemp[12] = "0095289";
      //
      retVector.add(retDataTemp);
    }
    //
    arrayTable[0] = booleanRationMan ? "Y" : "N"; // 關係人判斷
    arrayTable[1] = stringAccountNoCR; // 借方會計科目
    arrayTable[2] = stringAccountNoFirst; // 借方會計科目
    arrayTable[3] = stringInputDepartNo; // 借方會計科目
    arrayTable[4] = "" + intFlowNo;
    arrayTable[5] = booleanLife ? "Y" : "N"; // 特殊貸方 2153
    return retVector;
  }

  public int putDebitForReceipt3(boolean booleanCostID831, String[][] retDoc2M010, String[][] retDoc2M012, String[][] retDoc2M013, String[][] retDoc5M0224,
      Hashtable hashtableDoc2M041, FargloryUtil exeUtil, Vector retVector, Vector retVectorNegative, String[] arrayTable) throws Throwable {
    String stringVoucherYMD014 = arrayTable[0].trim();
    String stringKind = arrayTable[1].trim();
    String stringStatus = arrayTable[2].trim();
    String stringDescript = arrayTable[3].trim();
    String stringFactoryNoTop1 = arrayTable[4].trim();
    String stringInputDepartNo = arrayTable[6].trim();
    int intFlowNo = exeUtil.doParseInteger(arrayTable[5].trim());
    double doubleReceiptMoney = exeUtil.doParseDouble(arrayTable[7].trim());
    ;
    double doubleReceiptTotalMoney = exeUtil.doParseDouble(arrayTable[8].trim());
    ;
    // 立沖
    String stringCostID = retDoc2M012[0][4].trim();
    String stringCostID1 = retDoc2M012[0][5].trim();
    //
    if ("002,003,004,".indexOf(stringCostID + stringCostID1) != -1) {
      return intFlowNo;
    }
    if (retDoc5M0224 == null) {
      return intFlowNo;
    }
    if (retDoc5M0224.length == 0) {
      return intFlowNo;
    }
    //
    Hashtable hashtableAmt = new Hashtable();
    String stringAccountNo = "";
    String stringAmt = "";
    String stringAmtCF = "";
    String stringComNo = retDoc2M010[0][0].trim();
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringFactoryNo = "";
    String stringDepartNoL = "";
    String[] retDataTemp = null;
    double doubleAmt = 0;
    boolean booleanLife2153 = false;
    // 0 BarCode 1 VOUCHER_YMD 2 VOUCHER_FLOW_NO 3 VOUCHER_SEQ_NO 4 FactoryNo 5 Amt
    for (int intNo = 0; intNo < retDoc5M0224.length; intNo++) {
      stringFactoryNo = retDoc5M0224[intNo][4].trim();
      stringAmt = "" + (exeUtil.doParseDouble("" + hashtableAmt.get(stringFactoryNo)) + exeUtil.doParseDouble(retDoc5M0224[intNo][5].trim()));
      stringAmt = convert.FourToFive(stringAmt, 0);
      hashtableAmt.put(stringFactoryNo, stringAmt);
      //
      if (booleanCostID831 && "84703052".equals(stringFactoryNo))
        booleanLife2153 = true;
    }
    for (int intNo = 0; intNo < retDoc2M013.length; intNo++) {
      stringFactoryNo = retDoc2M013[intNo][0].trim();
      stringAmtCF = retDoc2M013[intNo][5].trim();
      stringDepartNoL = retDoc2M013[intNo][9].trim();
      stringAmt = ("" + hashtableAmt.get(stringFactoryNo)).trim();
      doubleAmt = exeUtil.doParseDouble(stringAmtCF) - exeUtil.doParseDouble(stringAmt);
      if (doubleAmt == 0)
        continue;
      //
      stringAccountNo = "1282";
      stringDepartNoL = "0221";
      stringFactoryNo = "Z0001";
      //
      retDataTemp = new String[27];
      if (doubleAmt > 0)
        intFlowNo++;
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "B"; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
      retDataTemp[3] = ""; // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = (doubleAmt > 0) ? "D" : "C"; // 借D貸C 9
      retDataTemp[10] = stringAccountNo; // 會計科目 10
      retDataTemp[11] = stringDepartNoL; // 部門 11
      retDataTemp[12] = stringFactoryNo; // 對象 12
      retDataTemp[13] = convert.FourToFive("" + Math.abs(doubleAmt), 0); // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 請款金額 16(不使用，為了避免亂了，仍沿用，但值統一為 0)
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = ""; // 明細一 18
      retDataTemp[19] = ""; // 明細二 19
      retDataTemp[20] = ""; // 明細三 20
      retDataTemp[21] = ""; // 明細四 21
      retDataTemp[22] = ""; // 明細五 22
      retDataTemp[23] = stringDescript; // 摘要 22
      retDataTemp[24] = getUser(); // 修改者 23
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 24
      retDataTemp[26] = "A"; //
      doubleReceiptMoney += exeUtil.doParseDouble(retDataTemp[13]);
      doubleReceiptTotalMoney += exeUtil.doParseDouble(retDataTemp[13]);
      if (doubleAmt < 0) {
        retVectorNegative.add(retDataTemp);
      } else {
        retVector.add(retDataTemp);
      }
    }
    //
    arrayTable[0] = "" + doubleReceiptMoney;
    arrayTable[1] = "" + doubleReceiptTotalMoney;
    arrayTable[2] = booleanLife2153 ? "Y" : "N";
    return intFlowNo;
  }

  public int putDebitForAsset(boolean booleanEnd, String[][] retAsAsset, String[][] retDoc2M010, Hashtable hashtableDoc2M041, FargloryUtil exeUtil, talk dbAsset, Vector retVector,
      Vector retVectorNegative, String[] arrayTable) throws Throwable {
    String stringVoucherYMD014 = arrayTable[0].trim();
    String stringKind = arrayTable[1].trim();
    String stringStatus = arrayTable[2].trim();
    String stringDescript = arrayTable[3].trim();
    String stringPurchaseNo = arrayTable[6].trim();
    String stringFactoryNoTop1 = arrayTable[7].trim();
    int intFlowNo = 0;
    //
    String stringComNo = retDoc2M010[0][0].trim();
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringDepartNo = "";
    String stringDepartNoL = "";
    String stringRealMoney = "";
    String[] arrayTemp = null;
    int intY10 = 0;
    int intAssetPos = 0;
    String stringAccountNo = "";
    String stringAccountNoFirst = "";
    String stringAcctCNew = "";
    String stringAccountNoCR = "";
    String stringDepartNoOrigin = "";
    String stringInputDepartNo = "";
    String stringFactoryNo = "";
    String stringProjectID = "";
    String[] arrayDescription = new String[5];
    String[] arrayDescriptionData = new String[5];
    String[] retDataTemp = null;
    String[] retDataTempL = null;
    String[][] retDoc2M018 = null;
    String[][] retFED1004 = null;
    double doubleRealMoney = 0;
    //
    String stringFILTER = "";
    String stringF2Name = "";
    String stringF3Name = "";
    String stringOptometryNo = "";
    String stringAssId = "";
    String stringCostID = "";
    String stringInOut = "";
    String stringAssNumber = "";
    String[][] retAsAssetL = new String[0][0];
    String[][] retAssAssetItem = new String[0][0];
    Vector vectorAsAssetFilter = new Vector();
    Hashtable hashtableTmp = new Hashtable();
    Hashtable hashtableDescription = new Hashtable();
    if (retAsAsset.length > 0 && booleanEnd) {
      retDoc2M018 = getTableDataDoc("SELECT  OptometryNo  FROM  Doc2M018  WHERE  BarCode  = '" + stringBarCode + "' ");
      if (retDoc2M018.length == 0) {
        retDoc2M018 = getTableDataDoc("SELECT  OptometryNo  FROM  Doc6M010  WHERE  BarCode  = '" + stringBarCode + "' ");
      }
      if (retDoc2M018.length > 0) {
        stringOptometryNo = retDoc2M018[0][0].trim();
      }
      retAsAssetL = retAsAsset;
    } else {
      // 未入固資 本次請款單 會計科目為1252
      retAsAssetL = getDoc2M0171("A", stringBarCode, arrayTable, exeUtil);
      if (retAsAssetL.length == 0) {
        retAsAssetL = getDoc2M0171("C", stringBarCode, arrayTable, exeUtil);
      }
    }
    // 0 會計科目 1 部門代碼 2 金額 3 固資代碼 4 AssId 5 請款代碼 6 內外業
    for (int intNo = 0; intNo < retAsAssetL.length; intNo++) {
      stringAccountNo = retAsAssetL[intNo][0].trim();
      stringDepartNo = retAsAssetL[intNo][1].trim();
      stringRealMoney = retAsAssetL[intNo][2].trim();
      stringFILTER = retAsAssetL[intNo][3].trim();
      stringAssId = retAsAssetL[intNo][4].trim();
      stringCostID = retAsAssetL[intNo][5].trim();
      stringInOut = retAsAssetL[intNo][6].trim();
      //
      System.out.println(intNo + "/" + retAsAssetL.length + "stringDepartNo(" + stringDepartNo + ")------------------------------------1");
      if ("033O01A".equals(stringDepartNo) || "033OO1A".equals(stringDepartNoL)) {
        stringDepartNo = "133O1";
      }
      doubleRealMoney = exeUtil.doParseDouble(stringRealMoney);
      //
      if (intNo == 0)
        stringAccountNoCR = stringAccountNo;
      if (intNo == 0)
        stringAccountNoFirst = stringAccountNo;
      retFED1004 = getFED1004(stringAccountNo);
      // 明細一、明細二、明細三、明細四、明細五 18-22
      if (retAsAsset.length > 0 && booleanEnd) {
        vectorAsAssetFilter = exeUtil.getQueryDataHashtable("AS_ASSET_FILTER", new Hashtable(), " AND  FILTER  = '" + stringFILTER + "' ", new Vector(), dbAsset);
        if (vectorAsAssetFilter.size() > 0) {
          hashtableTmp = (Hashtable) vectorAsAssetFilter.get(0);
          stringF2Name = "" + hashtableTmp.get("F2_NAME");
          if ("null".equals(stringF2Name))
            stringF2Name = "";
          stringF3Name = "" + hashtableTmp.get("F3_NAME");
          if ("null".equals(stringF3Name))
            stringF3Name = "";
        }
        //
        stringAssNumber = "ASSET_DATA";
        stringCostID = getCostIDNumNew(stringCostID, stringInOut);
        //
        hashtableDescription.put("CHECK", "ASSET");
        hashtableDescription.put("H11", stringF2Name); // 資產中分類名稱
        hashtableDescription.put("H12", stringF3Name); // 資產中分類名稱
        hashtableDescription.put("I07", stringAssNumber); // 財產編號
        hashtableDescription.put("I10", stringOptometryNo); // 最後一筆之驗收單編號
        hashtableDescription.put("Y10", stringCostID); // 請款代碼
        System.out.println("固資明細-------------E");
      }
      getDescriptionUnionFinal(stringComNo, stringAccountNo, "", "", "", "", "", arrayDescription, retFED1004, new Vector(), exeUtil, false, hashtableDescription);
      stringFactoryNo = stringFactoryNoTop1;
      //
      if (intNo == 0)
        stringInputDepartNo = stringDepartNo;
      if ("B67283".equals(stringBarCode) && intNo == 1)
        continue;
      //
      if (doubleRealMoney > 0)
        intFlowNo++;
      retDataTemp = new String[27];
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "B"; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
      retDataTemp[3] = "" + (intNo + 1); // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = (doubleRealMoney > 0) ? "D" : "C"; // 借D貸C 9
      retDataTemp[10] = stringAccountNo; // 會計科目 10
      retDataTemp[11] = "110301".equals(stringAccountNo) ? "" : stringDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNo; // 對象 12
      retDataTemp[13] = convert.FourToFive("" + Math.abs(doubleRealMoney), 0); // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 請款金額 16(不使用，為了避免亂了，仍沿用，但值統一為 0)
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = arrayDescription[0]; // 明細一 18
      retDataTemp[19] = arrayDescription[1]; // 明細二 19
      retDataTemp[20] = arrayDescription[2]; // 明細三 20
      retDataTemp[21] = arrayDescription[3]; // 明細四 21
      retDataTemp[22] = arrayDescription[4]; // 明細五 22
      retDataTemp[23] = stringDescript; // 摘要 22
      retDataTemp[24] = getUser(); // 修改者 23
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 24
      retDataTemp[26] = "A"; // A 應稅 B 零稅 C 免稅
      System.out.println((retVector.size() + 1) + "stringDepartNo(" + stringDepartNo + ")------------------------------------5");
      //
      if ("110301".equals(stringAccountNo))
        retDataTemp[12] = "0095289";
      //
      if (retAsAsset.length > 0 && booleanEnd) {
        // 固資摘要位置
        intAssetPos = 0;
        for (int intNoL = 0; intNoL < arrayDescription.length; intNoL++) {
          if ("ASSET_DATA".equals(arrayDescription[intNoL].trim())) {
            intAssetPos = intNoL;
            break;
          }
        }
        // 固資明細資料
        retAssAssetItem = getAsAssetItem(stringAssId, exeUtil, dbAsset);
        // 增加至傳票
        // 0 部門 1 金額 2 資產代碼
        intFlowNo--;
        System.out.println(intNo + "/" + retAsAssetL.length + "retAssAssetItem(" + retAssAssetItem.length + ")------------------------------------3");
        for (int intNoL = 0; intNoL < retAssAssetItem.length; intNoL++) {
          intFlowNo++;
          //
          stringDepartNoL = retAssAssetItem[intNoL][0];
          System.out.println(intNoL + "stringDepartNoL(" + stringDepartNoL + ")------------------------------------4");
          if ("033O01A".equals(stringDepartNoL) || "033OO1A".equals(stringDepartNoL)) {
            stringDepartNoL = "133O1";
          }
          //
          retDataTempL = exeUtil.doCopyArray(retDataTemp);
          retDataTempL[6] = "" + intFlowNo; // 傳票序號 6
          retDataTempL[11] = stringDepartNoL; // 部門
          retDataTempL[13] = retAssAssetItem[intNoL][1]; // 金額
          retDataTempL[intAssetPos + 18] = retAssAssetItem[intNoL][2]; // 資產代號
          retVector.add(retDataTempL);
          System.out.println(retVector.size() + "stringDepartNoL(" + stringDepartNoL + ")------------------------------------5");
        }
      } else {
        retVector.add(retDataTemp);
      }
    }
    // 回傳
    arrayTable[0] = stringInputDepartNo; // 部門預設值
    arrayTable[2] = stringAccountNoCR; // 借方會計科目
    arrayTable[3] = stringAccountNoFirst; // 借方會計科目
    // arrayTable[5] = "2146" ; // 貸方會計科目 沿用原本機制
    //
    return intFlowNo;
  }

  public int putDebitForReceipt4(boolean booleanCostID831, String[][] retDoc2M010, String[][] retDoc2M011, FargloryUtil exeUtil, Vector retVector, String[] arrayTable)
      throws Throwable {
    String stringVoucherYMD014 = arrayTable[0].trim();
    String stringKind = arrayTable[1].trim();
    String stringStatus = arrayTable[2].trim();
    String stringDescript = arrayTable[3].trim();
    int intFlowNo = exeUtil.doParseInteger(arrayTable[4].trim());
    String stringInputDepartNo = arrayTable[5].trim();
    double doubleRealTotalMoneySum = exeUtil.doParseDouble(arrayTable[6].trim());
    //
    String stringComNo = retDoc2M010[0][0].trim();
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringFactoryNo = "";
    String stringInvoiceKind = "";
    String stringInvoiceDate = "";
    String stringInvoiceNo = "";
    String stringInvoiceMoney = "";
    String stringInvoiceTax = "";
    String stringInvoiceTotalMoney = "";
    String stringAcctNo = "1264";
    String stringDepartNo = "";
    String[] arrayDescription = new String[5];
    String[] retDataTemp = null;
    String[][] retFED1004 = null;
    boolean booleanLife2153 = false;
    // 0 FactoryNo 1 InvoiceKind 2 InvoiceDate 3 InvoiceNo 4 InvoiceMoney
    // 5 InvoiceTax 6 InvoiceTotalMoney 7 DeductKind
    for (int intDoc2M011 = 0; intDoc2M011 < retDoc2M011.length; intDoc2M011++) {
      stringFactoryNo = retDoc2M011[intDoc2M011][0].trim();
      stringInvoiceKind = retDoc2M011[intDoc2M011][1].trim();
      stringInvoiceDate = retDoc2M011[intDoc2M011][2].trim();
      stringInvoiceNo = retDoc2M011[intDoc2M011][3].trim();
      stringInvoiceMoney = retDoc2M011[intDoc2M011][4].trim();
      stringInvoiceTax = retDoc2M011[intDoc2M011][5].trim();
      stringInvoiceTotalMoney = retDoc2M011[intDoc2M011][6].trim();
      //
      if (booleanCostID831 && "84703052".equals(stringFactoryNo))
        booleanLife2153 = true;
      //
      if (exeUtil.doParseDouble(stringInvoiceTax) <= 0)
        continue;
      doubleRealTotalMoneySum += exeUtil.doParseDouble(stringInvoiceTax);
      //
      retFED1004 = getFED1004(stringAcctNo);
      // 明細資料處理(預設為 B08、B09、B10、B11、B40，非上述之 ITEM_CD 時，空白處理)
      if (retFED1004.length != 5) {
        stringInvoiceDate = "";
        stringInvoiceNo = "";
        stringInvoiceMoney = "";
        stringInvoiceTotalMoney = "";
        stringInvoiceKind = "";
      } else {
        if (!"B08".equals(retFED1004[0][0].trim()))
          stringInvoiceDate = "";
        if (!"B09".equals(retFED1004[1][0].trim()))
          stringInvoiceNo = "";
        if (!"B10".equals(retFED1004[2][0].trim()))
          stringInvoiceMoney = "";
        if (!"B11".equals(retFED1004[3][0].trim()))
          stringInvoiceTotalMoney = "";
        if ("B40".equals(retFED1004[4][0].trim())) {
          stringInvoiceKind = getInvoiceKindName(stringInvoiceKind);
        } else {
          stringInvoiceKind = "";
        }
      }
      //
      intFlowNo++;
      retDataTemp = new String[27];
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "A"; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 補充保費Z 折讓(稅)-貸H 退保留款-貸I
      retDataTemp[3] = "" + (intDoc2M011 + 1); // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "D"; // 借貸 9
      retDataTemp[10] = stringAcctNo; // 會計科目 10
      retDataTemp[11] = stringInputDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNo; // 對象 12
      retDataTemp[13] = convert.FourToFive(stringInvoiceTax, 0); // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 發票稅額 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = exeUtil.getDateConvertRoc(stringInvoiceDate).replaceAll("/", ""); // 發票日期 18
      retDataTemp[19] = stringInvoiceNo; // 發票號碼 19
      retDataTemp[20] = stringInvoiceMoney; // 發票未稅金額 20
      retDataTemp[21] = stringInvoiceTotalMoney; // 發票總金額 21
      retDataTemp[22] = stringInvoiceKind; // 發票格式 22
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 24
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
      retDataTemp[26] = "A"; //
      //
      retVector.add(retDataTemp);
    }
    //
    arrayTable[0] = "" + doubleRealTotalMoneySum;
    arrayTable[1] = booleanLife2153 ? "Y" : "N";
    return intFlowNo;
  }

  public String getCostIDVoucher(String stringSourceType, String stringRecordNo12, String stringComNo, String stringKindNo, String stringPurchaseNo, FargloryUtil exeUtil)
      throws Throwable {
    String stringSql = "";
    String stringCostID = "";
    String[] arrayTemp = null;
    String[][] retDoc3M012 = null;
    String[][] retDoc5M012 = null;
    //
    if (!"B".equals(stringSourceType)) {
      // 行銷
      stringSql = " SELECT  RTRIM(M12.CostID)+RTRIM(M12.CostID1) " + " FROM  Doc3M011  M11,  Doc3M012  M12 " + " WHERE  M11.BarCode  =  M12.BarCode " + " AND  M11.ComNo  =  '"
          + stringComNo + "' " + " AND  M11.KindNo  =  '" + stringKindNo + "' " + " AND  M11.DocNo  =  '" + stringPurchaseNo + "' " + " AND  M12.RecordNo  =  '" + stringRecordNo12
          + "' ";
      retDoc3M012 = getTableDataDoc(stringSql);
      if (retDoc3M012.length > 0) {
        stringCostID = retDoc3M012[0][0].trim();
      }
    } else {
      // 管理費用
      stringSql = " SELECT  M12.CostID " + " FROM  Doc5M011  M11,  Doc5M012  M12 " + " WHERE  M11.BarCode  =  M12.BarCode " + " AND  M11.ComNo  =  '" + stringComNo + "' "
          + " AND  M11.KindNo =  '" + stringKindNo + "' " + " AND  M11.DocNo  =  '" + stringPurchaseNo + "' " + " AND  M12.RecordNo  =  '" + stringRecordNo12 + "' ";
      retDoc5M012 = getTableDataDoc(stringSql);
      if (retDoc5M012.length > 0) {
        stringCostID = retDoc5M012[0][0].trim();
      }
    }
    return stringCostID;
  }

  public String getFilterDoc3M012(String stringSourceType, String stringRecordNo12, String[] arrayTable, FargloryUtil exeUtil) throws Throwable {
    String stringComNo = arrayTable[4].trim();
    String stringKindNo = arrayTable[5].trim();
    String stringPurchaseNo = arrayTable[6].trim();
    String stringFactoryNo = arrayTable[7].trim();
    String stringFILTER = "";
    String stringSql = "";
    String stringTable11 = "";
    String stringTable12 = "";
    String[] arrayTemp = null;
    String[][] retDoc3M012 = null;
    //
    if (!"B".equals(stringSourceType)) {
      stringTable11 = "Doc3M011";
      stringTable12 = "Doc3M012";
    } else {
      stringTable11 = "Doc5M011";
      stringTable12 = "Doc5M012";
    }
    // 行銷
    stringSql = " SELECT  M12.FILTER " + " FROM  " + stringTable11 + "  M11,  " + stringTable12 + "  M12 " + " WHERE  M11.BarCode  =  M12.BarCode " + " AND  M11.ComNo  =  '"
        + stringComNo + "' " + " AND  M11.KindNo =  '" + stringKindNo + "' " + " AND  M11.DocNo  =  '" + stringPurchaseNo + "' " + " AND  M12.RecordNo  =  '" + stringRecordNo12
        + "' ";
    retDoc3M012 = getTableDataDoc(stringSql);
    if (retDoc3M012.length > 0) {
      stringFILTER = retDoc3M012[0][0].trim();
    }
    return stringFILTER;
  }

  public String[][] getAttNoC(String[][] retDoc2M010, String[][] retDoc5M0224, FargloryUtil exeUtil, String[] arrayTable) throws Throwable {
    boolean booleanCostID0010 = "Y".equals(arrayTable[0].trim());
    boolean boolean110301 = "Y".equals(arrayTable[1].trim());
    String stringAccountNo = arrayTable[2].trim();
    String stringAcctountType = "";
    String stringAcctCNew = arrayTable[3].trim();
    boolean booleanRationMan = "Y".equals(arrayTable[4].trim());
    String stringMailMoney1 = arrayTable[5].trim();
    boolean booleanLife2153 = "Y".equals(arrayTable[6].trim());
    boolean booleanApplyTypeD = "Y".equals(arrayTable[7].trim());
    String stringFactoryNo = arrayTable[8].trim();
    //
    int intMaxCount = 0; // 貸方之資料筆數 2013-03-25
    String stringAcctCSession = ("" + get("Doc2M014_AcctNo")).trim();
    String stringAcctC = "";
    String stringPayCondition1 = retDoc2M010[0][14].trim();
    String stringPayCondition2 = retDoc2M010[0][15].trim();
    String[] arrayTemp = convert.StringToken(stringAcctCNew, "/");
    String[][] retDoc2M030 = new String[0][0];
    boolean booleanNoReceipt = false;
    boolean booleanFlag = true;
    //
    if (stringAccountNo.length() >= 4) {
      String stringAccountNo4 = stringAccountNo.substring(0, 4);
      if ("1231,1232,1234,1664,1661,5681,2143".indexOf(stringAccountNo4 + "") != -1) {
        stringAcctountType = "1";
      } else {
        stringAcctountType = "2";
      }
    } else {
      stringAcctountType = "2";
    }
    // 固定資產
    /*
     * if(booleanApplyTypeD) { arrayTable[0] = "N" ; arrayTable[1] = "0" ; //
     * retDoc2M030 = new String[1][1] ; retDoc2M030[0][0] = "1281" ; return
     * retDoc2M030 ; }
     */
    // 貸方數目
    // 取得付款條件，判斷是否有第二張發票。
    intMaxCount = ("999".equals(stringPayCondition2)) ? 1 : 2;
    // booleanCostID0010 true 訂簽款轉存信託專戶 特別處理(使用立沖傳票)
    if (booleanCostID0010) {
      intMaxCount = retDoc5M0224.length;
    }
    // 付款條件為現金，貸方會計科目預設為 110301
    booleanFlag = "000".equals(stringPayCondition1) && ("000".equals(stringPayCondition2) || "999".equals(stringPayCondition2));
    System.out.println("110301(" + booleanFlag + ")(" + stringPayCondition1 + ")(" + stringPayCondition2 + ")-------------------");
    if (booleanFlag)
      boolean110301 = true;
    // 貸方會計科目
    if (booleanLife2153) {
      retDoc2M030 = new String[1][1];
      retDoc2M030[0][0] = "2153";
    } else if (boolean110301) {
      retDoc2M030 = new String[1][1];
      retDoc2M030[0][0] = "110301";
      System.out.println("retDoc2M030[0][0](" + retDoc2M030[0][0] + ")-------------------0");
    } else if (!"".equals(stringAcctCNew)) {
      retDoc2M030 = new String[1][1];
      retDoc2M030[0][0] = stringAcctCNew;
    } else {
      retDoc2M030 = getDoc2M030(stringAccountNo);
    }
    if (retDoc2M030.length == 0) {
      arrayTable[0] = "借方會計科目 " + stringAccountNo + " 找不到對應的貸方會計科目，請至[借方會計科目-貸方會計科目(Doc2M030)] 新增資料。";
      return retDoc2M030;
    }
    // 優先 會計科目
    if (!booleanLife2153) {
      if (!isExistForFED1047(stringFactoryNo) && !isExistForFED1073(stringFactoryNo)) {
        String stringVoucherKind = "";
        String stringBankCd = "";
        String stringBankNo = "";
        String[][] retFED1005 = getFED1005(stringFactoryNo);
        //
        stringVoucherKind = retFED1005[0][15].trim();
        stringBankCd = retFED1005[0][16].trim();
        stringBankNo = retFED1005[0][17].trim();
        // 廠商憑證(VOUCHER_KIND)不為其他類(3)
        if (!"3".equals(stringVoucherKind) && !"".equals(stringBankCd) && !"".equals(stringBankNo)) {
          // 銀行代號 BANK_CD
          // 帳號 BANK_NO
          if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession)) {

          } else {
            if (!"".equals(stringAcctCNew)) {
              if (arrayTemp.length == 3) {
                if (booleanRationMan) {
                  // 關係人
                  stringAcctCSession = arrayTemp[2].trim();
                } else {
                  // 匯款廠商
                  stringAcctCSession = arrayTemp[0].trim();
                  // boolean2146 = true ;
                }
              }
            } else {
              switch (exeUtil.doParseInteger(stringAcctountType)) {
              case 0:
                stringAcctCSession = "2146";
                break;
              case 1:
                stringAcctCSession = "2146";
                break;
              case 2:
                stringAcctCSession = "2147";
                break;
              case 3:
                stringAcctCSession = "2146";
                break;
              // case 3 :stringAcctCSession = "2146" ; stringAcctCSession2 = "2147" ; break ;
              }
              // boolean2146 = true ;
            }
          }
        } else {
          if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession)) {
            if ("2146".equals(stringAcctCSession) || "2147".equals(stringAcctCSession)) {
              stringAcctCSession = "";
              if (arrayTemp.length == 3) {
                if (booleanRationMan) {
                  // 關係人
                  stringAcctCSession = arrayTemp[2].trim();
                } else {
                  // 匯款廠商
                  stringAcctCSession = arrayTemp[1].trim();
                }
              }
            }
          } else {
            if (arrayTemp.length == 3) {
              if (booleanRationMan) {
                // 關係人
                stringAcctCSession = arrayTemp[2].trim();
              } else {
                // 匯款廠商
                stringAcctCSession = arrayTemp[1].trim();
              }
            }
          }

        }
      } else {
        if (!"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession)) {
          if ("2146".equals(stringAcctCSession) || "2147".equals(stringAcctCSession)) {
            stringAcctCSession = "";
            if (arrayTemp.length == 3) {
              if (booleanRationMan) {
                // 關係人
                stringAcctCSession = arrayTemp[2].trim();
              } else {
                // 匯款廠商
                stringAcctCSession = arrayTemp[1].trim();
              }
            }
          }
        } else {
          if (arrayTemp.length == 3) {
            if (booleanRationMan) {
              // 關係人
              stringAcctCSession = arrayTemp[2].trim();
            } else {
              // 匯款廠商
              stringAcctCSession = arrayTemp[1].trim();
            }
          }
        }

      }
    }
    int intMailCount = 0;
    String[][] retFED1003 = null;
    Vector vectorTableData = new Vector();
    double doubleMailMoney = 0;
    for (int intDoc2M030 = 0; intDoc2M030 < intMaxCount; intDoc2M030++) {
      if (intDoc2M030 < retDoc2M030.length)
        stringAcctC = retDoc2M030[intDoc2M030][0].trim();
      System.out.println(intDoc2M030 + "stringAcctC(" + stringAcctC + ")-------------------1");
      System.out.println(intDoc2M030 + "stringAcctCSession(" + stringAcctCSession + ")-------------------2");
      if (!booleanLife2153 && !"".equals(stringAcctCSession) && !"null".equals(stringAcctCSession))
        stringAcctC = stringAcctCSession;
      //
      if (",2143,2153,2191,2251,2258,".indexOf(stringAcctC) != -1) {
        booleanNoReceipt = true;
      }
      arrayTemp = new String[1];
      arrayTemp[0] = stringAcctC;
      vectorTableData.add(arrayTemp);
      //
      if (intDoc2M030 == 0) {
        put("Doc2M014_AcctNo2", stringAcctC);
      }
      // 當 [會計科目名稱] 內含"票據"，會有郵資費用
      retFED1003 = getFED1003(stringAcctC);
      booleanFlag = (retFED1003[0][7].trim().indexOf("票據") != -1) && (retFED1003[0][7].trim().indexOf("關係人") == -1);
      if (booleanFlag) {
        intMailCount++;
      }
    }
    if (intMailCount < 1) {
      doubleMailMoney = 0;
    } else {
      doubleMailMoney = exeUtil.doParseDouble(stringMailMoney1);
    }
    //
    arrayTable[0] = booleanNoReceipt ? "Y" : "N";
    arrayTable[1] = "" + doubleMailMoney;
    retDoc2M030 = (String[][]) vectorTableData.toArray(new String[0][0]);
    System.out.println("retDoc2M030(" + retDoc2M030.length + ")(" + retDoc2M030[0][0] + ")MailMoney(" + doubleMailMoney + ")-------------------");
    return retDoc2M030;
  }

  public double getRateC(String[][] retDoc2M010, String[][] retDoc2M017, String[][] retDoc2M030, FargloryUtil exeUtil) throws Throwable {
    // 貸方數目
    if (retDoc2M030.length <= 1)
      return 1;
    // 只有一個請購單
    if (retDoc2M017.length == 0)
      return 0.5;
    //
    String stringComNo = retDoc2M010[0][0].trim();
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringPayCondition1 = retDoc2M010[0][14].trim();
    String stringPayCondition2 = retDoc2M010[0][15].trim();
    String stringEDateTime = retDoc2M010[0][22].trim();
    //
    double doubleRate = 0;
    double doubleThisPurchaseMoneyL = 0;
    double doubleUsePurchaseMoneyL = 0;
    double doublePurchaseMoneySumL = 0;
    double doublePayCondition1PurchaseMoneyL = 0;
    double doublePayCondition2PurchaseMoneyL = 0;
    double doubleUsePurchaseMoneySumL = 0;
    double doublePayConditionPurchaseMoneyL = 0;
    String stringFactoryNoL = "";
    String stringPurchaseNoL = "";
    String stringPurchaseNo1L = "";
    String stringPurchaseNo2L = "";
    String stringPurchaseNo3L = "";
    String stringPayCondition1L = "";
    String stringPayCondition2L = "";
    String[][] retDoc3M013L = null;
    Hashtable hashtablePayCondition = new Hashtable();
    for (int intDoc2M017 = 0; intDoc2M017 < retDoc2M017.length; intDoc2M017++) {
      doubleThisPurchaseMoneyL = exeUtil.doParseDouble(retDoc2M017[intDoc2M017][4].trim());
      stringFactoryNoL = retDoc2M017[intDoc2M017][6].trim();
      stringPurchaseNo1L = retDoc2M017[intDoc2M017][0].trim();
      stringPurchaseNo2L = retDoc2M017[intDoc2M017][1].trim();
      stringPurchaseNo3L = retDoc2M017[intDoc2M017][2].trim();
      stringPurchaseNoL = stringPurchaseNo1L + stringPurchaseNo2L + stringPurchaseNo3L;
      // 已申請的請款金額不包含本次(Doc7M017)
      doubleUsePurchaseMoneyL = exeUtil.doParseDouble(
          getExistFactoryNoRealMoneyForDoc2M010(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1L, stringPurchaseNo2L, stringPurchaseNo3L, stringFactoryNoL))
          + exeUtil.doParseDouble(getExistFactoryNoRealMoneyBorrowForDoc6M010(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1L, stringPurchaseNo2L,
              stringPurchaseNo3L, stringFactoryNoL));
      // 取得請購單資料 Doc3M013
      // 0 FactoryNo 1 PurchaseSumMoney 2 PercentRate 3 MonthNum 4 PurchaseMoney
      // 5 PayCondition1 6 PayCondition2 7 Descript
      retDoc3M013L = getDoc3M013(stringComNo, stringPurchaseNoL, stringFactoryNoL);
      doublePurchaseMoneySumL = 0;
      doubleUsePurchaseMoneySumL = doubleUsePurchaseMoneyL + doubleThisPurchaseMoneyL; // 已申請的金額(合計)(包含本次)
      for (int intDoc3M013L = 0; intDoc3M013L < retDoc3M013L.length; intDoc3M013L++) {
        doublePurchaseMoneySumL += exeUtil.doParseDouble(retDoc3M013L[intDoc3M013L][4].trim());
        stringPayCondition1L = retDoc3M013L[intDoc3M013L][5].trim();
        stringPayCondition2L = retDoc3M013L[intDoc3M013L][6].trim();
        // [合約金額(階段)加總] 大於 [已申請金額(不包含本次)]
        if (doublePurchaseMoneySumL > doubleUsePurchaseMoneyL) {
          if (doublePurchaseMoneySumL <= doubleUsePurchaseMoneySumL) {
            // [合約金額(階段)加總] 小於等於 [已申請的金額(合計)(包含本次)]
            // [付款條件金額] = [合約金額(階段)加總] - [已請購金額(不包含本次)]
            doublePayConditionPurchaseMoneyL = doublePurchaseMoneySumL - doubleUsePurchaseMoneyL;
          } else {
            // [付款條件金額] = [已申請的金額(合計)(包含本次)] - [已請購金額(不包含本次)]
            doublePayConditionPurchaseMoneyL = doubleUsePurchaseMoneySumL - doubleUsePurchaseMoneyL;
          }
          // [已請購金額(不包含本次)] = [合約金額(階段)加總]
          doubleUsePurchaseMoneyL = doublePurchaseMoneySumL;
          // 放入對應的 付款條件中
          if (!"999".equals(stringPayCondition2L)) {
            doublePayCondition1PurchaseMoneyL = doublePayConditionPurchaseMoneyL / 2;
            doublePayCondition1PurchaseMoneyL = exeUtil.doParseDouble(convert.FourToFive("" + doublePayCondition1PurchaseMoneyL, 0));
            doublePayCondition2PurchaseMoneyL = doublePayConditionPurchaseMoneyL - doublePayCondition1PurchaseMoneyL;
            // 付款條件 2
            doublePayConditionPurchaseMoneyL += exeUtil.doParseDouble("" + hashtablePayCondition.get(stringPayCondition2L)) + doublePayCondition2PurchaseMoneyL;
            doublePayConditionPurchaseMoneyL += exeUtil.doParseDouble(convert.FourToFive("" + doublePayConditionPurchaseMoneyL, 0));
            hashtablePayCondition.put(stringPayCondition2L, "" + doublePayConditionPurchaseMoneyL);
          } else {
            doublePayCondition1PurchaseMoneyL = doublePayConditionPurchaseMoneyL;
          }

          doublePayConditionPurchaseMoneyL = exeUtil.doParseDouble("" + hashtablePayCondition.get(stringPayCondition1L)) + doublePayCondition1PurchaseMoneyL;
          doublePayConditionPurchaseMoneyL = exeUtil.doParseDouble(convert.FourToFive("" + doublePayConditionPurchaseMoneyL, 0));
          hashtablePayCondition.put(stringPayCondition1L, "" + doublePayConditionPurchaseMoneyL);
        }
        // [合約金額(階段)加總] 大於等於 [已申請的金額(合計)(包含本次)]
        if (doublePurchaseMoneySumL >= doubleUsePurchaseMoneySumL)
          break;
      }
    }
    double doublePay1 = exeUtil.doParseDouble("" + hashtablePayCondition.get(stringPayCondition1));
    double doublePay2 = exeUtil.doParseDouble("" + hashtablePayCondition.get(stringPayCondition2));
    //
    doubleRate = doublePay1 / (doublePay1 + doublePay2);
    //
    return doubleRate;
  }

  public int putCeditForReceipt1(String[][] retDoc2M010, String[][] retDoc2M013, FargloryUtil exeUtil, Vector retVector, String[] arrayTable) throws Throwable {
    String stringVoucherYMD014 = arrayTable[0].trim();
    String stringKind = arrayTable[1].trim();
    String stringStatus = arrayTable[2].trim();
    String stringDescript = arrayTable[3].trim();
    String stringFactoryNoTop1 = arrayTable[4].trim();
    int intFlowNo = exeUtil.doParseInteger(arrayTable[5].trim());
    String stringInputDepartNo = arrayTable[6].trim();
    boolean booleanDoc2M0201ForB = "Y".equals(arrayTable[7].trim());
    boolean booleanNoReceipt = "Y".equals(arrayTable[8].trim());
    double doubleRealTotalMoneySum = exeUtil.doParseDouble(arrayTable[9].trim());
    double doubleRealTotalMoneySum2 = doubleRealTotalMoneySum;
    double doubleReceiptMoney = 0;
    String stringAccountNoFirst = arrayTable[11].trim();
    String stringAccountNoCR = arrayTable[12].trim();
    String stringAccountCountStatusS = arrayTable[13].trim();
    String stringAccountCount = arrayTable[14].trim();
    //
    int intReceiptTaxType = (booleanDoc2M0201ForB || retDoc2M013.length == 0) ? 0 : exeUtil.doParseInteger(retDoc2M013[0][6].trim());
    String stringAcctTax = "";

    // 6 % 會計科目對應 228202
    // 10 % 當借方為[620160]或[568160] 時，為[228208]，否則為[228203]。
    if (intReceiptTaxType == 6) {
      stringAcctTax = "228202";
    } else if (intReceiptTaxType == 10) {
      if ("620160".equals(stringAccountNoCR) || "568160".equals(stringAccountNoCR)) {
        stringAcctTax = "228208";
      } else {
        stringAcctTax = "228203";
      }
    } else {
      stringAcctTax = "228203";
    }
    //
    String stringComNo = retDoc2M010[0][0].trim();
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringPayCondition1 = retDoc2M010[0][14].trim();
    String stringPayCondition2 = retDoc2M010[0][15].trim();
    String stringAmtL = "";
    String stringRowType = "";
    String stringFactoryNo = "";
    String stringReceiptKind = "";
    String stringReceiptDate = "";
    String stringReceiptMoney = "";
    String stringReceiptTax = "";
    String stringReceiptTotalMoney = "";
    String stringAcctNo = "";
    String stringPayCondition = "";
    String stringDepartNo = "";
    String stringSupplementMoney = "";
    String stringDepartNoL = "";
    String stringFlow = "";
    String stringItemCd = "";
    String stringDate = "";
    String[] arrayDescription = new String[5];
    String[] arrayTemp = null;
    String[] retDataTemp = null;
    String[][] retFED1004 = null;
    double doubleReceiptKindBMoneySum = 0;
    double doubleMoney = 0;
    double doubleMoneySum = 0;
    // 0 FactoryNo 1 ReceiptKind 2 ReceiptDate 3 ReceiptMoney 4 ReceiptTax
    // 5 ReceiptTotalMoney 6 ReceiptTaxType 7 ACCT_NO 8 PayCondition1 9 DepartNo
    // 10 ACCT_NO2 11 SupplementMoney
    for (int intDoc2M013 = 0; intDoc2M013 < retDoc2M013.length; intDoc2M013++) {
      stringFactoryNo = retDoc2M013[intDoc2M013][0].trim();
      stringReceiptKind = retDoc2M013[intDoc2M013][1].trim();
      stringReceiptDate = retDoc2M013[intDoc2M013][2].trim();
      stringReceiptMoney = retDoc2M013[intDoc2M013][3].trim();
      stringReceiptTax = retDoc2M013[intDoc2M013][4].trim();
      stringReceiptTotalMoney = retDoc2M013[intDoc2M013][5].trim();
      stringAcctNo = retDoc2M013[intDoc2M013][7].trim();
      stringPayCondition = retDoc2M013[intDoc2M013][8].trim();
      stringDepartNo = retDoc2M013[intDoc2M013][9].trim();
      stringSupplementMoney = retDoc2M013[intDoc2M013][11].trim();
      stringDepartNoL = stringInputDepartNo;
      //
      if (booleanNoReceipt) {
        System.out.println("--------------------貸方-扣繳(略)");
        continue;
      }
      //
      doubleReceiptMoney += exeUtil.doParseDouble(stringReceiptMoney);
      //
      if (!"".equals(stringDepartNo))
        stringDepartNoL = stringDepartNo;
      // 1 扣繳金額 2 補充保費
      for (int intNoL = 1; intNoL <= 2; intNoL++) {
        System.out.println("(" + intNoL + ")--------------------1 扣繳金額      2 補充保費)booleanNoReceipt(" + booleanNoReceipt + ")");
        if (intNoL == 1) {
          stringRowType = "G";
          stringAmtL = stringReceiptTax;
          //
          if (!"".equals(stringAcctNo))
            stringAcctTax = stringAcctNo;
          if (!"A".equals(stringReceiptKind)) {
            doubleReceiptKindBMoneySum += exeUtil.doParseDouble(stringReceiptTotalMoney);
          }
        } else {
          stringRowType = "Z";
          stringAcctTax = "228231";
          stringAmtL = stringSupplementMoney;
        }
        doubleRealTotalMoneySum -= exeUtil.doParseDouble(stringAmtL);
        System.out.println("(" + intNoL + ")--------------------stringAmtL(" + stringAmtL + ")doubleRealTotalMoneySum(" + doubleRealTotalMoneySum + ")");
        //
        if (exeUtil.doParseDouble(stringAmtL) == 0)
          continue;
        //
        retFED1004 = getFED1004(stringAcctTax);
        // 明細資料處理 G08、B04、G07、，非上述之 ITEM_CD 時，空白處理
        for (int intNo = 0; intNo < 5; intNo++) {
          arrayDescription[intNo] = "";
          if (intNo >= retFED1004.length)
            continue;
          // 所得給付票據到期日
          if ("G08".equals(retFED1004[intNo][0].trim()) && !"".equals(stringVoucherYMD014)) {
            arrayDescription[intNo] = getExpiredDateUnion((intDoc2M013 + 1), stringAcctTax, stringVoucherYMD014, stringPayCondition, stringPayCondition2, "G", stringComNo,
                exeUtil);
          }
          if ("G20".equals(retFED1004[intNo][0].trim()))
            arrayDescription[intNo] = stringReceiptTotalMoney; // G20 所得總額
          if ("G06".equals(retFED1004[intNo][0].trim()))
            arrayDescription[intNo] = stringReceiptTotalMoney; // G06 每月給付所得總額
          if ("G07".equals(retFED1004[intNo][0].trim()))
            arrayDescription[intNo] = stringReceiptTax; // G07 每月代扣繳金額
          if ("C07".equals(retFED1004[intNo][0].trim()))
            arrayDescription[intNo] = stringAccountNoFirst; // C07 原立帳借方科目
          if ("228202".equals(stringAcctNo) && "F04".equals(retFED1004[intNo][0].trim()))
            arrayDescription[intNo] = stringFactoryNo.equals("Z0001") ? "未列入投保額的獎金節金紅利" : "非本單位投保人員兼職薪資"; // F04 補充保費所得類別
          // H02 月份
          // B04 期間
        }
        //
        intFlowNo++;
        System.out.println("intFlowNo3--------------------[" + intFlowNo + "]");
        retDataTemp = new String[27];
        retDataTemp[0] = stringBarCode; // 條碼編號 0
        retDataTemp[1] = stringDocNo; // 公文代號 1
        retDataTemp[2] = stringRowType; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 補充保費Z 折讓(稅)-貸H 退保留款-貸I
        retDataTemp[3] = "" + (intDoc2M013 + 1); // No 3
        retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
        retDataTemp[5] = "0"; // 傳票流水號 5
        retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
        retDataTemp[7] = stringComNo; // 公司代號 7
        retDataTemp[8] = stringKind; // Kind 8
        retDataTemp[9] = "C"; // 借貸 9
        retDataTemp[10] = stringAcctTax; // 會計科目 10
        retDataTemp[11] = stringDepartNoL; // 部門 11
        retDataTemp[12] = stringFactoryNo; // 對象 12
        retDataTemp[13] = convert.FourToFive(stringAmtL, 0); // 金額 13
        retDataTemp[14] = "0"; // 匯率 14
        retDataTemp[15] = "0"; // 原類金額 15
        retDataTemp[16] = stringReceiptMoney; // 折讓未稅金額 16
        retDataTemp[17] = stringStatus; // 狀態-未過帳 17
        retDataTemp[18] = arrayDescription[0]; // 明細一 18
        retDataTemp[19] = arrayDescription[1]; // 明細二 19
        retDataTemp[20] = arrayDescription[2]; // 明細三 20
        retDataTemp[21] = arrayDescription[3]; // 明細四 21
        retDataTemp[22] = arrayDescription[4]; // 明細五 22
        retDataTemp[23] = stringDescript; // 摘要 23
        retDataTemp[24] = getUser(); // 修改者 24
        retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
        retDataTemp[26] = "A"; //
        //
        /*
         * stringCostIDPosition = (""+hashtableDoc2M042.get(stringAcctDConstant)).trim(
         * ) ; if(!"".equals(stringCostIDPosition) &&
         * !"null".equals(stringCostIDPosition)) { if(check.isNum(stringCostIDPosition))
         * { intCostIDPos = Integer.parseInt(stringCostIDPosition) ;
         * retDataTemp[17+intCostIDPos] = stringCostIDNum ; } }
         */
        //
        // 月數
        if (!"Y".equals(stringAccountCountStatusS)) {
          retVector.add(retDataTemp);
        } else {
          for (int intCount = 0; intCount < exeUtil.doParseInteger(stringAccountCount); intCount++) {
            arrayTemp = exeUtil.doCopyArray(retDataTemp);
            //
            if (intCount != 0) {
              intFlowNo++;
              System.out.println("intFlowNo4--------------------[" + intFlowNo + "]");
              stringFlow = "" + intCount;
            } else {
              stringFlow = "";
            }
            arrayTemp[6] = "" + intFlowNo; // 傳票序號 6
            arrayTemp[2] = stringRowType + stringFlow; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
            // 金額
            doubleMoneySum = exeUtil.doParseDouble(stringAmtL);
            doubleMoney = doubleMoneySum / exeUtil.doParseDouble(stringAccountCount);
            doubleMoney = exeUtil.doParseDouble(convert.FourToFive("" + doubleMoney, 0));
            if (intCount == exeUtil.doParseInteger(stringAccountCount) - 1) {
              doubleMoney = doubleMoneySum - doubleMoney * intCount;
            }
            arrayTemp[13] = convert.FourToFive("" + doubleMoney, 0); // 金額 13
            // 到期
            for (int intNo = 0; intNo < 5; intNo++) {
              if (intNo >= retFED1004.length)
                continue;
              stringItemCd = retFED1004[intNo][0].trim();
              // 到期日 G08
              if ("G08".equals(stringItemCd)) {
                stringDate = arrayTemp[18 + intNo].trim();
                if (!"".equals(stringDate)) {
                  if ("0".equals(stringPayCondition1) && intCount != 0 && "11".equals(datetime.getDate(stringDate))) {
                    stringDate = datetime.dateAdd(stringDate, "d", -1);
                  }
                  stringDate = datetime.dateAdd(stringDate, "m", intCount);
                  arrayTemp[18 + intNo] = stringDate;
                }
              }
              // G06 每月給付所得總額
              if ("G06".equals(stringItemCd)) {
                doubleMoneySum = exeUtil.doParseDouble(arrayTemp[18 + intNo].trim());
                doubleMoney = doubleMoneySum / exeUtil.doParseDouble(stringAccountCount);
                doubleMoney = exeUtil.doParseDouble(convert.FourToFive("" + doubleMoney, 0));
                if (intCount == exeUtil.doParseInteger(stringAccountCount) - 1) {
                  doubleMoney = doubleMoneySum - doubleMoney * intCount;
                }
                arrayTemp[18 + intNo] = convert.FourToFive("" + doubleMoney, 0);
              }
              // G07 每月代扣繳金額
              if ("G07".equals(stringItemCd)) {
                doubleMoneySum = exeUtil.doParseDouble(arrayTemp[18 + intNo].trim());
                doubleMoney = doubleMoneySum / exeUtil.doParseDouble(stringAccountCount);
                doubleMoney = exeUtil.doParseDouble(convert.FourToFive("" + doubleMoney, 0));
                if (intCount == exeUtil.doParseInteger(stringAccountCount) - 1) {
                  doubleMoney = doubleMoneySum - doubleMoney * intCount;
                }
                arrayTemp[18 + intNo] = convert.FourToFive("" + doubleMoney, 0);
              }
              // G20 所得總額
              if ("G20".equals(stringItemCd)) {
                doubleMoneySum = exeUtil.doParseDouble(arrayTemp[18 + intNo].trim());
                doubleMoney = doubleMoneySum / exeUtil.doParseDouble(stringAccountCount);
                doubleMoney = exeUtil.doParseDouble(convert.FourToFive("" + doubleMoney, 0));
                if (intCount == exeUtil.doParseInteger(stringAccountCount) - 1) {
                  doubleMoney = doubleMoneySum - doubleMoney * intCount;
                }
                arrayTemp[18 + intNo] = convert.FourToFive("" + doubleMoney, 0);
              }
            }
            //
            retVector.add(arrayTemp);
          }
        }
      }
    }
    // 個人收據 大於 費用表格 時修正金額
    System.out.println(
        "個人收據(" + convert.FourToFive("" + doubleReceiptMoney, 0) + ") 大於 費用表格(" + convert.FourToFive("" + doubleRealTotalMoneySum2, 0) + ") 時修正金額---------------------------");
    if (doubleReceiptMoney > doubleRealTotalMoneySum2)
      doubleRealTotalMoneySum = doubleReceiptMoney;
    //
    arrayTable[0] = "" + doubleReceiptKindBMoneySum;
    arrayTable[1] = "" + doubleRealTotalMoneySum;
    return intFlowNo;
  }

  public int putCeditForReceipt2(String[][] retDoc2M010, String[][] retDoc2M013, String[][] retDoc2M030, String[][] retDoc5M0224, FargloryUtil exeUtil, Vector retVector,
      String[] arrayTable) throws Throwable {
    String stringVoucherYMD014 = arrayTable[0].trim();
    String stringKind = arrayTable[1].trim();
    String stringStatus = arrayTable[2].trim();
    String stringDescript = arrayTable[3].trim();
    String stringFactoryNoTop1 = arrayTable[4].trim();
    int intFlowNo = exeUtil.doParseInteger(arrayTable[5].trim());
    String stringInputDepartNo = arrayTable[6].trim();
    boolean booleanCeditType1 = "Y".equals(arrayTable[7].trim());
    //
    double doubleReceiptMoney = exeUtil.doParseDouble(arrayTable[9].trim());
    double doubleMailMoney = exeUtil.doParseDouble(arrayTable[10].trim());
    double doubleRetainMoney = exeUtil.doParseDouble(arrayTable[11].trim());
    double doubleCostID009 = exeUtil.doParseDouble(arrayTable[12].trim());
    double doubleRate = exeUtil.doParseDouble(arrayTable[13].trim());
    String stringAccountCount = arrayTable[14].trim();
    double doubleReceiptKindBMoneySum = exeUtil.doParseDouble(arrayTable[15].trim());
    boolean booleanCeditType2 = "Y".equals(arrayTable[16].trim());
    boolean booleanCeditType3 = "Y".equals(arrayTable[17].trim());
    boolean booleanLife2153 = "Y".equals(arrayTable[18].trim());
    //
    String stringComNo = retDoc2M010[0][0].trim();
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringPayCondition1 = retDoc2M010[0][14].trim();
    String stringPayCondition2 = retDoc2M010[0][15].trim();
    //
    String stringAcctC = retDoc2M030[0][0].trim();
    String stringDate = "";
    String stringDepartNoL = "";
    String stringFactorNoL = "";
    String stringFlow = "";
    String stringReceiptMoneyD = "";
    String stringItemCd = "";
    String[] arrayDescription = new String[5];
    String[] arrayTemp = null;
    String[] retDataTemp = null;
    String[][] retFED1004 = null;
    boolean booleanMult = false;
    boolean booleanNegative = false;
    boolean booleanFlag = false;
    double doubleMoney = 0;
    double doubleMoneySum = 0;
    // 判斷是否依 個人收據 轉傳票
    System.out.println("判斷是否依 個人收據 轉傳票booleanCeditType2(" + booleanCeditType2 + ")booleanCeditType3(" + booleanCeditType3 + ")-----------");
    if (booleanCeditType2) {
      booleanFlag = ",2121,2122,2131,2132,".indexOf("," + stringAcctC + ",") != -1;
    }
    if (booleanCeditType3) {
      booleanFlag = ",110301,".indexOf("," + stringAcctC + ",") == -1;
    }
    if ("Y".equals(retDoc2M010[0][20].trim())) {
      booleanFlag = false;
    }
    if (booleanFlag) {
      int intPos = 0;
      Vector vectorFactorNoL = new Vector();
      Vector vectorTempL = new Vector();
      String stringTempL = "";
      String stringDeptCDL = "";
      String[] arrayTempL = null;
      for (int intDoc2M030 = 0; intDoc2M030 < retDoc2M013.length; intDoc2M030++) {
        stringReceiptMoneyD = "" + (exeUtil.doParseDouble(retDoc2M013[intDoc2M030][3].trim()) - exeUtil.doParseDouble(retDoc2M013[intDoc2M030][11].trim()));
        stringReceiptMoneyD = convert.FourToFive(stringReceiptMoneyD, 0);
        stringFactorNoL = retDoc2M013[intDoc2M030][0].trim();
        stringDeptCDL = retDoc2M013[intDoc2M030][9].trim();
        //
        // System.out.println(intDoc2M030+"("+stringFactorNoL+")("+retDoc2M013[intDoc2M030].length+")-----------------------------S")
        // ;
        intPos = vectorFactorNoL.indexOf(stringFactorNoL + "%-%" + stringDeptCDL);
        if (intPos == -1) {
          retDoc2M013[intDoc2M030][3] = stringReceiptMoneyD;
          //
          vectorFactorNoL.add(stringFactorNoL + "%-%" + stringDeptCDL);
          vectorTempL.add(retDoc2M013[intDoc2M030]);
          // System.out.println(intDoc2M030+"("+stringFactorNoL+")-----------------------------E")
          // ;
          continue;
        } else {
          arrayTempL = (String[]) vectorTempL.get(intPos);
        }
        System.out.println(intDoc2M030 + "(" + arrayTempL.length + ")-----------------------------E2");
        stringTempL = "" + (exeUtil.doParseDouble(stringReceiptMoneyD) + exeUtil.doParseDouble(arrayTempL[3]));
        arrayTempL[3] = convert.FourToFive(stringTempL, 0);

      }
      retDoc2M013 = (String[][]) vectorTempL.toArray(new String[0][0]);
      stringAcctC = retDoc2M030[0][0].trim();
      //
      booleanMult = true;
      //
      retDoc2M030 = new String[retDoc2M013.length][1];
      for (int intNo = 0; intNo < retDoc2M030.length; intNo++)
        retDoc2M030[intNo][0] = stringAcctC;
    }
    //
    for (int intDoc2M030 = 0; intDoc2M030 < retDoc2M030.length; intDoc2M030++) {
      stringAcctC = retDoc2M030[intDoc2M030][0].trim();
      stringFactorNoL = stringFactoryNoTop1;
      stringDepartNoL = stringInputDepartNo;
      //
      System.out.println("|doubleCostID009(" + doubleCostID009 + ")|booleanMult(" + booleanMult + ")|---------------------------");
      if (booleanCeditType1) {
        // 1 立沖傳票
        if (retDoc5M0224 == null) {
          arrayTable[0] = "訂簽款轉存信託專戶 轉傳票錯誤";
          return 0;
        }
        if (intDoc2M030 > retDoc5M0224.length) {
          arrayTable[0] = "訂簽款轉存信託專戶 傳票對應錯誤";
          return 0;
        }
        stringReceiptMoneyD = retDoc5M0224[intDoc2M030][5].trim();
        stringFactorNoL = retDoc5M0224[intDoc2M030][4].trim();
        String[][] retFED1012 = getFED1012(retDoc5M0224[intDoc2M030][1].trim(), retDoc5M0224[intDoc2M030][2].trim(), retDoc5M0224[intDoc2M030][3].trim(), stringComNo, "0", false);
        // 明細一至明細五
        if (retFED1012.length > 0) {
          stringAcctC = retFED1012[0][1].trim();
          arrayDescription[0] = retFED1012[0][8].trim();
          arrayDescription[1] = retFED1012[0][9].trim();
          arrayDescription[2] = retFED1012[0][10].trim();
          arrayDescription[3] = retFED1012[0][11].trim();
          arrayDescription[4] = retFED1012[0][12].trim();
        }
        System.out.println("[booleanCeditType1(" + booleanCeditType1 + ")stringAcctC(" + stringAcctC + ")stringFactorNoL(" + stringFactorNoL + ")----------------------");
      } else if (booleanMult) {
        // 2. 個人收據
        stringReceiptMoneyD = retDoc2M013[intDoc2M030][3].trim();
        stringFactorNoL = retDoc2M013[intDoc2M030][0].trim();
        stringDepartNoL = retDoc2M013[intDoc2M030][9].trim();
      } else {
        // 3. 付款條件
        if (retDoc2M030.length > 1) {
          if (intDoc2M030 == 0) {
            stringReceiptMoneyD = convert.FourToFive("" + ((doubleReceiptMoney - doubleMailMoney - doubleRetainMoney + doubleCostID009) * doubleRate), 0);
          } else {
            stringReceiptMoneyD = convert.FourToFive("" + (doubleReceiptMoney - doParseDouble(stringReceiptMoneyD) - doubleMailMoney), 0);
          }
        } else {
          stringReceiptMoneyD = convert.FourToFive("" + (doubleReceiptMoney - doubleMailMoney - doubleRetainMoney + doubleCostID009), 0);
        }
        // System.out.println(intDoc2M030+"|doubleReceiptMoney("+doubleReceiptMoney+")----------------------")
        // ;
        System.out.println(intDoc2M030 + "|doubleMailMoney(" + doubleMailMoney + ")----------------------");
        System.out.println(intDoc2M030 + "|doubleRetainMoney(" + doubleRetainMoney + ")----------------------");
        System.out.println(intDoc2M030 + "|doubleCostID009(" + doubleCostID009 + ")----------------------");
        System.out.println(intDoc2M030 + "|stringReceiptMoneyD(" + stringReceiptMoneyD + ")----------------------");
      }
      if (exeUtil.doParseDouble(stringReceiptMoneyD) <= 0) {
        booleanNegative = true;
        continue;
      }
      // 明細一 至 五
      if (!booleanCeditType1) {
        retFED1004 = getFED1004(stringAcctC);
        for (int intNo = 0; intNo < 5; intNo++) {
          arrayDescription[intNo] = "";
          if (intNo >= retFED1004.length)
            continue;
          stringItemCd = retFED1004[intNo][0].trim();
          // 到期日
          if (!booleanLife2153 && "A04".equals(stringItemCd) && !"".equals(stringVoucherYMD014)) {
            int intNoL = (intDoc2M030 + 1);
            if (booleanMult) {
              intNoL = 1;
            }
            arrayDescription[intNo] = getExpiredDateUnion(intNoL, stringAcctC, stringVoucherYMD014, stringPayCondition1, stringPayCondition2, "C", stringComNo, exeUtil);
          }
          if ("E05".equals(stringItemCd))
            arrayDescription[intNo] = "其他";
          if ("110301".equals(stringAcctC) && intNo == 0) {
            if ("Z6".equals(stringComNo)) {
              arrayDescription[intNo] = "12675-0";
              stringFactorNoL = "0095289";
            } else if ("71".equals(stringComNo)) {
              arrayDescription[intNo] = "13187-7";
              stringFactorNoL = "0095289";
            } else if ("72".equals(stringComNo)) {
              arrayDescription[intNo] = "14403-4";
              stringFactorNoL = "0095289";
            } else if ("73".equals(stringComNo)) {
              arrayDescription[intNo] = "15264-3";
              stringFactorNoL = "0095289";
            } else if ("Z4".equals(stringComNo)) {
              arrayDescription[intNo] = "12673-2";
              stringFactorNoL = "0095289";
            } else if ("Z5".equals(stringComNo)) {
              arrayDescription[intNo] = "1561-8";
              stringFactorNoL = "0095289";
            } else if ("20".equals(stringComNo)) {
              arrayDescription[intNo] = "102362";
              stringFactorNoL = "0170077";
            } else if ("00".equals(stringComNo)) {
              arrayDescription[intNo] = "9516-1-00";
              stringFactorNoL = "0095289";
            } else if ("Z3".equals(stringComNo)) {
              arrayDescription[intNo] = "5438-4";
              stringFactorNoL = "0095289";
            } else if ("Z0".equals(stringComNo)) {
              arrayDescription[intNo] = "13188-6";
              stringFactorNoL = "0095289";
            } else if ("10".equals(stringComNo)) {
              arrayDescription[intNo] = "107-0";
              stringFactorNoL = "0095289";
            } else if ("ZD".equals(stringComNo)) {
              arrayDescription[intNo] = "86666000";
              stringFactorNoL = "0095289";
            } else if ("01".equals(stringComNo)) {
              arrayDescription[intNo] = "7978-3";
              stringFactorNoL = "0095289";
            } else if ("76".equals(stringComNo)) {
              arrayDescription[intNo] = "07288200";
              stringFactorNoL = "0095289";
            }
          }
        }
        arrayDescription = doSetBankNo(stringAcctC, stringFactorNoL, arrayDescription);
      }
      //
      // 放入陣列中
      intFlowNo++;
      retDataTemp = new String[27];
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "C"; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
      retDataTemp[3] = "" + (intDoc2M030 + 1); // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "C"; // 借貸 9
      retDataTemp[10] = stringAcctC; // 會計科目 10
      retDataTemp[11] = "110301".equals(stringAcctC) ? "" : stringDepartNoL; // 部門 11
      retDataTemp[12] = stringFactorNoL; // 對象 12
      retDataTemp[13] = stringReceiptMoneyD; // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = arrayDescription[0]; // 明細一 18
      retDataTemp[19] = arrayDescription[1]; // 明細二 19
      retDataTemp[20] = arrayDescription[2]; // 明細三 20
      retDataTemp[21] = arrayDescription[3]; // 明細四 21
      retDataTemp[22] = arrayDescription[4]; // 明細五 22
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 23
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 24
      retDataTemp[26] = "A"; //
      //
      if ("110301".equals(stringAcctC))
        retDataTemp[12] = "0095289";
      //
      if (exeUtil.doParseInteger(stringAccountCount) <= 1) {
        retVector.add(retDataTemp);
      } else {
        // 月數
        System.out.println("stringAccountCount---------------------" + stringAccountCount);
        for (int intCount = 0; intCount < exeUtil.doParseInteger(stringAccountCount); intCount++) {
          arrayTemp = exeUtil.doCopyArray(retDataTemp);
          //
          if (intCount != 0 || doubleReceiptKindBMoneySum > 0) {
            intFlowNo++;
            System.out.println("intFlowNo--------------------[" + intFlowNo + "]");
            stringFlow = "" + intCount;
          } else {
            stringFlow = "";
          }
          arrayTemp[6] = "" + intFlowNo; // 傳票序號 6
          arrayTemp[2] = "C" + stringFlow; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 折讓(稅)-貸H 退保留款-貸I
          // 金額
          doubleMoneySum = exeUtil.doParseDouble(stringReceiptMoneyD);
          doubleMoney = doubleMoneySum / exeUtil.doParseDouble(stringAccountCount);
          doubleMoney = doParseDouble(convert.FourToFive("" + doubleMoney, 0));
          if (intCount == exeUtil.doParseInteger(stringAccountCount) - 1) {
            doubleMoney = doubleMoneySum - doubleMoney * intCount;
          }
          arrayTemp[13] = convert.FourToFive("" + doubleMoney, 0); // 金額 13
          // 到期
          for (int intNo = 0; intNo < 5; intNo++) {
            if (intNo >= retFED1004.length)
              continue;
            stringItemCd = retFED1004[intNo][0].trim();
            // 到期日
            if (!booleanLife2153 && "A04".equals(stringItemCd)) {
              stringDate = arrayTemp[18 + intNo].trim();
              if (!"".equals(stringDate)) {
                if ("0".equals(stringPayCondition1) && intCount != 0 && "11".equals(datetime.getDate(stringDate))) {
                  stringDate = datetime.dateAdd(stringDate, "d", -1);
                }
                stringDate = datetime.dateAdd(stringDate, "m", intCount);
                arrayTemp[18 + intNo] = stringDate;
              }
            }
          }
          //
          retVector.add(arrayTemp);
        }
      }
    }
    arrayTable[0] = booleanNegative ? "Y" : "N";
    arrayTable[1] = booleanMult ? "Y" : "N";
    return intFlowNo;
  }

  public int putCeditForReceipt3(String[][] retDoc2M010, FargloryUtil exeUtil, Vector retVector, String[] arrayTable) throws Throwable {
    String stringVoucherYMD014 = arrayTable[0].trim();
    String stringKind = arrayTable[1].trim();
    String stringStatus = arrayTable[2].trim();
    String stringDescript = arrayTable[3].trim();
    String stringFactoryNoTop1 = arrayTable[4].trim();
    int intFlowNo = exeUtil.doParseInteger(arrayTable[5].trim());
    String stringPurchaseNo = arrayTable[6].trim();
    String stringKindNo = arrayTable[7].trim();
    //
    String stringComNo = retDoc2M010[0][0].trim();
    String stringBarCodeThis = retDoc2M010[0][3].trim();
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringPayCondition1 = retDoc2M010[0][14].trim();
    String stringPayCondition2 = retDoc2M010[0][15].trim();
    String stringVoucherYMD = "";
    String stringVoucherFlowNo = "";
    String stringVoucherSeqNo = "";
    String stringFactoryNo = "";
    String stringDepartNo = "";
    String stringAmt = "";
    String stringSql = "";
    String[] arrayTemp = null;
    String[] retDataTemp = null;
    String[] arrayDescription = new String[6];
    String[][] retDocData = null;
    String[][] retDoc2M014 = null;
    String[][] retFED1012 = null;
    Vector vectorBarCode = new Vector();
    // 請款
    stringSql = " SELECT  DISTINCT  M10.BarCode " + " FROM  Doc2M017 M17,  Doc2M010 M10 " + " WHERE  M10.BarCode  =  M17.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M10.BarCode  <>  '" + stringBarCodeThis + "' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.KindNo  =  '" + stringKindNo + "' "
        + " AND  M17.PurchaseNo  =  '" + stringPurchaseNo + "' " + " AND  M17.FactoryNo  =  '" + stringFactoryNoTop1 + "' " + " ORDER BY  M10.BarCode ";
    retDocData = getTableDataDoc(stringSql);
    for (int intNo = 0; intNo < retDocData.length; intNo++)
      vectorBarCode.add(retDocData[intNo][0].trim());
    // 借款沖銷
    stringSql = " SELECT  DISTINCT  BarCode " + " FROM  Doc6M010 " + " WHERE  UNDERGO_WRITE  <>  'E' " + " AND  KindNo  =  '" + stringKindNo + "' " + " AND  BarCode  <>  '"
        + stringBarCodeThis + "' " + " AND  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' " + " AND  PurchaseNo  =  '" + stringPurchaseNo + "' "
        + " AND  FactoryNo  =  '" + stringFactoryNoTop1 + "' " + " ORDER BY  BarCode ";
    retDocData = getTableDataDoc(stringSql);
    for (int intNo = 0; intNo < retDocData.length; intNo++)
      vectorBarCode.add(retDocData[intNo][0].trim());
    if (vectorBarCode.size() == 0) {
      return intFlowNo;
    }
    for (int intNo = 0; intNo < vectorBarCode.size(); intNo++) {
      stringBarCode = "" + vectorBarCode.get(intNo);
      // 前期傳票 借方-1252
      retDoc2M014 = getDoc2M014(stringBarCode);
      if (retDoc2M014.length == 0) {
        return 0;
      }
      stringVoucherYMD = retDoc2M014[0][4].trim();
      stringVoucherYMD = exeUtil.getDateConvertRoc(stringVoucherYMD).replaceAll("/", "");
      stringVoucherFlowNo = retDoc2M014[0][5].trim();
      retFED1012 = getFED1012ForFED1013(stringVoucherYMD, stringVoucherFlowNo, stringComNo, stringKind, "1252");
      //
      for (int intNoL = 0; intNoL < retFED1012.length; intNoL++) {
        stringVoucherSeqNo = retFED1012[intNoL][6].trim();
        stringDepartNo = retFED1012[intNoL][11].trim();
        stringFactoryNo = retFED1012[intNoL][12].trim();
        stringAmt = retFED1012[intNoL][13].trim();
        arrayDescription[0] = retFED1012[intNoL][18].trim();
        arrayDescription[1] = retFED1012[intNoL][19].trim();
        arrayDescription[2] = retFED1012[intNoL][20].trim();
        arrayDescription[3] = retFED1012[intNoL][21].trim();
        arrayDescription[4] = retFED1012[intNoL][22].trim();
        arrayDescription[5] = retFED1012[intNoL][23].trim();
        //
        intFlowNo++;
        retDataTemp = new String[27];
        retDataTemp[0] = stringBarCodeThis; // 條碼編號 0
        retDataTemp[1] = stringDocNo; // 公文代號 1
        retDataTemp[2] = "01"; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 補充保費Z 折讓(稅)-貸H 退保留款-貸I
        retDataTemp[3] = "" + (intNo + 1); // No 3
        retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
        retDataTemp[5] = "0"; // 傳票流水號 5
        retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
        retDataTemp[7] = stringComNo; // 公司代號 7
        retDataTemp[8] = stringKind; // Kind 8
        retDataTemp[9] = "C"; // 借貸 9
        retDataTemp[10] = "1252"; // 會計科目 10
        retDataTemp[11] = stringDepartNo; // 部門 11
        retDataTemp[12] = stringFactoryNo; // 對象 12
        retDataTemp[13] = convert.FourToFive(stringAmt, 0); // 金額 13
        retDataTemp[14] = "0"; // 匯率 14
        retDataTemp[15] = "0"; // 原類金額 15
        retDataTemp[16] = "0"; // 折讓未稅金額 16
        retDataTemp[17] = stringStatus; // 狀態-未過帳 17
        retDataTemp[18] = arrayDescription[0]; // 明細一 18
        retDataTemp[19] = arrayDescription[1]; // 明細二 19
        retDataTemp[20] = arrayDescription[2]; // 明細三 20
        retDataTemp[21] = arrayDescription[3]; // 明細四 21
        retDataTemp[22] = arrayDescription[4]; // 明細五 22
        retDataTemp[23] = arrayDescription[5]; // 摘要 23
        retDataTemp[24] = getUser(); // 修改者 24
        retDataTemp[25] = stringVoucherYMD + "-" + stringVoucherFlowNo + "-" + stringVoucherSeqNo; // 修改日期 25
        retDataTemp[26] = "A"; //
        //
        retVector.add(retDataTemp);
      }
    }
    //
    return intFlowNo;
  }

  public int putCeditForReceiptDiscount(String[][] retDoc2M010, String[][] retDoc2M011, String[][] retDoc2M015, FargloryUtil exeUtil, Vector retVector, String[] arrayTable)
      throws Throwable {
    String stringVoucherYMD014 = arrayTable[0].trim();
    String stringKind = arrayTable[1].trim();
    String stringStatus = arrayTable[2].trim();
    String stringDescript = arrayTable[3].trim();
    String stringFactoryNoTop1 = arrayTable[4].trim();
    int intFlowNo = exeUtil.doParseInteger(arrayTable[5].trim());
    String stringInputDepartNo = arrayTable[6].trim();
    //
    String stringComNo = retDoc2M010[0][0].trim();
    String stringBarCode = retDoc2M010[0][3].trim();
    String stringDocNo = retDoc2M010[0][4].trim();
    String stringAcctNo = "1264";
    String stringFactoryNo = "";
    //
    String stringInvoiceNo = "";
    String stringInvoiceTotalMoney = "";
    String stringInvoiceKind = "";
    String stringInvoiceDate = "";
    String stringInvoiceTax = "";
    String stringInvoiceMoney = "";
    String stringDiscountName = "";
    String stringDiscountTotalMoney = "";
    String stringDiscountTotalNoTaxMoney = "";
    String[] arrayDescription = new String[5];
    String[] arrayTemp = null;
    String[] retDataTemp = null;
    String[][] retFED1004 = getFED1004(stringAcctNo);
    double doubleDiscountTotalMoneySum = 0;
    double doubleDiscountTotalNoTaxMoneySum = 0;
    double doubleDiscountTax = 0;
    double doubleInvoiceTax = 0;
    double doubleInvoiceTaxThis = 0;
    double doubleInvoiceTotalMoney = 0;
    double doubleInvoiceMoney = 0;
    // 0 FactoryNo 1 InvoiceKind 2 InvoiceDate 3 InvoiceNo 4 InvoiceMoney
    // 5 InvoiceTax 6 InvoiceTotalMoney 7 DeductKind
    for (int intNo = 0; intNo < retDoc2M011.length; intNo++) {
      stringFactoryNo = retDoc2M011[intNo][0].trim();
      stringInvoiceKind = retDoc2M011[intNo][1].trim();
      stringInvoiceDate = retDoc2M011[intNo][2].trim();
      stringInvoiceNo = retDoc2M011[intNo][3].trim();
      stringInvoiceTax = retDoc2M011[intNo][5].trim();
      doubleInvoiceTax = exeUtil.doParseDouble(stringInvoiceTax);
      doubleInvoiceTaxThis = 0;
      //
      if (",G,C,H,X,R,S,".indexOf(stringInvoiceKind) != -1) {
        stringDiscountName = "折讓單24";
      } else {
        stringDiscountName = "折讓單23";
      }
      // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
      // 5 CostID1 6 DiscountMoney 7 RecordNo 8 DiscountNoTaxMoney 9 InvoiceNo
      for (int intNoL = 0; intNoL < retDoc2M015.length; intNoL++) {
        stringDiscountTotalMoney = retDoc2M015[intNoL][6].trim();
        stringDiscountTotalNoTaxMoney = retDoc2M015[intNoL][8].trim();
        doubleDiscountTotalMoneySum = exeUtil.doParseDouble(stringDiscountTotalMoney);
        if (doubleDiscountTotalMoneySum <= 0)
          continue;
        doubleDiscountTotalNoTaxMoneySum = exeUtil.doParseDouble(stringDiscountTotalNoTaxMoney);
        doubleDiscountTax = doubleDiscountTotalMoneySum - doubleDiscountTotalNoTaxMoneySum;
        //
        if (doubleInvoiceTax <= 0)
          break;
        //
        if (doubleDiscountTotalNoTaxMoneySum > 0) {
          retDoc2M015[intNoL][8] = "0";
        }
        //
        if (doubleInvoiceTax > doubleDiscountTax) {
          doubleInvoiceTaxThis += doubleDiscountTax;
          doubleInvoiceTax -= doubleDiscountTax;
          doubleDiscountTax = 0;
          //
          doubleInvoiceMoney += exeUtil.doParseDouble(stringDiscountTotalNoTaxMoney);
          stringInvoiceMoney = convert.FourToFive("" + doubleInvoiceMoney, 0);
          //
          // doubleInvoiceTotalMoney = doubleInvoiceMoney+doubleInvoiceTaxThis ;
          stringInvoiceTotalMoney = convert.FourToFive(stringDiscountTotalMoney, 0);
        } else {
          doubleInvoiceTaxThis += doubleInvoiceTax;
          doubleInvoiceTax = 0;
          doubleDiscountTax -= doubleInvoiceTax;
          //
          doubleInvoiceMoney = doubleInvoiceTaxThis / 0.05;
          stringInvoiceMoney = convert.FourToFive("" + doubleInvoiceMoney, 0);
          doubleInvoiceMoney = exeUtil.doParseDouble(stringInvoiceMoney);
          //
          doubleInvoiceTotalMoney = doubleInvoiceMoney + doubleInvoiceTaxThis;
          stringInvoiceTotalMoney = convert.FourToFive("" + doubleInvoiceTotalMoney, 0);
        }
        //
        retDoc2M015[intNoL][6] = convert.FourToFive("" + doubleDiscountTax, 0);

      }
      // 明細資料處理(預設為 B08、B09、B10、B11、B40，非上述之 ITEM_CD 時，空白處理)
      if (retFED1004.length != 5) {
        stringInvoiceDate = "";
        stringInvoiceNo = "";
        stringInvoiceMoney = "";
        stringInvoiceTotalMoney = "";
        stringInvoiceKind = "";
      } else {
        if (!"B08".equals(retFED1004[0][0].trim()))
          stringInvoiceDate = "";
        if (!"B09".equals(retFED1004[1][0].trim()))
          stringInvoiceNo = "";
        if (!"B10".equals(retFED1004[2][0].trim()))
          stringInvoiceMoney = "";
        if (!"B11".equals(retFED1004[3][0].trim()))
          stringInvoiceTotalMoney = "";
        if (!"B40".equals(retFED1004[4][0].trim()))
          stringDiscountName = "";
      }
      //
      intFlowNo++;
      retDataTemp = new String[27];
      retDataTemp[0] = stringBarCode; // 條碼編號 0
      retDataTemp[1] = stringDocNo; // 公文代號 1
      retDataTemp[2] = "H"; // 發票-借A 費用-借B 貸C 折讓-貨D 郵電-貸E 扣繳-貸F 扣繳-貸G(稅) 補充保費Z 折讓(稅)-貸H 退保留款-貸I
      retDataTemp[3] = "" + (intNo + 1); // No 3
      retDataTemp[4] = stringVoucherYMD014; // 傳票日期 4
      retDataTemp[5] = "0"; // 傳票流水號 5
      retDataTemp[6] = "" + intFlowNo; // 傳票序號 6
      retDataTemp[7] = stringComNo; // 公司代號 7
      retDataTemp[8] = stringKind; // Kind 8
      retDataTemp[9] = "C"; // 借貸 9
      retDataTemp[10] = stringAcctNo; // 會計科目 10
      retDataTemp[11] = stringInputDepartNo; // 部門 11
      retDataTemp[12] = stringFactoryNo; // 對象 12
      retDataTemp[13] = convert.FourToFive("" + doubleInvoiceTaxThis, 0); // 金額 13
      retDataTemp[14] = "0"; // 匯率 14
      retDataTemp[15] = "0"; // 原類金額 15
      retDataTemp[16] = "0"; // 發票稅額 16
      retDataTemp[17] = stringStatus; // 狀態-未過帳 17
      retDataTemp[18] = exeUtil.getDateConvertRoc(stringInvoiceDate).replaceAll("/", ""); // 發票日期 18
      retDataTemp[19] = stringInvoiceNo; // 發票號碼 19
      retDataTemp[20] = stringInvoiceMoney; // 發票未稅金額 20
      retDataTemp[21] = stringInvoiceTotalMoney; // 發票總金額 21
      retDataTemp[22] = stringDiscountName; // 發票格式 22
      retDataTemp[23] = stringDescript; // 摘要 23
      retDataTemp[24] = getUser(); // 修改者 24
      retDataTemp[25] = getToday("yymmdd"); // 修改日期 25
      retDataTemp[26] = "A"; //
      //
      retVector.add(retDataTemp);
    }
    return intFlowNo;
  }

  public String getCostIDNumUnion(String stringCostIDNum) throws Throwable {
    return getCostIDNumUnion("", stringCostIDNum);
  }

  public String getCostIDNumUnion(String stringVoucherYMD014, String stringCostIDNum) throws Throwable {
    return getCostIDNumUnion(stringVoucherYMD014, stringCostIDNum, "", "");
  }

  public String getCostIDNumUnion(String stringVoucherYMD014, String stringCostIDNum, String stringInOut, String stringBarCode) throws Throwable {
    return getCostIDNumNew(stringCostIDNum, stringInOut);
  }

  public String getCostIDNumNew(String stringCostIDNum, String stringInOut) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M0421 = null;
    //
    stringSql = " SELECT  Y10 " + " FROM  Doc2M0421" + " WHERE  CostID  =  '" + stringCostIDNum + "' " + " AND  InOut  =  '" + stringInOut + "' ";
    retDoc2M0421 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M0421.length > 0) {
      return retDoc2M0421[0][0];
    }
    return "";
  }

  public int getDescriptionUnion(String stringComNo, String stringAccountNo, String stringCostID, String stringCostID1, String stringItemCdS, String stringUsedCd,
      String stringPosition, String[] arrayDescription, String[][] retFED1004, FargloryUtil exeUtil) throws Throwable {
    return getDescriptionUnion(stringComNo, stringAccountNo, stringCostID, stringCostID1, stringItemCdS, stringUsedCd, stringPosition, arrayDescription, retFED1004, exeUtil,
        false);
  }

  public int getDescriptionUnion(String stringComNo, String stringAccountNo, String stringCostID, String stringCostID1, String stringItemCdS, String stringUsedCd,
      String stringPosition, String[] arrayDescription, String[][] retFED1004, FargloryUtil exeUtil, boolean boolean033FG) throws Throwable {
    return getDescriptionUnionFinal(stringComNo, stringAccountNo, stringCostID, stringCostID1, stringItemCdS, stringUsedCd, stringPosition, arrayDescription, retFED1004,
        new Vector(), exeUtil, boolean033FG);
  }

  public int getDescriptionUnionFinal(String stringComNo, String stringAccountNo, String stringCostID, String stringCostID1, String stringItemCdS, String stringUsedCd,
      String stringPosition, String[] arrayDescription, String[][] retFED1004, Vector vectorItemCd, FargloryUtil exeUtil, boolean boolean033FG) throws Throwable {
    Hashtable hashtableDescription = new Hashtable();
    return getDescriptionUnionFinal(stringComNo, stringAccountNo, stringCostID, stringCostID1, stringItemCdS, stringUsedCd, stringPosition, arrayDescription, retFED1004,
        vectorItemCd, exeUtil, boolean033FG, hashtableDescription);
  }

  public int getDescriptionUnionFinal(String stringComNo, String stringAccountNo, String stringCostID, String stringCostID1, String stringItemCdS, String stringUsedCd,
      String stringPosition, String[] arrayDescription, String[][] retFED1004, Vector vectorItemCd, FargloryUtil exeUtil, boolean boolean033FG, Hashtable hashtableDescription)
      throws Throwable {
    int intY10 = 0;
    String stringItemCd = "";
    String stringUseName = "";
    String stringCostIDNum = stringCostID + stringCostID1;
    String stringSourceType = "" + hashtableDescription.get("CHECK");
    String[] arrayTemp = null;
    for (int intNo = 0; intNo < arrayDescription.length; intNo++) {
      arrayDescription[intNo] = "";
    }
    for (int intNo = 0; intNo < arrayDescription.length; intNo++) {
      if (intNo < retFED1004.length) {
        stringItemCd = retFED1004[intNo][0].trim();
        //
        if (stringItemCd.equals(stringItemCdS)) {
          arrayDescription[intNo] = getUseName(stringItemCdS, stringUsedCd);
        }
        // 佣金支出
        if ("462".equals(stringItemCd))
          arrayDescription[intNo] = getUseName(stringItemCd, "001"); // "介紹費" ;
        // 憑證項目
        if ("Y09".equals(stringItemCd)) {
          if ("894".equals(stringCostIDNum) || "831".equals(stringCostIDNum)) {
            arrayDescription[intNo] = getUseName(stringItemCd, "03"); // "一般收據" ;
          } else if ("990".equals(stringCostIDNum)) {
            arrayDescription[intNo] = getUseName(stringItemCd, "05"); // "須扣繳通報收據" ;
          }
        }
        if ("Y10".equals(stringItemCd)) {
          intY10 = intNo + 1;
        }
        if (("894".equals(stringCostIDNum) || "831".equals(stringCostIDNum)) && "499".equals(stringItemCd))
          arrayDescription[intNo] = getUseName(stringItemCd, "020"); // "手續費" ;
        //
        if (boolean033FG && "I05".equals(stringItemCd)) {
          String stringTempL = "" + hashtableDescription.get("033FG");
          if ("null".equals(stringTempL))
            stringTempL = "";
          arrayDescription[intNo] = stringTempL;
        }
        //
        for (int intNoL = 0; intNoL < vectorItemCd.size(); intNoL++) {
          arrayTemp = (String[]) vectorItemCd.get(intNoL);
          if (arrayTemp == null)
            continue;
          if (arrayTemp[0].equals(stringItemCd)) {
            if ("".equals(arrayTemp[1])) {
              arrayDescription[intNo] = "";
            } else {
              arrayDescription[intNo] = getUseName(arrayTemp[0], arrayTemp[1]);
            }
          }
        }
        if ("ASSET".equals(stringSourceType)) {
          stringUseName = "" + hashtableDescription.get(stringItemCd);
          if (!"null".equals(stringUseName)) {
            arrayDescription[intNo] = stringUseName;
          }
        }
      }
      if (!"".equals(stringPosition) && !"null".equals(stringPosition)) {
        // 例外
        if (exeUtil.doParseInteger(stringPosition) == (intNo + 1)) {
          arrayDescription[intNo] = getUseName(stringItemCd, stringUsedCd);
        }
      }
      if ("110301".equals(stringAccountNo) && intNo == 0 && "Z6".equals(stringComNo))
        arrayDescription[intNo] = "12675-0";
    }
    return intY10;
  }

  public int doDiscountVoucher(Vector retVector, Vector retDiscountVector, int intFlowNo, double doubleTaxRate, String[][] retDoc2M011, FargloryUtil exeUtil) throws Throwable {
    int intNowPos = retVector.size();
    int intDoc2M011 = 0;
    int intCostIDPos = 0;
    String[] arrayStringInvoiceTax = new String[retDoc2M011.length];
    String stringTemp = "";
    String stringDiscountTotalMoney = "";
    String stringDiscountTotalNoTaxMoney = "";
    String stringRecordNoDoc2M011 = "";
    String stringRecordNoDoc5M010 = "";
    String[] retDataTemp = null;
    String[] arrayTempData = null;
    String[] arrayUse = null;
    String[] arrayTemp = null;
    double doubleDiscountMoney = 0;
    double doubleDiscountTotalMoneySum = 0;
    double doubleDiscountTotalNoTaxMoneySum = 0;
    double doubleDiscountTax = 0;
    double doubleDiscountTotalMoneySumL = 0;
    double doubleDiscountTotalNoTaxMoneySumL = 0;
    double doubleDiscountTaxL = 0;
    double doubleDiscountTotalMoneyUse = 0;
    boolean booleanDiscountFlag = false;
    for (int intDoc2M012 = 0; intDoc2M012 < retDiscountVector.size(); intDoc2M012++) {
      retDataTemp = (String[]) retDiscountVector.get(intDoc2M012);
      if (retDataTemp == null)
        continue;
      stringDiscountTotalMoney = retDataTemp[16];
      stringDiscountTotalNoTaxMoney = retDataTemp[13];
      //
      doubleDiscountTotalMoneySum = exeUtil.doParseDouble(stringDiscountTotalMoney);
      doubleDiscountTotalNoTaxMoneySum = exeUtil.doParseDouble(stringDiscountTotalNoTaxMoney);
      doubleDiscountTax = doubleDiscountTotalMoneySum - doubleDiscountTotalNoTaxMoneySum;
      //
      intFlowNo++;
      retDataTemp[6] = "" + intFlowNo;
      retDataTemp[9] = "C";
      retDataTemp[14] = "0";
      retDataTemp[15] = "0";
      retDataTemp[16] = "0";
      //
      System.out.println("折讓0-----------------------");
      retVector.add(retDataTemp);
      // 發票 A 費用 B 貸 C 折讓 D 郵電 E 2
      // 最後一筆時，主(無折讓金額為零)及副皆新增進項稅額
      // 發票扣完時
      for (int intNo = intDoc2M011; intNo < intNowPos; intNo++) {
        System.out.println(intNo + "折讓(" + intNowPos + ")-----------------------S");
        arrayTemp = exeUtil.doCopyArray((String[]) retVector.get(intNo));
        booleanDiscountFlag = false;
        if (!"A".equals(arrayTemp[2].trim())) {
          if (intDoc2M012 == retDiscountVector.size() - 1 && intNo == intNowPos - 1 && arrayUse != null) {
            intFlowNo++;
            arrayUse[6] = "" + intFlowNo;
            arrayUse[16] = "0";
            retVector.add(arrayUse);
            arrayUse = null;
            System.out.println("折讓1-----------------------");
          }
          continue;
        }
        System.out.println(intNo + "折讓(" + intNowPos + ")-----------------------S1");
        if (doubleDiscountTotalMoneySum == 0) {
          // 如果有資料，則新增進項稅額
          if (intDoc2M012 == retDiscountVector.size() - 1 && arrayUse != null) {
            intFlowNo++;
            arrayUse[6] = "" + intFlowNo;
            arrayUse[16] = "0";
            retVector.add(arrayUse);
            arrayUse = null;
            System.out.println("折讓2-----------------------");
          }
          break;
        }
        System.out.println(intNo + "折讓(1)-----------------------S2");
        // 初始化
        if ("null".equals("" + arrayStringInvoiceTax[intDoc2M011])) {
          arrayStringInvoiceTax[intDoc2M011] = arrayTemp[21].trim(); // 總金額
          System.out.println(intNo + "---" + intDoc2M011 + "------------------" + arrayStringInvoiceTax[intDoc2M011]);
        }
        System.out.println(intNo + "折讓(" + doubleDiscountTotalMoneySum + ")-----------------------");
        System.out.println(intNo + "折讓(" + arrayStringInvoiceTax[intDoc2M011] + ")-----------------------");
        if (doubleDiscountTotalMoneySum > exeUtil.doParseDouble(arrayStringInvoiceTax[intDoc2M011])) {
          // 發票已使用完時，新增進項稅額
          doubleDiscountTotalMoneySumL = exeUtil.doParseDouble(arrayStringInvoiceTax[intDoc2M011]); // 本次折讓金額
          doubleDiscountTotalMoneySumL += doubleDiscountTotalMoneyUse; // 發票之折讓金額累計
          doubleDiscountTotalNoTaxMoneySumL = doubleDiscountTotalMoneySumL / (1 + (doubleTaxRate / 100));
          doubleDiscountTotalNoTaxMoneySumL = exeUtil.doParseDouble(convert.FourToFive("" + doubleDiscountTotalNoTaxMoneySumL, 0));
          doubleDiscountTaxL = doubleDiscountTotalMoneySumL - doubleDiscountTotalNoTaxMoneySumL;
          //
          doubleDiscountTotalMoneySum -= doubleDiscountTotalMoneySumL;
          doubleDiscountTotalNoTaxMoneySum -= doubleDiscountTotalNoTaxMoneySumL;
          //
          arrayStringInvoiceTax[intDoc2M011] = "0";
          booleanDiscountFlag = true;
          doubleDiscountTotalMoneyUse = 0;
          intDoc2M011++;
        } else {
          doubleDiscountTotalMoneyUse += doubleDiscountTotalMoneySum; // 發票之折讓金額累計
          //
          doubleDiscountTotalMoneySumL = doubleDiscountTotalMoneyUse;
          doubleDiscountTotalNoTaxMoneySumL = doubleDiscountTotalNoTaxMoneySum;
          // doubleDiscountTotalNoTaxMoneySumL = doubleDiscountTotalMoneySumL /
          // (1+(doubleTaxRate/100)) ;
          doubleDiscountTotalNoTaxMoneySumL = exeUtil.doParseDouble(convert.FourToFive("" + doubleDiscountTotalNoTaxMoneySumL, 0));
          doubleDiscountTaxL = doubleDiscountTotalMoneySumL - doubleDiscountTotalNoTaxMoneySumL;
          // 可折讓金額
          doubleDiscountTotalMoneySum = 0;
          // 設定該發票仍可折讓金額
          arrayStringInvoiceTax[intDoc2M011] = "" + (exeUtil.doParseDouble(arrayStringInvoiceTax[intDoc2M011]) - doubleDiscountTotalMoneySum);
          arrayStringInvoiceTax[intDoc2M011] = convert.FourToFive(arrayStringInvoiceTax[intDoc2M011], 0);
          // 無下一筆時，新增進項稅額
          if (intDoc2M012 == retDiscountVector.size() - 1 - 1) {
            booleanDiscountFlag = true;
            doubleDiscountTotalMoneyUse = 0;
          }
        }
        if (!arrayTemp[22].startsWith("折讓單")) {
          if ("收銀機收執聯".equals(arrayTemp[22].trim())) {
            arrayTemp[22] = "折讓單24";
          } else if ("收據".equals(arrayTemp[22].trim())) {
            arrayTemp[22] = "折讓單24";
          } else if ("載具號碼25".equals(arrayTemp[22].trim())) {
            arrayTemp[22] = "折讓單24";
          } else if ("載具號碼分攤25".equals(arrayTemp[22].trim())) {
            arrayTemp[22] = "折讓單24";
          } else if ("收據內含稅".equals(arrayTemp[22].trim())) {
            arrayTemp[22] = "折讓單24";
          } else {
            arrayTemp[22] = "折讓單23";
          }
        }
        //
        // 部門、金額、明細三(銷售額)、明細四(銷售總額)
        arrayTemp[2] = "H";
        arrayTemp[3] = stringRecordNoDoc2M011;
        // arrayTemp[6] = ""+intFlowNo ;
        arrayTemp[9] = "C";
        arrayTemp[11] = retDataTemp[11];
        arrayTemp[13] = convert.FourToFive("" + doubleDiscountTaxL, 0); // 稅額
        arrayTemp[16] = stringRecordNoDoc5M010;
        arrayTemp[20] = convert.FourToFive("" + doubleDiscountTotalNoTaxMoneySumL, 0);// 未稅
        arrayTemp[21] = convert.FourToFive("" + doubleDiscountTotalMoneySumL, 0); // 總金額
        // arrayTemp[22] = "折讓" ; // 明細五 22
        arrayUse = arrayTemp;
        System.out.println(intNo + "折讓(" + booleanDiscountFlag + ")-----------------------");
        if (booleanDiscountFlag) {
          intFlowNo++;
          arrayUse[6] = "" + intFlowNo;
          arrayUse[16] = "0";
          retVector.add(arrayUse);
          arrayUse = null;
          System.out.println("折讓3-----------------------");
        }
        System.out.println(intNo + "折讓()-----------------------E");
      }
    }
    return intFlowNo;
  }

  public String[] doCopyArray(String[] arraySource) throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return exeUtil.doCopyArray(arraySource);
  }

  public String[] doSetBankNo(String stringAcctNo, String stringFactoryNo, String[] arrayDescription) throws Throwable {
    if ("2142".indexOf(stringAcctNo) == -1)
      return arrayDescription;
    //
    String[][] retFED1005 = getFED1005(stringFactoryNo);
    //
    if (retFED1005.length == 0)
      return arrayDescription;
    //
    String stringVoucherKind = retFED1005[0][15].trim();
    String stringBankCd = retFED1005[0][16].trim();
    String stringBankNo = retFED1005[0][17].trim();
    if ("3".equals(stringVoucherKind) || "".equals(stringBankCd) || "".equals(stringBankNo))
      return arrayDescription;
    //
    arrayDescription[2] = stringBankCd;
    arrayDescription[3] = stringBankNo;
    return arrayDescription;
  }

  // 到期日
  public String getExpiredDate(int intPosition, String stringAcctNo, String stringVoucherYMD, String stringPayCondition1, String stringPayCondition2, String stringRowType)
      throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return getExpiredDateUnion(intPosition, stringAcctNo, stringVoucherYMD, stringPayCondition1, stringPayCondition2, stringRowType, "", exeUtil);
  }

  public String getExpiredDateUnion(int intPosition, String stringAcctNo, String stringVoucherYMD, String stringPayCondition1, String stringPayCondition2, String stringRowType,
      String stringComNo, FargloryUtil exeUtil) throws Throwable {
    if (",G,Z,".indexOf("," + stringRowType + ",") != -1) {
      intPosition = 1;
    }
    if (intPosition == 2) {
      stringPayCondition1 = stringPayCondition2;

    }
    return getExpiredDateUnion(stringAcctNo, stringVoucherYMD, stringPayCondition1, stringComNo, exeUtil);
  }

  public String getExpiredDateUnion(String stringAcctNo, String stringVoucherYMD, String stringPayCondition, String stringComNo, FargloryUtil exeUtil) throws Throwable {
    if ("".equals(stringVoucherYMD)) {
      System.out.println("getExpiredDateUnion   stringVoucherYMD(" + stringVoucherYMD + ")-----------------------------------");
      return "";
    }
    //
    String stringType = "";
    String stringExpiredDate = "";
    String stringDate = "";
    String stringLastDate = "";
    String stringYear = "";
    String stringMonth = "";
    String stringDay = "";
    String stringTemp = stringVoucherYMD;
    String stringVoucherYMDOld = stringVoucherYMD;
    String[] arrayDate = convert.StringToken(stringVoucherYMD, "/");
    String[][] retDoc7M056 = getTableDataDoc("SELECT  ComNoType  FROM  Doc7M056 WHERE  ComNo  = '" + stringComNo + "' "); // B 營造
    if (arrayDate.length != 3) {
      System.out.println("getExpiredDateUnion   stringVoucherYMD(" + stringVoucherYMD + ")-----------------------------------");
      return "";
    }
    int intLastDay = 0;
    int intDay = exeUtil.doParseInteger(arrayDate[2]);
    int intDayAdd1 = exeUtil.doParseInteger(stringPayCondition);
    int intAddMonth = 0;
    //
    // stringTemp = convert.replace(stringVoucherYMD, "/", "") ;
    // stringTemp = convert.roc2ac(stringTemp) ;
    // stringTemp = convert.FormatedDate(stringTemp, "/") ;
    System.out.println("Holiday_YMD---------------------------" + stringTemp);
    Vector vectorHoliday = new Vector();
    String[][] retHolidayYMD = getTableDataDoc("SELECT  Holiday_YMD  FROM  Doc2M043 WHERE  Holiday_YMD  >= '" + stringTemp + "' ");
    boolean booleanFlag = false;
    //
    for (int intNo = 0; intNo < retHolidayYMD.length; intNo++) {
      stringTemp = retHolidayYMD[intNo][0].trim();
      stringTemp = convert.replace(stringTemp, "/", "");
      stringTemp = convert.ac2roc(stringTemp);
      vectorHoliday.add(stringTemp);
    }
    //
    stringYear = arrayDate[0].trim();
    stringMonth = arrayDate[1].trim();
    stringDay = arrayDate[2].trim();
    System.out.println("stringComNo(" + stringComNo + ")stringAcctNo(" + stringAcctNo + ")---------------------------");
    if ("2258".equals(stringAcctNo.trim()) || "2191".equals(stringAcctNo.trim())) {
      // 月底判斷
      stringDate = datetime.dateAdd(stringYear + stringMonth + "01", "m", 1);
      stringLastDate = datetime.dateAdd(stringDate, "d", -1);
      intLastDay = exeUtil.doParseInteger(datetime.getDate(stringLastDate));
      if ((intLastDay == 31 && intLastDay - intDay < 5) || (intLastDay != 31 && intLastDay - intDay < 4)) {
        // if("200802".equals(stringYear+stringMonth) ||
        // "200802".equals(stringDate.substring(0,6))) {
        // stringVoucherYMD = "970225" ;
        // } else {
        stringVoucherYMD = convert.ac2roc(stringDate.trim().substring(0, 6) + "25");
        // }
      } else {
        // 非月底不作處理
        return stringExpiredDate;
      }
      System.out.println("stringVoucherYMD(" + stringVoucherYMD + ")---------------------------1");
    } else {

      if ("20".equals(stringComNo)) {
        if (intDay >= 1 && intDay <= 10) {
          // 傳票日 01-10 日 以 傳票日之月份 25 日作到期日
          stringVoucherYMD = convert.ac2roc(arrayDate[0] + arrayDate[1] + "25");
        } else {
          // 傳票日 11-31 日 以 傳票日之下一個月份 25 日作到期日
          stringDate = datetime.dateAdd(stringYear + stringMonth + "01", "m", 1);
          stringVoucherYMD = convert.ac2roc(stringDate.trim().substring(0, 6) + "25");
        }
        // return stringVoucherYMD ;
      }
      // 行銷 傳票日2015/01/26~2015/03/10
      stringVoucherYMD = stringYear + stringMonth + stringDay;
      booleanFlag = "C".equals(retDoc7M056[0][0].trim()) && (stringVoucherYMD.compareTo("20150126") >= 0 && stringVoucherYMD.compareTo("20150310") <= 0);
      if (booleanFlag) {
        // 即期3月11日
        if ("0".equals(stringPayCondition))
          return "104/03/11";
        // 30天 3月25日
        if ("30".equals(stringPayCondition))
          return "104/03/25";
        // 60天 4月25日
        if ("60".equals(stringPayCondition))
          return "104/04/25";
      }
      // 營造 2/11~3/10
      booleanFlag = "B".equals(retDoc7M056[0][0].trim()) && (stringVoucherYMD.compareTo("20150211") >= 0 && stringVoucherYMD.compareTo("20150310") <= 0);
      if (booleanFlag) {
        // 即期3月11日
        if ("0".equals(stringPayCondition))
          return "104/03/11";
        // 30天 3月25日
        if ("30".equals(stringPayCondition))
          return "104/03/25";
        // 60天 4月25日
        if ("60".equals(stringPayCondition))
          return "104/04/25";
      }
      // 建設+其他 2/26~3/10
      booleanFlag = (stringVoucherYMD.compareTo("20150216") >= 0 && stringVoucherYMD.compareTo("20150310") <= 0);
      if (booleanFlag) {
        // 即期3月11日
        if ("0".equals(stringPayCondition))
          return "104/03/11";
        // 30天 3月25日
        if ("30".equals(stringPayCondition))
          return "104/03/25";
        // 60天 4月25日
        if ("60".equals(stringPayCondition))
          return "104/04/25";
      }
      if (retDoc7M056.length > 0 && "B".equals(retDoc7M056[0][0].trim())) {
        // 營造
        if (intDay >= 1 && intDay <= 10) {
          // 傳票日 01-10 日 以 傳票日之月份 10 日 作為 到期日起始計算日
          stringVoucherYMD = convert.ac2roc(arrayDate[0] + arrayDate[1] + "10");
        } else if (intDay >= 11 && intDay <= 25) {
          // 傳票日 11-25 日 以 傳票日之月份 25 日 作為 到期日起始計算日
          stringVoucherYMD = convert.ac2roc(arrayDate[0] + arrayDate[1] + "25");
        } else {
          // 傳票日 26-31 日 以 傳票日之下一個月份 10 日 作為 到期日起始計算日
          stringDate = datetime.dateAdd(stringYear + stringMonth + "01", "m", 1);
          stringVoucherYMD = convert.ac2roc(stringDate.trim().substring(0, 6) + "10");
        }
      } else {
        // 非營造
        if (intDay >= 1 && intDay <= 25) {
          // 傳票日 01-25 日 以 傳票日之月份 25 日 作為 到期日起始計算日
          stringVoucherYMD = convert.ac2roc(arrayDate[0] + arrayDate[1] + "25");
        } else {
          // 傳票日 26-31 日 以 傳票日之下一個月份 25 日 作為 到期日起始計算日
          stringDate = datetime.dateAdd(stringYear + stringMonth + "01", "m", 1);
          stringVoucherYMD = convert.ac2roc(stringDate.trim().substring(0, 6) + "25");
        }
      }
      System.out.println("stringVoucherYMD(" + stringVoucherYMD + ")---------------------------2");
    }
    // 付款條件非無999，才須作處理
    if ("000".equals(stringPayCondition)) {
      // 現金
      stringExpiredDate = convert.ac2roc(stringVoucherYMDOld.replaceAll("/", ""));
    } else if (intDayAdd1 != 999) {
      if (intDayAdd1 != 0) {
        // 非即期
        intAddMonth = intDayAdd1 / 30; // 須增加之月數
        intDay = exeUtil.doParseInteger(datetime.getDate(stringVoucherYMD));
        if ((intDayAdd1 % 30) != 0) {
          if (intDay == 10) {
            intDay = 25;
          } else {
            intDay = 10;
            intAddMonth++;
          }
        }
        stringExpiredDate = datetime.dateAdd(stringVoucherYMD, "m", intAddMonth);
        stringExpiredDate = datetime.getYear(stringExpiredDate) + datetime.getMonth(stringExpiredDate) + intDay;
      } else {
        // 即期
        stringVoucherYMD = convert.replace(stringVoucherYMD, "/", "");
        // 特例
        if ("20".equals(stringComNo)) {
          // 不作 加1 及 例假日 處理
          stringExpiredDate = stringVoucherYMD;
        } else {
          stringVoucherYMD = datetime.dateAdd(stringVoucherYMD, "d", 1);
          stringExpiredDate = convert.FormatedDate(stringVoucherYMD, "/");
          // 特例
          // 即期日修正
          String[][] retHolidayYMDL = getTableDataDoc(
              "SELECT  Holiday_YMD_NEW " + " FROM  Doc2M043 " + " WHERE  Holiday_YMD  = '" + exeUtil.getDateConvert(stringExpiredDate) + "' ");
          if (retHolidayYMDL.length > 0 && !"".equals(retHolidayYMDL[0][0].trim())) {
            // 2014 年起 以對照表找到修正後的即期日
            stringExpiredDate = exeUtil.getDateConvertRoc(retHolidayYMDL[0][0].trim());
            System.out.println("stringExpiredDate(" + stringExpiredDate + ")---------------------------OK1");
          } else {
            // 2014 年前 用假日表示，假日則順延一天
            stringTemp = convert.replace(stringExpiredDate, "/", "");
            System.out.println("stringTemp(" + stringTemp + ")---------------------------1");
            for (int intNo = 0; intNo < 30; intNo++) {
              if (vectorHoliday.indexOf(stringTemp) == -1) {
                if (intNo != 0) {
                  stringExpiredDate = convert.FormatedDate(stringTemp, "/");
                }
                break;
              }
              stringTemp = datetime.dateAdd(stringTemp, "d", 1);
            }
            System.out.println("stringExpiredDate(" + stringExpiredDate + ")---------------------------OK2");
          }
        }
      }
    }
    stringExpiredDate = convert.replace(stringExpiredDate, "/", "");
    System.out.println("OK  stringExpiredDate  O--------------" + stringExpiredDate);
    // 105/2/10春節期間所以票期請改為105/2/25。
    String stringExpiredDateAC = exeUtil.getDateConvert(stringExpiredDate);
    if ("2016/02/10".compareTo(stringExpiredDateAC) <= 0 && "2016/02/25".compareTo(stringExpiredDateAC) > 0)
      stringExpiredDate = "105/02/25";
    return stringExpiredDate;
  }

  public double doParseDouble(String stringNum) throws Throwable {
    return (new Farglory.util.FargloryUtil()).doParseDouble(stringNum);
  }

  public int doParseInteger(String stringNum) throws Throwable {
    return (new Farglory.util.FargloryUtil()).doParseInteger(stringNum);
  }

  public String doStringSubstring(String stringObject, int intStart, int intEnd) throws Throwable {
    return (new Farglory.util.FargloryUtil()).doSubstring(stringObject, intStart, intEnd);
  }

  public double getRealMoneyForSpectCostID(String stringInvoiceNo, String stringInvoiceKind, String stringFunction, String stringBarCode) throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return getRealMoneyForSpectCostID(stringInvoiceNo, stringInvoiceKind, stringFunction, stringBarCode, exeUtil);
  }

  public double getRealMoneyForSpectCostID(String stringInvoiceNo, String stringInvoiceKind, String stringFunction, String stringBarCode, FargloryUtil exeUtil) throws Throwable {
    double doubleRealMoney = 0;
    double doubleRealMoneySum = 0;
    // double doubleTaxRate = 0;
    double doubleRetainMoney = 0;
    String stringBarCodeL = "";
    String[][] retDoc2M010 = null;
    String[][] retDoc2M011 = null;
    String[][] retDoc2M012 = null;
    //
    if ("修改".equals(stringFunction)) {
      retDoc2M011 = getBarCodeForDoc2M011(stringInvoiceNo, stringBarCode);
    } else {
      retDoc2M011 = getBarCodeForDoc2M011(stringInvoiceNo, "");
    }
    //
    for (int intNo = 0; intNo < retDoc2M011.length; intNo++) {
      stringBarCodeL = retDoc2M011[intNo][0].trim();
      // 已請款
      // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
      // 5 CostID1 6 RealMoney 7 RealTotalMoney
      retDoc2M012 = getDoc2M012(stringBarCodeL);
      for (int intRow = 0; intRow < retDoc2M012.length; intRow++) {
        doubleRealMoney = exeUtil.doParseDouble(retDoc2M012[intRow][7].trim());
        doubleRealMoneySum += doubleRealMoney;
      }
      // 退保留款
      // 0 ComNo 1 Descript 2 3 BarCode 4 DocNo
      // 5 UNDERGO_WRITE 6 PurchaseNo1 7 PurchaseNo2 8 PurchaseNo3 9 DocNo1
      // 10 DocNo2 11 DocNo3 12 DepartNo 13 RetainMoney
      retDoc2M010 = getDoc2M010(stringBarCodeL);
      doubleRealMoneySum += exeUtil.doParseDouble(retDoc2M010[0][13].trim());
    }
    return doubleRealMoneySum;
  }

  // 請款申請書-轉傳票之表格(當已轉傳票時，資料以FED1012 為主)
  public String[][] getTableDataFromDB(String stringBarCode) throws Throwable {
    return getTableDataFromDB(stringBarCode, "");
  }

  // stringPos START 第 1 個 END 最後一個
  public String[][] getTableDataFromDB(String stringBarCode, String stringPos) throws Throwable {
    String stringVoucherYMD = "";
    String stringVoucherFlowNo = "";
    String stringCompanyCd = "";
    String stringDocNo = "";
    String stringKind = "0";
    String stringTaxType = "";
    String stringSql = "";
    String stringKEY = "";
    String stringKEYL = "";
    String[] arrayTemp = null;
    String[][] retTableData = new String[0][0];
    String[][] retDoc2M014 = getDoc2M014(stringBarCode);
    String[][] retDoc2M0143 = new String[0][0];
    Vector vectorDoc2M014 = new Vector();
    boolean booleanFlag = true;
    //
    if (retDoc2M014.length == 0)
      return retTableData;
    //
    if (!"".equals(stringPos)) {
      stringSql = "SELECT  VOUCHER_YMD,  VOUCHER_FLOW_NO \n" + " FROM  Doc2M0143 \n" + " WHERE  BarCode  =  '" + stringBarCode + "' \n" + " ORDER BY  TEMP_KEY \n";
      retDoc2M0143 = dbDoc.queryFromPool(stringSql);
      if (retDoc2M0143.length > 0) {
        int intPos = "START".equals(stringPos) ? 0 : 1;
        stringVoucherYMD = retDoc2M0143[intPos][0].trim();
        stringVoucherFlowNo = retDoc2M0143[intPos][1].trim();
        stringKEY = stringVoucherYMD + "%-%" + stringVoucherFlowNo;
        booleanFlag = false;
      }
    }
    if (booleanFlag) {
      stringVoucherYMD = retDoc2M014[0][4].trim();
      stringVoucherFlowNo = retDoc2M014[0][5].trim();
      stringKEY = stringVoucherYMD + "%-%" + stringVoucherFlowNo;
    }
    for (int intNo = 0; intNo < retDoc2M014.length; intNo++) {
      stringVoucherYMD = retDoc2M014[intNo][4].trim();
      stringVoucherFlowNo = retDoc2M014[intNo][5].trim();
      stringKEYL = stringVoucherYMD + "%-%" + stringVoucherFlowNo;
      //
      System.out.println("stringKEYL" + stringKEYL + ")----------------------------A");
      if (!stringKEY.equals(stringKEYL))
        continue;
      System.out.println("stringKEYL(" + stringKEYL + ")----------------------------OK");
      //
      vectorDoc2M014.add(retDoc2M014[intNo]);
    }
    retDoc2M014 = (String[][]) vectorDoc2M014.toArray(new String[0][0]);
    if (retDoc2M014.length == 0) {
      return new String[0][0];
    }
    System.out.println("retDoc2M014(" + retDoc2M014.length + ")----------------------------");
    //
    stringDocNo = retDoc2M014[0][1].trim();
    stringVoucherYMD = retDoc2M014[0][4].trim();
    stringVoucherFlowNo = retDoc2M014[0][5].trim();
    stringCompanyCd = retDoc2M014[0][7].trim();
    stringTaxType = retDoc2M014[0][26].trim();
    // 0 空白(BarCode) 1 (空白)DocNo 2 (空白)RowType 3 RecordNo 4 VOUCHER_YMD
    // 5 VOUCHER_FLOW_NO 6 VOUCHER_SEQ_NO 7 COMPANY_CD 8 KIND 9 DB_CR_CD
    // 10 ACCT_NO 11 DEPT_CD 12 OBJECT_CD 13 AMT 14 EXCHANG_AMT
    // 15 MONTEARY 16 ClaimerMoney 17 STATUS_CD 18 DESCRIPTION_1 19 DESCRIPTION_2
    // 20 DESCRIPTION_3 21 DESCRIPTION_4 22 DESCRIPTION_5 23 DESCRIPTION 24
    // LAST_USER
    // 25 LAST_YMD 26 空白
    stringVoucherYMD = convert.replace(stringVoucherYMD, "/", "");
    stringVoucherYMD = convert.ac2roc(stringVoucherYMD);
    retTableData = getFED1012(stringVoucherYMD, stringVoucherFlowNo, stringCompanyCd, stringKind);
    for (int intNo = 0; intNo < retTableData.length; intNo++) {
      retTableData[intNo][0] = stringBarCode;
      retTableData[intNo][1] = stringDocNo;
      retTableData[intNo][17] = "Z";
      retTableData[intNo][26] = stringTaxType;
      if (retTableData.length == retDoc2M014.length) {
        retTableData[intNo][2] = retDoc2M014[intNo][2];
      }
    }
    return retTableData;
  }

  // 扣繳種類
  public Vector getReceiptKind(String stringDepartNo) throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return getReceiptKind(stringDepartNo, exeUtil);
  }

  public Vector getReceiptKind(String stringDepartNo, FargloryUtil exeUtil) throws Throwable {
    Vector vectorReceiptKind = new Vector();
    Vector vectorReceiptKindName = new Vector();
    Vector vectorRet = new Vector();
    Hashtable hashtableReceiptKind = new Hashtable();
    //
    hashtableReceiptKind.put("A", "須通報扣繳收據");
    hashtableReceiptKind.put("B", "須通報收據");
    hashtableReceiptKind.put("C", "小規模及一般");
    hashtableReceiptKind.put("D", "匯款單");
    hashtableReceiptKind.put("E", "各類所得繳款書");
    hashtableReceiptKind.put("F", "手續費收據");
    hashtableReceiptKind.put("G", "利息收據");

    hashtableReceiptKind.put("H", "銀行還款收據");
    hashtableReceiptKind.put("I", "交割憑單");
    hashtableReceiptKind.put("J", "違章案件罰鍰繳款書");

    hashtableReceiptKind.put("L", "基金確認單");
    hashtableReceiptKind.put("M", "營業稅繳款書");
    hashtableReceiptKind.put("N", "政府規費收據");
    hashtableReceiptKind.put("O", "大宗郵資函件");

    hashtableReceiptKind.put("P", "營所稅繳款書");
    hashtableReceiptKind.put("Q", "暫繳營所稅繳款書");
    hashtableReceiptKind.put("R", "銀行印花稅收據");
    hashtableReceiptKind.put("S", "印花稅大額繳款書");
    hashtableReceiptKind.put("T", "汽車牌照稅繳款書");
    hashtableReceiptKind.put("U", "汽車燃料稅繳款書");
    hashtableReceiptKind.put("V", "證交稅單"); // 有稅，3%
    hashtableReceiptKind.put("W", "房屋稅繳款單"); //
    hashtableReceiptKind.put("X", "地價稅繳款單");
    hashtableReceiptKind.put("Y", "健保補充繳款書"); // 2013-07-04 楊信義 因應 二代健保補充保費沖轉
    hashtableReceiptKind.put("1", "免通報");
    hashtableReceiptKind.put("2", "交屋款項明細表"); // 2015-08-04 黃超媺
    hashtableReceiptKind.put("3", "退租賃保證金"); // 2016-03-17 高怡珠
    hashtableReceiptKind.put("4", "退租金"); // 2016-03-17 高怡珠
    // 扣繳格式
    if ("0222,A18C,".indexOf(stringDepartNo) != -1) {
      // 財務科
      vectorReceiptKind.add("A"); // 須通報扣繳收據
      vectorReceiptKind.add("B"); // 須通報收據
      vectorReceiptKind.add("C");
      vectorReceiptKind.add("D");
      vectorReceiptKind.add("F");
      vectorReceiptKind.add("G");
      vectorReceiptKind.add("L");
      vectorReceiptKind.add("M");
      vectorReceiptKind.add("N");
      vectorReceiptKind.add("O");
      vectorReceiptKind.add("H");
      vectorReceiptKind.add("J");
      vectorReceiptKind.add("1");
    } else if ("0223,A18B,".indexOf(stringDepartNo) != -1) {
      // 會計科
      vectorReceiptKind.add("A");
      vectorReceiptKind.add("B");
      vectorReceiptKind.add("C");
      vectorReceiptKind.add("E");
      vectorReceiptKind.add("M");
      vectorReceiptKind.add("P");
      vectorReceiptKind.add("Q");
      vectorReceiptKind.add("J");
      vectorReceiptKind.add("R");
      vectorReceiptKind.add("S");
      vectorReceiptKind.add("1");
    } else if ("0229,A18D,".indexOf(stringDepartNo) != -1) {
      // 財管科
      vectorReceiptKind.add("A");
      vectorReceiptKind.add("B");
      vectorReceiptKind.add("C");
      vectorReceiptKind.add("I");
      vectorReceiptKind.add("N");
      vectorReceiptKind.add("J");
      vectorReceiptKind.add("V");
      vectorReceiptKind.add("1");
    } else if ("023,A17".indexOf(exeUtil.doSubstring(stringDepartNo, 0, 3)) != -1) { // 人總室
      vectorReceiptKind.add("A");
      vectorReceiptKind.add("B");
      vectorReceiptKind.add("C");
      vectorReceiptKind.add("E");
      vectorReceiptKind.add("T");
      vectorReceiptKind.add("U");
      vectorReceiptKind.add("Y");
      vectorReceiptKind.add("1");
    } else if (stringDepartNo.indexOf("Doc5M050") != -1) { // 零用金
      vectorReceiptKind.add("A"); // 須通報扣繳收據
      vectorReceiptKind.add("B"); // 須通報收據
      vectorReceiptKind.add("C"); // 小規模及一般
      vectorReceiptKind.add("D"); // 匯款單
      vectorReceiptKind.add("F"); // 手續費收據
      vectorReceiptKind.add("N"); // 政府規費收據
      vectorReceiptKind.add("O"); // 大宗郵資函件
      vectorReceiptKind.add("1");
    } else {
      vectorReceiptKind.add("A"); // 須通報扣繳收據
      vectorReceiptKind.add("B"); // 須通報收據
      vectorReceiptKind.add("C"); // 小規模及一般
      vectorReceiptKind.add("N"); // 政府規費收據
      vectorReceiptKind.add("R"); // 銀行印花稅收據
      vectorReceiptKind.add("W"); // 房屋稅單繳款書
      vectorReceiptKind.add("X"); // 地價稅單繳款書
      vectorReceiptKind.add("1");
      if ("035,B34".indexOf(exeUtil.doSubstring(stringDepartNo, 0, 3)) != -1) { // 營業部
        vectorReceiptKind.add("2");
      }
      if ("038,B35".indexOf(exeUtil.doSubstring(stringDepartNo, 0, 3)) != -1) { // 不動產
        vectorReceiptKind.add("3"); // 退租賃保證金
        vectorReceiptKind.add("4"); // 退租金
      }
    }
    vectorRet.add(vectorReceiptKind);
    //
    String stringKindNo = "";
    String stringKindName = "";
    for (int intNo = 0; intNo < vectorReceiptKind.size(); intNo++) {
      stringKindNo = "" + vectorReceiptKind.get(intNo);
      stringKindName = "" + hashtableReceiptKind.get(stringKindNo);
      //
      vectorReceiptKindName.add(stringKindName);
    }
    vectorRet.add(vectorReceiptKindName);
    return vectorRet;
  }

  public String getAutoBarCodeFront(String stringComNo, String stringDepartNo, FargloryUtil exeUtil) throws Throwable {
    String stringBarCode = "";
    // 不動產部，以不拘優先給
    if (stringDepartNo.startsWith("038") || stringDepartNo.startsWith("B35")) {
      stringBarCode = getAutoBarCode("", stringDepartNo, exeUtil);
    }
    if ("".equals(stringBarCode)) {
      stringBarCode = getAutoBarCode(stringComNo, stringDepartNo, exeUtil);
    }
    return stringBarCode;
  }

  public String getAutoBarCode(String stringComNo, String stringDepartNo, FargloryUtil exeUtil) throws Throwable {
    int intStart = 0;
    int intEnd = 0;
    int intTemp = 0;
    int intStartNumPos = 0;
    String stringBarCode = "";
    String stringBarCodeStart = "";
    String stringBarCodeEnd = "";
    String stringBarCodeHead = "";
    String stringSql = "";
    String[] arrayBarCode = null;
    String[][] retDoc2M044 = getDoc2M044(stringComNo, stringDepartNo);
    String[][] retBarCode = null;
    Vector vectorBarCode = new Vector();
    //
    for (int intNo = 0; intNo < retDoc2M044.length; intNo++) {
      stringBarCodeStart = retDoc2M044[intNo][0].trim();
      stringBarCodeEnd = retDoc2M044[intNo][1].trim();
      intStartNumPos = getBarCodeStartMum(stringBarCodeStart, exeUtil);
      stringBarCodeHead = exeUtil.doSubstring(stringBarCodeStart, 0, intStartNumPos);
      // 0 BarCodeStart 1 BarCodeEnd
      stringSql = "SELECT  BarCode  FROM  Doc2M010  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
          + "SELECT  BarCode  FROM  Doc5M020  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
          + "SELECT  BarCode  FROM  Doc6M010  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
          + "SELECT  BarCode  FROM  Doc5M030  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
          + "SELECT  BarCode  FROM  Doc3M011  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
          + "SELECT  BarCode  FROM  Doc5M011  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
          + "SELECT  BarCode  FROM  Doc1M030  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
          + "SELECT  BarCode  FROM  Doc5M050  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
          + "SELECT  BarCode  FROM  Doc2M044_AutoBarCode  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'";
      retBarCode = dbDoc.queryFromPool(stringSql);
      if (retBarCode.length == 0) {
        return stringBarCodeStart;
      }
      vectorBarCode = new Vector();
      for (int intNoL = 0; intNoL < retBarCode.length; intNoL++) {
        stringBarCode = retBarCode[intNoL][0].trim();
        if (vectorBarCode.indexOf(stringBarCode) == -1)
          vectorBarCode.add(stringBarCode);
      }
      arrayBarCode = (String[]) vectorBarCode.toArray(new String[0]);
      Arrays.sort(arrayBarCode);
      //
      if (!stringBarCodeStart.equals(arrayBarCode[0].trim())) {
        return stringBarCodeStart;
      }

      intStart = getBarCodeInt(intStartNumPos, arrayBarCode[0], exeUtil);
      intEnd = getBarCodeInt(intStartNumPos, arrayBarCode[arrayBarCode.length - 1], exeUtil);
      System.out.println("intStart(" + intStart + ")(" + arrayBarCode[0] + ")intEnd(" + intEnd + ")(" + arrayBarCode[arrayBarCode.length - 1] + ")arrayBarCode("
          + arrayBarCode.length + ")-----------");
      if ((intEnd - intStart + 1) == arrayBarCode.length) {
        System.out.println("getAutoBarCode-----------中間無缺項");
        if (stringBarCodeEnd.equals(arrayBarCode[arrayBarCode.length - 1])) {
          // 已使用完
          System.out.println("getAutoBarCode-----------已使用完");
          continue;
        }
        intEnd = intEnd + 1;
        stringBarCode = stringBarCodeHead + convert.add0("" + intEnd, "" + (6 - intStartNumPos));
        return stringBarCode;
      } else {
        // System.out.println("getAutoBarCode-----------中間有缺項");
        intStart = getBarCodeInt(intStartNumPos, stringBarCodeStart, exeUtil);
        intEnd = getBarCodeInt(intStartNumPos, stringBarCodeEnd, exeUtil);
        for (int intNoL = intStart; intNoL <= intEnd; intNoL++) {
          // stringBarCode = ""+intNoL ;
          // intTemp = exeUtil.doParseInteger(exeUtil.doSubstring(stringBarCode,0,2)) ;
          // stringBarCode =
          // ((char)intTemp)+exeUtil.doSubstring(stringBarCode,2,stringBarCode.length()) ;
          stringBarCode = stringBarCodeHead + convert.add0("" + intNoL, "" + (6 - intStartNumPos));
          //
          if (vectorBarCode.indexOf(stringBarCode) == -1) {
            return stringBarCode;
          }
        }
      }
    }
    //
    return "";
  }

  public int getBarCodeStartMum(String stringBarCode, FargloryUtil exeUtil) throws Throwable {
    char charWord = 'A';
    char[] arrayChar = stringBarCode.toCharArray();
    //
    if ("".equals(stringBarCode))
      return -1;
    //
    for (int intNo = 0; intNo < arrayChar.length; intNo++) {
      charWord = arrayChar[intNo];
      if (Character.isDigit(charWord)) {
        return intNo;
      }
    }
    return -1;
  }

  // 無紙化自動給號
  public String getNoPageAutoBarCode(String stringBarCode1, FargloryUtil exeUtil) throws Throwable {
    int intStart = 0;
    int intEnd = 0;
    int intTemp = 0;
    int intStartNumPos = 0;
    String stringBarCode = "";
    String stringBarCodeStart = stringBarCode1 + convert.add0("1", "" + (6 - stringBarCode1.length()));
    String stringBarCodeEnd = "";
    String stringSql = "";
    String stringTemp = "";
    String[] arrayBarCode = null;
    String[][] retBarCode = null;
    Vector vectorBarCode = new Vector();
    for (int intNo = 1; intNo <= (6 - stringBarCode1.length()); intNo++) {
      stringTemp += "9";
    }
    stringBarCodeEnd = stringBarCode1 + stringTemp;
    intStartNumPos = getBarCodeStartMum(stringBarCodeEnd, exeUtil);
    //
    stringSql = "SELECT  BarCode  FROM  Doc2M010  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
        + "SELECT  BarCode  FROM  Doc5M020  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
        + "SELECT  BarCode  FROM  Doc6M010  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
        + "SELECT  BarCode  FROM  Doc5M030  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
        + "SELECT  BarCode  FROM  Doc3M011  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
        + "SELECT  BarCode  FROM  Doc5M011  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
        + "SELECT  BarCode  FROM  Doc1M030  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
        + "SELECT  BarCode  FROM  Doc5M050  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
        + "SELECT  BarCode  FROM  Doc2M044_AutoBarCode  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'";
    retBarCode = dbDoc.queryFromPool(stringSql);
    vectorBarCode = new Vector();
    for (int intNoL = 0; intNoL < retBarCode.length; intNoL++) {
      stringBarCode = retBarCode[intNoL][0].trim();
      if (vectorBarCode.indexOf(stringBarCode) == -1)
        vectorBarCode.add(stringBarCode);
    }
    arrayBarCode = (String[]) vectorBarCode.toArray(new String[0]);
    Arrays.sort(arrayBarCode);
    //
    if (arrayBarCode.length == 0)
      return stringBarCodeStart;
    if (!stringBarCodeStart.equals(arrayBarCode[0].trim())) {
      return stringBarCodeStart;
    }
    intStart = getBarCodeInt(intStartNumPos, arrayBarCode[0], exeUtil);
    intEnd = getBarCodeInt(intStartNumPos, arrayBarCode[arrayBarCode.length - 1], exeUtil);
    if ((intEnd - intStart + 1) == arrayBarCode.length) {
      // System.out.println("getAutoBarCode-----------中間無缺項");
      if (stringBarCodeEnd.equals(arrayBarCode[arrayBarCode.length - 1])) {
        // 已使用完
        // System.out.println("getAutoBarCode-----------已使用完");
        return "";
      }
      intEnd = intEnd + 1;
      // stringBarCode = ""+intEnd ;
      // intTemp = exeUtil.doParseInteger(exeUtil.doSubstring(stringBarCode,0,2)) ;
      // stringBarCode =
      // ((char)intTemp)+exeUtil.doSubstring(stringBarCode,2,stringBarCode.length()) ;
      stringBarCode = stringBarCode1 + convert.add0("" + intEnd, "" + (6 - intStartNumPos));
      return stringBarCode;
    } else {
      // System.out.println("getAutoBarCode-----------中間有缺項");
      intStart = getBarCodeInt(intStartNumPos, stringBarCodeStart, exeUtil);
      intEnd = getBarCodeInt(intStartNumPos, stringBarCodeEnd, exeUtil);
      for (int intNoL = intStart; intNoL <= intEnd; intNoL++) {
        // stringBarCode = ""+intNoL ;
        // intTemp = exeUtil.doParseInteger(exeUtil.doSubstring(stringBarCode,0,2)) ;
        // stringBarCode =
        // ((char)intTemp)+exeUtil.doSubstring(stringBarCode,2,stringBarCode.length()) ;
        stringBarCode = stringBarCode1 + convert.add0("" + intNoL, "" + (6 - intStartNumPos));
        //
        if (vectorBarCode.indexOf(stringBarCode) == -1) {
          return stringBarCode;
        }
      }
    }
    return stringBarCode;
  }

  // 土開使用
  public String getAutoBarCode(String stringBarCode1, FargloryUtil exeUtil) throws Throwable {
    int intStart = 0;
    int intEnd = 0;
    int intTemp = 0;
    int intStartNumPos = 0;
    String stringBarCode = "";
    String stringBarCodeStart = stringBarCode1 + "00001";
    String stringBarCodeEnd = stringBarCode1 + "99999";
    String stringSql = "";
    String[] arrayBarCode = null;
    String[][] retBarCode = null;
    Vector vectorBarCode = new Vector();
    //
    intStartNumPos = getBarCodeStartMum(stringBarCodeEnd, exeUtil);
    // 買賣
    stringSql = "SELECT  BarCode  FROM  Doc10M001  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
        + "SELECT  BarCode  FROM  Doc11M001  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
        + "SELECT  BarCode  FROM  Doc1M030  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'" + " UNION "
        + "SELECT  BarCode  FROM  Doc2M044_AutoBarCode  WHERE  BarCode  BETWEEN  '" + stringBarCodeStart + "' AND  '" + stringBarCodeEnd + "'";
    retBarCode = dbDoc.queryFromPool(stringSql);
    vectorBarCode = new Vector();
    for (int intNoL = 0; intNoL < retBarCode.length; intNoL++) {
      stringBarCode = retBarCode[intNoL][0].trim();
      if (vectorBarCode.indexOf(stringBarCode) == -1)
        vectorBarCode.add(stringBarCode);
    }
    arrayBarCode = (String[]) vectorBarCode.toArray(new String[0]);
    Arrays.sort(arrayBarCode);
    //
    if (arrayBarCode.length == 0)
      return stringBarCodeStart;
    if (!stringBarCodeStart.equals(arrayBarCode[0].trim())) {
      return stringBarCodeStart;
    }
    intStart = getBarCodeInt(intStartNumPos, arrayBarCode[0], exeUtil);
    intEnd = getBarCodeInt(intStartNumPos, arrayBarCode[arrayBarCode.length - 1], exeUtil);
    if ((intEnd - intStart + 1) == arrayBarCode.length) {
      // System.out.println("getAutoBarCode-----------中間無缺項");
      if (stringBarCodeEnd.equals(arrayBarCode[arrayBarCode.length - 1])) {
        // 已使用完
        // System.out.println("getAutoBarCode-----------已使用完");
        return "";
      }
      intEnd = intEnd + 1;
      // stringBarCode = ""+intEnd ;
      // intTemp = exeUtil.doParseInteger(exeUtil.doSubstring(stringBarCode,0,2)) ;
      // stringBarCode =
      // ((char)intTemp)+exeUtil.doSubstring(stringBarCode,2,stringBarCode.length()) ;
      stringBarCode = stringBarCode1 + convert.add0("" + intEnd, "" + (6 - intStartNumPos));
      return stringBarCode;
    } else {
      // System.out.println("getAutoBarCode-----------中間有缺項");
      intStart = getBarCodeInt(intStartNumPos, stringBarCodeStart, exeUtil);
      intEnd = getBarCodeInt(intStartNumPos, stringBarCodeEnd, exeUtil);
      for (int intNoL = intStart; intNoL <= intEnd; intNoL++) {
        // stringBarCode = ""+intNoL ;
        // intTemp = exeUtil.doParseInteger(exeUtil.doSubstring(stringBarCode,0,2)) ;
        // stringBarCode =
        // ((char)intTemp)+exeUtil.doSubstring(stringBarCode,2,stringBarCode.length()) ;
        stringBarCode = stringBarCode1 + convert.add0("" + intNoL, "" + (6 - intStartNumPos));
        //
        if (vectorBarCode.indexOf(stringBarCode) == -1) {
          return stringBarCode;
        }
      }
    }
    return stringBarCode;
  }

  public int getBarCodeInt(int intStartNumPos, String stringBarCode, FargloryUtil exeUtil) throws Throwable {
    // int intChar = stringBarCode.charAt(0) ;
    String stringBarCodeRet = exeUtil.doSubstring(stringBarCode, intStartNumPos, stringBarCode.length());
    return exeUtil.doParseInteger(stringBarCodeRet);
  }

  // 公司部門一致檢核判斷，正確回傳 true
  public boolean isExistDepartNoException(String stringDepart, String stringInputDepartNo, String stringCostID, String stringComNo, String stringExistDeptCd, FargloryUtil exeUtil)
      throws Throwable {
    String stringToday = datetime.getToday("YYYYmmdd");
    return isExistDepartNoException(stringToday, stringDepart, stringInputDepartNo, stringCostID, stringComNo, stringExistDeptCd, exeUtil);
  }

  public boolean isExistDepartNoException(String stringCDate, String stringDepartDoc, String stringInputDepartNo, String stringCostID, String stringComNo, String stringExistDeptCd,
      FargloryUtil exeUtil) throws Throwable {
    String stringYYYY = datetime.getYear(stringCDate.replaceAll("/", ""));
    String[][] retDoc7M0331 = getDoc7M0331(stringComNo, stringYYYY, "A", "");

    // if("".equals(stringExistDeptCd)) return true ;
    if (!"".equals(stringComNo) && retDoc7M0331.length == 0)
      return true;
    // 例外回傳 true
    boolean booleanExistDeptCd = false;
    if ("0011".equals(stringDepartDoc) && "12".equals(stringComNo)) {
      // 董事長室 且為 遠雄營造時，例外
      booleanExistDeptCd = true;
    } else if ("0171".equals(stringDepartDoc) && "01".equals(stringComNo)) {
      // 公共事務室 且為 遠雄建設時，例外
      booleanExistDeptCd = true;
      /*
       * } else if("A17B".equals(stringInputDepartNo)) { // 人力資源科 booleanExistDeptCd =
       * true ; } else if("A18C".equals(stringInputDepartNo)) { // 財務科
       * booleanExistDeptCd = true ; } else if(stringCostID.startsWith("F")) { // F 開頭
       * booleanExistDeptCd = true ; } else if(stringCostID.startsWith("A1702")) { //
       * A1702 開頭 booleanExistDeptCd = true ; } else
       * if("A110202,A110302,A110401,A110303,".indexOf(stringCostID) != -1) { //
       * A110202 水費(無繳費期限) // A110302 電費(無繳費期限) // A110401 大樓管理費 // A110303 加班空調費
       * booleanExistDeptCd = true ; } else if("A15A".equals(stringInputDepartNo) &&
       * "A15A,A01A,".indexOf(stringDepartDoc)!=-1) { // 公共事務室A15A booleanExistDeptCd
       * = true ;
       */
    } else {
      booleanExistDeptCd = false;
    }
    if (booleanExistDeptCd)
      return true;
    //
    // if(!stringDepartDoc.startsWith("A18") && !stringDepartDoc.startsWith("022")){
    stringDepartDoc = exeUtil.doSubstring(stringDepartDoc, 0, 3);
    // }
    if (stringExistDeptCd.indexOf(stringDepartDoc) == -1)
      return false;
    return true;
  }

  // booleanSource true 行銷 false 管理費用
  public Vector getKindNoDs(String[][] retDoc2M012, boolean booleanSource, FargloryUtil exeUtil) throws Throwable {
    String stringCostID = "";
    String stringCostID1 = "";
    String stringRealTotalMoney = "";
    String stringKindNoD = "";
    String stringSqlAnd = booleanSource ? "" : " AND LEN(CostID) > 5 ";
    String[] arrayKindNoDValue = { "24-1", "24-2", "24-3", "24-4", "24-5", "24-6" };
    String[] arrayKindNoDView = { "100萬元以上", "20萬元～100萬元", "2萬元～20萬元", "5000元～2萬元", "5000 元以下", "繳交政府機關之費用及零用金撥補" };
    Vector vectorCostID = getDoc2M049(stringSqlAnd);
    Vector retVector = new Vector();
    Vector vectorKindNoDValue = new Vector();
    Vector vectorKindNoDView = new Vector();
    double doubleAmtSum = 0;
    double doubleAmtSumSpec = 0;
    double doubleAmt = 0;
    //
    retVector.add(vectorKindNoDValue);
    retVector.add(vectorKindNoDView);
    //
    for (int intNo = 0; intNo < retDoc2M012.length; intNo++) {
      stringCostID = retDoc2M012[intNo][7].trim();
      stringCostID1 = retDoc2M012[intNo][8].trim();
      stringRealTotalMoney = retDoc2M012[intNo][9].trim();
      //
      if (stringCostID.length() < 5 && vectorCostID.indexOf(stringCostID + stringCostID1) != -1) {
        doubleAmtSumSpec += exeUtil.doParseDouble(stringRealTotalMoney);
      } else {
        doubleAmtSum += exeUtil.doParseDouble(stringRealTotalMoney);
      }
    }
    if (doubleAmtSumSpec == 0 && doubleAmtSum == 0) {
      for (int intNo = 0; intNo < arrayKindNoDValue.length; intNo++) {
        vectorKindNoDValue.add(arrayKindNoDValue[intNo]);
        vectorKindNoDView.add(arrayKindNoDView[intNo]);
      }
      return retVector;
    }
    //
    doubleAmt = doubleAmtSumSpec + doubleAmtSum;
    if (doubleAmt <= 5000) {
      stringKindNoD = "24-5";
    } else if (doubleAmt <= 20000) {
      stringKindNoD = "24-4";
    } else if (doubleAmt <= 200000) {
      stringKindNoD = "24-3";
    } else if (doubleAmt <= 1000000) {
      stringKindNoD = "24-2";
    } else {
      stringKindNoD = "24-1";
    }
    if (doubleAmtSumSpec > doubleAmtSum) {
      stringKindNoD = "24-6";
    }
    vectorKindNoDValue.add(stringKindNoD);
    if (!booleanSource) {
      vectorKindNoDValue.add("24-6");
    }
    //
    for (int intNo = 0; intNo < vectorKindNoDValue.size(); intNo++) {
      stringKindNoD = "" + vectorKindNoDValue.get(intNo);
      for (int intNoL = 0; intNoL < arrayKindNoDValue.length; intNoL++) {
        if (stringKindNoD.equals(arrayKindNoDValue[intNoL].trim())) {
          vectorKindNoDView.add(arrayKindNoDView[intNoL]);
          break;
        }
      }
    }
    return retVector;
  }

  public String getVoucherDepartNo(String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1, FargloryUtil exeUtil) throws Throwable {
    return getVoucherDepartNo(stringInOut, stringDepartNo, stringProjectID, stringProjectID1, "", exeUtil);
  }

  public String getVoucherDepartNo(String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1, String stringType, FargloryUtil exeUtil)
      throws Throwable {
    if (",03365,03335,033622,".indexOf(stringDepartNo + ",") == -1 && !stringDepartNo.startsWith("022")) {
      if (exeUtil.isDigitNum(stringDepartNo)) {
        stringDepartNo = exeUtil.doSubstring(stringDepartNo, 0, 3) + "1";//
      }
    }
    if ("".equals(stringDepartNo)) {
      String[][] retAProject = getTableDataSale(
          "SELECT  ProjectID " + " FROM  A_Project " + " WHERE  Depart  =  8 " + " AND  ProjectID  IN(  '" + stringProjectID + "',  '" + stringProjectID1 + "') ");
      if (retAProject.length > 0) {
        stringDepartNo = "1331";
      } else {
        stringDepartNo = "0331";
      }
    }
    if (stringProjectID1.equals("M51A"))
      stringProjectID1 = "M51";// 特例，此為舊案子，會造成行銷和財務不一致，故程式面修改
    if (stringProjectID1.equals("H51A"))
      stringProjectID1 = "H51";// 特例，此為舊案子，會造成行銷和財務不一致，故程式面修改
    if (stringProjectID1.equals("H52"))
      stringProjectID1 = "H52A";
    if (stringProjectID1.equals("H32"))
      stringProjectID1 = "H32A";//
    if (stringProjectID1.equals("H37"))
      stringProjectID1 = "H37A";//
    if (stringProjectID1.equals("H40"))
      stringProjectID1 = "H40A";//
    if ("0531".equals(stringDepartNo) && stringProjectID1.equals("H42A"))
      stringProjectID1 = "H42";//
    if (stringProjectID1.equals("H50"))
      stringProjectID1 = "H50A";//
    // if(stringProjectID1.equals("E02A")) stringProjectID1 = "E2" ;//
    if (stringProjectID1.equals("XM43"))
      stringProjectID1 = "M43";//
    if (Pattern.matches("033\\d", stringDepartNo) && stringProjectID1.equals("H36A"))
      stringProjectID1 = "H36";
    //
    if ("033MP".equals(stringProjectID1))
      stringDepartNo = stringProjectID1;//
    //
    if ("O".equals(stringInOut)) {
      if ("033MP".equals(stringProjectID1)) {
        stringDepartNo = stringProjectID1;
      } else {
        stringDepartNo = stringDepartNo.substring(0, 3) + stringProjectID1;
      }
    }
    //
    if (stringProjectID.equals("ST"))
      stringDepartNo = "03327";//
    if (stringDepartNo.equals("053M0101D"))
      stringDepartNo = "053M401D";//
    if (stringDepartNo.equals("053M0201D"))
      stringDepartNo = "053M0201";//
    if (stringDepartNo.equals("053H0101D"))
      stringDepartNo = "053H0101";//
    if (stringDepartNo.equals("033XG2"))
      stringDepartNo = "133G2";
    if (stringDepartNo.equals("4111"))
      stringDepartNo = "4110";
    if (stringDepartNo.equals("4121"))
      stringDepartNo = "4120";
    if (stringDepartNo.equals("4171"))
      stringDepartNo = "4170";
    if (stringDepartNo.equals("033OO1A"))
      stringDepartNo = "133O1";
    if (stringDepartNo.equals("133O01A"))
      stringDepartNo = "133O1";
    if (stringDepartNo.equals("033H108GT"))
      stringDepartNo = "033H108A"; // 2017-12-01 B3018
    if (!"A".equals(stringType)) {
      // 2014-09-01 CT 改成 GT 2015-07-25 B1721 停止
      // if(stringDepartNo.equals("033GT")) stringDepartNo = "033H121A"; //2013-09-14
      // 原轉成 033H115A
    }
    return stringDepartNo;
  }

  public String getVoucherDepartNo(String stringInputDepartNo, FargloryUtil exeUtil) throws Throwable {
    char charWord = 'A';
    char[] arrayChar = stringInputDepartNo.toCharArray();
    String stringInOut = "I";
    String stringDepartNo = stringInputDepartNo;
    String stringProjectID1 = "";
    String stringSpecBudget = ",017PR,033FG,033VIP,033CRM,"; // +get("SPEC_BUDGET")+"," ;
    if (stringSpecBudget.indexOf(stringDepartNo) != -1) {
      stringInOut = "I";
    } else if ("033MP".indexOf(stringDepartNo) != -1) {
      stringInOut = "O";
      stringProjectID1 = stringDepartNo;
    } else {
      for (int intNo = 0; intNo < arrayChar.length; intNo++) {
        charWord = arrayChar[intNo];
        if (!Character.isDigit(charWord)) {
          stringInOut = "O";
          stringDepartNo = stringInputDepartNo.substring(0, intNo);
          stringProjectID1 = stringInputDepartNo.substring(intNo);
          break;
        }
      }
    }
    stringInputDepartNo = getVoucherDepartNo(stringInOut, stringDepartNo, stringProjectID1, stringProjectID1, exeUtil);
    return stringInputDepartNo;
  }

  // 2011-04-08 特殊案別修正 修正
  public int getConvertProjectID(int intFlowNo, String stringCostID, String stringCostID1, String[] retDataTemp, String[][] retDoc2M0121, String[][] retDoc2M020,
      FargloryUtil exeUtil, Hashtable hashtableDoc2M041, Vector vectorDoc2M042, Vector retVector) throws Throwable {
    return getConvertProjectID("", intFlowNo, stringCostID, stringCostID1, retDataTemp, retDoc2M0121, retDoc2M020, exeUtil, hashtableDoc2M041, vectorDoc2M042, retVector);
  }

  public int getConvertProjectID(String stringBarCode, int intFlowNo, String stringCostID, String stringCostID1, String[] retDataTemp, String[][] retDoc2M0121,
      String[][] retDoc2M020, FargloryUtil exeUtil, Hashtable hashtableDoc2M041, Vector vectorDoc2M042, Vector retVector) throws Throwable {
    if ("D".equals(retDataTemp[9]))
      intFlowNo--;
    //
    int intY10 = 0;
    String stringRealMoney = "";
    String stringProjectID1 = "";
    String stringItemCd = "";
    String stringUsedCd = "";
    String stringAccountNo = "";
    String stringPosition = "";
    String stringDepartNo = "";
    String stringCostIDNum = stringCostID + stringCostID1;
    String stringComNo = retDataTemp[7];
    String[] retDataTempL = null;
    String[] arrayDescription = { "", "", "", "", "" };
    String[][] retFED1004 = null;
    double doubleThisSum = exeUtil.doParseDouble(retDataTemp[13]);
    double doubleThisSumF = doubleThisSum;
    double doubleMoneySumFinal = 0;
    double doubleThisRealMoney = 0;
    Hashtable hashtableDescription = new Hashtable();
    hashtableDescription.put("033FG", "" + hashtableDoc2M041.get("033FG"));
    // 0 ID 1 BarCode 2 FunctionType 3 ProjectID1 4 RealMoney
    // 5 LAST_USER 6 LAST_YMD
    for (int intNo = 0; intNo < retDoc2M0121.length; intNo++) {
      stringRealMoney = retDoc2M0121[intNo][4].trim();
      doubleMoneySumFinal += exeUtil.doParseDouble(stringRealMoney);
    }
    for (int intNo = 0; intNo < retDoc2M0121.length; intNo++) {
      System.out.println(intNo + "getConvertProjectID--------------------------");
      retDataTempL = exeUtil.doCopyArray(retDataTemp);
      stringProjectID1 = retDoc2M0121[intNo][3].trim();
      stringRealMoney = retDoc2M0121[intNo][4].trim();
      stringItemCd = retDoc2M020[0][2].trim();
      stringUsedCd = retDoc2M020[0][3].trim();
      stringDepartNo = stringProjectID1;
      //
      if (intNo == retDoc2M0121.length - 1) {
        // 最後一筆
        doubleThisRealMoney = doubleThisSum;
      } else {
        doubleThisRealMoney = doubleThisSumF * (exeUtil.doParseDouble(stringRealMoney) / doubleMoneySumFinal);
        doubleThisRealMoney = exeUtil.doParseDouble(convert.FourToFive("" + doubleThisRealMoney, 0));
        doubleThisSum -= doubleThisRealMoney;
      }
      if (doubleThisRealMoney <= 0)
        continue;
      //
      stringDepartNo = stringProjectID1;
      if (",017PR,033FG,".indexOf("," + stringProjectID1 + ",") != -1) {
        stringDepartNo = stringProjectID1;
        stringAccountNo = retDoc2M020[0][1].trim();
      } else if (exeUtil.isDigitNum(stringProjectID1)) {
        stringAccountNo = retDoc2M020[0][0].trim();
        stringDepartNo = stringProjectID1;
      } else {
        stringAccountNo = retDoc2M020[0][1].trim();
        if (!stringProjectID1.startsWith("053")) {
          stringDepartNo = getVoucherDepartNo("O", "", stringProjectID1, stringProjectID1, exeUtil);
        }
      }
      if (stringDepartNo.equals("053M0101D"))
        stringDepartNo = "053M401D";//
      if (stringDepartNo.equals("053M0201D"))
        stringDepartNo = "053M0201";//
      if (stringDepartNo.equals("053H0101D"))
        stringDepartNo = "053H0101";//
      if (stringDepartNo.equals("033XG2"))
        stringDepartNo = "133G2";
      retFED1004 = getFED1004(stringAccountNo);
      // 明細一、明細二、明細三、明細四、明細五 18-22
      stringPosition = ("" + hashtableDoc2M041.get(stringAccountNo)).trim();
      intY10 = getDescriptionUnionFinal(stringComNo, stringAccountNo, stringCostID, stringCostID1, stringItemCd, stringUsedCd, stringPosition, arrayDescription, retFED1004,
          new Vector(), exeUtil, true, hashtableDescription);
      // getDescriptionUnionFinal(stringComNo, stringAccountNo, stringCostID,
      // stringCostID1, stringItemCd, stringUsedCd, stringPosition, arrayDescription,
      // retFED1004, exeUtil, true, hashtableDescription) ;
      //
      intFlowNo++;
      retDataTempL[6] = "" + intFlowNo; // 傳票序號 6
      retDataTempL[10] = stringAccountNo; // 會計科目 10
      retDataTempL[11] = stringDepartNo; // 部門 11
      retDataTempL[13] = convert.FourToFive("" + doubleThisRealMoney, 0); // 金額 13
      retDataTempL[18] = arrayDescription[0]; // 明細一 18
      retDataTempL[19] = arrayDescription[1]; // 明細二 19
      retDataTempL[20] = arrayDescription[2]; // 明細三 20
      retDataTempL[21] = arrayDescription[3]; // 明細四 21
      retDataTempL[22] = arrayDescription[4]; // 明細五 22
      //
      //
      if (intY10 != 0) {
        stringCostIDNum = getCostIDNumUnion("", stringCostIDNum, "O", stringBarCode);
        retDataTempL[17 + intY10] = stringCostIDNum;
      }
      //
      //
      retVector.add(retDataTempL);
    }

    return intFlowNo;
  }

  public String getNewDeptCd(String stringDateAC, String stringUser, FargloryUtil exeUtil) throws Throwable {
    String[][] retFE3D05 = getFE3D05(stringUser);
    if (retFE3D05.length == 0)
      return "";
    String stringDeptCdDoc = retFE3D05[0][0].trim();
    String stringDateRoc = exeUtil.getDateConvertRoc(stringDateAC);
    // 行銷人員
    if (stringDeptCdDoc.startsWith("033") || stringDeptCdDoc.startsWith("053")) {
      String[][] retDoc1Password = getFE3D103(stringUser, "", stringDateRoc);
      if (retDoc1Password.length > 0) {
        stringDeptCdDoc = retDoc1Password[0][0].trim();
      } else {
        if (!"B4533".equals(stringUser)) {
          retDoc1Password = getDoc1Password(stringUser);
          if (retDoc1Password.length > 0) {
            stringDeptCdDoc = retDoc1Password[0][2].trim();
          }
        }
      }
    }
    //
    return getNewDeptCdC(stringDateAC, stringDeptCdDoc, exeUtil);
  }

  public String getNewDeptCdC(String stringDateAC, String stringDeptCdDoc, FargloryUtil exeUtil) throws Throwable {
    String[] arrayDeptCd = getNewDeptCdArray(stringDateAC, stringDeptCdDoc, exeUtil);
    String stringDepartNo1 = arrayDeptCd[0].trim();
    String stringDepartNo2 = arrayDeptCd[1].trim();
    //
    return stringDepartNo1 + stringDepartNo2;
  }

  public String[] getNewDeptCdArray(String stringDateAC, String stringDeptCdDoc, FargloryUtil exeUtil) throws Throwable {
    String[] arrayDeptCd = { "", "" };
    String stringMessageError = "";
    String stringDateRoc = exeUtil.getDateConvertRoc(stringDateAC);
    stringDateAC = exeUtil.getDateConvert(stringDateAC);
    //
    if ("".equals(stringDeptCdDoc))
      return arrayDeptCd;
    // 分離 [內業部室]及[案別]
    String stringDepartNo1 = stringDeptCdDoc;
    String stringDepartNo2 = "";
    for (int intNo = 0; intNo < stringDeptCdDoc.length(); intNo++) {
      if (!Character.isDigit(stringDeptCdDoc.charAt(intNo))) {
        stringDepartNo1 = stringDeptCdDoc.substring(0, intNo);
        stringDepartNo2 = stringDeptCdDoc.substring(intNo);
        break;
      }
    }
    if (stringDepartNo1.startsWith("053"))
      stringDepartNo1 = "0331";
    // 內業
    String stringTemp = getDeptCd("", stringDepartNo1, " AND  LEN(DEPT_CD) =  4"); // 新
    if (stringTemp.length() == 0) {
      stringTemp = getDeptCd("", "", " AND  DEPT_CD_Doc  LIKE  '" + exeUtil.doSubstring(stringDepartNo1, 0, 3) + "%' " + " AND  LEN(DEPT_CD) =  4");
    }
    if (stringTemp.length() == 0) {
      stringMessageError += "內業部門(" + stringDepartNo1 + ") 找不到對應的新部門資料。";
    } else {
      stringDepartNo1 = stringTemp;
    }
    // 案別
    String[][] retProjectID1 = null;
    if (stringDepartNo2.length() > 0) {
      retProjectID1 = getDoc2M010ProjectID1("", "", stringDateAC, " AND  ProjectID1_OLD  LIKE  '" + stringDepartNo2 + "%' ");
      if (retProjectID1.length == 0) {
        // System.out.println("0----------------------");
        if (Character.isDigit(stringDepartNo2.charAt(stringDepartNo2.length() - 1))) {
          stringTemp = stringDepartNo2 + "A";
        } else {
          stringTemp = stringDepartNo2.substring(0, stringDepartNo2.length() - 1);
        }
        retProjectID1 = getDoc2M010ProjectID1("", "", stringDateAC, " AND  ProjectID1_OLD  LIKE  '" + stringTemp + "%' ");
      }
      if (retProjectID1.length == 0) {
        // System.out.println("1----------------------");
        if (stringDepartNo2.endsWith("1")) {
          stringTemp = stringDepartNo2.substring(0, stringDepartNo2.length() - 1) + "A";
          // System.out.println("字尾1----------------------");
          retProjectID1 = getDoc2M010ProjectID1("", "", stringDateAC, " AND  ProjectID1_OLD  LIKE  '" + stringTemp + "%' ");
        }
      }
      if (retProjectID1.length == 0) {
        stringMessageError += "外業案別(" + stringDepartNo2 + ") 找不到對應的新案別資料。";
      } else {
        stringDepartNo2 = retProjectID1[0][0].trim();
      }
    }
    // System.out.println("stringDepartNo1("+stringDepartNo1+")stringDepartNo2("+stringDepartNo2+")-----------------------")
    // ;
    //
    if (!"".equals(stringDepartNo2))
      stringDepartNo1 = exeUtil.doSubstring(stringDepartNo1, 0, 3);
    //
    if ("O61".equals(stringDepartNo2))
      stringDepartNo2 = "O006AA";
    arrayDeptCd[0] = stringDepartNo1;
    arrayDeptCd[1] = stringDepartNo2;
    //
    if (!"".equals(stringMessageError))
      doEMail("部門代碼(新) 錯誤", stringMessageError, exeUtil);
    return arrayDeptCd;
  }

  // 一般使用
  public void doEMail(String stringSubject, String stringContent, FargloryUtil exeUtil) throws Throwable {
    String stringSend = "B3018@farglory.com.tw";
    String[] arrayUser = { stringSend };
    exeUtil.doEMail(stringSubject, stringContent, stringSend, arrayUser);
  }

  // 資料庫 Asset
  public String[][] getTableDataAsset(String stringSql) throws Throwable {
    talk dbAsset = getTalk("" + get("put_Asset"));
    String[][] retTableData = new String[0][0];
    if (!"".equals(stringSql))
      retTableData = dbAsset.queryFromPool(stringSql);
    return retTableData;
  }

  // 資料庫 Doc
  public Vector getColumns(String stringTableName, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.getColumns(stringTableName, dbDoc);
  }

  public void doExecVectorSqlForDoc(Vector vectorSql) throws Throwable {
    if (vectorSql.size() > 0)
      dbDoc.execFromPool((String[]) vectorSql.toArray(new String[0]));
  }

  public String[][] getTableDataDoc(String stringSql) throws Throwable {
    String[][] retTableData = new String[0][0];
    if (!"".equals(stringSql))
      retTableData = dbDoc.queryFromPool(stringSql);
    return retTableData;
  }

  public String getNameUnionDoc(String stringFieldName, String stringTableName, String stringSqlAnd, Hashtable hashtableAnd, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.getNameUnion(stringFieldName, stringTableName, stringSqlAnd, hashtableAnd, dbDoc);
  }

  public double getTableFieldSum(String stringFieldName, String stringTableName, String stringSqlAnd, Hashtable hashtableAnd, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.getTableFieldSum(stringFieldName, stringTableName, stringSqlAnd, hashtableAnd, dbDoc);
  }

  public Vector getQueryDataHashtableDoc(String stringTableName, Hashtable hashtableAnd, String stringSqlAnd, Vector vectorColumnName, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.getQueryDataHashtable(stringTableName, hashtableAnd, stringSqlAnd, vectorColumnName, dbDoc);
  }

  public String doInsertDBDoc(String stringTableName, Hashtable hashtableData, boolean booleanDB, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.doInsertDB(stringTableName, hashtableData, booleanDB, dbDoc);
  }

  public String doUpdateDBDoc(String stringTableName, String stringSqlAnd, Hashtable hashtableData, Hashtable hashtableAnd, boolean booleanDB, FargloryUtil exeUtil)
      throws Throwable {
    return exeUtil.doUpdateDB(stringTableName, stringSqlAnd, hashtableData, hashtableAnd, booleanDB, dbDoc);
  }

  public String doDeleteDBDoc(String stringTableName, Hashtable hashtableAnd, String stringSqlAnd, boolean booleanDB, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.doDeleteDB(stringTableName, hashtableAnd, stringSqlAnd, booleanDB, dbDoc);
  }

  public String getMaxIDUnionDoc(String stringTable, FargloryUtil exeUtil) throws Throwable {
    String stringSql = "";
    String stringID = "1";
    String[][] retDoc2M010 = null;
    double doubleID = 0;
    //
    stringSql = " SELECT  MAX(ID)+1 FROM  " + stringTable + " ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    doubleID = exeUtil.doParseDouble(retDoc2M010[0][0].trim());
    if (doubleID != 0)
      stringID = convert.FourToFive("" + doubleID, 0);
    return stringID;
  }

  // 表格 Doc2M010_ProjectID1
  public boolean isProject1Exist(String stringProjectID1, String stringFirmNo, String stringDate, String stringSqlAnd) throws Throwable {
    return isProject1Exist(stringProjectID1, stringFirmNo, "", stringDate, stringSqlAnd);
  }

  public boolean isProject1Exist(String stringProjectID1, String stringFirmNo, String stringComNo, String stringDate, String stringSqlAnd) throws Throwable {
    String[][] retDoc2M010 = getDoc2M010ProjectID1(stringProjectID1, stringFirmNo, stringComNo, stringDate, stringSqlAnd);
    //
    if (retDoc2M010.length > 0)
      return true;
    //
    return false;
  }

  public String getProject1Old(String stringProjectID1, String stringSqlAnd) throws Throwable {
    return getProject1Old(stringProjectID1, stringSqlAnd, new Hashtable());
  }

  public String getProject1Old(String stringProjectID1, String stringSqlAnd, Hashtable hashtableProject1Old) throws Throwable {
    String stringProjectID1Old = ("" + hashtableProject1Old.get(stringProjectID1)).trim();
    if (!"null".equals(stringProjectID1Old)) {
      return stringProjectID1Old;
    }
    //
    String[][] retDoc2M010 = getDoc2M010ProjectID1(stringProjectID1, "", "", stringSqlAnd);
    //
    if (retDoc2M010.length > 0) {
      stringProjectID1Old = retDoc2M010[0][2].trim();
      hashtableProject1Old.put(stringProjectID1, stringProjectID1Old);
      return stringProjectID1Old;
    }
    //
    hashtableProject1Old.put(stringProjectID1, "");
    return "";
  }

  public String getProject1Name(String stringProjectID1, String stringSqlAnd) throws Throwable {
    String[][] retDoc2M010 = getDoc2M010ProjectID1(stringProjectID1, "", "", stringSqlAnd);
    //
    if (retDoc2M010.length > 0)
      return retDoc2M010[0][1].trim();
    //
    return "";
  }

  public String[][] getDoc2M010ProjectID1(String stringProjectID1, String stringFirmNo, String stringDate, String stringSqlAnd) throws Throwable {
    return getDoc2M010ProjectID1(stringProjectID1, stringFirmNo, "", stringDate, stringSqlAnd);
  }

  public String[][] getDoc2M010ProjectID1(String stringProjectID1, String stringFirmNo, String stringComNo, String stringDate, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    // 0 DProjectID1
    stringSql = " SELECT  ProjectID1,  Descript,  ProjectID1_OLD " + " FROM  Doc2M010_ProjectID1 " + " WHERE  1=1 ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringDate)) {
      stringSql += " AND  DateStart  <=  '" + stringDate + "' " + " AND  DateEnd    >=  '" + stringDate + "' ";
    }
    if (!"".equals(stringFirmNo) || !"".equals(stringComNo)) {
      stringSql += " AND  ProjectID1 IN(SELECT ProjectID1  FROM  Doc2M010_ProjectID1ComNo WHERE  1=1 ";
      if (!"".equals(stringFirmNo))
        stringSql += " AND  FIRM_NO  =  '" + stringFirmNo + "' ";
      if (!"".equals(stringComNo))
        stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
      stringSql += " )";
    }
    stringSql += " " + stringSqlAnd + "ORDER BY  ProjectID1 ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    //
    return retDoc2M010;
  }

  // 表格 City
  public String getCounName(String stringCoun) throws Throwable {
    String stringSql = "";
    String stringCounName = "";
    String[][] retCity = null;
    //
    stringSql = " SELECT  CounName " + " FROM  City " + " WHERE  Coun  =  " + stringCoun + " ";
    retCity = dbDoc.queryFromPool(stringSql);
    if (retCity.length != 0) {
      stringCounName = retCity[0][0].trim();
    }
    return stringCounName;
  }

  public String[][] getTown(String stringCoun, String stringTown, String stringTownName) throws Throwable {
    String stringSql = "";
    String[][] retTown = null;
    // 0 Coun 1 Town 2 TownName
    stringSql = " SELECT  Coun, Town,  TownName " + " FROM  Town " + " WHERE  1  =  1 ";
    if (!"".equals(stringCoun))
      stringSql += " AND  Coun  =  " + stringCoun + " ";
    if (!"".equals(stringTown))
      stringSql += " AND  Town  =  " + stringTown + " ";
    if (!"".equals(stringTownName))
      stringSql += " AND  TownName  LIKE  '%" + stringTownName + "%' ";
    stringSql += " ORDER BY  Coun,  Town ";
    retTown = dbDoc.queryFromPool(stringSql);
    return retTown;
  }

  // 表格 Doc1About
  public String getMaxRecordNo(String stringPostDate, Farglory.util.FargloryUtil exeUtil) throws Throwable {
    String stringMaxRecordNo = "1";
    String stringSql = "";
    String[][] retDoc1About = null;
    Vector vectorBarCOdeFirstChar = new Vector();
    //
    stringSql = " SELECT  MAX(RecordNo) " + " FROM  Doc1About " + " WHERE  PostDate  =  '" + stringPostDate + "' ";
    ;
    retDoc1About = dbDoc.queryFromPool(stringSql);
    System.out.println("Doc1About-------getMaxRecordNo-------------------" + stringSql);
    if (retDoc1About.length > 0)
      stringMaxRecordNo = "" + (exeUtil.doParseDouble(retDoc1About[0][0].trim()) + 1);
    return stringMaxRecordNo;
  }

  public String doInsertDoc1About(String stringPostDate, String stringNo, String stringNews, String stringPostMan) throws Throwable {
    String stringSql = "";
    //
    stringSql = " INSERT  INTO  Doc1About(PostDate,               RecordNo,      News,              PostMan) " + " VALUES( '" + stringPostDate + "' , " + stringNo + " , '"
        + stringNews + "', '" + stringPostMan + "' )  ";
    dbDoc.execFromPool(stringSql);
    System.out.println("Doc1About-------doInsertDoc1About-------------------" + stringSql);
    return stringSql;
  }

  // 表格 Doc1H010
  public Vector getBarCodeFirstChar() throws Throwable {
    String stringSql = "";
    String[][] retDoc1H010 = null;
    Vector vectorBarCOdeFirstChar = new Vector();
    //
    stringSql = " SELECT  HeadCode " + " FROM  Doc1H010 " + " WHERE  Used  =  'Y' ";
    retDoc1H010 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc1H010.length; intNo++) {
      vectorBarCOdeFirstChar.add(retDoc1H010[intNo][0].trim());
    }
    return vectorBarCOdeFirstChar;
  }

  // 表格 Doc1M011
  public String getKindDay(String stringKindNo) throws Throwable {
    String stringSql = "";
    String stringKindDay = "";
    String[][] retDoc1M010 = null;
    //
    stringSql = " SELECT  KindDay " + " FROM  Doc1M011 " + " WHERE  KindNo  =  '" + stringKindNo + "' ";
    retDoc1M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc1M010.length != 0) {
      stringKindDay = retDoc1M010[0][0].trim();
    }
    return stringKindDay;
  }

  // 表格 Doc1M030
  public String[][] getDoc1M030(String stringComNo, String stringDepartNo, String stringStartDate, String stringEndDate) throws Throwable {
    String stringSql = "";
    String stringKindNo = "24";
    String[][] retDoc1M030 = null;
    //
    if ("Z6".equals(stringComNo))
      stringComNo = "06";
    if ("ZA".equals(stringComNo))
      stringComNo = "Z7";
    if ("20".equals(stringComNo))
      stringComNo = "2O";
    if ("75".equals(stringComNo))
      stringComNo = "74";
    if ("AA".equals(stringComNo))
      stringComNo = "20";
    if ("CS".equals(stringComNo))
      stringComNo = "20";
    // 0 CDate 1 DocNo1 2 DocNo2 3 DocNo3 4 Descript
    // 5 EmployeeNo 6 BarCode 7 RealMoney 8 CostID
    stringSql = "SELECT  CDate,       DocNo1,   DocNo2,     DocNo3,  Descript, " + " EmployeeNo,  BarCode,  RealMoney,  CostID " + " FROM  Doc1M030 b " + " WHERE  DepartNo  =  '"
        + stringDepartNo + "' " + " AND  CDate  >=  '" + stringStartDate + "' " + " AND  CDate  <=  '" + stringEndDate + "' " + " AND  KindNo =  '" + stringKindNo + "' "
        + " AND  ComNo =  '" + stringComNo + "' " + " AND  BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc6M010) " + "ORDER BY  DocNo1,  DocNo2,  DocNo3 ";
    retDoc1M030 = dbDoc.queryFromPool(stringSql);
    return retDoc1M030;
  }

  public String[][] getAllDoc1M030(String stringComNo, String stringDepartNo, String stringEmployeeNo, String stringDateS, String stringDateE) throws Throwable {
    String stringSql = "";
    String stringKindNo = "24";
    String stringComNo30 = stringComNo;
    String[][] retDoc1M030 = null;
    //
    if ("Z6".equals(stringComNo))
      stringComNo30 = "06";
    if ("ZA".equals(stringComNo))
      stringComNo30 = "Z7";
    if ("20".equals(stringComNo))
      stringComNo30 = "2O";
    if ("75".equals(stringComNo))
      stringComNo30 = "74";
    if ("AA".equals(stringComNo))
      stringComNo30 = "20";
    if ("CS".equals(stringComNo))
      stringComNo30 = "20";
    // 0 CDate 1 DocNo1 2 DocNo2 3 DocNo3 4 Descript
    // 5 EmployeeNo 6 BarCode 7 RealMoney 8 CostID
    stringSql = "SELECT  CDate,       DocNo1,   DocNo2,     DocNo3,  Descript, " + " EmployeeNo,  BarCode,  RealMoney,  CostID " + " FROM  Doc1M030 " + " WHERE  1=1 "
        + " AND  KindNo =  '" + stringKindNo + "' " + " AND  ComNo =  '" + stringComNo30 + "' " + " AND  BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc6M010) "
        + " AND  BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc2M010) ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringEmployeeNo))
      stringSql += " AND  EmployeeNo  =  '" + stringEmployeeNo + "' ";
    if (!"".equals(stringDateS))
      stringSql += " AND  DocNo2  >=  '" + stringDateS + "' ";
    if (!"".equals(stringDateE))
      stringSql += " AND  DocNo2  <=  '" + stringDateE + "' ";
    stringSql += " UNION " + "SELECT  CDate,             DocNo1,    DocNo2,        DocNo3,  Descript, " + " EmployeeNo,  BarCode, "
        + " (SELECT  SUM(RealTotalMoney)  FROM  Doc2M012  WHERE  ID = a.ID), " +
        /*
         * " AND RecordNo = (SELECT  Min(RecordNo) " + " FROM  Doc2M012 " +
         * " WHERE  ID  =  a.ID)), " +
         */
        "(SELECT  CostID " + " FROM  Doc2M012 " + " WHERE  ID                 =  a.ID " + " AND  RecordNo  =  (SELECT  MIN(RecordNo) " + " FROM  Doc2M012 "
        + " WHERE  ID  =  a.ID)) " + " FROM  Doc2M010 a " + " WHERE  1=1 " + " AND  KindNo =  '" + stringKindNo + "' " + " AND  ComNo =  '" + stringComNo + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringEmployeeNo))
      stringSql += " AND  EmployeeNo  =  '" + stringEmployeeNo + "' ";
    if (!"".equals(stringDateS))
      stringSql += " AND  DocNo2  >=  '" + stringDateS + "' ";
    if (!"".equals(stringDateE))
      stringSql += " AND  DocNo2  <=  '" + stringDateE + "' ";
    stringSql += " UNION " + "SELECT  CDate,             DocNo1,    DocNo2,        DocNo3,  Descript, " + " EmployeeNo,  BarCode, "
        + " (SELECT  SUM(RealTotalMoney)  FROM  Doc6M012  WHERE  ID = b.ID), " + "(SELECT  CostID " + " FROM  Doc6M012 " + " WHERE  ID        =  b.ID "
        + " AND  RecordNo  =  (SELECT  MIN(RecordNo) " + " FROM  Doc6M012 " + " WHERE  ID  =  b.ID)) " + " FROM  Doc6M010 b " + " WHERE  1=1" + " AND  KindNo =  '" + stringKindNo
        + "' " + " AND  ComNo =  '" + stringComNo + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringEmployeeNo))
      stringSql += " AND  EmployeeNo  =  '" + stringEmployeeNo + "' ";
    if (!"".equals(stringDateS))
      stringSql += " AND  DocNo2  >=  '" + stringDateS + "' ";
    if (!"".equals(stringDateE))
      stringSql += " AND  DocNo2  <=  '" + stringDateE + "' ";
    stringSql += "ORDER BY  DocNo1,  DocNo2,  DocNo3 ";
    retDoc1M030 = dbDoc.queryFromPool(stringSql);
    return retDoc1M030;
  }

  public String[][] getDoc1M030ForPurchase(String stringComNo, String stringDepartNo, String stringEmployeeNo, String stringDateS, String stringDateE) throws Throwable {
    String stringSql = "";
    String stringKindNo = "17";
    String stringComNo30 = stringComNo;
    String[][] retDoc1M030 = null;
    //
    if ("Z6".equals(stringComNo))
      stringComNo30 = "06";
    if ("ZA".equals(stringComNo))
      stringComNo30 = "Z7";
    if ("20".equals(stringComNo))
      stringComNo30 = "2O";
    if ("75".equals(stringComNo))
      stringComNo30 = "74";
    if ("AA".equals(stringComNo))
      stringComNo30 = "20";
    if ("CS".equals(stringComNo))
      stringComNo30 = "20";
    // 0 CDate 1 DocNo1 2 DocNo2 3 DocNo3 4 Descript
    // 5 EmployeeNo 6 BarCode 7 RealMoney 8 CostID
    stringSql = "SELECT  CDate,       DocNo1,   DocNo2,     DocNo3,  Descript, " + " EmployeeNo,  BarCode,  RealMoney,  CostID,  0 " + " FROM  Doc1M030 " + " WHERE  1=1 "
        + " AND  KindNo =  '" + stringKindNo + "' " + " AND  ComNo =  '" + stringComNo30 + "' " + " AND  BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc3M011) ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringEmployeeNo))
      stringSql += " AND  EmployeeNo  =  '" + stringEmployeeNo + "' ";
    if (!"".equals(stringDateS))
      stringSql += " AND  DocNo2  >=  '" + stringDateS + "' ";
    if (!"".equals(stringDateE))
      stringSql += " AND  DocNo2  <=  '" + stringDateE + "' ";
    stringSql += " UNION " + "SELECT  CDate,       DocNo1,    DocNo2,        DocNo3,  Descript, " + " EmployeeNo,  BarCode,  "
        + " (SELECT  SUM(PurchaseMoney)  FROM  Doc3M012  WHERE  ID = a.ID), " +
        /*
         * " AND RecordNo = (SELECT  Min(RecordNo) " + " FROM  Doc3M012 " +
         * " WHERE  ID  =  a.ID)), " +
         */
        "(SELECT  CostID " + " FROM  Doc3M012 " + " WHERE  ID                 =  a.ID " + " AND  RecordNo  =  (SELECT  MIN(RecordNo) " + " FROM  Doc3M012 "
        + " WHERE  ID  =  a.ID)), " + " (SELECT  SUM(ApplyMoney)  FROM  Doc3M012  WHERE  ID = a.ID) " +
        /*
         * " AND RecordNo = (SELECT  Min(RecordNo) " + " FROM  Doc3M012 " +
         * " WHERE  ID  =  a.ID)) " +
         */
        " FROM  Doc3M011 a " + " WHERE  1=1 " + " AND  KindNo =  '" + stringKindNo + "' " + " AND  ComNo =  '" + stringComNo + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringEmployeeNo))
      stringSql += " AND  EmployeeNo  =  '" + stringEmployeeNo + "' ";
    if (!"".equals(stringDateS))
      stringSql += " AND  DocNo2  >=  '" + stringDateS + "' ";
    if (!"".equals(stringDateE))
      stringSql += " AND  DocNo2  <=  '" + stringDateE + "' ";
    stringSql += "ORDER BY  DocNo1,  DocNo2,  DocNo3 ";
    retDoc1M030 = dbDoc.queryFromPool(stringSql);
    return retDoc1M030;
  }

  public String[][] getDoc1M030(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc1M030 = null;
    // 0 BarCode 1 ComNo 2 DocNo1 3 DocNo2 4 DocNo3 5 KindNo
    // 6 DocStatus
    stringSql = " SELECT  BarCode,  ComNo,  DocNo1,    DocNo2,        DocNo3,  KindNo, " + " DocStatus " + " FROM  Doc1M030 " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc1M030 = dbDoc.queryFromPool(stringSql);
    return retDoc1M030;
  }

  public String[][] getDoc1M030(String stringDocNo1, String stringDocNo2, String stringDocNo3, String stringKindNo, String stringComNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc1M030 = null;
    //
    if ("Z6".equals(stringComNo))
      stringComNo = "06";
    if ("ZA".equals(stringComNo))
      stringComNo = "Z7";
    if ("20".equals(stringComNo))
      stringComNo = "2O";
    if ("75".equals(stringComNo))
      stringComNo = "74";
    if ("AA".equals(stringComNo))
      stringComNo = "20";
    if ("CS".equals(stringComNo))
      stringComNo = "20";
    //
    stringSql = "SELECT  BarCode " + " FROM  Doc1M030 " + " WHERE  DocNo1  =  '" + stringDocNo1 + "' " + " AND  DocNo2  =  '" + stringDocNo2 + "' " + " AND  DocNo3  =  '"
        + stringDocNo3 + "' " + " AND  KindNo  =  '" + stringKindNo + "' " + " AND  ComNo  =  '" + stringComNo + "' ";
    retDoc1M030 = dbDoc.queryFromPool(stringSql);
    return retDoc1M030;
  }

  public String[][] getSelectDoc1M030(String stringBarCode, String stringDepartNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc1M030 = null;
    // 0 BarCode 1 CDate 2 CTime 3 EDateTime 4 PreFinDate
    // 5 KindNo 6 ComNo, 7 DepartNo, 8 EmployeeNo, 9 DocNo1
    // 10 DocNo2, 11 DocNo3, 12 DocNo, 13 Descript, 14 OriEmployeeName
    // 15 LastDepart 16 LastDateTime, 17 InOut, 18 ProjectID, 19 ProjectID1,
    // 20 CostID, 21 RealMoney, 22 Remark 23 RecordNo 24 DocClose
    // 25 Hand 26 DocStatus
    stringSql = " SELECT  BarCode,                 CDate,              CTime,                 EDateTime,         PreFinDate, "
        + " KindNo,                  ComNo,              DepartNo,              EmployeeNo,        DocNo1,  "
        + " DocNo2,                  DocNo3,             DocNo,                 Descript,          OriEmployeeName, "
        + " LastDepart,              LastDateTime,       InOut,                 ProjectID,         ProjectID1,  "
        + " CostID,                  RealMoney,          Remark,                RecordNo,          DocClose,  " + " Hand,                    DocStatus  " + " FROM  Doc1M030 "
        + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    retDoc1M030 = dbDoc.queryFromPool(stringSql);
    return retDoc1M030;
  }

  public String doInsertDoc1M030(String stringBarCode, String stringCDate, String stringCTime, String stringEDateTime, String stringPreFinDate, String stringKindNo,
      String stringComNo, String stringDepartNo, String stringEmployeeNo, String stringDocNo1, String stringDocNo2, String stringDocNo3, String stringDocNo, String stringDescript,
      String stringOriEmployeeName, String stringLastDepart, String stringLastDateTime, String stringInOut, String stringProjectID, String stringProjectID1, String stringCostID,
      String stringRealMoney, String stringRemark, String stringRecordNo) throws Throwable {
    return doInsertDoc1M030(stringBarCode, stringCDate, stringCTime, stringEDateTime, stringPreFinDate, stringKindNo, stringComNo, stringDepartNo, stringEmployeeNo, stringDocNo1,
        stringDocNo2, stringDocNo3, stringDocNo, stringDescript, stringOriEmployeeName, stringLastDepart, stringLastDateTime, stringInOut, stringProjectID, stringProjectID1,
        stringCostID, stringRealMoney, stringRemark, stringRecordNo, "");
  }

  public String doInsertDoc1M030(String stringBarCode, String stringCDate, String stringCTime, String stringEDateTime, String stringPreFinDate, String stringKindNo,
      String stringComNo, String stringDepartNo, String stringEmployeeNo, String stringDocNo1, String stringDocNo2, String stringDocNo3, String stringDocNo, String stringDescript,
      String stringOriEmployeeName, String stringLastDepart, String stringLastDateTime, String stringInOut, String stringProjectID, String stringProjectID1, String stringCostID,
      String stringRealMoney, String stringRemark, String stringRecordNo, String stringKindNoD) throws Throwable {
    String stringSql = "";
    //
    if ("Z6".equals(stringComNo))
      stringComNo = "06";
    if ("ZA".equals(stringComNo))
      stringComNo = "Z7";
    if ("20".equals(stringComNo))
      stringComNo = "2O";
    if ("75".equals(stringComNo))
      stringComNo = "74";
    if ("AA".equals(stringComNo))
      stringComNo = "20";
    if ("CS".equals(stringComNo))
      stringComNo = "20";
    //
    stringSql = "INSERT  Doc1M030  (BarCode,          CDate,        CTime,         EDateTime,   PreFinDate, "
        + " KindNo,           ComNo,        DepartNo,      EmployeeNo,  DocNo1, " + " DocNo2,           DocNo3,       DocNo,         DocClose,    Descript, "
        + " OriEmployeeName,  LastDepart,   LastDateTime,  InOut,       Depart, " + " ProjectID,        ProjectID1,   CostID,        RealMoney,   Remark, "
        + " Hand,             RecordNo,     DocStatus,     KindNoD,     DocSpeed) " + " VALUES ( '" + stringBarCode + "', " + //
        " '" + stringCDate + "', " + " '" + stringCTime + "', " + " '" + stringEDateTime + "', " + " '" + stringPreFinDate + "', " + " '" + stringKindNo + "', " + //
        " '" + stringComNo + "', " + " '" + stringDepartNo + "', " + " '" + stringEmployeeNo + "', " + " '" + stringDocNo1 + "', " + " '" + stringDocNo2 + "', " + //
        " '" + stringDocNo3 + "', " + " '" + stringDocNo + "', " + " '" + "N" + "', " + " '" + stringDescript + "', " + " '" + stringOriEmployeeName + "', " + //
        " '" + stringLastDepart + "', " + " '" + stringLastDateTime + "', ";
    if ("".equals(stringInOut))
      stringSql += " null, ";
    else
      stringSql += " '" + stringInOut + "', ";
    stringSql += " '" + "0" + "', ";
    if ("".equals(stringProjectID))
      stringSql += " null, ";
    else
      stringSql += " '" + stringProjectID + "', ";
    if ("".equals(stringProjectID1))
      stringSql += " null, ";
    else
      stringSql += " '" + stringProjectID1 + "', ";
    if ("".equals(stringCostID))
      stringSql += " null, ";
    else
      stringSql += " '" + stringCostID + "', ";
    if ("".equals(stringRealMoney))
      stringSql += " null, ";
    else
      stringSql += "  " + stringRealMoney + ", ";
    if ("".equals(stringRemark))
      stringSql += " null, ";
    else
      stringSql += " '" + stringRemark + "', ";
    stringSql += " '" + "N" + "', " + " " + stringRecordNo + ",  " + " '" + "1" + "', " + " '" + stringKindNoD + "', " + "  " + "0" + ") ";
    // System.out.println("doInsertDoc1M030---------------------"+stringSql) ;
    dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String doUpdateDoc1M030(String stringDescript, String stringBarCode, boolean booleanDB) throws Throwable {
    String stringSql = "";
    //
    stringSql = "UPDATE  Doc1M030 " + " SET  Descript  =  '" + stringDescript + "' " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    //
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String doUpdateDoc1M030(String stringBarCode, String stringComNo, String stringOriEmployeeName, String stringDescript, String stringPreFinDate, String stringInOut,
      String stringProjectID, String stringProjectID1, String stringCostID, String stringRealMoney, String stringRemark, String stringLastDateTime, String stringDocNo1,
      String stringDocNo2, String stringDocNo3, String stringDocNo, String stringDepartNo, String stringBarCodeOld) throws Throwable {
    return doUpdateDoc1M030(stringBarCode, stringComNo, stringOriEmployeeName, stringDescript, stringPreFinDate, stringInOut, stringProjectID, stringProjectID1, stringCostID,
        stringRealMoney, stringRemark, stringLastDateTime, stringDocNo1, stringDocNo2, stringDocNo3, stringDocNo, stringDepartNo, stringBarCodeOld, "");
  }

  public String doUpdateDoc1M030(String stringBarCode, String stringComNo, String stringOriEmployeeName, String stringDescript, String stringPreFinDate, String stringInOut,
      String stringProjectID, String stringProjectID1, String stringCostID, String stringRealMoney, String stringRemark, String stringLastDateTime, String stringDocNo1,
      String stringDocNo2, String stringDocNo3, String stringDocNo, String stringBarCodeOld) throws Throwable {
    return doUpdateDoc1M030(stringBarCode, stringComNo, stringOriEmployeeName, stringDescript, stringPreFinDate, stringInOut, stringProjectID, stringProjectID1, stringCostID,
        stringRealMoney, stringRemark, stringLastDateTime, stringDocNo1, stringDocNo2, stringDocNo3, stringDocNo, "", stringBarCodeOld, "");
  }

  public String doUpdateDoc1M030(String stringBarCode, String stringComNo, String stringOriEmployeeName, String stringDescript, String stringPreFinDate, String stringInOut,
      String stringProjectID, String stringProjectID1, String stringCostID, String stringRealMoney, String stringRemark, String stringLastDateTime, String stringDocNo1,
      String stringDocNo2, String stringDocNo3, String stringDocNo, String stringDepartNo, String stringBarCodeOld, String stringKindNoD) throws Throwable {
    String stringSql = "";
    //
    if ("Z6".equals(stringComNo))
      stringComNo = "06";
    if ("ZA".equals(stringComNo))
      stringComNo = "Z7";
    if ("20".equals(stringComNo))
      stringComNo = "2O";
    if ("75".equals(stringComNo))
      stringComNo = "74";
    if ("AA".equals(stringComNo))
      stringComNo = "20";
    if ("CS".equals(stringComNo))
      stringComNo = "20";
    //
    stringSql = "UPDATE  Doc1M030 " + " SET  ComNo  =  '" + stringComNo + "', " + " OriEmployeeName  =  '" + stringOriEmployeeName + "', " + " PreFinDate  =  '" + stringPreFinDate
        + "', " + " Descript  =  '" + stringDescript + "', ";
    if (!"".equals(stringKindNoD))
      stringSql += " KindNoD  =  '" + stringKindNoD + "', ";
    if (!"".equals(stringInOut))
      stringSql += " InOut  =  '" + stringInOut + "', ";
    if (!"".equals(stringProjectID))
      stringSql += " ProjectID  =  '" + stringProjectID + "', ";
    if (!"".equals(stringProjectID1))
      stringSql += " ProjectID1  =  '" + stringProjectID1 + "', ";
    if (!"".equals(stringCostID))
      stringSql += " CostID  =  '" + stringCostID + "', ";
    if (!"".equals(stringRealMoney))
      stringSql += " RealMoney  =  " + stringRealMoney + ", ";
    if (!"".equals(stringRemark))
      stringSql += " Remark  =  '" + stringRemark + "', ";
    if (!"".equals(stringBarCode))
      stringSql += " BarCode  =  '" + stringBarCode + "', ";
    if (!"".equals(stringDocNo))
      stringSql += " DocNo  =  '" + stringDocNo + "', ";
    if (!"".equals(stringDocNo1))
      stringSql += " DocNo1  =  '" + stringDocNo1 + "', ";
    if (!"".equals(stringDocNo2))
      stringSql += " DocNo2  =  '" + stringDocNo2 + "', ";
    if (!"".equals(stringDocNo3))
      stringSql += " DocNo3  =  '" + stringDocNo3 + "', ";
    if (!"".equals(stringDepartNo))
      stringSql += " DepartNo = '" + stringDepartNo + "', ";
    stringSql += " LastDateTime  =  '" + stringLastDateTime + "' " + " WHERE  BarCode  =  '" + stringBarCodeOld + "' ";
    // System.out.println("doInsertDoc1M030---------------------"+stringSql) ;
    dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String doDeleteDoc1M030(String stringBarCode) throws Throwable {
    return doDeleteDoc1M0302(stringBarCode, "");
  }

  public String doDeleteDoc1M0302(String stringBarCode, String stringComNo) throws Throwable {
    String stringSql = "";
    //
    if ("Z6".equals(stringComNo))
      stringComNo = "06";
    if ("ZA".equals(stringComNo))
      stringComNo = "Z7";
    if ("20".equals(stringComNo))
      stringComNo = "2O";
    if ("75".equals(stringComNo))
      stringComNo = "74";
    if ("AA".equals(stringComNo))
      stringComNo = "20";
    if ("CS".equals(stringComNo))
      stringComNo = "20";
    //
    stringSql = "DELETE  Doc1M030 " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    // System.out.println("doDeleteDoc1M030---------------------"+stringSql) ;
    dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String doDeleteDoc1M030(String stringBarCode, String stringDepartNo) throws Throwable {
    return doDeleteDoc1M030(stringBarCode, stringDepartNo, "");
  }

  public String doDeleteDoc1M030(String stringBarCode, String stringDepartNo, String stringComNo) throws Throwable {
    String stringSql = "";
    //
    if ("Z6".equals(stringComNo))
      stringComNo = "06";
    if ("ZA".equals(stringComNo))
      stringComNo = "Z7";
    if ("20".equals(stringComNo))
      stringComNo = "2O";
    if ("75".equals(stringComNo))
      stringComNo = "74";
    if ("AA".equals(stringComNo))
      stringComNo = "20";
    if ("CS".equals(stringComNo))
      stringComNo = "20";
    //
    stringSql = "DELETE  Doc1M030 " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    // System.out.println("doDeleteDoc1M030---------------------"+stringSql) ;
    dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public void doInsertDoc1M030Test(String stringBarCode, String stringCDate, String stringCTime, String stringEDateTime, String stringPreFinDate, String stringKindNo,
      String stringComNo, String stringDepartNo, String stringEmployeeNo, String stringDocNo1, String stringDocNo2, String stringDocNo3, String stringDocNo, String stringDescript,
      String stringOriEmployeeName, String stringLastDepart, String stringLastDateTime, String stringInOut, String stringProjectID, String stringProjectID1, String stringCostID,
      String stringRealMoney, String stringRemark, String stringRecordNo, String stringDocClose, String stringHand, String stringDocStatus, String stringDepartNoOld,
      String stringLastUser, String stringLastDate) throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  Doc1M030_Test  (BarCode,          CDate,        CTime,         EDateTime,    PreFinDate, "
        + " KindNo,           ComNo,        DepartNo,      EmployeeNo,   DocNo1, " + " DocNo2,           DocNo3,       DocNo,         DocClose,     Descript, "
        + " OriEmployeeName,  LastDepart,   LastDateTime,  InOut,        Depart, " + " ProjectID,        ProjectID1,   CostID,        RealMoney,    Remark, "
        + " Hand,             RecordNo,     DocStatus,     DepartNoOld,  LastUser, " + " LastDate) " + " VALUES ( '" + stringBarCode + "', " + //
        " '" + stringCDate + "', " + " '" + stringCTime + "', " + " '" + stringEDateTime + "', " + " '" + stringPreFinDate + "', " + " '" + stringKindNo + "', " + //
        " '" + stringComNo + "', " + " '" + stringDepartNo + "', " + " '" + stringEmployeeNo + "', " + " '" + stringDocNo1 + "', " + " '" + stringDocNo2 + "', " + //
        " '" + stringDocNo3 + "', " + " '" + stringDocNo + "', " + " '" + stringDocClose + "', " + " '" + stringDescript + "', " + " '" + stringOriEmployeeName + "', " + //
        " '" + stringLastDepart + "', " + " '" + stringLastDateTime + "', ";
    if ("".equals(stringInOut))
      stringSql += " null, ";
    else
      stringSql += " '" + stringInOut + "', ";
    stringSql += " '" + "0" + "', ";
    if ("".equals(stringProjectID))
      stringSql += " null, ";
    else
      stringSql += " '" + stringProjectID + "', ";
    if ("".equals(stringProjectID1))
      stringSql += " null, ";
    else
      stringSql += " '" + stringProjectID1 + "', ";
    if ("".equals(stringCostID))
      stringSql += " null, ";
    else
      stringSql += " '" + stringCostID + "', ";
    if ("".equals(stringRealMoney))
      stringSql += " null, ";
    else
      stringSql += "  " + stringRealMoney + ", ";
    if ("".equals(stringRemark))
      stringSql += " null, ";
    else
      stringSql += " '" + stringRemark + "', ";
    stringSql += " '" + stringHand + "', ";
    if ("".equals(stringRecordNo))
      stringSql += " null, ";
    else
      stringSql += " " + stringRecordNo + ", ";
    stringSql += " " + stringDocStatus + ", " + " '" + stringDepartNoOld + "'   , " + " '" + stringLastUser + "', " + " '" + stringLastDate + "') ";
    // System.out.println("doInsertDoc1M030---------------------"+stringSql) ;
    dbDoc.execFromPool(stringSql);
  }

  // 公文代碼存在檢核，存在 false，不存在 true。
  public boolean isExistDocNoCheck(String stringDocNo1, String stringDocNo2, String stringDocNo3, String stringKindNo, String stringComNo, String stringBarCode) throws Throwable {
    return isExistDocNoCheck(stringDocNo1, stringDocNo2, stringDocNo3, stringKindNo, stringComNo, stringBarCode, "ABCD");
  }

  public boolean isExistDocNoCheck(String stringDocNo1, String stringDocNo2, String stringDocNo3, String stringKindNo, String stringComNo, String stringBarCode,
      String sringCheckType) throws Throwable {
    return isExistDocNoCheck(stringDocNo1, "", stringDocNo2, stringDocNo3, stringKindNo, stringComNo, stringBarCode, sringCheckType);
  }

  public boolean isExistDocNoCheck(String stringDocNo11, String stringDocNo12, String stringDocNo2, String stringDocNo3, String stringKindNo, String stringComNo,
      String stringBarCode, String sringCheckType) throws Throwable {
    String stringSql = "";
    String stringDocNo11Doc = stringDocNo11;
    String stringDocNo12Doc = stringDocNo12;
    String[][] retDoc2M010 = null;
    String[][] retDoc3M010 = null;
    String[][] retDoc6M010 = null;
    String[][] retDoc1M030 = null;
    // 請款 A
    if (sringCheckType.indexOf("A") != -1 && "24".equals(stringKindNo)) {
      stringSql = "SELECT  BarCode " + " FROM  Doc2M010 " + " WHERE  DocNo1  =  '" + stringDocNo11Doc + stringDocNo12Doc + "' " + " AND  DocNo2  =  '" + stringDocNo2 + "' "
          + " AND  DocNo3  =  '" + stringDocNo3 + "' " + " AND  KindNo  =  '" + stringKindNo + "' " + " AND  BarCode  <>  '" + stringBarCode + "' " + " AND  ComNo  =  '"
          + stringComNo + "' ";
      retDoc2M010 = dbDoc.queryFromPool(stringSql);
      if (retDoc2M010.length != 0) {
        for (int intNo = 0; intNo < retDoc2M010.length; intNo++)
          System.out.println("------------------------與 Doc2M010 之 BarCode 重複 " + retDoc2M010[intNo][0]);
        return false;
      }
      stringSql = "SELECT  BarCode " + " FROM  Doc5M020 " + " WHERE  DepartNo1 = '" + stringDocNo11 + "' " + " AND  ISNULL(DepartNo2,'') = '" + stringDocNo12 + "' "
          + " AND  DocNo2  =  '" + stringDocNo2 + "' " + " AND  DocNo3  =  '" + stringDocNo3 + "' " + " AND  KindNo  =  '" + stringKindNo + "' " + " AND  BarCode  <>  '"
          + stringBarCode + "' " + " AND  ComNo  =  '" + stringComNo + "' ";
      retDoc2M010 = dbDoc.queryFromPool(stringSql);
      if (retDoc2M010.length != 0) {
        for (int intNo = 0; intNo < retDoc2M010.length; intNo++)
          System.out.println("------------------------與 Doc5M020 之 BarCode 重複 " + retDoc2M010[intNo][0]);
        return false;
      }
    }
    // 借款
    if (sringCheckType.indexOf("B") != -1 && !"17".equals(stringKindNo)) {
      stringSql = "SELECT  BarCode " + " FROM  Doc6M010 " + " WHERE  DocNo1  =  '" + stringDocNo11Doc + stringDocNo12Doc + "' " + " AND  DocNo2  =  '" + stringDocNo2 + "' "
          + " AND  DocNo3  =  '" + stringDocNo3 + "' " + " AND  KindNo  =  '" + stringKindNo + "' " + " AND  BarCode  <>  '" + stringBarCode + "' " + " AND  ComNo  =  '"
          + stringComNo + "' ";
      retDoc6M010 = dbDoc.queryFromPool(stringSql);
      if (retDoc6M010.length != 0) {
        for (int intNo = 0; intNo < retDoc6M010.length; intNo++)
          System.out.println("------------------------與 Doc6M010 之 BarCode 重複 " + retDoc6M010[intNo][0]);
        return false;
      }
      stringSql = "SELECT  BarCode " + " FROM  Doc5M030 " + " WHERE  DepartNo1 = '" + stringDocNo11 + "' " + " AND  ISNULL(DepartNo2,'') = '" + stringDocNo12 + "' "
          + " AND  DocNo2  =  '" + stringDocNo2 + "' " + " AND  DocNo3  =  '" + stringDocNo3 + "' " + " AND  KindNo  =  '" + stringKindNo + "' " + " AND  BarCode  <>  '"
          + stringBarCode + "' " + " AND  ComNo  =  '" + stringComNo + "' ";
      retDoc6M010 = dbDoc.queryFromPool(stringSql);
      if (retDoc6M010.length != 0) {
        for (int intNo = 0; intNo < retDoc6M010.length; intNo++)
          System.out.println("------------------------與 Doc5M030 之 BarCode 重複 " + retDoc6M010[intNo][0]);
        return false;
      }
    }
    // 請購
    if (sringCheckType.indexOf("C") != -1 && "17".equals(stringKindNo)) {
      stringSql = "SELECT  BarCode " + " FROM  Doc3M011 " + " WHERE  DocNo1  =  '" + stringDocNo11Doc + stringDocNo12Doc + "' " + " AND  DocNo2  =  '" + stringDocNo2 + "' "
          + " AND  DocNo3  =  '" + stringDocNo3 + "' " + " AND  KindNo  =  '" + stringKindNo + "' " + " AND  BarCode  <>  '" + stringBarCode + "' " + " AND  ComNo  =  '"
          + stringComNo + "' ";
      retDoc3M010 = dbDoc.queryFromPool(stringSql);
      if (retDoc3M010.length != 0) {
        for (int intNo = 0; intNo < retDoc3M010.length; intNo++)
          System.out.println("------------------------與 Doc3M011 之 BarCode 重複 " + retDoc3M010[intNo][0]);
        return false;
      }
      stringSql = "SELECT  BarCode " + " FROM  Doc5M011 " + " WHERE  DepartNo1 = '" + stringDocNo11 + "' " + " AND  ISNULL(DepartNo2,'') = '" + stringDocNo12 + "' "
          + " AND  DocNo2  =  '" + stringDocNo2 + "' " + " AND  DocNo3  =  '" + stringDocNo3 + "' " + " AND  KindNo  =  '" + stringKindNo + "' " + " AND  BarCode  <>  '"
          + stringBarCode + "' " + " AND  ComNo  =  '" + stringComNo + "' ";
      retDoc3M010 = dbDoc.queryFromPool(stringSql);
      if (retDoc3M010.length != 0) {
        for (int intNo = 0; intNo < retDoc3M010.length; intNo++)
          System.out.println("------------------------與 Doc5M011 之 BarCode 重複 " + retDoc3M010[intNo][0]);
        return false;
      }
    }
    // 支出證明單
    /*
     * if("25".equals(stringKindNo)) { stringSql = "SELECT  BarCode " +
     * " FROM  Doc5M050 " + " WHERE  DepartNo1 = '" + stringDocNo11 + "' " +
     * " AND  ISNULL(DepartNo2,'') = '" + stringDocNo12 + "' " +
     * " AND  DocNo2  =  '" + stringDocNo2 + "' " + " AND  DocNo3  =  '" +
     * stringDocNo3 + "' " + " AND  KindNo  =  '" + stringKindNo + "' " +
     * " AND  BarCode  <>  '" + stringBarCode + "' " + " AND  ComNo  =  '" +
     * stringComNo + "' " ; retDoc3M010 = dbDoc.queryFromPool(stringSql) ;
     * if(retDoc3M010.length != 0) { for(int intNo=0 ; intNo<retDoc3M010.length ;
     * intNo++)
     * System.out.println("------------------------與 Doc5M050 之 BarCode 重複 "
     * +retDoc3M010[intNo][0]) ; return false ; } }
     */
    // 公文
    if ("Z6".equals(stringComNo))
      stringComNo = "06";
    if ("ZA".equals(stringComNo))
      stringComNo = "Z7";
    if ("20".equals(stringComNo))
      stringComNo = "2O";
    if ("75".equals(stringComNo))
      stringComNo = "74";
    if ("AA".equals(stringComNo))
      stringComNo = "20";
    if ("CS".equals(stringComNo))
      stringComNo = "20";
    //
    //
    if (sringCheckType.indexOf("D") != -1) {
      stringSql = "SELECT  BarCode " + " FROM  Doc1M030 " + " WHERE  DocStatus  <>  '5' " + " AND  DocNo1  =  '" + stringDocNo11Doc + stringDocNo12Doc + "' " + " AND  DocNo2  =  '"
          + stringDocNo2 + "' " + " AND  DocNo3  =  '" + stringDocNo3 + "' " + " AND  KindNo  =  '" + stringKindNo + "' " + " AND  BarCode  <>  '" + stringBarCode + "' "
          + " AND  ComNo  =  '" + stringComNo + "' ";
      retDoc1M030 = dbDoc.queryFromPool(stringSql);
      if (retDoc1M030.length != 0) {
        for (int intNo = 0; intNo < retDoc1M030.length; intNo++)
          System.out.println("------------------------與 Doc1M030 之 BarCode 重複 " + retDoc1M030[intNo][0]);
        return false;
      }
    }
    return true;
  }

  // DocNo3
  public String getDocNo3Max(String stringComNo, String stringKindNo, String stringDocNo1, String stringDocNo2) throws Throwable {
    return getDocNo3Max(stringComNo, stringKindNo, stringDocNo1, "", stringDocNo2, "A", "");
  }

  public String getDocNo3Max(String stringComNo, String stringKindNo, String stringDocNo1, String stringDocNo2, String stringType) throws Throwable {
    return getDocNo3Max(stringComNo, stringKindNo, stringDocNo1, "", stringDocNo2, stringType, "");
  }

  public String getDocNo3Max(String stringComNo, String stringKindNo, String stringDocNo11, String stringDocNo12, String stringDocNo2, String stringType) throws Throwable {
    return getDocNo3Max(stringComNo, stringKindNo, stringDocNo11, stringDocNo12, stringDocNo2, stringType, "");
  }

  public String getDocNo3Max(String stringComNo, String stringKindNo, String stringDocNo11, String stringDocNo12, String stringDocNo2, String stringType, String stringSqlAnd)
      throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return getDocNo3Max(stringComNo, stringKindNo, stringDocNo11, stringDocNo12, stringDocNo2, stringType, stringSqlAnd, exeUtil);
  }

  public String getDocNo3Max(String stringComNo, String stringKindNo, String stringDocNo11, String stringDocNo12, String stringDocNo2, String stringType, String stringSqlAnd,
      FargloryUtil exeUtil) throws Throwable {
    String stringSql = "";
    String stringDocNo3Max = "001";
    String stringDocNo3Max2 = "001";
    String[][] retDoc2M010 = null;
    String[][] retDoc3M010 = null;
    String[][] retDoc5M060 = null;
    String[][] retDoc6M010 = null;
    String[][] retDoc1M030 = null;
    //
    if ("B".equals(stringType) && "".equals(stringDocNo12)) {
      stringDocNo11 = exeUtil.doSubstring(stringDocNo11, 0, 3);
    } else {
      stringType = "A";
    }
    // 請款
    if ("24".equals(stringKindNo)) {
      stringSql = "SELECT  MAX(DocNo3) " + " FROM  Doc2M010 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' ";
      if ("B".equals(stringType)) {
        stringSql += " AND  (DocNo1  LIKE  '023%'  OR  DocNo1  LIKE  'A17%') ";
      } else {
        stringSql += " AND  DocNo1  =  '" + stringDocNo11 + stringDocNo12 + "' ";
      }
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' " + stringSqlAnd;

      retDoc2M010 = dbDoc.queryFromPool(stringSql);
      for (int intDoc2M010 = 0; intDoc2M010 < retDoc2M010.length; intDoc2M010++) {
        stringDocNo3Max = convert.add0("" + (exeUtil.doParseInteger(retDoc2M010[intDoc2M010][0]) + 1), "3");
      }
      stringSql = "SELECT  MAX(DocNo3) " + " FROM  Doc5M020 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' ";
      if ("B".equals(stringType)) {
        stringSql += " AND  (DocNo1  LIKE  '023%'  OR  DocNo1  LIKE  'A17%') ";
      } else {
        stringSql += " AND  DepartNo1  =  '" + stringDocNo11 + "' ";
      }
      stringSql += " AND  ISNULL(DepartNo2,'')  =  '" + stringDocNo12 + "' ";
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' " + stringSqlAnd;
      retDoc2M010 = dbDoc.queryFromPool(stringSql);
      for (int intDoc2M010 = 0; intDoc2M010 < retDoc2M010.length; intDoc2M010++) {
        stringDocNo3Max2 = convert.add0("" + (exeUtil.doParseInteger(retDoc2M010[intDoc2M010][0]) + 1), "3");
      }
      if (stringDocNo3Max.compareTo(stringDocNo3Max2) < 0) {
        stringDocNo3Max = stringDocNo3Max2;
      }
    }
    // 借款
    if ("26".equals(stringKindNo) || "24".equals(stringKindNo)) {
      stringSql = "SELECT  MAX(DocNo3) " + " FROM  Doc6M010 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' ";
      if ("B".equals(stringType)) {
        stringSql += " AND  (DocNo1  LIKE  '023%'  OR  DocNo1  LIKE  'A17%') ";
      } else {
        stringSql += " AND  DocNo1  =  '" + stringDocNo11 + stringDocNo12 + "' ";
      }
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' " + stringSqlAnd;
      retDoc6M010 = dbDoc.queryFromPool(stringSql);
      for (int intDoc6M010 = 0; intDoc6M010 < retDoc6M010.length; intDoc6M010++) {
        stringDocNo3Max2 = convert.add0("" + (exeUtil.doParseInteger(retDoc6M010[intDoc6M010][0]) + 1), "3");
      }
      if (stringDocNo3Max.compareTo(stringDocNo3Max2) < 0) {
        stringDocNo3Max = stringDocNo3Max2;
      }
      // 借款
      stringSql = "SELECT  MAX(DocNo3) " + " FROM  Doc5M030 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' ";
      if ("B".equals(stringType)) {
        stringSql += " AND  (DocNo1  LIKE  '023%'  OR  DocNo1  LIKE  'A17%') ";
      } else {
        stringSql += " AND  DocNo1  =  '" + stringDocNo11 + stringDocNo12 + "' ";
      }
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' ";
      retDoc6M010 = dbDoc.queryFromPool(stringSql);
      for (int intDoc6M010 = 0; intDoc6M010 < retDoc6M010.length; intDoc6M010++) {
        stringDocNo3Max2 = convert.add0("" + (exeUtil.doParseInteger(retDoc6M010[intDoc6M010][0]) + 1), "3");
      }
      if (stringDocNo3Max.compareTo(stringDocNo3Max2) < 0) {
        stringDocNo3Max = stringDocNo3Max2;
      }
      // 土地買賣借款
      stringSql = "SELECT  MAX(DocNo3) " + " FROM  Doc10M001 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' ";
      if ("B".equals(stringType)) {
        stringSql += " AND  (DocNo1  LIKE  '023%'  OR  DocNo1  LIKE  'A17%') ";
      } else {
        stringSql += " AND  DocNo1  =  '" + stringDocNo11 + stringDocNo12 + "' ";
      }
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' ";
      retDoc6M010 = dbDoc.queryFromPool(stringSql);
      for (int intDoc6M010 = 0; intDoc6M010 < retDoc6M010.length; intDoc6M010++) {
        stringDocNo3Max2 = convert.add0("" + (exeUtil.doParseInteger(retDoc6M010[intDoc6M010][0]) + 1), "3");
      }
      if (stringDocNo3Max.compareTo(stringDocNo3Max2) < 0) {
        stringDocNo3Max = stringDocNo3Max2;
      }
    }
    // 請購
    if ("17".equals(stringKindNo)) {
      stringSql = "SELECT  MAX(DocNo3) " + " FROM  Doc3M011 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' ";
      if ("B".equals(stringType)) {
        stringSql += " AND  (DocNo1  LIKE  '023%'  OR  DocNo1  LIKE  'A17%') ";
      } else {
        stringSql += " AND  DocNo1  =  '" + stringDocNo11 + stringDocNo12 + "' ";
      }
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' " + stringSqlAnd;
      retDoc3M010 = dbDoc.queryFromPool(stringSql);
      for (int intDoc3M010 = 0; intDoc3M010 < retDoc3M010.length; intDoc3M010++) {
        stringDocNo3Max2 = convert.add0("" + (exeUtil.doParseInteger(retDoc3M010[intDoc3M010][0]) + 1), "3");
      }
      if (stringDocNo3Max.compareTo(stringDocNo3Max2) < 0) {
        stringDocNo3Max = stringDocNo3Max2;
      }
      stringSql = "SELECT  MAX(DocNo3) " + " FROM  Doc5M011 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' " + stringSqlAnd;
      if ("B".equals(stringType)) {
        stringSql += " AND  (DocNo1  LIKE  '023%'  OR  DocNo1  LIKE  'A17%') ";
      } else {
        stringSql += " AND  DepartNo1  =  '" + stringDocNo11 + "' ";
      }
      stringSql += " AND  ISNULL(DepartNo2,'')  =  '" + stringDocNo12 + "' ";
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' ";
      retDoc3M010 = dbDoc.queryFromPool(stringSql);
      for (int intDoc3M010 = 0; intDoc3M010 < retDoc3M010.length; intDoc3M010++) {
        stringDocNo3Max2 = convert.add0("" + (exeUtil.doParseInteger(retDoc3M010[intDoc3M010][0]) + 1), "3");
      }
      if (stringDocNo3Max.compareTo(stringDocNo3Max2) < 0) {
        stringDocNo3Max = stringDocNo3Max2;
      }
    }
    // 支出證明單
    /*
     * if("25".equals(stringKindNo)) { stringSql = "SELECT  MAX(DocNo3) " +
     * " FROM  Doc5M050 " + " WHERE  ComNo  =  '" + stringComNo + "' " +
     * " AND  KindNo  =  '" + stringKindNo + "' " ; if("B".equals(stringType)) {
     * stringSql += " AND  (DocNo1  LIKE  '023%'  OR  DocNo1  LIKE  'A17%') " ; }
     * else { stringSql += " AND  DepartNo1  =  '" + stringDocNo11 + "' " ; }
     * stringSql += " AND  ISNULL(DepartNo2,'')  =  '" + stringDocNo12 + "' " ;
     * stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' " + stringSqlAnd ;
     * retDoc3M010 = dbDoc.queryFromPool(stringSql) ; for(int intDoc3M010=0 ;
     * intDoc3M010<retDoc3M010.length ; intDoc3M010++) { stringDocNo3Max2 =
     * convert.add0(""+(exeUtil.doParseInteger(retDoc3M010[intDoc3M010][0])+1), "3")
     * ; } if(stringDocNo3Max.compareTo(stringDocNo3Max2) < 0) { stringDocNo3Max =
     * stringDocNo3Max2 ; } }
     */
    //
    // 公司
    if ("Z6".equals(stringComNo))
      stringComNo = "06";
    if ("ZA".equals(stringComNo))
      stringComNo = "Z7";
    if ("20".equals(stringComNo))
      stringComNo = "2O";
    if ("75".equals(stringComNo))
      stringComNo = "74";
    if ("AA".equals(stringComNo))
      stringComNo = "20";
    if ("CS".equals(stringComNo))
      stringComNo = "20";
    //
    stringSql = "SELECT  MAX(DocNo3) " + " FROM  Doc1M030 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' ";
    if ("B".equals(stringType)) {
      stringSql += " AND  (DocNo1  LIKE  '023%'  OR  DocNo1  LIKE  'A17%') ";
    } else {
      stringSql += " AND  DocNo1  =  '" + stringDocNo11 + stringDocNo12 + "' ";
    }
    stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' " + stringSqlAnd;
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    for (int intDoc2M010 = 0; intDoc2M010 < retDoc2M010.length; intDoc2M010++) {
      stringDocNo3Max2 = convert.add0("" + (exeUtil.doParseInteger(retDoc2M010[intDoc2M010][0]) + 1), "3");
    }
    if (stringDocNo3Max.compareTo(stringDocNo3Max2) < 0) {
      stringDocNo3Max = stringDocNo3Max2;
    }
    return stringDocNo3Max;
  }

  public String[][] getDocNoExistDB(String stringComNo, String stringKindNo, String stringDocNo1, String stringDocNo2) throws Throwable {
    return getDocNoExistDB(stringComNo, stringKindNo, stringDocNo1, stringDocNo2, "A");
  }

  public String[][] getDocNoExistDB(String stringComNo, String stringKindNo, String stringDocNo1, String stringDocNo2, String stringType) throws Throwable {
    return getDocNoExistDB(stringComNo, stringKindNo, stringDocNo1, "", stringDocNo2, stringType);
  }

  //
  public String[][] getDocNoExistDB(String stringComNo, String stringKindNo, String stringDocNo11, String stringDocNo12, String stringDocNo2, String stringType) throws Throwable {
    int intDoc1M030 = 0;
    int intPos = 0;
    String stringSql = "";
    String stringDoc = "";
    String stringDocNo11Doc = stringDocNo11;
    String stringDocNo12Doc = stringDocNo12;
    String stringDoc2 = "";
    String[] arrayDoc = null;
    String[][] retDoc2M010 = null;
    String[][] retDoc1M030 = null;
    String[][] retTable = null;
    Vector vectorDocNo = new Vector();
    Vector vectorDocNoDul = new Vector();
    Vector vectorTable = new Vector();
    Vector vectorTable2 = new Vector();
    // DocNo 轉換
    /*
     * stringDeptNo1Doc = getDeptCdDoc(stringDocNo11, "", "") ;
     * if("".equals(stringDeptNo1Doc)) stringDeptNo1Doc = stringDocNo11 ;
     * if(!"".equals(stringDocNo12)) { stringDocNo12 = stringDocNo12.substring(0,
     * stringDocNo12.length()-1) ; // 去除案別屬性，現存在案別無屬性 stringDeptNo1Doc =
     * stringDeptNo1Doc+stringDocNo12 ; }
     */
    //
    if ("B".equals(stringType) && "".equals(stringDocNo12Doc) && stringDocNo11Doc.length() > 3) {
      stringDocNo11Doc = stringDocNo11Doc.substring(0, 3);
      stringDocNo11 = stringDocNo11.substring(0, 3);
    }
    // 請款
    if ("24".equals(stringKindNo)) {
      stringSql = "SELECT  DocNo,Descript " + " FROM  Doc2M010 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' ";
      if ("B".equals(stringType)) {
        stringSql += " AND  (DocNo1  LIKE  'A17%' OR  DocNo1  LIKE  '023%') ";
      } else {
        stringSql += " AND  DocNo1  =  '" + stringDocNo11Doc + stringDocNo12Doc + "' ";
      }
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' ";
      stringSql += ("A".equals(stringType)) ? " ORDER BY DocNo " : "ORDER BY DocNo2,  DocNo3";
      retDoc2M010 = dbDoc.queryFromPool(stringSql);
      for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
        stringDoc = retDoc2M010[intNo][0].trim();
        //
        if (vectorDocNoDul.indexOf(stringDoc) != -1)
          continue;
        vectorDocNoDul.add(stringDoc);
        //
        if ("B".equals(stringType)) {
          stringDoc = stringDoc.substring(0, 3) + stringDoc.substring(stringDoc.length() - 7, stringDoc.length()) + "-" + intNo;
        }
        vectorDocNo.add(stringDoc);
        vectorTable.add(retDoc2M010[intNo]);
      }
      stringSql = "SELECT  DocNo,Descript " + " FROM  Doc5M020 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' ";
      if ("B".equals(stringType)) {
        stringSql += " AND  (DocNo1  LIKE  'A17%' OR  DocNo1  LIKE  '023%') ";
      } else {
        stringSql += " AND  DocNo1  =  '" + stringDocNo11 + "' ";
      }
      stringSql += " AND  ISNULL(DepartNo2,'')  =  '" + stringDocNo12 + "' ";
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' ";
      stringSql += ("A".equals(stringType)) ? " ORDER BY DocNo " : "ORDER BY DocNo2,  DocNo3";
      retDoc2M010 = dbDoc.queryFromPool(stringSql);
      for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
        stringDoc = retDoc2M010[intNo][0].trim();
        //
        if (vectorDocNoDul.indexOf(stringDoc) != -1)
          continue;
        vectorDocNoDul.add(stringDoc);
        //
        if ("B".equals(stringType)) {
          stringDoc = stringDoc.substring(0, 3) + stringDoc.substring(stringDoc.length() - 7, stringDoc.length()) + "-" + intNo;
        }
        if (vectorDocNo.indexOf(stringDoc) != -1)
          continue;
        vectorDocNo.add(stringDoc);
        vectorTable.add(retDoc2M010[intNo]);
      }
    }
    // 請購
    if ("17".equals(stringKindNo)) {
      stringSql = "SELECT  DocNo,ClassNameList " + " FROM  Doc3M011 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' ";
      if ("B".equals(stringType)) {
        stringSql += " AND  (DocNo1  LIKE  'A17%' OR  DocNo1  LIKE  '023%') ";
      } else {
        stringSql += " AND  DocNo1  =  '" + stringDocNo11Doc + stringDocNo12Doc + "' ";
      }
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' ";
      stringSql += ("A".equals(stringType)) ? " ORDER BY DocNo " : "ORDER BY DocNo2,  DocNo3";
      retDoc2M010 = dbDoc.queryFromPool(stringSql);
      for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
        stringDoc = retDoc2M010[intNo][0].trim();
        //
        if (vectorDocNoDul.indexOf(stringDoc) != -1)
          continue;
        vectorDocNoDul.add(stringDoc);
        //
        if ("B".equals(stringType)) {
          stringDoc = stringDoc.substring(0, 3) + stringDoc.substring(stringDoc.length() - 7, stringDoc.length()) + "-" + intNo;
        }
        vectorDocNo.add(stringDoc);
        vectorTable.add(retDoc2M010[intNo]);
      }
      stringSql = "SELECT  DocNo,ClassNameList " + " FROM  Doc5M011 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' ";
      if ("B".equals(stringType)) {
        stringSql += " AND  (DocNo1  LIKE  'A17%' OR  DocNo1  LIKE  '023%') ";
      } else {
        stringSql += " AND  DocNo1  =  '" + stringDocNo11 + "' ";
      }
      stringSql += " AND  ISNULL(DepartNo2,'')  =  '" + stringDocNo12 + "' ";
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' ";
      stringSql += ("A".equals(stringType)) ? " ORDER BY DocNo " : "ORDER BY DocNo2,  DocNo3";
      retDoc2M010 = dbDoc.queryFromPool(stringSql);
      for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
        stringDoc = retDoc2M010[intNo][0].trim();
        //
        if (vectorDocNoDul.indexOf(stringDoc) != -1)
          continue;
        vectorDocNoDul.add(stringDoc);
        //
        if ("B".equals(stringType)) {
          stringDoc = stringDoc.substring(0, 3) + stringDoc.substring(stringDoc.length() - 7, stringDoc.length()) + "-" + intNo;
        }
        vectorDocNo.add(stringDoc);
        vectorTable.add(retDoc2M010[intNo]);
      }
    }
    // 借款
    if ("26".equals(stringKindNo) || "24".equals(stringKindNo)) {
      stringSql = "SELECT  DocNo,Descript " + " FROM  Doc6M010 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' ";
      if ("B".equals(stringType)) {
        stringSql += " AND  (DocNo1  LIKE  'A17%' OR  DocNo1  LIKE  '023%') ";
      } else {
        stringSql += " AND  DocNo1  =  '" + stringDocNo11Doc + stringDocNo12Doc + "' ";
      }
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' ";
      stringSql += ("A".equals(stringType)) ? " ORDER BY DocNo " : "ORDER BY DocNo2,  DocNo3";
      retDoc2M010 = dbDoc.queryFromPool(stringSql);
      for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
        stringDoc = retDoc2M010[intNo][0].trim();
        //
        if (vectorDocNoDul.indexOf(stringDoc) != -1)
          continue;
        vectorDocNoDul.add(stringDoc);
        //
        if ("B".equals(stringType)) {
          stringDoc = stringDoc.substring(0, 3) + stringDoc.substring(stringDoc.length() - 7, stringDoc.length()) + "-" + intNo;
        }
        vectorDocNo.add(stringDoc);
        vectorTable.add(retDoc2M010[intNo]);
      }
      /*
       * stringSql = "SELECT  DocNo,Descript " + " FROM  Doc5M030 " +
       * " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" +
       * stringKindNo + "' " ; stringSql += ("A".equals(stringType)) ?
       * " AND  DepartNo1  =  '" + stringDocNo11 + "' " : " AND  DepartNo1  LIKE  '" +
       * stringDocNo11 + "%' " ; stringSql += " AND  ISNULL(DepartNo2,'')  =  '" +
       * stringDocNo12 + "' " ; stringSql += " AND  DocNo2  =  '" + stringDocNo2 +
       * "' " + " Order By DocNo "; retDoc2M010 = dbDoc.queryFromPool(stringSql) ;
       * for(int intNo=0 ; intNo<retDoc2M010.length ; intNo++) { stringDoc =
       * retDoc2M010[intNo][0].trim() ; // if(vectorDocNoDul.indexOf(stringDoc) != -1)
       * continue ; vectorDocNoDul.add(stringDoc) ; // if("B".equals(stringType)) {
       * stringDoc =
       * stringDoc.substring(0,3)+stringDoc.substring(stringDoc.length()-7,stringDoc.
       * length())+"-"+intNo ; } vectorDocNo.add(stringDoc) ;
       * vectorTable.add(retDoc2M010[intNo]) ; }
       */
    }
    // 支出證明單
    if ("25".equals(stringKindNo)) {
      stringSql = "SELECT  DocNo,Descript " + " FROM  Doc5M050 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' ";
      if ("B".equals(stringType)) {
        stringSql += " AND  (DocNo1  LIKE  'A17%' OR  DocNo1  LIKE  '023%') ";
      } else {
        stringSql += " AND  DocNo1  =  '" + stringDocNo11 + "' ";
      }
      stringSql += " AND  ISNULL(DepartNo2,'')  =  '" + stringDocNo12 + "' ";
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' ";
      stringSql += ("A".equals(stringType)) ? " ORDER BY DocNo " : "ORDER BY DocNo2,  DocNo3";
      retDoc2M010 = dbDoc.queryFromPool(stringSql);
      for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
        stringDoc = retDoc2M010[intNo][0].trim();
        //
        if (vectorDocNoDul.indexOf(stringDoc) != -1)
          continue;
        vectorDocNoDul.add(stringDoc);
        //
        if ("B".equals(stringType)) {
          stringDoc = stringDoc.substring(0, 3) + stringDoc.substring(stringDoc.length() - 7, stringDoc.length()) + "-" + intNo;
        }
        vectorDocNo.add(stringDoc);
        vectorTable.add(retDoc2M010[intNo]);
      }
    }
    if ("Z6".equals(stringComNo))
      stringComNo = "06";
    if ("ZA".equals(stringComNo))
      stringComNo = "Z7";
    if ("20".equals(stringComNo))
      stringComNo = "2O";
    if ("75".equals(stringComNo))
      stringComNo = "74";
    if ("AA".equals(stringComNo))
      stringComNo = "20";
    if ("CS".equals(stringComNo))
      stringComNo = "20";
    stringSql = "SELECT  DocNo,Descript " + " FROM  Doc1M030 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' ";
    if ("B".equals(stringType)) {
      stringSql += " AND  (DocNo1  LIKE  'A17%' OR  DocNo1  LIKE  '023%') ";
    } else {
      stringSql += " AND  DocNo1  =  '" + stringDocNo11 + stringDocNo12 + "' ";
    }
    stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' ";
    stringSql += ("A".equals(stringType)) ? " ORDER BY DocNo " : "ORDER BY DocNo2,  DocNo3";
    retDoc1M030 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc1M030.length; intNo++) {
      stringDoc = retDoc1M030[intNo][0].trim();
      //
      if (vectorDocNoDul.indexOf(stringDoc) != -1)
        continue;
      vectorDocNoDul.add(stringDoc);
      //
      if ("B".equals(stringType)) {
        stringDoc = stringDoc.substring(0, 3) + stringDoc.substring(stringDoc.length() - 7, stringDoc.length()) + "-" + intNo;
      }
      vectorDocNo.add(stringDoc);
      vectorTable.add(retDoc1M030[intNo]);
    }
    arrayDoc = (String[]) vectorDocNo.toArray(new String[0]);
    Arrays.sort(arrayDoc);
    for (int intNo = 0; intNo < arrayDoc.length; intNo++) {
      stringDoc = arrayDoc[intNo];
      intPos = vectorDocNo.indexOf(stringDoc);
      if (intPos != -1) {
        vectorTable2.add(vectorTable.get(intPos));
      }
    }
    retTable = (String[][]) vectorTable2.toArray(new String[0][0]);
    return retTable;
  }

  // 驗收單號
  public String[][] getOptometryNoExistDB(String stringComNo, String stringOptometryType, String stringDocNo1, String stringDocNo2) throws Throwable {
    String stringProjectID1 = "";
    for (int intNo = 0; intNo < stringDocNo1.length(); intNo++) {
      if (!Character.isDigit(stringDocNo1.charAt(intNo))) {
        stringProjectID1 = stringDocNo1.substring(intNo);
        stringDocNo1 = stringDocNo1.substring(0, intNo);
        break;
      }
    }
    return getOptometryNoExistDB(stringComNo, stringOptometryType, stringDocNo1, stringProjectID1, stringDocNo2);
  }

  public String[][] getOptometryNoExistDB(String stringComNo, String stringOptometryType, String stringDocNo1, String stringProjectID1, String stringDocNo2) throws Throwable {
    Hashtable hashtableCond = new Hashtable();
    hashtableCond.put("ComNo", stringComNo);
    hashtableCond.put("OptometryType", stringOptometryType);
    hashtableCond.put("DocNo1", stringDocNo1);
    hashtableCond.put("ProjectID1", stringProjectID1);
    hashtableCond.put("DocNo2", stringDocNo2);
    return getOptometryNoExistDB(hashtableCond);
  }

  public String[][] getOptometryNoExistDB(Hashtable hashtableCond) throws Throwable {
    int intPos = 0;
    String stringSql = "";
    String stringDoc = "";
    String stringKindNo = "22";
    String stringComNo = "" + hashtableCond.get("ComNo");
    String stringOptometryType = "" + hashtableCond.get("OptometryType");
    String stringDocNo1 = "" + hashtableCond.get("DocNo1");
    String stringProjectID1 = "" + hashtableCond.get("ProjectID1");
    String stringDocNo2 = "" + hashtableCond.get("DocNo2");
    String stringQuery = "" + hashtableCond.get("Query");
    String[] arrayDoc = null;
    String[][] retDoc2M010 = null;
    String[][] retDoc1M030 = null;
    String[][] retTable = null;
    Vector vectorDocNo = new Vector();
    Vector vectorTable = new Vector();
    Vector vectorTable2 = new Vector();
    // 請款
    stringSql = "SELECT  M18.OptometryNo,  M10.Descript,  M10.BarCode " + " FROM  Doc2M018  M18,  Doc2M010  M10  " + " WHERE  M18.BarCode  =  M10.BarCode "
        + " AND  M10.ComNo  =  '" + stringComNo + "' " +
        // " AND M18.OptometryType = '" + stringOptometryType + "' " +
        " AND  M18.OptometryNo1  =  '" + stringDocNo1 + stringProjectID1 + "' " + " AND  M18.OptometryNo2  =  '" + stringDocNo2 + "' " + " Order BY  M18.OptometryNo ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
      stringDoc = retDoc2M010[intNo][0].trim();
      if (vectorDocNo.indexOf(stringDoc) != -1)
        continue;
      vectorDocNo.add(stringDoc);
      vectorTable.add(retDoc2M010[intNo]);
    }
    //
    stringSql = "SELECT  M18.OptometryNo,  M10.Descript,  M10.BarCode " + " FROM  Doc5M028  M18,  Doc5M020  M10  " + " WHERE  M18.BarCode  =  M10.BarCode "
        + " AND  M10.ComNo  =  '" + stringComNo + "' " +
        // " AND M18.OptometryType = '" + stringOptometryType + "' " +
        " AND  M18.OptometryNo1  =  '" + stringDocNo1 + "' " + " AND  M18.ProjectID1  =  '" + stringProjectID1 + "' " + " AND  M18.OptometryNo2  =  '" + stringDocNo2 + "' "
        + " Order BY  M18.OptometryNo ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
      stringDoc = retDoc2M010[intNo][0].trim();
      if (vectorDocNo.indexOf(stringDoc) != -1)
        continue;
      vectorDocNo.add(stringDoc);
      vectorTable.add(retDoc2M010[intNo]);
    }
    // 借款沖銷
    stringSql = "SELECT  OptometryNo,  Descript,  BarCode " + " FROM  Doc6M010  " + " WHERE  KindNo  =  '24' " + " AND  ComNo  =  '" + stringComNo + "' "
        + " AND  OptometryNo1  =  '" + stringDocNo1 + stringProjectID1 + "' " + " AND  OptometryNo2  =  '" + stringDocNo2 + "' " + " Order BY  OptometryNo ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
      stringDoc = retDoc2M010[intNo][0].trim();
      if (vectorDocNo.indexOf(stringDoc) != -1)
        continue;
      vectorDocNo.add(stringDoc);
      vectorTable.add(retDoc2M010[intNo]);
    }
    // 驗收單
    if (!"Y".equals(stringQuery)) {
      stringSql = "SELECT  DocNo,  Descript,  '' " + " FROM  Doc5M060  " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  DocNo1  =  '" + stringDocNo1 + stringProjectID1
          + "' " + " AND  DocNo2  =  '" + stringDocNo2 + "' " + " Order BY  DocNo ";
      retDoc2M010 = dbDoc.queryFromPool(stringSql);
      for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
        stringDoc = retDoc2M010[intNo][0].trim();
        if (vectorDocNo.indexOf(stringDoc) != -1)
          continue;
        vectorDocNo.add(stringDoc);
        vectorTable.add(retDoc2M010[intNo]);
      }
    }
    // 公文追蹤
    if ("Z6".equals(stringComNo))
      stringComNo = "06";
    if ("ZA".equals(stringComNo))
      stringComNo = "Z7";
    if ("20".equals(stringComNo))
      stringComNo = "2O";
    if ("75".equals(stringComNo))
      stringComNo = "74";
    if ("AA".equals(stringComNo))
      stringComNo = "20";
    if ("CS".equals(stringComNo))
      stringComNo = "20";
    stringSql = "SELECT  DocNo,  Descript,  BarCode " + " FROM  Doc1M030 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' "
        + " AND  DocNo  LIKE  '" + stringDocNo1 + stringProjectID1 + stringDocNo2 + "%' " + " Order By DocNo ";
    retDoc1M030 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc1M030.length; intNo++) {
      stringDoc = retDoc1M030[intNo][0].trim();
      if (vectorDocNo.indexOf(stringDoc) != -1)
        continue;
      vectorDocNo.add(stringDoc);
      vectorTable.add(retDoc1M030[intNo]);
    }
    arrayDoc = (String[]) vectorDocNo.toArray(new String[0]);
    Arrays.sort(arrayDoc);
    for (int intNo = 0; intNo < arrayDoc.length; intNo++) {
      stringDoc = arrayDoc[intNo];
      intPos = vectorDocNo.indexOf(stringDoc);
      if (intPos != -1) {
        vectorTable2.add(vectorTable.get(intPos));
      }
    }
    retTable = (String[][]) vectorTable2.toArray(new String[0][0]);
    return retTable;
  }

  // 表格 Doc1M040
  public String doInsertDoc1M040(String stringBarCode, String stringCDate, String stringCTime, String stringEDateTime, String stringDepartNo, String stringEmployeeNo)
      throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  Doc1M040  (BarCode,     CDate,          CTime,        EDateTime,  DepartNo, " + " EmployeeNo,  CheckDateTime,  CheckSecond,  DocStatus) " + " VALUES ( '"
        + stringBarCode + "', " + //
        " '" + stringCDate + "', " + " '" + stringCTime + "', " + " '" + stringEDateTime + "', " + " '" + stringDepartNo + "', " + " '" + stringEmployeeNo + "', " + " " + "null"
        + ", " + " " + "null" + ", " + " '" + "1" + "') ";
    // System.out.println("doInsertDoc1M040---------------------"+stringSql) ;
    dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String getInsertDoc1M040Sq1(String stringBarCode, String stringCDate, String stringCTime, String stringEDateTime, String stringDepartNo, String stringEmployeeNo)
      throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  Doc1M040  (BarCode,     CDate,          CTime,        EDateTime,  DepartNo, " + " EmployeeNo,  CheckDateTime,  CheckSecond,  DocStatus) " + " VALUES ( '"
        + stringBarCode + "', " + //
        " '" + stringCDate + "', " + " '" + stringCTime + "', " + " '" + stringEDateTime + "', " + " '" + stringDepartNo + "', " + " '" + stringEmployeeNo + "', " + " " + "null"
        + ", " + " " + "null" + ", " + " '" + "1" + "') ";
    // System.out.println("doInsertDoc1M040---------------------"+stringSql) ;
    return stringSql;
  }

  public String getIDForDoc1M040(String stringBarCode, String stringDepartNo, String stringEmployeeNo) throws Throwable {
    String stringSql = "";
    String stringID1 = "";
    String[][] retDoc1M040 = null;
    //
    stringSql = "SELECT  ID1 " + " FROM  Doc1M040 " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringEmployeeNo))
      stringSql += " AND  EmployeeNo  =  '" + stringEmployeeNo + "' ";
    retDoc1M040 = dbDoc.queryFromPool(stringSql);
    if (retDoc1M040.length > 0) {
      stringID1 = retDoc1M040[0][0].trim();
    }
    return stringID1;

  }

  public String[][] getDoc1M040(String stringBarCode) throws Throwable {
    String stringSql = "";
    String stringID1 = "";
    String[][] retDoc1M040 = null;
    // 0 DepartNo 1 BarCode 2 EDateTime 3 DepartNo 4 EmployeeNo
    // 5 CheckDateTime 6 DocStatus
    stringSql = "SELECT  DepartNo,  BarCode,  EDateTime,  DepartNo,  EmployeeNo,  CheckDateTime, DocStatus " + " FROM  Doc1M040 b " + " WHERE  BarCode  =  '" + stringBarCode + "' "
        + " ORDER BY  EDateTime ";
    retDoc1M040 = dbDoc.queryFromPool(stringSql);
    return retDoc1M040;

  }

  public boolean isNoUseDoc1M040(String stringBarCode) throws Throwable {
    String stringSql = "";
    String stringID1 = "";
    String[][] retDoc1M040 = null;
    // 0 DepartNo 1 BarCode 2 EDateTime 3 DepartNo 4 EmployeeNo
    // 5 CheckDateTime 6 DocStatus
    stringSql = "SELECT  DepartNo,  BarCode,  EDateTime,  DepartNo,  EmployeeNo,  CheckDateTime, DocStatus " + " FROM  Doc1M040 b " + " WHERE  BarCode  =  '" + stringBarCode + "' "
        + " AND  DocStatus =  '5' "; // 1 創文 2 收文 3 結案 4 出文 5 作廢
    retDoc1M040 = dbDoc.queryFromPool(stringSql);
    if (retDoc1M040.length > 0)
      return true;
    return false;

  }

  public String[][] getDoc1M040LimitID1(String stringID1) throws Throwable {
    String stringSql = "";
    String[][] retDoc1M040 = null;
    //
    stringSql = "SELECT  DepartNo " + " FROM  Doc1M040 " + " WHERE  ID1  =  '" + stringID1 + "' " + " ORDER BY  EDateTime ";
    retDoc1M040 = dbDoc.queryFromPool(stringSql);
    return retDoc1M040;
  }

  public String doUpdateDoc1M040(String stringBarCode, String stringCDate, String stringCTime, String stringEDateTime, String stringDepartNo, String stringEmployeeNo,
      String stringID1) throws Throwable {
    String stringSql = "";
    //
    stringSql = "UPDATE  Doc1M040 " + " SET  BarCode  =  '" + stringBarCode + "', " + " CDate  =  '" + stringCDate + "', " + " CTime  =  '" + stringCTime + "', "
        + " EDateTime  =  '" + stringEDateTime + "', " + " DepartNo  =  '" + stringDepartNo + "', " + " EmployeeNo  =  '" + stringEmployeeNo + "' " + " WHERE  ID1  =  '"
        + stringID1 + "' ";
    // System.out.println("doUpdateDoc1M040---------------------"+stringSql) ;
    dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String doDeleteDoc1M040(String stringBarCode) throws Throwable {
    String stringSql = "";
    //
    stringSql = "DELETE  Doc1M040 " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    // System.out.println("doDeleteDoc1M040---------------------"+stringSql) ;
    dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  // 表格 Doc1Password
  // 取得使用者之資訊
  public String[][] getDoc1Password(String stringUser) throws Throwable {
    String stringSql = "";
    String stringDepartNo = "";
    String[][] retDoc1Password = null;
    // 0 DepartType 1 EmployeeName 2 DepartNo 3 UseLevel 4 ComNo
    stringSql = "SELECT  DepartType,  EmployeeName,  DepartNo,  UseLevel,  ComNo " + " FROM  Doc1Password " + " WHERE  EmployeeNo  =  '" + stringUser + "' ";
    retDoc1Password = dbDoc.queryFromPool(stringSql);
    return retDoc1Password;
  }

  // 表格 Doc2M010_History
  // 廢止(使用下列)
  public String doInsertForDoc2M010History(String stringIdRef, String stringEDateTime, String stringEmployeeNo, String stringDepartNo, String stringActionStatus,
      String stringRemark, boolean booleanDB) throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  INTO  Doc2M010_History(ID_ref,   EDateTime,  EmployeeNo,  DepartNo,  actionStatus, " + " Remark) " + " VALUES( " + stringIdRef + ", " + " '"
        + stringEDateTime + "' , " + " '" + stringEmployeeNo + "' , " + " '" + stringDepartNo + "' , " + " '" + stringActionStatus + "' , " + " '" + stringRemark + "')  ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String doInsertForDoc2M010History(String stringIdRef, String stringEDateTime, String stringEmployeeNo, String stringDepartNo, String stringActionStatus,
      String stringRemark, String stringComNo, String stringSourceType, boolean booleanDB) throws Throwable {
    return doInsertForDoc2M010HistoryUnion(stringIdRef, stringEDateTime, stringEmployeeNo, stringDepartNo, stringActionStatus, stringRemark, stringComNo, stringSourceType,
        booleanDB, "Doc2M010_History");

  }

  public String doInsertForDoc2M010HistoryUnion(String stringIdRef, String stringEDateTime, String stringEmployeeNo, String stringDepartNo, String stringActionStatus,
      String stringRemark, String stringComNo, String stringSourceType, boolean booleanDB, String stringTable) throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  INTO  " + stringTable + "(ID_ref,   EDateTime,  EmployeeNo,  DepartNo,  actionStatus, " + " Remark,   ComNo,      SourceType) " + " VALUES( " + stringIdRef
        + ", " + " '" + stringEDateTime + "' , " + " '" + stringEmployeeNo + "' , " + " '" + stringDepartNo + "' , " + " '" + stringActionStatus + "' , " + " N'" + stringRemark
        + "' , " + " '" + stringComNo + "',  " + " '" + stringSourceType + "')  ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  // 表格 Doc2M010_Reason
  public String[][] getDoc2M010Reason(String stringIdRef, String stringFunctionType, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    //
    stringSql = "SELECT  ID_ref,   FunctionType,  EDateTime,  EmployeeNo,  Remark " + " FROM  Doc2M010_Reason " + " WHERE  1  =  1 ";
    if (!"".equals(stringIdRef))
      stringSql += " AND  ID_ref  =  '" + stringIdRef + "' ";
    if (!"".equals(stringFunctionType))
      stringSql += " AND  FunctionType  =  '" + stringFunctionType + "' ";
    if ("".equals(stringSqlAnd)) {
      stringSql += " ORDER  BY  EDateTime ";
    } else {
      stringSql += stringSqlAnd;
    }
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    return retDoc2M010;
  }

  public String doInsertForDoc2M010Reason(String stringIdRef, String stringFunctionType, String stringEDateTime, String stringEmployeeNo, String stringRemark, boolean booleanDB)
      throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  INTO  Doc2M010_Reason(ID_ref,   FunctionType,  EDateTime,  EmployeeNo,  Remark) " + " VALUES( " + stringIdRef + ", " + " '" + stringFunctionType + "' , "
        + " '" + stringEDateTime + "' , " + " '" + stringEmployeeNo + "' , " + " '" + stringRemark + "')  ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  // 表格 Doc2M010
  // 預估傳票
  public String doUpdateDoc2M010(String stringBarCode, String stringColumnName, String stringColumnValue, String stringType, boolean booleanDB) throws Throwable {
    String stringSql = "";
    stringSql = "UPDATE  Doc2M010 ";
    if ("TEXT".equals(stringType)) {
      stringSql += "  SET   " + stringColumnName + "  =  '" + stringColumnValue + "' ";
    } else {
      stringSql += "  SET   " + stringColumnName + "  =  " + stringColumnValue + " ";
    }
    stringSql += " WHERE  BarCode  =  '" + stringBarCode + "' ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String[][] getFurtureBarCodeForDoc2M010(String stringRocYear, String stringDepartNo) throws Throwable {
    return getFurtureBarCodeForDoc2M010(stringRocYear, stringDepartNo, "Z6");
  }

  public String[][] getFurtureBarCodeForDoc2M010(String stringRocYear, String stringDepartNo, String stringComNo) throws Throwable {
    String stringSql = "";
    String stringSqlAnd = "";
    String stringDepartNoL = "";
    String stringACDateS = "";
    String stringACDateE = "";
    String stringSpecBudgetVoucher = ",017PR,033FG,"; // +get("SPEC_BUDGET_VOUCHER") ;
    String[] arraySpecBudgetVoucher = convert.StringToken(stringSpecBudgetVoucher, ",");
    String[][] retDoc2M010 = null;
    //
    for (int intNo = 0; intNo < arraySpecBudgetVoucher.length; intNo++) {
      stringDepartNoL = arraySpecBudgetVoucher[intNo].trim();
      if ("".equals(stringDepartNoL))
        continue;
      //
      if (!"".equals(stringSqlAnd))
        stringSqlAnd += ",";
      //
      stringSqlAnd += " '" + stringDepartNoL + "' ";
    }
    //
    stringACDateS = stringRocYear + "0101";
    stringACDateS = convert.roc2ac(stringACDateS);
    stringACDateS = datetime.dateAdd(stringACDateS, "y", -1);
    stringACDateS = convert.FormatedDate(stringACDateS, "/");
    stringACDateE = stringRocYear + "1231";
    stringACDateE = convert.roc2ac(stringACDateE);
    stringACDateE = convert.FormatedDate(stringACDateE, "/");
    // 0 BarCode 1 Descript 2 DocNo 3 DocNo1 4 DocNo2
    // 5 DocNo3 6 ID 7 UNDERGO_WRITE 8 RetainMoney 9 ComNo
    stringSql = " SELECT  M10.BarCode,  M10.Descript,  M10.DocNo,          M10.DocNo1,       M10.DocNo2, "
        + " M10.DocNo3,   M10.ID,        M10.UNDERGO_WRITE,  M10.RetainMoney,  M10.ComNo  " + " FROM  Doc2M010 M10" + " WHERE  M10.BarCode  NOT  IN  (SELECT  BarCode "
        + " FROM  Doc2M014 " + " WHERE  STATUS_CD  =  'Z') " +
        // " AND VOUCHER_YMD >= '"+stringACDateS+"' ) " +
        // " AND VOUCHER_YMD BETWEEN '"+stringACDateS+"' AND '" + stringACDateE + "') "
        // +
        " AND  M10.ID  NOT  IN  (SELECT  ID_Def  FROM  Doc2M080) " + " AND  M10.CDate  BETWEEN  '" + stringRocYear + "/01/01'  AND  '" + stringRocYear + "/12/31' "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.DocNoType  NOT IN ('B','C') ";
    if (!"".equals(stringDepartNo)) {
      stringSql += " AND  M10.DepartNo  =  '" + stringDepartNo + "' ";
    } else {
      if (!"".equals(stringSqlAnd)) {
        stringSql += " AND  M10.DepartNo  NOT IN (" + stringSqlAnd + ") ";
      }
    }
    stringSql += "ORDER BY  M10.BarCode ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    //
    return retDoc2M010;
  }

  public String[][] getFurtureBarCodeForDoc2M010(String[] arrayDate, String stringDepartNo) throws Throwable {
    return getFurtureBarCodeForDoc2M010(arrayDate, stringDepartNo, "Z6");
  }

  public String[][] getFurtureBarCodeForDoc2M010(String[] arrayDate, String stringDepartNo, String stringComNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    //
    arrayDate[2] = convert.replace(arrayDate[2], "/", "");
    arrayDate[2] = datetime.dateAdd(arrayDate[2], "y", -1);
    arrayDate[2] = convert.FormatedDate(arrayDate[2], "/");
    // 0 BarCode 1 Descript 2 DocNo 3 DocNo1 4 DocNo2
    // 5 DocNo3 6 ID 7 UNDERGO_WRITE 8 RetainMoney 9 ComNo
    stringSql = " SELECT  M10.BarCode,  M10.Descript,  M10.DocNo,          M10.DocNo1,       M10.DocNo2, "
        + " M10.DocNo3,   M10.ID,        M10.UNDERGO_WRITE,  M10.RetainMoney,  M10.ComNo  " + " FROM  Doc2M010 M10" + " WHERE  M10.BarCode  NOT  IN  (SELECT  BarCode "
        + " FROM  Doc2M014 " + " WHERE  STATUS_CD  =  'Z' " +
        // " AND VOUCHER_YMD BETWEEN '"+arrayDate[2]+"' AND '" + arrayDate[3] + "') " +
        " AND  VOUCHER_YMD  >=  '" + arrayDate[2] + "' ) " + " AND  M10.ID       NOT  IN  (SELECT  ID_Def  FROM  Doc2M080) "
        + " AND  M10.BarCode  NOT  IN  (SELECT  ISNULL(BarCode,'')  FROM  Doc2M0801) " + " AND  M10.CDate  BETWEEN  '" + arrayDate[0] + "'  AND  '" + arrayDate[1] + "' "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.ComNo  =  '" + stringComNo + "' "
        + " AND  BarCode NOT IN (SELECT BarCode FROM Doc2M011 WHERE  InvoiceNo  IN (SELECT InvoiceNo FROM Doc2M091)) "
        + " AND  BarCode NOT IN (SELECT BarCode FROM Doc2M017 WHERE  PurchaseNo  IN (SELECT RTRIM(PurchaseNo1)+RTRIM(PurchaseNo2)+RTRIM(PurchaseNo3) FROM Doc2M097)) "
        + " AND  BarCode NOT IN (SELECT BarCode FROM Doc2M017 WHERE  PurchaseNo  IN ('0333H53A9612004','0333H289612001','033FG9611013','033FG9611014','033FG9611015','0333H53A9612002','0333H53A9612001','0333H53A9611005','0333F19612001','0333h40a9611013','0333H40A9611014','0333H52A9611002','033659612001','0333M58A9612001','0333M59A9611001','0333M59A9612001','0333SH39612001','0333h52a9611001','0333H40A9609020','03339612001','0333H40A9611012','0333H62A9612001','0333H62A9612002','0333H40A9610017','0333H47A9612002','0333SH39612002','033FG9612008','0333H53A9612010','03339609001','033639605001','0333H53A9611004','0333H53A9611001','0333H40A9701003','033H43A9612008','033H43A9612002','033H43A9612015','033H43A9611002','033H43A9611019','033H43A9612004','033H43A9612005','033H43A9612009','033H43A9612010'))"
        + " AND  M10.DocNoType  NOT IN ('B','C') ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  M10.DepartNo  =  '" + stringDepartNo + "' ";

    stringSql += "ORDER BY  M10.BarCode ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    //
    return retDoc2M010;
  }

  public String[][] getRetainMoneyDataForDoc2M010(String stringFactoryNo, String stringProjectID1) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    // 0 BarCode 1 ComNo 2 DocNo1 3 DocNo2 4 DocNo3
    // 5 DepartNo
    stringSql = " SELECT  BarCode,    ComNo,                        DocNo1,  DocNo2,  DocNo3, " + " DepartNo,  (RetainMoney-WriteRetainMoney) " + " FROM  Doc2M010 "
        + " WHERE  RetainMoney-WriteRetainMoney  >  0 " + " AND  UNDERGO_WRITE  <>  'E' ";
    if (!"".equals(stringFactoryNo)) {
      stringSql += " AND  BarCode  IN  (SELECT  BarCode  FROM  Doc2M011  WHERE  FactoryNo  =  '" + stringFactoryNo + "'  UNION  "
          + " SELECT  BarCode  FROM  Doc2M013  WHERE  FactoryNo  =  '" + stringFactoryNo + "') ";
    }
    stringSql += " AND  BarCode  IN  (SELECT  BarCode  FROM  Doc2M012  WHERE  ProjectID1  =  '" + stringProjectID1 + "') "
        + " AND  BarCode  IN  (SELECT  BarCOde  FROM  Doc2M014  WHERE  STATUS_CD  =  'Z') " + "ORDER BY  BarCode ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    //
    return retDoc2M010;
  }

  public double getCanUseRetainMoneyForDoc2M010(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    // 0 BarCode 1 ComNo 2 DocNo1 3 DocNo2 4 DocNo3
    // 5 DepartNo
    stringSql = " SELECT  (RetainMoney-WriteRetainMoney) " + " FROM  Doc2M010 " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  UNDERGO_WRITE  <>  'E' ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    //
    return doParseDouble(retDoc2M010[0][0]);
  }

  public double getWriteRetainMoneyForDoc2M010(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    // 0 BarCode 1 ComNo 2 DocNo1 3 DocNo2 4 DocNo3
    // 5 DepartNo
    stringSql = " SELECT  WriteRetainMoney " + " FROM  Doc2M010 " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  UNDERGO_WRITE  <>  'E' ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    //
    return doParseDouble(retDoc2M010[0][0]);
  }

  public String getIDForDoc2M010(String stringBarCode) throws Throwable {
    return getIDForDoc2M010("Doc2M010", stringBarCode);
  }

  public String getIDForDoc2M010(String stringTable, String stringBarCode) throws Throwable {
    String stringSql = "";
    String stringID = "";
    String[][] retDoc2M010 = null;
    // 0 ID
    stringSql = " SELECT  M10.ID " + " FROM  " + stringTable + " M10" + " WHERE  M10.BarCode  =  '" + stringBarCode + "' ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    //
    if (retDoc2M010.length > 0)
      stringID = retDoc2M010[0][0].trim();
    return stringID;
  }

  public boolean isExistRetainCheckForDoc2M010(String stringRetainBarCode, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    boolean booleanExist = false;
    // 0 ID
    stringSql = " SELECT  M10.BarCode " + " FROM  Doc2M010 M10" + " WHERE  M10.BarCode  <>  '" + stringBarCode + "' " + " AND  M10.RetainBarCode  =  '" + stringRetainBarCode + "' "
        + " AND  UNDERGO_WRITE  <>  'E' ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    //
    if (retDoc2M010.length > 0) {
      booleanExist = true;
      System.out.println("已使用退保之條碼編號---------------------------" + retDoc2M010[0][0] + "(" + retDoc2M010.length + ")");
    }
    return booleanExist;
  }

  public String getWriteRetainMoneySUM(String stringRetainBarCode, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    boolean booleanExist = false;
    // 0 ID
    stringSql = " SELECT  SUM(WriteRetainMoney) " + " FROM  Doc2M010 M10" + " WHERE  M10.BarCode  <>  '" + stringBarCode + "' " + " AND  M10.RetainBarCode  =  '"
        + stringRetainBarCode + "' " + " AND  UNDERGO_WRITE  <>  'E' ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    return retDoc2M010[0][0];
  }

  public String getRetainMoneySUM(String stringRetainBarCode, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    boolean booleanExist = false;
    // 0 ID
    stringSql = " SELECT  SUM(RetainMoney) " + " FROM  Doc2M010 M10" + " WHERE  M10.BarCode  =  '" + stringRetainBarCode + "' " + " AND  UNDERGO_WRITE  <>  'E' " + stringSqlAnd;
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    return retDoc2M010[0][0];
  }

  public String[][] getUndergoWriterDoc2M010(String stringBarCode, String stringFactoryNo) throws Throwable {
    return getUndergoWriterDoc2M010(stringBarCode, "", stringFactoryNo);
  }

  public String[][] getUndergoWriterDoc2M010(String stringBarCode, String stringComNo, String stringFactoryNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    boolean booleanFirstTime = false;
    // 0 UNDERGO_WRITE 1 BarCode
    stringSql = " SELECT  UNDERGO_WRITE,  BarCode " + " FROM  Doc2M010 " + " WHERE  BarCode  <>  '" + stringBarCode + "' " + " AND  (BarCode  IN  (SELECT  BarCode  "
        + " FROM  Doc2M011 " + " WHERE  FactoryNo  =  '" + stringFactoryNo + "') " + " OR  BarCode  IN  (SELECT  BarCode  " + " FROM  Doc2M013 " + " WHERE  FactoryNo  =  '"
        + stringFactoryNo + "') " + " OR FactoryNoSpec  =  '" + stringFactoryNo + "') ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    return retDoc2M010;
  }

  public String getMaxIDForDoc2M010() throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return getMaxIDUnionDoc("Doc2M010", exeUtil);
  }

  // 請購單是否存在於 Doc2M010，存在回傳 true，否則回傳 false
  public boolean isExistDoc2M010(String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3) throws Throwable {
    return isExistDoc2M010(stringComNo, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "");
  }

  // 請購單是否存在於 Doc2M010，存在回傳 true，否則回傳 false
  public boolean isExistDoc2M010(String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    boolean booleanStatus = false;
    //
    stringSql = "SELECT  M10.BarCode " + " FROM  Doc2M010 M10,  Doc2M017 M17 " + " WHERE  M17.BarCode  =  M10.BarCode " + " AND  M17.PurchaseNo1  =  '" + stringPurchaseNo1 + "' "
        + " AND  M17.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M17.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M10.ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringPurchaseNo4))
      stringSql += " AND  M17.PurchaseNo4  =  '" + stringPurchaseNo4 + "' ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M010.length > 0)
      booleanStatus = true;
    for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
      System.out.println((intNo + 1) + "已使用(Doc2M010)--------------" + retDoc2M010[intNo][0]);
    }
    return booleanStatus;
  }

  public boolean isExistSignDoc2M010(String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4, String stringSign,
      String stringEDateTime) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    boolean booleanStatus = false;
    //
    stringSql = "SELECT  M10.BarCode " + " FROM  Doc2M010 M10,  Doc2M017 M17 " + " WHERE  M17.BarCode  =  M10.BarCode " + " AND  M17.PurchaseNo1  =  '" + stringPurchaseNo1 + "' "
        + " AND  M17.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M17.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M17.PurchaseNo4  =  '" + stringPurchaseNo4
        + "' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.EDateTime  " + stringSign + "  '" + stringEDateTime + "' ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M010.length > 0)
      booleanStatus = true;
    for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
      System.out.println((intNo + 1) + "已使用(Doc2M010)--------------" + retDoc2M010[intNo][0]);
    }
    return booleanStatus;
  }

  public String[][] getDoc2M010(String stringBarCode) throws Throwable {
    return getDoc2M010Union("Doc2M010", stringBarCode);
  }

  public String[][] getDoc2M010Union(String stringTable, String stringBarCode) throws Throwable {
    String stringSql = "";
    String RetainMoney = "DOC5M050".equals(stringTable.toUpperCase()) ? "''" : "RetainMoney";
    String PayCondition1 = "DOC5M050".equals(stringTable.toUpperCase()) ? "''" : "PayCondition1";
    String PayCondition2 = "DOC5M050".equals(stringTable.toUpperCase()) ? "''" : "PayCondition2";
    String PurchaseNoExist = "DOC5M050".equals(stringTable.toUpperCase()) ? "''" : "PurchaseNoExist";
    String PrintCount = "DOC5M050".equals(stringTable.toUpperCase()) ? "''" : "PrintCount";
    String AccountCount = "DOC5M050".equals(stringTable.toUpperCase()) ? "''" : "AccountCount";
    String WriteRetainMoney = "DOC5M050".equals(stringTable.toUpperCase()) ? "''" : "WriteRetainMoney";
    String RetainBarCode = "DOC5M050".equals(stringTable.toUpperCase()) ? "''" : "RetainBarCode";
    String DocNoType = "DOC5M050".equals(stringTable.toUpperCase()) ? "''" : "DocNoType";
    String FactoryNoSpec = "DOC5M050".equals(stringTable.toUpperCase()) ? "''" : "FactoryNoSpec";
    String LastPayDate = "DOC5M050".equals(stringTable.toUpperCase()) ? "''" : "LastPayDate";
    String DepartNo1 = "DOC5M050,DOC2M010,".indexOf(stringTable.toUpperCase()) != -1 ? "''" : "DepartNo1";
    String DepartNo2 = "DOC5M050,DOC2M010,".indexOf(stringTable.toUpperCase()) != -1 ? "''" : "DepartNo2";
    String[][] retDoc2M010 = null;
    // 0 ComNo 1 Descript 2 3 BarCode 4 DocNo
    // 5 UNDERGO_WRITE 6 7 8 9 DocNo1
    // 10 DocNo2 11 DocNo3 12 DepartNo 13 RetainMoney 14 PayCondition1
    // 15 PayCondition2 16 CDate 17 OriEmployeeNo 18 Descript 19 PreFinDate
    // 20 PurchaseNoExist 21 PrintCount 22 EDateTime 23 CTime 24 AccountCount
    // 25 WriteRetainMoney 26 RetainBarCode 27 DocNoType 28 FactoryNoSpec 29
    // LastPayDate
    // 30 EmployeeNo 31 DepartNo1 32 DepartNo2 33 KindNo
    stringSql = "SELECT  ComNo,                Descript,          '',             BarCode,           DocNo, "
        + " UNDERGO_WRITE,        '',                '',             '',                DocNo1, " + " DocNo2,               DocNo3,            DepartNo,       " + RetainMoney
        + ",   " + PayCondition1 + ", " + " " + PayCondition2 + ",    CDate,             OriEmployeeNo,  Descript,          PreFinDate, " + " " + PurchaseNoExist + ",  "
        + PrintCount + ",    EDateTime,      CTime,             " + AccountCount + ", " + " " + WriteRetainMoney + ", " + RetainBarCode + ", " + DocNoType + ",  " + FactoryNoSpec
        + ", " + LastPayDate + ", " + " EmployeeNo" + ", " + DepartNo1 + ", " + DepartNo2 + ",  KindNo " + " FROM  " + stringTable + " " + " WHERE  BarCode  =  '" + stringBarCode
        + "' ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    return retDoc2M010;
  }

  public String[][] getDoc2M010(String stringDepartNo, String stringStartDate, String stringEndDate) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    // 0 CDate 1 DocNo1 2 DocNo2 3 DocNo3 4 Descript
    // 5 EmployeeNo 6 BarCode
    stringSql = "SELECT  CDate,       DocNo1,    DocNo2,  DocNo3,  Descript, " + " EmployeeNo,  BarCode" + " FROM  Doc2M010 " + " WHERE  DepartNo  =  '" + stringDepartNo + "' "
        + " AND  CDate  >=  '" + stringStartDate + "' " + " AND  CDate  <=  '" + stringEndDate + "' " + "ORDER BY  DocNo1,  DocNo2,  DocNo3 ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    return retDoc2M010;
  }

  public void doUpdateRetainMoneyForDoc2M010(String stringBarCode, String stringRetainMoney) throws Throwable {
    doUpdateRetainMoneyForDoc2M010Union("Doc2M010", stringBarCode, stringRetainMoney);
  }

  public void doUpdateRetainMoneyForDoc2M010Union(String stringTable, String stringBarCode, String stringRetainMoney) throws Throwable {
    String stringSql = "";
    //
    stringSql = "UPDATE  " + stringTable + " " + "  SET   RetainMoney  =  '" + stringRetainMoney + "' " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    dbDoc.execFromPool(stringSql);
  }

  public void doUpdateStatusForDoc2M010(String stringBarCode, String stringUndergoWrite) throws Throwable {
    doUpdateUnion("Doc2M010", "UNDERGO_WRITE", stringUndergoWrite, stringBarCode);
  }

  public void doUpdateUnion(String stringTable, String stringFieldName, String stringFieldValue, String stringBarCode) throws Throwable {
    String stringSql = "";
    stringSql = "UPDATE  " + stringTable + " " + "  SET   " + stringFieldName + "  =  '" + stringFieldValue + "' " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    dbDoc.execFromPool(stringSql);
  }

  public void doAddPrintCountForDoc2M010(String stringPrintCount, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    stringSql = "UPDATE  Doc2M010  SET  PrintCount  =  " + stringPrintCount + " " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    dbDoc.execFromPool(stringSql);
  }

  public void doUpdatePayConditionForDoc2M010(String stringPayCondition1, String stringPayCondition2, String stringBarCode) throws Throwable {
    String stringSql = "";
    stringSql = "UPDATE  Doc2M010 " + "  SET   PayCondition1  =  '" + stringPayCondition1 + "', " + "  PayCondition2  =  '" + stringPayCondition2 + "' " + " WHERE  BarCode  =  '"
        + stringBarCode + "' ";
    dbDoc.execFromPool(stringSql);
  }

  // 取得最大之 BarCode
  public String getMaxBarCode(String stringBarCodeFirst) throws Throwable {
    String stringSql = "";
    String stringBarCode = "";
    String[][] retDoc = null;
    int intBarCode2 = 1;
    int intBarCode3 = 1;
    // 請款
    stringSql = "SELECT  Max(BarCode)  FROM  Doc2M010  WHERE  BarCode  LIKE  '" + stringBarCodeFirst + "%' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    stringBarCode = retDoc[0][0].trim();
    if (!"".equals(stringBarCode))
      intBarCode2 = doParseInteger(stringBarCode.substring(1, stringBarCode.length())) + 1;
    //
    stringSql = "SELECT  Max(BarCode)  FROM  Doc5M020  WHERE  BarCode  LIKE  '" + stringBarCodeFirst + "%' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    stringBarCode = retDoc[0][0].trim();
    if (!"".equals(stringBarCode))
      intBarCode2 = doParseInteger(stringBarCode.substring(1, stringBarCode.length())) + 1;
    // 借款
    stringSql = "SELECT  Max(BarCode)  FROM  Doc6M010  WHERE  BarCode  LIKE  '" + stringBarCodeFirst + "%' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    stringBarCode = retDoc[0][0].trim();
    if (!"".equals(stringBarCode))
      intBarCode3 = doParseInteger(stringBarCode.substring(1, stringBarCode.length())) + 1;
    if (intBarCode2 < intBarCode3)
      intBarCode2 = intBarCode3;
    //
    stringSql = "SELECT  Max(BarCode)  FROM  Doc5M030  WHERE  BarCode  LIKE  '" + stringBarCodeFirst + "%' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    stringBarCode = retDoc[0][0].trim();
    if (!"".equals(stringBarCode))
      intBarCode3 = doParseInteger(stringBarCode.substring(1, stringBarCode.length())) + 1;
    if (intBarCode2 < intBarCode3)
      intBarCode2 = intBarCode3;
    // 支出證明單
    stringSql = "SELECT  Max(BarCode)  FROM  Doc5M050  WHERE  BarCode  LIKE  '" + stringBarCodeFirst + "%' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    stringBarCode = retDoc[0][0].trim();
    if (!"".equals(stringBarCode))
      intBarCode3 = doParseInteger(stringBarCode.substring(1, stringBarCode.length())) + 1;
    if (intBarCode2 < intBarCode3)
      intBarCode2 = intBarCode3;
    // 公文追蹤
    stringSql = "SELECT  Max(BarCode)  FROM  Doc1M030  WHERE  BarCode  LIKE  '" + stringBarCodeFirst + "%' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    stringBarCode = retDoc[0][0].trim();
    if (!"".equals(stringBarCode))
      intBarCode3 = doParseInteger(stringBarCode.substring(1, stringBarCode.length())) + 1;
    if (intBarCode2 < intBarCode3)
      intBarCode2 = intBarCode3;
    // 請購單
    stringSql = "SELECT  Max(BarCode)  FROM  Doc3M011  WHERE  BarCode  LIKE  '" + stringBarCodeFirst + "%' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    stringBarCode = retDoc[0][0].trim();
    if (!"".equals(stringBarCode))
      intBarCode3 = doParseInteger(stringBarCode.substring(1, stringBarCode.length())) + 1;
    if (intBarCode2 < intBarCode3)
      intBarCode2 = intBarCode3;
    //
    stringSql = "SELECT  Max(BarCode)  FROM  Doc5M011  WHERE  BarCode  LIKE  '" + stringBarCodeFirst + "%' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    stringBarCode = retDoc[0][0].trim();
    if (!"".equals(stringBarCode))
      intBarCode3 = doParseInteger(stringBarCode.substring(1, stringBarCode.length())) + 1;
    if (intBarCode2 < intBarCode3)
      intBarCode2 = intBarCode3;
    //
    stringBarCode = stringBarCodeFirst + convert.add0("" + intBarCode2, "5");
    return stringBarCode;
  }

  public String getMaxBarCodeDoc5(String stringBarCodeFirst) throws Throwable {
    String stringSql = "";
    String stringBarCode = "";
    String stringDateUse = "2009/01/05";
    String stringToday = datetime.getToday("YYYY/mm/dd");
    String[][] retDoc = null;
    int intBarCode2 = 1;
    int intBarCode3 = 1;
    boolean booleanTEST = (stringToday.compareTo(stringDateUse) < 0);// 一般物料 12/8 上線 true 測試 true 正式
    // 請款
    stringSql = "SELECT  Max(BarCode)  FROM  Doc5M020  WHERE  BarCode  LIKE  '" + stringBarCodeFirst + "%' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    stringBarCode = retDoc[0][0].trim();
    if (!"".equals(stringBarCode))
      intBarCode2 = doParseInteger(stringBarCode.substring(1, stringBarCode.length())) + 1;
    // 借款
    stringSql = "SELECT  Max(BarCode)  FROM  Doc5M030  WHERE  BarCode  LIKE  '" + stringBarCodeFirst + "%' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    stringBarCode = retDoc[0][0].trim();
    if (!"".equals(stringBarCode))
      intBarCode3 = doParseInteger(stringBarCode.substring(1, stringBarCode.length())) + 1;
    if (intBarCode2 < intBarCode3)
      intBarCode2 = intBarCode3;

    // 請購單
    stringSql = "SELECT  Max(BarCode)  FROM  Doc5M011  WHERE  BarCode  LIKE  '" + stringBarCodeFirst + "%' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    stringBarCode = retDoc[0][0].trim();
    if (!"".equals(stringBarCode))
      intBarCode3 = doParseInteger(stringBarCode.substring(1, stringBarCode.length())) + 1;
    if (intBarCode2 < intBarCode3)
      intBarCode2 = intBarCode3;
    //
    stringBarCode = stringBarCodeFirst + convert.add0("" + intBarCode2, "5");
    return stringBarCode;
  }

  // 條碼存在檢核，存在 false，不存在 true。
  public boolean isExistBarCodeCheck(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc = null;
    // 請購單
    stringSql = "SELECT  BarCode  FROM  Doc3M011  WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    if (retDoc.length != 0) {
      System.out.println("-----------------與 [請購單] 之條碼編號重複。");
      return false;
    }
    stringSql = "SELECT  BarCode  FROM  Doc5M011  WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    if (retDoc.length != 0) {
      System.out.println("-----------------與 [請購單-一般物料] 之條碼編號重複。");
    }
    // 公文追蹤
    stringSql = "SELECT  BarCode  FROM  Doc1M030  WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    if (retDoc.length != 0) {
      System.out.println("-----------------與 [公文追蹤] 之條碼編號重複。");
      return false;
    }
    // 請款
    stringSql = "SELECT  BarCode  FROM  Doc2M010  WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    if (retDoc.length != 0) {
      System.out.println("-----------------與 [請款] 之條碼編號重複。");
      return false;
    }
    stringSql = "SELECT  BarCode  FROM  Doc5M020  WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    if (retDoc.length != 0) {
      System.out.println("-----------------與 [請款-一般物料] 之條碼編號重複。");
      return false;
    }
    // 支出證明單
    stringSql = "SELECT  BarCode  FROM  Doc5M050  WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    if (retDoc.length != 0) {
      System.out.println("-----------------與 [支出證明單] 之條碼編號重複。");
      return false;
    }
    // 借款
    stringSql = "SELECT  BarCode  FROM  Doc6M010  WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    if (retDoc.length != 0) {
      System.out.println("-----------------與 [借款] 之條碼編號重複。");
      return false;
    }
    stringSql = "SELECT  BarCode  FROM  Doc5M030  WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc = dbDoc.queryFromPool(stringSql);
    if (retDoc.length != 0) {
      System.out.println("-----------------與 [借款-一般物料] 之條碼編號重複。");
      return false;
    }
    return true;
  }

  // 請款申請書-簽核總理之表格資料
  public String[][] getTableForDoc2M010(String stringBarCodeQ, String stringDescriptQ, String stringStatusQ, String stringFactoryNoQ, String stringDocNoQ, String stringCompanyCdQ,
      String stringDepartCdQ, String stringInvoiceNoQ, String stringVoucherYmd, String stringVoucherFlowNo, String stringPurchaseNoQ) throws Throwable {
    Vector vectorData = new Vector();
    vectorData = getTableForDoc2M010(stringBarCodeQ, stringDescriptQ, stringStatusQ, stringFactoryNoQ, stringDocNoQ, stringCompanyCdQ, stringDepartCdQ, stringInvoiceNoQ,
        stringVoucherYmd, stringVoucherFlowNo, stringPurchaseNoQ, vectorData, "", "", true);
    return (String[][]) vectorData.toArray(new String[0][0]);
  }

  public Vector getTableForDoc2M010(String stringBarCodeQ, String stringDescriptQ, String stringStatusQ, String stringFactoryNoQ, String stringDocNoQ, String stringCompanyCdQ,
      String stringDepartCdQ, String stringInvoiceNoQ, String stringVoucherYmd, String stringVoucherFlowNo, String stringPurchaseNoQ, Vector vectorData, String stringLastPayDate,
      String stringUserIDQ, boolean booleanSource) throws Throwable {
    String stringSql = "";
    String stringToday = datetime.getToday("YYYY/mm/dd");
    String[][] retDoc2M010 = null;
    double doubleTaxRate = doParseDouble(getDoc2M040()[4].trim());
    // 0 BarCode 1 ComNo 2 DepartNo 3 DocNo1 4 DocNo2 5 DocNo3 6 Descript
    // 7 RetainBarCode 8 WriteRetainMoney 9 FactoryNoSpec 10 PurchaseNoExist
    stringSql = "SELECT  DISTINCT  M10.BarCode,           M10.ComNo,         M10.DepartNo,  M10.DocNo1, "
        + " M10.DocNo2,            M10.DocNo3,        M10.Descript,  M10.RetainBarCode, " + " M10.WriteRetainMoney,  M10.FactoryNoSpec, M10.PurchaseNoExist " + " FROM  "
        + (booleanSource ? "Doc2M010" : "Doc5M020") + " M10  " + " WHERE  1  =  1 ";
    // 傳票
    if (!"".equals(stringVoucherYmd)) {
      stringSql += " AND  BarCode  IN  (SELECT  BarCode " + "  FROM  Doc2M014 " + " WHERE  VOUCHER_YMD  =  '" + stringVoucherYmd + "'";
      if (!"".equals(stringVoucherFlowNo)) {
        stringSql += " AND  VOUCHER_FLOW_NO  =  " + stringVoucherFlowNo + " ";
      }
      if (!"".equals(stringCompanyCdQ)) {
        stringSql += " AND COMPANY_CD  =  '" + stringCompanyCdQ + "' ";
      }
      stringSql += ") ";
    }
    // 最遲付款日
    if (!booleanSource && !"".equals(stringLastPayDate)) {
      stringSql += " AND  M10.LastPayDate  >=  '" + stringLastPayDate + "' ";
    }
    // 請購單號
    if (!"".equals(stringPurchaseNoQ)) {
      stringSql += " AND  BarCode  IN  (SELECT  BarCode " + "  FROM  " + (booleanSource ? "Doc2M017" : "Doc5M027") + " " + " WHERE  PurchaseNo  LIKE  '%" + stringPurchaseNoQ
          + "%' ";
      if (!"".equals(stringCompanyCdQ)) {
        stringSql += " AND  ComNo  =  '" + stringCompanyCdQ + "' ";
      }
      stringSql += ") ";
    }
    // 發票號碼
    if (!"".equals(stringInvoiceNoQ)) {
      if (booleanSource) {
        stringSql += " AND  BarCode  IN  (SELECT  BarCode  FROM  Doc2M011  WHERE InvoiceNo  =  '" + stringInvoiceNoQ + "')";
      } else {
        stringSql += " AND  BarCode  IN  (SELECT  BarCode  FROM  Doc5M021   WHERE InvoiceNo  =  '" + stringInvoiceNoQ + "' UNION "
            + " SELECT  BarCode  FROM  Doc5M0211  WHERE InvoiceNo  =  '" + stringInvoiceNoQ + "')";
      }
    }
    // 條碼編號
    if (!"".equals(stringBarCodeQ)) {
      String stringSqlL = "";
      String stringBarCodeL = "";
      String[] arrayBarCode = convert.StringToken(stringBarCodeQ, ",");
      for (int intNo = 0; intNo < arrayBarCode.length; intNo++) {
        stringBarCodeL = arrayBarCode[intNo].trim();
        //
        if ("".equals(stringBarCodeL))
          continue;
        //
        if (!"".equals(stringSqlL))
          stringSqlL += ", ";
        stringSqlL += " '" + stringBarCodeL + "' ";
      }
      if (!"".equals(stringSqlL))
        stringSql += " AND M10.BarCode IN (" + stringSqlL + ") ";
    }
    // 公文內容
    if (!"".equals(stringDescriptQ)) {
      stringSql += " AND M10.Descript  LIKE  '%" + stringDescriptQ + "%' ";
    }
    // 公司
    if (!"".equals(stringCompanyCdQ)) {
      stringSql += " AND M10.ComNo  =  '" + stringCompanyCdQ + "' ";
    }
    // 人員權限
    if (!"".equals(stringUserIDQ) && !"B3018".equals(stringUserIDQ) && stringUserIDQ.length() != 6) {
      stringSql += " AND M10.ComNo IN (SELECT  ComNo " + " FROM  Doc2M046 " + " WHERE  EmployeeNo  =  '" + stringUserIDQ + "' "
          + " AND  (UseDateStart = '9999/99/99'  OR UseDateStart <= '" + stringToday + "') " + " AND  UseDateEnd   >= '" + stringToday + "' ) ";
    }
    // 部門
    if (!"".equals(stringDepartCdQ)) {
      stringSql += " AND M10.DepartNo  =  '" + stringDepartCdQ + "' ";
    }
    // 狀態
    if (!"ALL".equals(stringStatusQ)) {
      if (!"Z6".equals(stringCompanyCdQ)) {
        if ("F".equals(stringStatusQ))
          stringStatusQ = "A";
      }
      if ("F".equals(stringStatusQ)) {
        stringSql += " AND  M10.UNDERGO_WRITE  =  'A'  "; // (經辦)
      } else if ("A".equals(stringStatusQ)) {
        stringSql += " AND  M10.UNDERGO_WRITE  =  'B'  "; // (業管-簽核)
      } else if ("E".equals(stringStatusQ)) {
        stringSql += " AND  M10.UNDERGO_WRITE  =  'E'  "; // (財務-作廢)
      } else if ("X".equals(stringStatusQ)) {
        stringSql += " AND  M10.UNDERGO_WRITE  =  'X'  "; // (財務-退件)
      } else {
        // 已審核、已轉傳票
        stringSql += " AND  M10.BarCode  IN (SELECT  BarCode " + " FROM  Doc2M014 " + " WHERE  STATUS_CD  =  '" + stringStatusQ + "'  ";
        if (!"".equals(stringCompanyCdQ)) {
          stringSql += " AND  COMPANY_CD  =  '" + stringCompanyCdQ + "' ";
        }
        stringSql += " ) ";
      }
    }
    // 統一編號
    if (!"".equals(stringFactoryNoQ)) {
      stringSql += " AND  (M10.BarCode  IN (SELECT  BarCode " + " FROM  " + (booleanSource ? "Doc2M011" : "Doc5M021") + " " + " WHERE   FactoryNo  =  '" + stringFactoryNoQ + "') "
          + " OR  M10.BarCode  IN (SELECT  BarCode " + " FROM  " + (booleanSource ? "Doc2M013" : "Doc5M023") + " " + " WHERE   FactoryNo  =  '" + stringFactoryNoQ + "')) ";
    }
    // 公文編碼
    if (!"".equals(stringDocNoQ)) {
      stringSql += " AND   M10.DocNo  LIKE  '%" + stringDocNoQ + "%' ";
    }
    stringSql += " ORDER BY  M10.BarCode,  M10.DocNo1,  M10.DocNo2,  M10.DocNo3,  M10.ComNo,  M10.DepartNo ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    // 再處理
    if (retDoc2M010.length == 0)
      return vectorData;
    //
    String stringBarCode = "";
    String stringComNo = "";
    String stringDepartNo = "";
    String stringDocNo1 = "";
    String stringDocNo2 = "";
    String stringDocNo3 = "";
    String stringDescript = "";
    String stringStatus = "";
    String stringFactoryNo = "";
    String stringFactoryNo2 = "";
    String stringProjectID = "";
    String stringProjectID1 = "";
    String stringRealMoneySum = "";
    String stringRetainBarCode = "";
    String stringVoucherYMD = "";
    String stringPurchaseNoExist = "";
    String[] retTableData = null;
    String[][] retDoc2M011 = null;// 發票
    String[][] retDoc2M012 = null;// 費用
    String[][] retDoc2M013 = null;// 扣繳
    String[][] retDoc2M014 = null;// 傳票
    String[][] retFED1012 = null;
    Vector vectorBarCode = new Vector();
    Vector vectorCostID224 = getDoc2M0401V("", "D", " AND  FunctionName  LIKE  '%立沖傳票對應%' "); // 立沖對應傳票，允許部門、案別為空白
    // 0 BarCode 1 ComNo 2 DepartNo 3 DocNo1 4 DocNo2 5 DocNo3 6 Descript
    for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
      retTableData = new String[7];
      stringBarCode = retDoc2M010[intNo][0].trim();
      stringBarCodeQ = stringBarCode;
      stringComNo = retDoc2M010[intNo][1].trim();
      stringDepartNo = retDoc2M010[intNo][2].trim();
      stringDocNo1 = retDoc2M010[intNo][3].trim();
      stringDocNo2 = retDoc2M010[intNo][4].trim();
      stringDocNo3 = retDoc2M010[intNo][5].trim();
      stringDescript = retDoc2M010[intNo][6].trim();
      stringRetainBarCode = retDoc2M010[intNo][7].trim();
      stringPurchaseNoExist = retDoc2M010[intNo][10].trim();
      stringStatus = "";
      if (vectorBarCode.indexOf(stringBarCode) != -1)
        continue;
      vectorBarCode.add(stringBarCode);
      // 狀態
      retDoc2M014 = getDoc2M014(stringBarCode);
      if (retDoc2M014.length > 0) {
        stringStatus = retDoc2M014[0][17].trim();
        if ("Z".equals(stringStatus)) {
          stringVoucherYMD = convert.ac2roc(retDoc2M014[0][4].trim().replaceAll("/", ""));
          retFED1012 = getFED1012(stringVoucherYMD, retDoc2M014[0][5].trim(), retDoc2M014[0][7].trim(), retDoc2M014[0][8].trim());
          if (retFED1012.length > 0) {
            stringStatus = stringVoucherYMD + "-" + convert.add0(retDoc2M014[0][5].trim(), "4");
          } else {
            stringStatus = "U";
          }
        }
      }
      if ("".equals(stringStatus))
        stringStatus = "X";
      // 對象
      stringFactoryNo = "";
      if (!"".equals(stringRetainBarCode)) {
        stringBarCodeQ = stringRetainBarCode;
        String[][] retDoc5M0220 = getDoc5M0220("", "", stringBarCode, "");
        if (retDoc5M0220.length > 0) {
          stringFactoryNo = retDoc5M0220[0][2].trim();
        }
      }
      if ("".equals(stringFactoryNo)) {
        retDoc2M011 = booleanSource ? getDoc2M011(stringBarCodeQ) : getDoc5M021(stringBarCodeQ);
        if (retDoc2M011.length > 0) {
          stringFactoryNo = retDoc2M011[0][0].trim();
        } else {
          retDoc2M013 = booleanSource ? getDoc2M013(stringBarCodeQ) : getDoc5M023(stringBarCodeQ);
          if (retDoc2M013.length > 0) {
            stringFactoryNo = retDoc2M013[0][0].trim();
          } else {
            retDoc2M011 = getDoc2M011Union("Doc5M0211", stringBarCodeQ);
            if (retDoc2M011.length > 0) {
              stringFactoryNo = retDoc2M011[0][0].trim();
            } else {
              stringFactoryNo = retDoc2M010[intNo][9].trim();
              if ("".equals(stringFactoryNo)) {
                retDoc2M012 = booleanSource ? getDoc2M012(stringBarCodeQ) : getDoc5M022(stringBarCodeQ);
                if (retDoc2M012.length > 0) {
                  stringFactoryNo = ("I".equals(retDoc2M012[0][0].trim())) ? "Z0001" : "Z0007";
                }
              }
            }
          }
        }
      }
      // 零用金判斷
      retDoc2M012 = getDoc2M012Union(booleanSource ? "Doc2M012" : "Doc5M022", stringBarCodeQ);
      for (int i = 0; i < retDoc2M012.length; i++) {
        if ("Y".equals(stringPurchaseNoExist))
          continue;
        //
        if (",F297001,A210302,A210202,A210402,C010304,101,420,".indexOf("," + retDoc2M012[i][4].trim() + retDoc2M012[i][5].trim() + ",") != -1) {
          stringFactoryNo = "Z0001";
          break;
        }
        if (",F304001,A010107,".indexOf("," + retDoc2M012[i][4].trim() + ",") != -1) {
          stringFactoryNo = "Z0006";
          break;
        }
        // A110103(辦公室押金退)、A312101(退租賃保證金)、A030100(福利金提撥)
        if (",A110103,A312101,A030100,".indexOf("," + retDoc2M012[i][4].trim() + ",") != -1) {
          String[][] retDoc5M0224 = getDoc5M0224(stringBarCode, "");
          if (retDoc5M0224.length > 0)
            stringFactoryNo = retDoc5M0224[0][4].trim();
          break;
        }
        if (",F273701,".indexOf("," + retDoc2M012[i][4].trim() + ",") == -1 && vectorCostID224.indexOf(retDoc2M012[i][4].trim()) != -1) {
          // if("F282201,F282301,F282302,F283101,F283102,F283103,F283201,F283202,F283203,F283204,F283205,F283206,F283207,F283299,F283301,F283401,F283501,F283502".indexOf(retDoc2M012[i][4].trim()+",")!=-1)
          // {
          stringFactoryNo = "G0010";
          break;
        }
      }
      //
      if (doParseDouble(stringRetainBarCode) == 0) {
        stringRealMoneySum = getRealTotalMoneySumForDoc2M012Union(booleanSource ? "Doc2M012" : "Doc5M022", stringBarCode);
      } else {
        stringRealMoneySum = retDoc2M010[intNo][8].trim();
      }
      // 流水號
      retTableData[0] = "" + (intNo + 1);
      // 公文編號
      retTableData[1] = stringDocNo1 + "-" + stringDocNo2 + "-" + stringDocNo3;
      // 條碼編號
      retTableData[2] = stringBarCode;
      // 統一編號
      retTableData[3] = stringFactoryNo;
      // 公文內容
      retTableData[4] = stringDescript;
      // 金額
      retTableData[5] = stringRealMoneySum;
      // 狀態
      retTableData[6] = stringStatus;
      if (!booleanSource)
        System.out.println("-----------------" + stringBarCode);
      vectorData.add(retTableData);
    }
    return vectorData;
  }

  // 已申請金額
  public String getExistRealMoneyForFactoryNo(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringFactoryNo) throws Throwable {
    return getExistRealMoneyForFactoryNo(true, stringBarCode, stringComNo, stringPurchaseNo1 + stringPurchaseNo2 + stringPurchaseNo3, stringFactoryNo, "", "");
  }

  public String getExistRealMoneyForFactoryNo(boolean booleanSource, String stringBarCode, String stringComNo, String stringPurchaseNo, String stringFactoryNo, String stringSqlAnd,
      String stringSqlAnd2) throws Throwable {
    return getExistRealMoneyForFactoryNoUnion(true, stringBarCode, stringComNo, stringPurchaseNo, stringFactoryNo, "24", "", "");
  }

  public String getExistRealMoneyForFactoryNoUnion(boolean booleanSource, String stringBarCode, String stringComNo, String stringPurchaseNo, String stringFactoryNo,
      String stringKindNo, String stringSqlAnd, String stringSqlAnd2) throws Throwable {
    String stringPurchaseMoney = "0";
    String stringSql = "";
    String stringTable10 = booleanSource ? "Doc2M010" : "Doc5M020";
    String stringTable17 = booleanSource ? "Doc2M017" : "Doc2M027";
    String stringTable102 = booleanSource ? "Doc6M010" : "Doc5M030";
    String stringTable12 = booleanSource ? "Doc6M012" : "Doc5M032";
    String[][] retDoc2M012 = null;
    String[][] retDoc6M012 = null;
    double doublePurchaseMoney = 0;
    // 請款
    stringSql = "SELECT  SUM(M17.PurchaseMoney) " + "FROM  " + stringTable10 + " M10,  " + stringTable17 + " M17 " + " WHERE  M10.BarCode  =  M17.BarCode "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.PurchaseNo  =  '" + stringPurchaseNo + "' " + " AND  M17.FactoryNo  =  '"
        + stringFactoryNo + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' " + " AND  M10.BarCode NOT IN (SELECT BarCode  FROM  Doc2M014 WHERE  STATUS_CD  =  'Z') "
        + stringSqlAnd;
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M012.length != 0) {
      stringPurchaseMoney = "" + doParseDouble(retDoc2M012[0][0].trim());
      stringPurchaseMoney = convert.FourToFive(stringPurchaseMoney, 0);
    }
    // System.out.println("已申請金額1---------------"+stringPurchaseMoney) ;
    // 借款
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + "FROM  " + stringTable102 + " M10,  " + stringTable12 + " M12 " + " WHERE  M10.BarCode  =  M12.BarCode "
        + " AND  M10.PurchaseNoExist  =  'Y' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.PurchaseNo  =  '" + stringPurchaseNo + "' " + " AND  M10.FactoryNo  =  '"
        + stringFactoryNo + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' " + " AND  M10.BarCode NOT IN (SELECT BarCode  FROM  Doc2M014 WHERE  STATUS_CD  =  'Z') "
        + stringSqlAnd2;
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length != 0) {
      stringPurchaseMoney = "" + (doParseDouble(stringPurchaseMoney) + doParseDouble(retDoc6M012[0][0].trim()));
      stringPurchaseMoney = convert.FourToFive(stringPurchaseMoney, 0);
    }
    if (!booleanSource)
      return stringPurchaseMoney;
    // 借款-新增
    stringTable12 = booleanSource ? "Doc6M0121" : "";
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + "FROM  " + stringTable102 + " M10,  " + stringTable12 + " M12 " + " WHERE  M10.BarCode  =  M12.BarCode "
        + " AND  M10.PurchaseNoExist  =  'YY' " + " AND  M12.DocType          =  'B' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.PurchaseNo  =  '"
        + stringPurchaseNo + "' " + " AND  M10.FactoryNo  =  '" + stringFactoryNo + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' "
        + " AND  M10.BarCode NOT IN (SELECT BarCode  FROM  Doc2M014 WHERE  STATUS_CD  =  'Z') " + stringSqlAnd2;
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length != 0) {
      stringPurchaseMoney = "" + (doParseDouble(stringPurchaseMoney) + doParseDouble(retDoc6M012[0][0].trim()));
      stringPurchaseMoney = convert.FourToFive(stringPurchaseMoney, 0);
    }
    // System.out.println("已申請金額2---------------"+stringPurchaseMoney) ;
    //
    return stringPurchaseMoney;
  }

  public String getExistRealMoney(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3) throws Throwable {
    return getExistRealMoneyUnion(stringBarCode, stringComNo, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", "24");
  }

  public String getExistRealMoney(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4)
      throws Throwable {
    return getExistRealMoneyUnion(stringBarCode, stringComNo, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, stringPurchaseNo4, "24");
  }

  public String getExistRealMoneyUnion(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringPurchaseNo4, String stringKindNo) throws Throwable {
    String stringPurchaseMoney = "0";
    String stringSql = "";
    String[][] retDoc2M012 = null;
    String[][] retDoc6M012 = null;
    double doublePurchaseMoney = 0;
    // 請款
    stringSql = "SELECT  SUM(M17.PurchaseMoney) " + "FROM  Doc2M010 M10,  Doc2M017 M17 " + " WHERE  M10.BarCode  =  M17.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  M17.PurchaseNo2  =  '" + stringPurchaseNo2 + "' "
        + " AND  M17.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' "
        + " AND  M10.BarCode NOT IN (SELECT BarCode  FROM  Doc2M014 WHERE  STATUS_CD  =  'Z') ";
    if (!"".equals(stringPurchaseNo4))
      stringSql += " AND  M17.PurchaseNo4  =  '" + stringPurchaseNo4 + "' ";
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M012.length != 0) {
      stringPurchaseMoney = "" + doParseDouble(retDoc2M012[0][0].trim());
      stringPurchaseMoney = convert.FourToFive(stringPurchaseMoney, 0);
    }
    // System.out.println("已申請金額1---------------"+stringPurchaseMoney) ;
    // 借款
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + "FROM  Doc6M010 M10,  Doc6M012 M12 " + " WHERE  M10.BarCode  =  M12.BarCode " + " AND  M10.PurchaseNoExist  =  'Y' "
        + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' "
        + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' "
        + " AND  M10.BarCode NOT IN (SELECT BarCode  FROM  Doc2M014 WHERE  STATUS_CD  =  'Z') ";
    if (!"".equals(stringPurchaseNo4))
      stringSql += " AND  M10.PurchaseNo4  =  '" + stringPurchaseNo4 + "' ";
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length != 0) {
      stringPurchaseMoney = "" + (doParseDouble(stringPurchaseMoney) + doParseDouble(retDoc6M012[0][0].trim()));
      stringPurchaseMoney = convert.FourToFive(stringPurchaseMoney, 0);
    }
    // 借款-新增
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + "FROM  Doc6M010 M10,  Doc6M012 M12 " + " WHERE  M10.BarCode  =  M12.BarCode " + " AND  M10.PurchaseNoExist  =  'YY' "
        + " AND  M12.DocType          =  'B' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.PurchaseNo1  =  '" + stringPurchaseNo1 + "' "
        + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' "
        + " AND  M10.BarCode NOT IN (SELECT BarCode  FROM  Doc2M014 WHERE  STATUS_CD  =  'Z') ";
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length != 0) {
      stringPurchaseMoney = "" + (doParseDouble(stringPurchaseMoney) + doParseDouble(retDoc6M012[0][0].trim()));
      stringPurchaseMoney = convert.FourToFive(stringPurchaseMoney, 0);
    }
    // System.out.println("已申請金額2---------------"+stringPurchaseMoney) ;
    //
    return stringPurchaseMoney;
  }

  public String getExistRealMoney2(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3) throws Throwable {
    return "" + getUseMoneyUnion(stringBarCode, stringComNo, stringPurchaseNo1 + stringPurchaseNo2 + stringPurchaseNo3, "", "", "24", true);
  }

  public String getExistRealMoney2(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4)
      throws Throwable {
    return "" + getUseMoneyUnion(stringBarCode, stringComNo, stringPurchaseNo1 + stringPurchaseNo2 + stringPurchaseNo3, stringPurchaseNo4, "", "24", true);

  }

  public double getUseMoney(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4,
      boolean booleanTable) throws Throwable {
    return getUseMoneyUnion(stringBarCode, stringComNo, stringPurchaseNo1 + stringPurchaseNo2 + stringPurchaseNo3, stringPurchaseNo4, "", "24", booleanTable);
  }

  public double getUseMoney(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4,
      String stringFactoryNo, boolean booleanTable) throws Throwable {
    return getUseMoneyUnion(stringBarCode, stringComNo, stringPurchaseNo1 + stringPurchaseNo2 + stringPurchaseNo3, stringPurchaseNo4, stringFactoryNo, "24", booleanTable);

  }

  public double getUseMoney(String stringBarCode, String stringComNo, String stringPurchaseNo, String stringPurchaseNo4, String stringFactoryNo, boolean booleanTable)
      throws Throwable {
    return getUseMoneyUnion(stringBarCode, stringComNo, stringPurchaseNo, stringPurchaseNo4, stringFactoryNo, "24", booleanTable);
  }

  public double getUseMoneyUnion(String stringBarCode, String stringComNo, String stringPurchaseNo, String stringPurchaseNo4, String stringFactoryNo, String stringKindNo,
      boolean booleanTable) throws Throwable {
    String stringPurchaseMoney = "0";
    String stringSql = "";
    String stringTable1 = booleanTable ? "Doc2M010" : "Doc5M020";
    String stringTable2 = booleanTable ? "Doc2M017" : "Doc5M027";
    String stringTable3 = booleanTable ? "Doc6M010" : "Doc5M030";
    String stringTable4 = booleanTable ? "Doc6M012" : "Doc5M032";
    String[][] retDoc2M012 = null;
    String[][] retDoc6M012 = null;
    double doublePurchaseMoney = 0;
    // 請款
    stringSql = "SELECT  SUM(M17.PurchaseMoney) " + "FROM  " + stringTable1 + " M10,  " + stringTable2 + " M17 " + " WHERE  M10.BarCode  =  M17.BarCode "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.PurchaseNo  =  '" + stringPurchaseNo + "' " + " AND  M10.BarCode  <>  '"
        + stringBarCode + "' ";
    if (!"".equals(stringPurchaseNo4))
      stringSql += " AND  M17.PurchaseNo4  =  '" + stringPurchaseNo4 + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' ";
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M012.length != 0) {
      stringPurchaseMoney = "" + doParseDouble(retDoc2M012[0][0].trim());
      stringPurchaseMoney = convert.FourToFive(stringPurchaseMoney, 0);
    }
    // System.out.println("已申請金額1---------------"+stringPurchaseMoney) ;
    // 借款
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + "FROM  " + stringTable3 + " M10,  " + stringTable4 + " M12 " + " WHERE  M10.BarCode  =  M12.BarCode "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.PurchaseNoExist  =  'Y' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.PurchaseNo  =  '"
        + stringPurchaseNo + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    if (!"".equals(stringPurchaseNo4))
      stringSql += " AND  M10.PurchaseNo4  =  '" + stringPurchaseNo4 + "' ";
    if (!"".equals(stringFactoryNo)) {
      stringSql += " AND  (M10.BarCode  IN (SELECT BarCode  FROM  Doc6M011 WHERE  FactoryNo  =  '" + stringFactoryNo + "') OR "
          + " M10.BarCode  IN (SELECT BarCode  FROM  Doc6M013 WHERE  FactoryNo  =  '" + "" + "') OR " + " M10.FactoryNo  =  '" + stringFactoryNo + "' ) ";
    }
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length != 0) {
      stringPurchaseMoney = "" + (doParseDouble(stringPurchaseMoney) + doParseDouble(retDoc6M012[0][0].trim()));
      stringPurchaseMoney = convert.FourToFive(stringPurchaseMoney, 0);
    }
    if (!booleanTable)
      return doParseDouble(stringPurchaseMoney);
    //
    // 借款 新增
    stringTable4 = booleanTable ? "Doc6M0121" : "";
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + "FROM  " + stringTable3 + " M10,  " + stringTable4 + " M12 " + " WHERE  M10.BarCode  =  M12.BarCode "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.PurchaseNoExist  =  'YY' " + " AND  M12.DocType          =  'B' " + " AND  M10.ComNo  =  '" + stringComNo + "' "
        + " AND  M10.PurchaseNo  =  '" + stringPurchaseNo + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    if (!"".equals(stringFactoryNo)) {
      stringSql += " AND  (M10.BarCode  IN (SELECT BarCode  FROM  Doc6M011 WHERE  FactoryNo  =  '" + stringFactoryNo + "') OR "
          + " M10.BarCode  IN (SELECT BarCode  FROM  Doc6M013 WHERE  FactoryNo  =  '" + "" + "') OR " + " M10.FactoryNo  =  '" + stringFactoryNo + "' ) ";
    }
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length != 0) {
      stringPurchaseMoney = "" + (doParseDouble(stringPurchaseMoney) + doParseDouble(retDoc6M012[0][0].trim()));
      stringPurchaseMoney = convert.FourToFive(stringPurchaseMoney, 0);
    }
    // System.out.println("已申請金額2---------------"+stringPurchaseMoney) ;
    //
    return doParseDouble(stringPurchaseMoney);
  }

  // 增加 [請購案別]
  public double getUseMoney(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringProjectID1,
      boolean booleanTable, FargloryUtil exeUtil) throws Throwable {
    String stringPurchaseMoney = "0";
    String stringSql = "";
    String stringTable1 = booleanTable ? "Doc2M010" : "Doc5M020";
    String stringTable2 = booleanTable ? "Doc2M017" : "Doc5M027";
    String stringTable3 = booleanTable ? "Doc6M010" : "Doc5M030";
    String stringTable4 = booleanTable ? "Doc6M012" : "Doc5M032";
    String[][] retDoc2M012 = null;
    String[][] retDoc6M012 = null;
    double doublePurchaseMoney = 0;
    // 請款
    stringSql = "SELECT  SUM(M17.PurchaseMoney) " + "FROM  " + stringTable1 + " M10,  " + stringTable2 + " M17 " + " WHERE  M10.BarCode  =  M17.BarCode "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.PurchaseNo1  =  '" + stringPurchaseNo1 + "' "
        + " AND  ISNULL(M17.ProjectID1,'')  =  '" + stringProjectID1 + "' " + " AND  M17.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M17.PurchaseNo3  =  '"
        + stringPurchaseNo3 + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    doublePurchaseMoney = exeUtil.doParseDouble(retDoc2M012[0][0].trim());
    // System.out.println("已申請金額1---------------"+stringPurchaseMoney) ;
    // 借款
    /*
     * stringSql = "SELECT  SUM(M12.RealTotalMoney) " +
     * "FROM  "+stringTable3+" M10,  "+stringTable4+" M12 " +
     * " WHERE  M10.BarCode  =  M12.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
     * + " AND  M10.ComNo  =  '" + stringComNo + "' " +
     * " AND  M10.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " +
     * " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " +
     * " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " +
     * " AND  M10.BarCode  <>  '" + stringBarCode + "' " ;
     * //" AND  M10.BarCode NOT IN (SELECT BarCode  FROM  Doc2M014 WHERE  STATUS_CD  =  'Z') "
     * ; if(!"".equals(stringPurchaseNo4)) stringSql +=
     * " AND  M10.PurchaseNo4  =  '" + stringPurchaseNo4 + "' " ; retDoc6M012 =
     * dbDoc.queryFromPool(stringSql) ; doublePurchaseMoney +=
     * exeUtil.doParseDouble(retDoc6M012[0][0].trim( )) ;
     */
    // System.out.println("已申請金額2---------------"+stringPurchaseMoney) ;
    //
    return doublePurchaseMoney;
  }

  public String getExistRealMoneyYearEnd(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringYear)
      throws Throwable {
    return getExistRealMoneyYearEndUnion(stringBarCode, stringComNo, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "24", stringYear);
  }

  public String getExistRealMoneyYearEndUnion(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringKindNo, String stringYear) throws Throwable {
    String stringPurchaseMoney = "0";
    String stringSql = "";
    String[][] retDoc2M012 = null;
    String[][] retDoc6M012 = null;
    double doublePurchaseMoney = 0;
    // 請款
    stringSql = "SELECT  SUM(M17.PurchaseMoney) " + " FROM  Doc2M010 M10,  Doc2M017 M17 " + " WHERE  M10.BarCode  =  M17.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  (M10.CDate  >=  '" + stringYear + "/01/01" + "' AND  M10.CDate  <=  '" + stringYear + "/12/31" + "') "
        + " AND  M17.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  M17.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M17.PurchaseNo3  =  '" + stringPurchaseNo3
        + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M012.length != 0) {
      stringPurchaseMoney = "" + doParseDouble(retDoc2M012[0][0].trim());
      stringPurchaseMoney = convert.FourToFive(stringPurchaseMoney, 0);
    }
    // System.out.println("已申請金額1---------------"+stringPurchaseMoney) ;
    // 借款
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + "FROM  Doc6M010 M10,  Doc6M012 M12 " + " WHERE  M10.BarCode  =  M12.BarCode " + " AND  M10.UNDERGO_WRITE   <>  'E' "
        + " AND  M10.PurchaseNoExist  =  'Y' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  (M10.CDate  >=  '" + stringYear + "/01/01" + "' AND  M10.CDate  <=  '"
        + stringYear + "/12/31" + "') " + " AND  M10.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' "
        + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length != 0) {
      stringPurchaseMoney = "" + (doParseDouble(stringPurchaseMoney) + doParseDouble(retDoc6M012[0][0].trim()));
      stringPurchaseMoney = convert.FourToFive(stringPurchaseMoney, 0);
    }
    // 借款-新增
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + "FROM  Doc6M010 M10,  Doc6M0121 M12 " + " WHERE  M10.BarCode  =  M12.BarCode " + " AND  M10.UNDERGO_WRITE   <>  'E' "
        + " AND  M10.PurchaseNoExist  =  'YY' " + " AND  M12.DocType          =  'B' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  (M10.CDate  >=  '" + stringYear
        + "/01/01" + "' AND  M10.CDate  <=  '" + stringYear + "/12/31" + "') " + " AND  M10.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  M10.PurchaseNo2  =  '"
        + stringPurchaseNo2 + "' " + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length != 0) {
      stringPurchaseMoney = "" + (doParseDouble(stringPurchaseMoney) + doParseDouble(retDoc6M012[0][0].trim()));
      stringPurchaseMoney = convert.FourToFive(stringPurchaseMoney, 0);
    }
    // System.out.println("已申請金額2---------------"+stringPurchaseMoney) ;
    //
    return stringPurchaseMoney;
  }

  // 截至前期估驗數額
  public String getExistRealMoneyForDoc2M010(String stringBarCode, String stringComNo, String stringEDateTime, String stringPurchaseNo1, String stringPurchaseNo2,
      String stringPurchaseNo3) throws Throwable {
    return "" + getPurchaseMoneyDoc2M017Union(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", "", true);
  }

  public String getExistFactoryNoRealMoneyForDoc2M010(String stringBarCode, String stringComNo, String stringEDateTime, String stringPurchaseNo1, String stringPurchaseNo2,
      String stringPurchaseNo3, String stringFactoryNo) throws Throwable {
    return "" + getPurchaseMoneyDoc2M017Union(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", stringFactoryNo, true);
  }

  public String getExistRealMoneyForDoc2M010(String stringBarCode, String stringComNo, String stringEDateTime, String stringPurchaseNo1, String stringPurchaseNo2,
      String stringPurchaseNo3, String stringPurchaseNo4) throws Throwable {
    return "" + getPurchaseMoneyDoc2M017Union(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, stringPurchaseNo4, "", true);
  }

  public double getPurchaseMoneyDoc2M017Union(String stringBarCode, String stringComNo, String stringEDateTime, String stringPurchaseNo1, String stringPurchaseNo2,
      String stringPurchaseNo3, String stringPurchaseNo4, String stringFactoryNo, boolean booleanTable) throws Throwable {
    String stringSumRealMoney = "0";
    String stringSql = "";
    String stringTable1 = booleanTable ? "Doc2M010" : "Doc5M020";
    String stringTable2 = booleanTable ? "Doc2M017" : "Doc5M027";
    String[][] retDoc2M012 = null;
    //
    stringSql = "SELECT  SUM(M17.PurchaseMoney) " + "FROM  " + stringTable1 + " M10,  " + stringTable2 + " M17 " + " WHERE  M10.BarCode  =  M17.BarCode "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.PurchaseNo1  =  '" + stringPurchaseNo1 + "' "
        + " AND  M17.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M17.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    if (!"".equals(stringEDateTime))
      stringSql += " AND  M10.EDateTime  <  '" + stringEDateTime + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringPurchaseNo4))
      stringSql += " AND  M17.PurchaseNo4  =  '" + stringPurchaseNo4 + "' ";
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M012.length != 0) {
      stringSumRealMoney = retDoc2M012[0][0].trim();
      stringSumRealMoney = "" + doParseDouble(stringSumRealMoney);
      stringSumRealMoney = convert.FourToFive(stringSumRealMoney, 0);
    }
    return doParseDouble(stringSumRealMoney);
  }

  public double getPurchaseMoneyDoc2M017Union2(String stringBarCode, String stringComNo, String stringEDateTime, String stringPurchaseNo1, String stringPurchaseNo2,
      String stringPurchaseNo3, String stringProjectID, String stringFactoryNo, String stringSqlAnd, boolean booleanTable) throws Throwable {
    String stringSumRealMoney = "0";
    String stringSql = "";
    String stringTable1 = booleanTable ? "Doc2M010" : "Doc5M020";
    String stringTable2 = booleanTable ? "Doc2M017" : "Doc5M027";
    String[][] retDoc2M012 = null;
    //
    stringSql = "SELECT  SUM(M17.PurchaseMoney) " + "FROM  " + stringTable1 + " M10,  " + stringTable2 + " M17 " + " WHERE  M10.BarCode  =  M17.BarCode "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.PurchaseNo1  =  '" + stringPurchaseNo1 + "' "
        + " AND  M17.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M17.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' "
        + stringSqlAnd;
    if (!"".equals(stringEDateTime))
      stringSql += " AND  M10.EDateTime  <  '" + stringEDateTime + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ISNULL(M17.ProjectID1,'')  =  '" + stringProjectID + "' ";

    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M012.length != 0) {
      stringSumRealMoney = retDoc2M012[0][0].trim();
      stringSumRealMoney = "" + doParseDouble(stringSumRealMoney);
      stringSumRealMoney = convert.FourToFive(stringSumRealMoney, 0);
    }
    return doParseDouble(stringSumRealMoney);
  }

  // 表格 Doc2M060
  public String getInertDoc2M060(String stringBarCode, String stringDataSource, String stringDate) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M060 = null;
    //
    stringSql = "SELECT  BarCode  FROM  Doc2M060  WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc2M060 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M060.length > 0)
      return "";
    //
    stringSql = " INSERT INTO  Doc2M060(BarCode, DataSource, DataAllow) " + " VALUES('" + stringBarCode + "', " + " '" + stringDataSource + "', " + " '" + "N" + "') ";
    return stringSql;
  }

  public String getExistRealMoneyBorrowForDoc6M010(String stringBarCode, String stringComNo, String stringEDateTime, String stringPurchaseNo1, String stringPurchaseNo2,
      String stringPurchaseNo3) throws Throwable {
    return "" + getRealTotalMoneyDoc6M012Union(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", "", true);
  }

  public String getExistFactoryNoRealMoneyBorrowForDoc6M010(String stringBarCode, String stringComNo, String stringEDateTime, String stringPurchaseNo1, String stringPurchaseNo2,
      String stringPurchaseNo3, String stringFactoryNo) throws Throwable {
    return "" + getRealTotalMoneyDoc6M012Union(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", stringFactoryNo, true);
  }

  public String getExistRealMoneyBorrowForDoc6M010(String stringBarCode, String stringComNo, String stringEDateTime, String stringPurchaseNo1, String stringPurchaseNo2,
      String stringPurchaseNo3, String stringPurchaseNo4) throws Throwable {
    return "" + getRealTotalMoneyDoc6M012Union(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, stringPurchaseNo4, "", true);
  }

  public double getRealTotalMoneyDoc6M012Union(String stringBarCode, String stringComNo, String stringEDateTime, String stringPurchaseNo1, String stringPurchaseNo2,
      String stringPurchaseNo3, String stringPurchaseNo4, String stringFactoryNo, boolean booleanTable) throws Throwable {
    String stringSumRealMoney = "0";
    String stringSql = "";
    String stringTable1 = booleanTable ? "Doc6M010" : "Doc5M030";
    String stringTable2 = booleanTable ? "Doc6M012" : "Doc5M032";
    String[][] retDoc6M012 = null;
    // 舊版-請款申請書借款沖銷有請購單之請款金額
    // PurchaseNoExist 舊版為 Y 新版改為 YY，故 增加此檢核，僅抓到舊版的資料
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + "FROM  " + stringTable1 + " M10,  " + stringTable2 + " M12 " + " WHERE  M10.BarCode  =  M12.BarCode "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.PurchaseNoExist  =  'Y' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.PurchaseNo1  =  '"
        + stringPurchaseNo1 + "' " + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3 + "' "
        + " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    if (!"".equals(stringEDateTime))
      stringSql += " AND  M10.EDateTime  <  '" + stringEDateTime + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  M10.FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringPurchaseNo4))
      stringSql += " AND  M10.PurchaseNo4  =  '" + stringPurchaseNo4 + "' ";
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length != 0) {
      stringSumRealMoney = retDoc6M012[0][0].trim();
      stringSumRealMoney = "" + doParseDouble(stringSumRealMoney);
      stringSumRealMoney = convert.FourToFive(stringSumRealMoney, 0);
    }
    if (!booleanTable)
      return doParseDouble(stringSumRealMoney);
    //
    stringTable1 = booleanTable ? "Doc6M010" : "Doc5M030";
    stringTable2 = booleanTable ? "Doc6M0121" : "";
    // 新版-請款申請書借款沖銷有請購單之請款金額
    // PurchaseNoExist 舊版為 Y 新版改為 YY，故 增加此檢核，僅抓到舊版的資料
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + "FROM  " + stringTable1 + " M10,  " + stringTable2 + " M12 " + " WHERE  M10.BarCode  =  M12.BarCode "
        + " AND  M10.UNDERGO_WRITE   <>  'E' " + " AND  M10.PurchaseNoExist  =  'YY' " + " AND  M12.DocType  =  'B' " + " AND  M10.ComNo  =  '" + stringComNo + "' "
        + " AND  M10.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3
        + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    if (!"".equals(stringEDateTime))
      stringSql += " AND  M10.EDateTime  <  '" + stringEDateTime + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  M10.FactoryNo  =  '" + stringFactoryNo + "' ";
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length != 0) {
      stringSumRealMoney = "" + (doParseDouble(retDoc6M012[0][0].trim()) + doParseDouble(stringSumRealMoney));
      stringSumRealMoney = convert.FourToFive(stringSumRealMoney, 0);
    }
    return doParseDouble(stringSumRealMoney);
  }

  // 已付金額
  public String getPaidUpMoneyForFactoryNo(String stringComNo, String stringBarCodeOld, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringFactoryNo) throws Throwable {
    return getPaidUpMoneyForFactoryNoUnion(stringComNo, stringBarCodeOld, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "24", stringFactoryNo);
  }

  public String getPaidUpMoneyForFactoryNoUnion(String stringComNo, String stringBarCodeOld, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringKindNo, String stringFactoryNo) throws Throwable {
    String stringPaidUpMoney = "0";
    String stringSql = "";
    String stringBarCode = "";
    String[][] retDoc2M010 = null;
    String[][] retDoc2M012 = null;
    String[][] retDoc2M017 = null;
    double doublePaidUpMoney = 0;
    // 請款
    stringSql = "SELECT  DISTINCT  M14.BarCode " + "FROM  Doc2M010 M10,  Doc2M017 M17,  Doc2M014 M14 " + " WHERE  M10.BarCode  =  M17.BarCode "
        + " AND  M17.BarCode  =  M14.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.PurchaseNo1  =  '"
        + stringPurchaseNo1 + "' " + " AND  M17.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M17.PurchaseNo3  =  '" + stringPurchaseNo3 + "' "
        + " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' " + " AND  M14.STATUS_CD  =  'Z' ";
    // " AND M14.RowType = 'B' " ;
    if (!"".equals(stringBarCodeOld)) {
      stringSql += " AND  M14.BarCode  <>  '" + stringBarCodeOld + "' ";
    }
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    //
    for (int intNo = 0; intNo < retDoc2M012.length; intNo++) {
      stringBarCode = retDoc2M012[intNo][0].trim();
      stringSql = "SELECT  SUM(PurchaseMoney) " + " FROM  Doc2M017 " + " WHERE  PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  PurchaseNo2  =  '" + stringPurchaseNo2 + "' "
          + " AND  PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  BarCode  =  '" + stringBarCode + "' ";
      retDoc2M017 = dbDoc.queryFromPool(stringSql);
      if (retDoc2M017.length != 0) {
        doublePaidUpMoney += doParseDouble(retDoc2M017[0][0].trim());
      }
    }
    // System.out.println("已付金額1---------------"+doublePaidUpMoney) ;
    // 借款沖銷
    stringSql = "SELECT  SUM(M12.RealTotalMoney)" + " FROM  Doc6M010 M10,  Doc6M012  M12 " + " WHERE  M10.PurchaseNoExist  =  'Y'  " + " AND  M10.BarCode  =  M12.BarCode "
        + " AND  M10.Barcode  IN  (SELECT  BarCode  FROM  Doc2M014  WHERE  STATUS_CD  =  'Z' )" + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.PurchaseNo1  =  '"
        + stringPurchaseNo1 + "' " + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3 + "' "
        + " AND  M10.FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringBarCodeOld)) {
      stringSql += " AND  M10.BarCode  <>  '" + stringBarCodeOld + "' ";
    }
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M010.length != 0) {
      doublePaidUpMoney += doParseDouble(retDoc2M010[0][0].trim());
    }
    // 借款沖銷-新增
    stringSql = "SELECT  SUM(M12.RealTotalMoney)" + " FROM  Doc6M010 M10,  Doc6M0121  M12 " + " WHERE  M10.BarCode  =  M12.BarCode " + " AND  M10.PurchaseNoExist  =  'YY'  "
        + " AND  M12.DocType  =  'B' " + " AND  M10.Barcode  IN  (SELECT  BarCode  FROM  Doc2M014  WHERE  STATUS_CD  =  'Z' )" + " AND  M10.ComNo  =  '" + stringComNo + "' "
        + " AND  M10.KindNo  =  '" + stringKindNo + "' " + " AND  M10.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' "
        + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M10.FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringBarCodeOld)) {
      stringSql += " AND  M10.BarCode  <>  '" + stringBarCodeOld + "' ";
    }
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M010.length != 0) {
      doublePaidUpMoney += doParseDouble(retDoc2M010[0][0].trim());
    }
    //
    stringPaidUpMoney = convert.FourToFive("" + doublePaidUpMoney, 0);
    // System.out.println("已付金額2---------------"+doublePaidUpMoney) ;
    return stringPaidUpMoney;
  }

  public String getPaidUpMoney(String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3) throws Throwable {
    return getPaidUpMoneyUnion(stringComNo, "", stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", "24");
  }

  public String getPaidUpMoney(String stringComNo, String stringBarCodeOld, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3) throws Throwable {
    return getPaidUpMoneyUnion(stringComNo, stringBarCodeOld, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", "24");
  }

  public String getPaidUpMoney(String stringComNo, String stringBarCodeOld, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4)
      throws Throwable {
    return getPaidUpMoneyUnion(stringComNo, stringBarCodeOld, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, stringPurchaseNo4, "24");
  }

  public String getPaidUpMoneyUnion(String stringComNo, String stringBarCodeOld, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringPurchaseNo4, String stringKindNo) throws Throwable {
    String stringPaidUpMoney = "0";
    String stringSql = "";
    String stringBarCode = "";
    String[][] retDoc2M010 = null;
    String[][] retDoc2M012 = null;
    String[][] retDoc2M017 = null;
    double doublePaidUpMoney = 0;
    // 請款
    stringSql = "SELECT  DISTINCT  M14.BarCode " + " FROM  Doc2M010 M10,  Doc2M017 M17,  Doc2M014 M14 " + " WHERE  M10.BarCode  =  M17.BarCode "
        + " AND  M17.BarCode  =  M14.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M14.STATUS_CD  =  'Z' " + " AND  M10.ComNo  =  '" + stringComNo + "' "
        + " AND  M17.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  M17.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M17.PurchaseNo3  =  '" + stringPurchaseNo3
        + "' ";
    if (!"".equals(stringPurchaseNo4))
      stringSql += " AND  M17.PurchaseNo4  =  '" + stringPurchaseNo4 + "' ";
    if (!"".equals(stringBarCodeOld)) {
      stringSql += " AND  M14.BarCode  <>  '" + stringBarCodeOld + "' ";
    }
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    //
    for (int intNo = 0; intNo < retDoc2M012.length; intNo++) {
      stringBarCode = retDoc2M012[intNo][0].trim();
      stringSql = "SELECT  SUM(PurchaseMoney) " + " FROM  Doc2M017 " + " WHERE  PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  PurchaseNo2  =  '" + stringPurchaseNo2 + "' "
          + " AND  PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  BarCode  =  '" + stringBarCode + "' ";
      if (!"".equals(stringPurchaseNo4))
        stringSql += " AND  PurchaseNo4  =  '" + stringPurchaseNo4 + "' ";
      retDoc2M017 = dbDoc.queryFromPool(stringSql);
      if (retDoc2M017.length != 0) {
        doublePaidUpMoney += doParseDouble(retDoc2M017[0][0].trim());
      }
    }
    // System.out.println("已付金額1---------------"+doublePaidUpMoney) ;
    // 借款
    stringSql = "SELECT  SUM(M12.RealTotalMoney)" + " FROM  Doc6M010 M10,  Doc6M012  M12 " + " WHERE  M10.BarCode  =  M12.BarCode " + " AND  M10.PurchaseNoExist  =  'Y'  "
        + " AND  M10.Barcode  IN  (SELECT  BarCode  FROM  Doc2M014  WHERE  STATUS_CD  =  'Z' )" + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.PurchaseNo1  =  '"
        + stringPurchaseNo1 + "' " + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3 + "' ";
    if (!"".equals(stringPurchaseNo4))
      stringSql += " AND  M10.PurchaseNo4  =  '" + stringPurchaseNo4 + "' ";
    if (!"".equals(stringBarCodeOld)) {
      stringSql += " AND  M10.BarCode  <>  '" + stringBarCodeOld + "' ";
    }
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M010.length != 0) {
      doublePaidUpMoney += doParseDouble(retDoc2M010[0][0].trim());
    }
    // 借款-新版
    stringSql = "SELECT  SUM(M12.RealTotalMoney)" + " FROM  Doc6M010 M10,  Doc6M0121  M12 " + " WHERE  M10.BarCode  =  M12.BarCode " + " AND  M10.PurchaseNoExist  =  'YY'  "
        + " AND  M12.DocType          =  'B'  " + " AND  M10.Barcode  IN  (SELECT  BarCode  FROM  Doc2M014  WHERE  STATUS_CD  =  'Z' )" + " AND  M10.ComNo  =  '" + stringComNo
        + "' " + " AND  M10.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M10.PurchaseNo3  =  '"
        + stringPurchaseNo3 + "' ";
    if (!"".equals(stringBarCodeOld)) {
      stringSql += " AND  M10.BarCode  <>  '" + stringBarCodeOld + "' ";
    }
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M010.length != 0) {
      doublePaidUpMoney += doParseDouble(retDoc2M010[0][0].trim());
    }
    //
    stringPaidUpMoney = convert.FourToFive("" + doublePaidUpMoney, 0);
    // System.out.println("已付金額2---------------"+doublePaidUpMoney) ;
    return stringPaidUpMoney;
  }

  public String getPaidUpMoneyForDoc6M010(String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3) throws Throwable {
    return getPaidUpMoneyForDoc6M010Union(stringComNo, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "24");
  }

  public String getPaidUpMoneyForDoc6M010Union(String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringKindNo)
      throws Throwable {
    String stringPaidUpMoney = "0";
    String stringSql = "";
    String[][] retDoc6M012 = null;
    // 借款
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + "FROM  Doc6M010 M10,  Doc6M012 M12,  Doc2M014 M14 " + " WHERE  M10.BarCode  =  M12.BarCode "
        + " AND  M10.BarCode  =  M14.BarCode " + " AND  M10.PurchaseNoExist  =  'Y'  " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.PurchaseNo1  =  '"
        + stringPurchaseNo1 + "' " + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3 + "' "
        + " AND  M14.STATUS_CD  =  'Z' ";
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length != 0) {
      stringPaidUpMoney = "" + doParseDouble(retDoc6M012[0][0].trim());
      stringPaidUpMoney = convert.FourToFive(stringPaidUpMoney, 0);
    }
    // 借款-新增
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + "FROM  Doc6M010 M10,  Doc6M0121 M12,  Doc2M014 M14 " + " WHERE  M10.BarCode  =  M12.BarCode "
        + " AND  M10.BarCode  =  M14.BarCode " + " AND  M10.PurchaseNoExist  =  'YY'  " + " AND  M12.DocType          =  'B'  " + " AND  M10.ComNo  =  '" + stringComNo + "' "
        + " AND  M10.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3
        + "' " + " AND  M14.STATUS_CD  =  'Z' ";
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length != 0) {
      stringPaidUpMoney = "" + (doParseDouble(retDoc6M012[0][0].trim()) + doParseDouble(stringPaidUpMoney));
      stringPaidUpMoney = convert.FourToFive(stringPaidUpMoney, 0);
    }
    return stringPaidUpMoney;
  }

  // 表格 Doc2M010_DeptCd
  public String[] getDeptCdProjectID(String stringDeptCd, String stringDate, String stringFirmNo, String stringSqlAnd) throws Throwable {
    String stringDeptCdL = "";
    String stringProjectIDL = "";
    String stringTemp = "";
    String stringSqlAndL = "";
    String[] arrayTemp = { "", "" };
    if ("".equals(stringDeptCd))
      return arrayTemp;
    if (Character.isDigit(stringDeptCd.charAt(0))) {
      // 舊
      if (stringDeptCd.length() >= 4 && !Character.isDigit(stringDeptCd.charAt(3))) {
        // 外業
        stringDeptCdL = stringDeptCd.substring(0, 3);
        stringProjectIDL = stringDeptCd.substring(3);
      } else if (stringDeptCd.length() >= 5 && !Character.isDigit(stringDeptCd.charAt(4))) {
        // 外業
        stringDeptCdL = stringDeptCd.substring(0, 4);
        stringProjectIDL = stringDeptCd.substring(4);
      } else {
        // 內業
        stringDeptCdL = stringDeptCd;
      }
      if (!"".equals(stringProjectIDL)) {
        if ("".equals(stringFirmNo))
          return arrayTemp;
        //
        stringSqlAndL = " AND  LEN(DEPT_CD) =  3 " + " AND  DEPT_CD_Doc  LIKE  '" + stringDeptCdL + "%'" + " AND  StatusHide   =  'N'";
        stringTemp = getDeptCd("", "", stringSqlAndL);
        if ("".equals(stringTemp)) {
          stringSqlAndL = " AND  LEN(DEPT_CD) =  3 " + " AND  DEPT_CD_Doc  LIKE  '" + stringDeptCdL.substring(0, stringDeptCdL.length() - 1) + "%'" + " AND  StatusHide   =  'N'";
          stringTemp = getDeptCd("", "", stringSqlAndL);
        }
      } else {
        stringSqlAndL = " AND  LEN(DEPT_CD) >  3 " + " AND  DEPT_CD_Doc  =  '" + stringDeptCdL + "'" + " AND  StatusHide   =  'N'";
        stringTemp = getDeptCd("", "", stringSqlAndL);
      }
      if ("".equals(stringTemp)) {
        return arrayTemp;
      }
      stringSqlAndL = " AND  ProjectID1_OLD  =  '" + stringProjectIDL + "' ";
      String[][] retDoc2M010 = getDoc2M010ProjectID1("", stringFirmNo, stringDate, stringSqlAndL);
      if (retDoc2M010.length == 0) {
        if (Character.isDigit(stringProjectIDL.charAt(stringProjectIDL.length() - 1))) {
          stringSqlAndL = " AND  ProjectID1_OLD  =  '" + stringProjectIDL + "A' ";
        } else {
          stringSqlAndL = " AND  ProjectID1_OLD  =  '" + stringProjectIDL.substring(0, stringProjectIDL.length() - 1) + "' ";
        }
        retDoc2M010 = getDoc2M010ProjectID1("", stringFirmNo, stringDate, stringSqlAndL);
      }
      if (retDoc2M010.length == 0) {
        return arrayTemp;
      }
      arrayTemp[1] = retDoc2M010[0][2].trim();
      arrayTemp[0] = stringTemp;
    } else {
      // 新
      arrayTemp[1] = stringDeptCd.substring(3);
      arrayTemp[0] = stringDeptCd.substring(0, 3);
    }
    return arrayTemp;
  }

  public String getDeptCdDoc(String stringDeptCd, String stringDeptCdDoc, String stringSqlAnd) throws Throwable {
    return getDeptCdDoc(stringDeptCd, stringDeptCdDoc, stringSqlAnd, new Hashtable());
  }

  public String getDeptCdDoc(String stringDeptCd, String stringDeptCdDoc, String stringSqlAnd, Hashtable hashtableDeptCdDoc) throws Throwable {
    String stringDeptCdDocL = ("" + hashtableDeptCdDoc.get(stringDeptCd)).trim();
    if (!"null".equals(stringDeptCdDocL)) {
      return stringDeptCdDocL;
    }
    //
    String[][] retDoc2M010 = getDoc2M010DeptCd(stringDeptCd, stringDeptCdDoc, stringSqlAnd);
    //
    if (retDoc2M010.length > 0) {
      stringDeptCdDocL = retDoc2M010[0][1].trim();
      hashtableDeptCdDoc.put(stringDeptCd, stringDeptCdDocL);
      return stringDeptCdDocL;
    }
    //
    hashtableDeptCdDoc.put(stringDeptCd, "");
    return "";
  }

  public String getDeptCdProjectDoc(String stringDeptCd, FargloryUtil exeUtil) throws Throwable {
    String stringSqlAnd = " AND  DEPT_CD  =  '" + exeUtil.doSubstring(stringDeptCd, 0, 3) + "' ";
    String stringDeptCdDocL = "";
    String[][] retDoc2M010 = getDoc2M010DeptCd("", "", stringSqlAnd);
    //
    if (retDoc2M010.length > 0) {
      stringDeptCdDocL = retDoc2M010[0][3].trim();
    }
    return stringDeptCdDocL;
  }

  public String getDeptCd(String stringDeptCd, String stringDeptCdDoc, String stringSqlAnd) throws Throwable {
    String[][] retDoc2M010 = getDoc2M010DeptCd(stringDeptCd, stringDeptCdDoc, stringSqlAnd);
    //
    if (retDoc2M010.length > 0)
      return retDoc2M010[0][0].trim();
    //
    return "";
  }

  public String getDeptName(String stringDeptCd, String stringDeptCdDoc, String stringSqlAnd) throws Throwable {
    String[][] retDoc2M010 = getDoc2M010DeptCd(stringDeptCd, stringDeptCdDoc, stringSqlAnd);
    //
    if (retDoc2M010.length > 0)
      return retDoc2M010[0][2].trim();
    //
    return "";
  }

  public String[][] getDoc2M010DeptCd(String stringDeptCd, String stringDeptCdDoc, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    // 0 DEPT_CD 1 DEPT_CD_Doc 2 DEPT_Name 3 DEPT_CD_Project_Doc
    stringSql = " SELECT  DEPT_CD,  DEPT_CD_Doc,  DEPT_Name,  DEPT_CD_Project_Doc " + " FROM  Doc2M010_DeptCd " + " WHERE  1=1 ";
    if (!"".equals(stringDeptCd))
      stringSql += " AND  DEPT_CD  =  '" + stringDeptCd + "' ";
    if (!"".equals(stringDeptCdDoc))
      stringSql += " AND  DEPT_CD_Doc  =  '" + stringDeptCdDoc + "' ";
    if ("".equals(stringSqlAnd)) {
      stringSql += " ORDER BY  DEPT_CD ";
    } else {
      stringSql += stringSqlAnd;
    }
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    //
    return retDoc2M010;
  }

  // 表格 Doc2M011
  // 發票號碼存在檢核，存在 false，不存在 true。
  public boolean isExistInvoiceNoCheck(String stringInvoiceNo, String stringBarCode) throws Throwable {
    return isExistInvoiceNoCheck(stringInvoiceNo, stringBarCode, "");
  }

  public boolean isExistInvoiceNoCheck(String stringInvoiceNo, String stringBarCode, String stringFactoryNo) throws Throwable {
    Farglory.util.FargloryUtil exeUtil = new Farglory.util.FargloryUtil();
    return isExistInvoiceNoCheck(stringInvoiceNo, stringBarCode, stringFactoryNo, "", exeUtil);
  }

  public boolean isExistInvoiceNoCheck(String stringInvoiceNo, String stringBarCode, String stringFactoryNo, String stringDateRoc, FargloryUtil exeUtil) throws Throwable {
    String stringSql = "";
    String stringDateAC = exeUtil.getDateConvert(stringDateRoc);
    String stringTemp = "";
    String[][] retDoc2M011 = null;
    String[][] retDoc6M011 = null;
    String[][] retDoc2M061 = null;
    // 請款
    stringSql = "SELECT  DISTINCT  BarCode " + " FROM  Doc2M011 " + " WHERE  InvoiceNo  =  '" + stringInvoiceNo + "' " + " AND  BarCode  <>  '" + stringBarCode + "' "
        + " AND  BarCode IN  (SELECT  BarCode " + " FROM  Doc2M010 " + " WHERE  UNDERGO_WRITE  <>  'E' ";
    if (!"".equals(stringDateRoc))
      stringSql += " AND  CDate  <=  '" + stringDateRoc + "' ";
    stringSql += ") ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M011.length != 0) {
      for (int intNo = 0; intNo < retDoc2M011.length; intNo++) {
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += retDoc2M011[intNo][0].trim();
      }
      stringTemp = "於 [行銷-請款申請書][條碼編號](" + stringTemp + ")中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    retDoc2M011 = null;
    // 借款、借款沖銷
    stringSql = "SELECT  DISTINCT  BarCode " + " FROM  Doc6M011 " + " WHERE  InvoiceNo  =  '" + stringInvoiceNo + "' " + " AND  BarCode  <>  '" + stringBarCode + "' "
        + " AND  BarCode IN  (SELECT  BarCode  FROM  Doc6M010 WHERE  UNDERGO_WRITE  <>  'E' ";

    if (!"".equals(stringDateRoc))
      stringSql += " AND  CDate  <=  '" + stringDateRoc + "' ";
    stringSql += ") ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    retDoc6M011 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M011.length != 0) {
      for (int intNo = 0; intNo < retDoc6M011.length; intNo++) {
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += retDoc6M011[intNo][0].trim();
      }
      stringTemp = "於 [行銷-請款申請書之借款沖銷][條碼編號](" + stringTemp + ")中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    retDoc6M011 = null;
    // 請款
    stringSql = "SELECT  DISTINCT  BarCode " + " FROM  Doc5M021 " + " WHERE  InvoiceNo  =  '" + stringInvoiceNo + "' " + " AND  BarCode  <>  '" + stringBarCode + "' "
        + " AND  BarCode IN  (SELECT  BarCode  FROM  Doc5M020 WHERE  UNDERGO_WRITE  <>  'E' ";
    if (!"".equals(stringDateAC))
      stringSql += " AND  CDate  <=  '" + stringDateAC + "' ";
    stringSql += ")";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M011.length != 0) {
      for (int intNo = 0; intNo < retDoc2M011.length; intNo++) {
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += retDoc2M011[intNo][0].trim();
      }
      stringTemp = "於 [管理費用-請款申請書][條碼編號](" + stringTemp + ")中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    retDoc2M011 = null;
    // 請款
    stringSql = "SELECT  DISTINCT  BarCode " + " FROM  Doc5M0211 " + " WHERE  InvoiceNo  =  '" + stringInvoiceNo + "' " + " AND  BarCode  <>  '" + stringBarCode + "' "
        + " AND  BarCode IN  (SELECT  BarCode  FROM  Doc5M020 WHERE  UNDERGO_WRITE  <>  'E' ";
    if (!"".equals(stringDateAC))
      stringSql += " AND  CDate  <=  '" + stringDateAC + "' ";
    stringSql += ")";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M011.length != 0) {
      for (int intNo = 0; intNo < retDoc2M011.length; intNo++) {
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += retDoc2M011[intNo][0].trim();
      }
      stringTemp = "於 [管理費用-請款申請書][條碼編號](" + stringTemp + ")中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    retDoc2M011 = null;
    // 借款、借款沖銷
    stringSql = "SELECT  DISTINCT  BarCode " + " FROM  Doc5M031 " + " WHERE  InvoiceNo  =  '" + stringInvoiceNo + "' " + " AND  BarCode  <>  '" + stringBarCode + "' "
        + " AND  BarCode IN  (SELECT  BarCode  FROM  Doc5M030 WHERE  UNDERGO_WRITE  <>  'E' ";
    if (!"".equals(stringDateAC))
      stringSql += " AND  CDate  <=  '" + stringDateAC + "' ";
    stringSql += ")";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    retDoc6M011 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M011.length != 0) {
      for (int intNo = 0; intNo < retDoc6M011.length; intNo++) {
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += retDoc6M011[intNo][0].trim();
      }
      stringTemp = "於 [管理費用-請款申請書之借款沖銷][條碼編號](" + stringTemp + ")中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    retDoc6M011 = null;
    // 事後補發票
    stringSql = "SELECT  DISTINCT  BarCode " + " FROM  Doc2M061 " + " WHERE  InvoiceNo  =  '" + stringInvoiceNo + "' " + " AND  BarCode  <>  '" + stringBarCode + "' ";
    retDoc2M061 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M061.length != 0) {
      for (int intNo = 0; intNo < retDoc2M061.length; intNo++) {
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += retDoc2M061[intNo][0].trim();
      }
      stringTemp = "於 [事後補發票][條碼編號](" + stringTemp + ")中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    // 押金利息轉傳票
    stringSql = "SELECT  DISTINCT  VOUCHER_YMD " + " FROM  Doc9M021 " + " WHERE  InvoiceNo  =  '" + stringInvoiceNo + "' ";
    retDoc2M061 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M061.length != 0) {
      for (int intNo = 0; intNo < retDoc2M061.length; intNo++) {
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += retDoc2M061[intNo][0].trim();
      }
      stringTemp = "於 [押金利息轉傳票]中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    // 支出證明單
    stringSql = "SELECT  DISTINCT  BarCode " + " FROM  Doc5M051 " + " WHERE  InvoiceNo  =  '" + stringInvoiceNo + "' " + " AND  BarCode  <>  '" + stringBarCode + "' "
        + " AND  BarCode IN  (SELECT  BarCode  FROM  Doc5M050 WHERE  UNDERGO_WRITE  <>  'E' ";
    if (!"".equals(stringDateAC))
      stringSql += " AND  CDate  <=  '" + stringDateAC + "' ";
    stringSql += ")";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M011.length != 0) {
      for (int intNo = 0; intNo < retDoc2M011.length; intNo++) {
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += retDoc2M011[intNo][0].trim();
      }
      stringTemp = "於 [支出證明單][條碼編號](" + stringTemp + ")中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    //
    // 發票號碼拒絕支付
    Vector vectorInvoiecNoLimit = getLimitInvoiceNo();
    if (vectorInvoiecNoLimit.indexOf(stringInvoiceNo) != -1) {
      stringTemp = "[發票號碼](" + stringInvoiceNo + ") 禁止使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    return true;
  }

  public boolean isExistInvoiceNoCheckFED1012(Hashtable hashtableLimit, FargloryUtil exeUtil) throws Throwable {
    String stringComNo = "" + hashtableLimit.get("ComNo");
    String stringDateStart = "" + hashtableLimit.get("DateStart");
    String stringInvoiceNo = "" + hashtableLimit.get("InvoiceNo");
    String stringSql = "";
    String stringTemp = "";
    String stringTempL = "";
    String[][] retFED1012 = null;
    // 財會
    stringSql = "SELECT  VOUCHER_YMD, VOUCHER_FLOW_NO,  VOUCHER_SEQ_NO " + " FROM  FED1012 " + " WHERE  COMPANY_CD = '" + stringComNo + "' " + " AND  VOUCHER_YMD >= "
        + stringDateStart + " " + " AND  ACCT_NO = '1264' " + " AND  DESCRIPTION_2  =  '" + stringInvoiceNo + "' ";
    retFED1012 = dbFED1.queryFromPool(stringSql);
    if (retFED1012.length != 0) {
      for (int intNo = 0; intNo < retFED1012.length; intNo++) {
        stringTempL = retFED1012[intNo][0].trim() + "-" + retFED1012[intNo][1].trim() + "-" + retFED1012[intNo][2].trim();
        //
        if (stringTemp.indexOf(stringTempL) != -1)
          continue;
        //
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += stringTempL;
      }
      stringTemp = "[發票已使用在傳票](" + stringTemp + ")中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    return true;
  }

  public Vector getLimitInvoiceNo() throws Throwable {
    Vector vectorInvoiecNoLimit = new Vector();
    vectorInvoiecNoLimit.add("KU53969967");
    vectorInvoiecNoLimit.add("KU53970037");
    vectorInvoiecNoLimit.add("LU52628354");
    vectorInvoiecNoLimit.add("LU52628356");
    vectorInvoiecNoLimit.add("LU52628357");
    vectorInvoiecNoLimit.add("LU52628394");
    vectorInvoiecNoLimit.add("LU52628430");
    vectorInvoiecNoLimit.add("WU53306624");
    vectorInvoiecNoLimit.add("ZU51109351");
    vectorInvoiecNoLimit.add("KU50086825");
    vectorInvoiecNoLimit.add("YW28339955");
    vectorInvoiecNoLimit.add("GW98788628"); // 2009/10/15
    vectorInvoiecNoLimit.add("HY01163721");
    vectorInvoiecNoLimit.add("JY01134168");
    vectorInvoiecNoLimit.add("FU52234162"); // 2010/08/26 劉慧菁
    vectorInvoiecNoLimit.add("NW81100914"); // 2010/11/16 劉慧菁
    vectorInvoiecNoLimit.add("NW81101786"); // 2010/11/16 劉慧菁
    vectorInvoiecNoLimit.add("VL26475808"); // 2011/09/01 湯正恩
    vectorInvoiecNoLimit.add("UC36850329"); // 2011/09/28 劉慧菁
    // vectorInvoiecNoLimit.add("WP43012069") ; // 2011/10/25 湯正恩 2011/10/31 取消限制
    vectorInvoiecNoLimit.add("DM98980389"); // 2012/11/19 劉慧菁
    vectorInvoiecNoLimit.add("FA29386056"); // 2012/12/13 劉慧菁
    vectorInvoiecNoLimit.add("GQ87033247"); // 2013/06/25 劉慧菁
    vectorInvoiecNoLimit.add("MK27951947"); // 2013/09/03 劉慧菁
    vectorInvoiecNoLimit.add("ZA40381570"); // 2014/05/13 劉慧菁
    vectorInvoiecNoLimit.add("CZ37056722"); // 2015/03/11 劉慧菁 已至國稅局辦理專案退稅
    vectorInvoiecNoLimit.add("FC15655421"); // 2016/03/03 劉慧菁
    vectorInvoiecNoLimit.add("CD06702475"); // 2016/08/24 張曉珮
    vectorInvoiecNoLimit.add("AU51400953"); // 2016/10/19 劉慧菁

    return vectorInvoiecNoLimit;
  }

  // 代收代付發票重複檢核
  // 不同公司允許相同發票
  // 發票號碼存在檢核，存在 false，不存在 true。
  public boolean isExistInvoiceNoCheck14(String stringInvoiceNo, String stringBarCode, String stringSqlAnd, Vector vectorComNo) throws Throwable {
    String stringSql = "";
    String stringBarCodeL = "";
    String stringComNo = "";
    String stringTemp = "";
    String[][] retDocData = null;
    // 發票號碼拒絕支付
    Vector vectorInvoiecNoLimit = getLimitInvoiceNo();
    if (vectorInvoiecNoLimit.indexOf(stringInvoiceNo) != -1) {
      stringTemp = "[發票號碼](" + stringInvoiceNo + ") 禁止使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    // 請款
    stringSql = "SELECT  DISTINCT  M10.BarCode,  M10.ComNo " + " FROM  Doc2M010 M10,  Doc2M011 M11 " + " WHERE  M10.BarCode  =  M11.BarCode " + " AND  M11.InvoiceNo  =  '"
        + stringInvoiceNo + "' " + " AND  M10.UNDERGO_WRITE  <>  'E' ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  <>  '" + stringBarCode + "' ";
    stringSql += stringSqlAnd;
    retDocData = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDocData.length; intNo++) {
      stringBarCodeL = retDocData[intNo][0].trim();
      stringComNo = retDocData[intNo][1].trim();
      if (vectorComNo.indexOf(stringComNo) != -1) {
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += stringBarCodeL;
      }
      vectorComNo.add(stringComNo);
    }
    if (!"".equals(stringTemp)) {
      stringTemp = "於 [行銷-請款申請書][條碼編號](" + stringTemp + ")中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    stringSql = "SELECT  DISTINCT  M10.BarCode,  M10.ComNo " + " FROM  Doc5M020 M10,  Doc5M021 M11 " + " WHERE  M10.BarCode  =  M11.BarCode " + " AND  M11.InvoiceNo  =  '"
        + stringInvoiceNo + "' " + " AND  M10.UNDERGO_WRITE  <>  'E' ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  <>  '" + stringBarCode + "' ";
    stringSql += stringSqlAnd;
    retDocData = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDocData.length; intNo++) {
      stringBarCodeL = retDocData[intNo][0].trim();
      stringComNo = retDocData[intNo][1].trim();
      if (vectorComNo.indexOf(stringComNo) != -1) {
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += stringBarCodeL;
      }
      vectorComNo.add(stringComNo);
    }
    if (!"".equals(stringTemp)) {
      stringTemp = "於 [管理費用-請款申請書][條碼編號](" + stringTemp + ")中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    stringSql = "SELECT  DISTINCT  M10.BarCode,  M10.ComNo " + " FROM  Doc5M020 M10,  Doc5M0211 M11 " + " WHERE  M10.BarCode  =  M11.BarCode " + " AND  M11.InvoiceNo  =  '"
        + stringInvoiceNo + "' " + " AND  M10.UNDERGO_WRITE  <>  'E' ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  <>  '" + stringBarCode + "' ";
    stringSql += stringSqlAnd;
    retDocData = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDocData.length; intNo++) {
      stringBarCodeL = retDocData[intNo][0].trim();
      stringComNo = retDocData[intNo][1].trim();
      if (vectorComNo.indexOf(stringComNo) != -1) {
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += stringBarCodeL;
      }
      vectorComNo.add(stringComNo);
    }
    if (!"".equals(stringTemp)) {
      stringTemp = "於 [管理費用-請款申請書][條碼編號](" + stringTemp + ")中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    // 借款、借款沖銷
    stringSql = "SELECT  DISTINCT  M10.BarCode,  M10.ComNo " + " FROM  Doc6M010 M10,  Doc6M011 M11 " + " WHERE  M10.BarCode  =  M11.BarCode " + " AND  M11.InvoiceNo  =  '"
        + stringInvoiceNo + "' " + " AND  M10.UNDERGO_WRITE  <>  'E' ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  <>  '" + stringBarCode + "' ";
    stringSql += stringSqlAnd;
    retDocData = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDocData.length; intNo++) {
      stringBarCodeL = retDocData[intNo][0].trim();
      stringComNo = retDocData[intNo][1].trim();
      if (vectorComNo.indexOf(stringComNo) != -1) {
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += stringBarCodeL;
      }
      vectorComNo.add(stringComNo);
    }
    if (!"".equals(stringTemp)) {
      stringTemp = "於 [行銷-請款申請書之借款沖銷][條碼編號](" + stringTemp + ")中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    // 支出證明單
    stringSql = "SELECT  DISTINCT  M10.BarCode,  M10.ComNo " + " FROM  Doc5M050 M10,  Doc5M051 M11 " + " WHERE  M10.BarCode  =  M11.BarCode " + " AND  M11.InvoiceNo  =  '"
        + stringInvoiceNo + "' " + " AND  M10.UNDERGO_WRITE  <>  'E' ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  <>  '" + stringBarCode + "' ";
    stringSql += stringSqlAnd;
    retDocData = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDocData.length; intNo++) {
      stringBarCodeL = retDocData[intNo][0].trim();
      stringComNo = retDocData[intNo][1].trim();
      if (vectorComNo.indexOf(stringComNo) != -1) {
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += stringBarCodeL;
      }
      vectorComNo.add(stringComNo);
    }
    if (!"".equals(stringTemp)) {
      stringTemp = "於 [支出證明單][條碼?s號](" + stringTemp + ")中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    // 事後補發票
    stringSql = "SELECT  DISTINCT  M10.BarCode,  M10.ComNo " + " FROM  Doc2M010 M10,  Doc2M061 M11 " + " WHERE  M10.BarCode  =  M11.BarCode " + " AND  M11.InvoiceNo  =  '"
        + stringInvoiceNo + "' ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  <>  '" + stringBarCode + "' ";
    stringSql += stringSqlAnd;
    retDocData = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDocData.length; intNo++) {
      stringBarCodeL = retDocData[intNo][0].trim();
      stringComNo = retDocData[intNo][1].trim();
      if (vectorComNo.indexOf(stringComNo) != -1) {
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += stringBarCodeL;
      }
      vectorComNo.add(stringComNo);
    }
    if (!"".equals(stringTemp)) {
      stringTemp = "於 [事後補發票][條碼編號(" + stringTemp + ")]中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    // 押金利息轉傳票
    stringSql = "SELECT  DISTINCT  COMPANY_CD " + " FROM  Doc9M021 " + " WHERE  InvoiceNo  =  '" + stringInvoiceNo + "' ";
    retDocData = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDocData.length; intNo++) {
      stringComNo = retDocData[intNo][0].trim();
      if (vectorComNo.indexOf(stringComNo) != -1) {
        if (!"".equals(stringTemp))
          stringTemp += "、";
        stringTemp += stringBarCodeL;
      }
      vectorComNo.add(stringComNo);
    }
    if (!"".equals(stringTemp)) {
      stringTemp = "於 [押金利息轉傳票][條碼編號]中使用。";
      System.out.println("--------------------------" + stringTemp);
      put("DULInvoiceNo", stringTemp);
      return false;
    }
    return true;
  }

  public boolean isExistInvoiceNoCheckYearEnd(String stringInvoiceNo, String stringYear) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M011 = null;
    String[][] retDoc6M011 = null;
    //
    stringSql = "SELECT  DISTINCT  M11.BarCode " + " FROM  Doc2M010 M10, Doc2M011 M11 " + "WHERE  M10.BarCode  =  M11.BarCode "
        + " AND  M11.InvoiceKind  NOT  IN  ('C',  'X',  'Y',  'Z') " + " AND  M11.InvoiceNo  =  '" + stringInvoiceNo + "' " + " AND  (M10.CDate  >=  '" + stringYear + "/01/01"
        + "' AND  M10.CDate  <=  '" + stringYear + "/12/31" + "') ";
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M011.length != 0) {
      for (int intNo = 0; intNo < retDoc2M011.length; intNo++)
        System.out.println((intNo + 1) + "-----------------------重複 Doc2M011---" + retDoc2M011[intNo][0]);
      return false;
    }
    stringSql = "SELECT  DISTINCT  M11.BarCode " + " FROM  Doc6M010 M10,  Doc6M011 M11 " + "WHERE  M10.BarCode  =  M11.BarCode "
        + " AND  M11.InvoiceKind  NOT  IN  ('C',  'X',  'Y',  'Z') " + " AND  M11.InvoiceNo  =  '" + stringInvoiceNo + "' " + " AND  (M10.CDate  >=  '" + stringYear + "/01/01"
        + "' AND  M10.CDate  <=  '" + stringYear + "/12/31" + "') ";

    retDoc6M011 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M011.length != 0) {
      for (int intNo = 0; intNo < retDoc6M011.length; intNo++)
        System.out.println((intNo + 1) + "-----------------------重複 Doc6M011----" + retDoc6M011[intNo][0]);
      return false;
    }
    return true;
  }

  // 對於可重覆使用發票，取得所有之 Barcode
  public String[][] getBarCodeForDoc2M011(String stringInvoiceNo, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M011 = null;
    //
    stringSql = "SELECT  DISTINCT  BarCode " + " FROM  Doc2M011 " + " WHERE  InvoiceNo  =  '" + stringInvoiceNo + "' ";
    if (!"".equals(stringBarCode)) {
      stringSql += " AND  BarCode  <>  '" + stringBarCode + "' ";
    }
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    return retDoc2M011;
  }

  public double getInvoiceMoneySum(String stringBarCode) throws Throwable {
    return getInvoiceMoneySum("Doc2M011", stringBarCode);
  }

  public double getInvoiceMoneySum(String stringTable, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M011 = null;
    double doubleInvoiceMoneySum = 0;
    //
    stringSql = "SELECT  SUM(InvoiceMoney) " + " FROM  " + stringTable + " " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    doubleInvoiceMoneySum = doParseDouble(retDoc2M011[0][0].trim());
    return doubleInvoiceMoneySum;
  }

  public double getInvoiceTaxSum(String stringBarCode) throws Throwable {
    return getInvoiceTaxSum("Doc2M011", stringBarCode);
  }

  public double getInvoiceTaxSum(String stringTable, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M011 = null;
    double doubleInvoiceTax = 0;
    //
    stringSql = "SELECT  SUM(InvoiceTax) " + " FROM  " + stringTable + " " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    doubleInvoiceTax = doParseDouble(retDoc2M011[0][0].trim());
    return doubleInvoiceTax;
  }

  public Vector getInvoiceNoDoc2M011(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M011 = null;
    Vector vectorInvoiceNo = new Vector();
    //
    stringSql = "SELECT  InvoiceNo  FROM  Doc2M011  WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc2M011.length; intNo++) {
      vectorInvoiceNo.add(retDoc2M011[intNo][0].trim());
    }
    return vectorInvoiceNo;
  }

  public String[][] getDoc2M011ForDiscountBarCode(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M011 = null;
    // 0 InvoiceNo 1 InvoiceMoney 2 InvoiceDate 3 InvoiceTotalMoney
    stringSql = "SELECT  InvoiceNo,  InvoiceMoney,  InvoiceDate,  InvoiceTotalMoney " + " FROM  Doc2M011 " + " WHERE  BarCode  =  '" + stringBarCode + "' "
        + " ORDER BY  InvoiceDate  DESC";
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    return retDoc2M011;
  }

  public String[][] getDoc2M011ForDiscount(String stringDepartNo, String stringComNo, String stringObjectCd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M011 = null;
    // 0 InvoiceNo 1 InvoiceMoney 2 InvoiceDate 3 InvoiceTotalMoney
    stringSql = "SELECT  InvoiceNo,  InvoiceMoney,  InvoiceDate,  InvoiceTotalMoney " + " FROM  Doc2M011 "
        + " WHERE  BarCode  In  (SELECT  BarCode  FROM  Doc2M010  WHERE  DepartNo  =  '" + stringDepartNo + "'  AND  ComNo  =  '" + stringComNo + "') "
        + " AND  BarCode  In  (SELECT  BarCode  FROM  Doc2M014  AND  STATUS_CD  =  'Z') " + " AND  FactoryNo  =  '" + stringObjectCd + "' " + " ORDER BY  InvoiceDate  DESC";
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    return retDoc2M011;
  }

  public String[][] getDoc2M011(String stringBarCode) throws Throwable {
    return getDoc2M011Union("Doc2M011", stringBarCode);
  }

  public String[][] getDoc2M011Union(String stringTable, String stringBarCode) throws Throwable {
    return getDoc2M011Union(stringTable, stringBarCode, "");
  }

  public String[][] getDoc2M011Union(String stringTable, String stringBarCode, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M011 = null;
    // 0 FactoryNo 1 InvoiceKind 2 InvoiceDate 3 InvoiceNo 4 InvoiceMoney
    // 5 InvoiceTax 6 InvoiceTotalMoney 7 DeductKind 8 RecordNo 9 DeductType
    stringSql = "SELECT  FactoryNo,   InvoiceKind,        InvoiceDate,  InvoiceNo,  InvoiceMoney, " + " InvoiceTax,  InvoiceTotalMoney,  DeductKind,   RecordNo,   DeductType "
        + " FROM  " + stringTable + " " + " WHERE  1=1 ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    stringSql += stringSqlAnd + " ORDER BY  RecordNo ";
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    return retDoc2M011;
  }

  public String[][] getDoc2M011ForRetain(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M011 = null;
    // 0 RecordNo 1 FactoryNo 2 InvoiceKind 3 InvoiceDate 4 InvoiceNo
    // 5 InvoiceTotalMoney 6 InvoiceMoney 7 InvoiceTax 8 DeductKind
    stringSql = "SELECT  RecordNo,           FactoryNo,     InvoiceKind,   InvoiceDate,  InvoiceNo, " + " InvoiceTotalMoney,  InvoiceMoney,  InvoiceTax,    DeductKind "
        + " FROM  Doc2M011 " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " ORDER BY  RecordNo ";
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    return retDoc2M011;
  }

  public String[][] getDoc2M011(String stringBarCode, String stringToday) throws Throwable {
    String stringSql = "";
    String stringAfterToday = "";
    String stringBefroeToday = "";
    String[][] retDoc2M011 = null;
    //
    stringToday = convert.replace(stringToday, "/", "");
    stringBefroeToday = datetime.dateAdd(stringToday, "d", -120);
    stringBefroeToday = convert.FormatedDate(stringBefroeToday, "/");
    stringAfterToday = datetime.dateAdd(stringToday, "d", 120);
    stringAfterToday = convert.FormatedDate(stringAfterToday, "/");
    // 0 FactoryNo 1 InvoiceKind 2 InvoiceDate 3 InvoiceNo 4 InvoiceMoney
    // 5 InvoiceTax 6 InvoiceTotalMoney 7 DeductKind 8 RecordNo
    stringSql = "SELECT  FactoryNo,   InvoiceKind,        InvoiceDate,  InvoiceNo,  InvoiceMoney, " + " InvoiceTax,  InvoiceTotalMoney,  DeductKind,   RecordNo "
        + " FROM  Doc2M011 " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  InvoiceDate  >=  '" + stringBefroeToday + "' " + " AND  InvoiceDate  <=  '"
        + stringAfterToday + "' " + " ORDER BY  RecordNo ";
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    return retDoc2M011;
  }

  public String[][] getBarCodeForDoc2M011(String stringFactoryNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M011 = null;
    // 0 BarCode
    stringSql = "SELECT  DISTINCT  BarCode " + " FROM  Doc2M011 " + " WHERE  FactoryNo  =  '" + stringFactoryNo + "' ";
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    return retDoc2M011;
  }

  public String getUpdateDoc2M011Sql(String stringBarCode, String stringRecordNo, String stringInvoiceKind, String stringInvoiceDate, String stringInvoiceNo,
      String stringInvoiceMoney, String stringInvoiceTax, String stringInvoiceTotalMoney, String stringTaxType) throws Throwable {
    return getUpdateDoc2M011SqlUnion(stringBarCode, stringRecordNo, stringInvoiceKind, stringInvoiceDate, stringInvoiceNo, stringInvoiceMoney, stringInvoiceTax,
        stringInvoiceTotalMoney, stringTaxType, "Doc2M011");
  }

  public String getUpdateDoc2M011SqlUnion(String stringBarCode, String stringRecordNo, String stringInvoiceKind, String stringInvoiceDate, String stringInvoiceNo,
      String stringInvoiceMoney, String stringInvoiceTax, String stringInvoiceTotalMoney, String stringTaxType, String stringTable) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M011 = null;
    stringSql = "UPDATE  " + stringTable + " " + " SET  InvoiceDate  =  '" + stringInvoiceDate + "', ";
    if (!"".equals(stringInvoiceDate))
      stringSql += " InvoiceKind  =  '" + stringInvoiceKind + "', ";
    if (!"".equals(stringInvoiceNo))
      stringSql += " InvoiceNo  =  '" + stringInvoiceNo + "', ";
    if (!"".equals(stringInvoiceMoney))
      stringSql += " InvoiceMoney  =  " + stringInvoiceMoney + ", ";
    if (!"".equals(stringInvoiceTax))
      stringSql += " InvoiceTax  =  " + stringInvoiceTax + ", ";
    if (!"".equals(stringInvoiceTotalMoney))
      stringSql += " InvoiceTotalMoney  =  " + stringInvoiceTotalMoney + ", ";
    stringSql += " InvoiceTaxType  =  '" + stringTaxType + "' " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  RecordNo  =  " + stringRecordNo;
    return stringSql;
  }

  public String[][] getFactoryNoDoc2M011() throws Throwable {
    String stringSql = "";
    String[][] retDoc2M011 = null;
    //
    stringSql = "SELECT  DISTINCT  FactoryNo " + " FROM  Doc2M011 " + " WHERE  BarCode  IN  (SELECT  BarCode  FROM  Doc2M010  WHERE  RetainMoney  >  0) "
        + " AND  BarCode  IN  (SELECT  BarCode  FROM  Doc2M014  WHERE  STATUS_CD  =  'Z') " + " ORDER BY  FactoryNo";
    retDoc2M011 = dbDoc.queryFromPool(stringSql);
    return retDoc2M011;
  }

  // 表格 Doc2M012
  public boolean isExistDoc2M012(String stringCostID, String stringCostID1) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M012 = null;
    //
    stringSql = "SELECT  InOut " + " FROM  Doc2M012 " + " WHERE  CostID    =  '" + stringCostID + "' " + " AND  CostID1  =  '" + stringCostID1 + "' ";
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M012.length > 0)
      return true;
    return false;
  }

  public String getRealMoneySumForDoc2M012(String stringBarCode) throws Throwable {
    return getRealMoneySumForDoc2M012Union("Doc2M012", stringBarCode);
  }

  public String getRealMoneySumForDoc2M012Union(String stringTable, String stringBarCode) throws Throwable {
    String stringSql = "";
    String stringRealMoneySum = "";
    String[][] retDoc2M012 = null;
    //
    stringSql = "SELECT  SUM(RealMoney)  FROM  " + stringTable + "  WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M012.length != 0) {
      stringRealMoneySum = convert.FourToFive("" + doParseDouble(retDoc2M012[0][0].trim()), 0);
    }
    return stringRealMoneySum;
  }

  public String getRealTotalMoneySumForDoc2M012(String stringBarCode) throws Throwable {
    return "" + getRealTotalMoneySumUnion("Doc2M012", stringBarCode);
  }

  public String getRealTotalMoneySumForDoc2M012Union(String stringTable, String stringBarCode) throws Throwable {
    return "" + getRealTotalMoneySumUnion(stringTable, stringBarCode);
  }

  public double getRealTotalMoneySumForDoc2M012(String stringBarCodeExcept, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1,
      String stringCostID, String stringCostID1, String stringPurchaseNoExist, String stringSqlAnd) throws Throwable {
    double doubleRealTotalMoneySum = 0;
    String stringSql = "";
    String[][] retDoc2M012 = null;
    //
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  Doc2M012 " + "  WHERE  BarCode IN  (SELECT  BarCode  FROM  Doc2M010  WHERE  UNDERGO_WRITE<>'E' ";
    if (!"".equals(stringPurchaseNoExist))
      stringSql += "  AND PurchaseNoExist  =  '" + stringPurchaseNoExist + "' ";
    stringSql += ") ";
    if (!"".equals(stringBarCodeExcept))
      stringSql += " AND  BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    stringSql += stringSqlAnd;
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum = doParseDouble(retDoc2M012[0][0].trim());
    return doubleRealTotalMoneySum;
  }

  public double getRealTotalMoneySumForDoc2M012(String stringBarCodeExcept, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1,
      String stringPurchaseNoExist, String[][] retDoc7M011) throws Throwable {
    double doubleRealTotalMoneySum = 0;
    String stringCostID = "";
    String stringCostID1 = "";
    String stringSql = "";
    String stringSqlTemp = "";
    String[][] retDoc2M012 = null;
    //
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  Doc2M012 " + "  WHERE  BarCode IN  (SELECT  BarCode  FROM  Doc2M010  WHERE  UNDERGO_WRITE<>'E' ";
    if (!"".equals(stringPurchaseNoExist))
      stringSql += "  AND PurchaseNoExist  =  '" + stringPurchaseNoExist + "' ";
    stringSql += ") ";
    if (!"".equals(stringPurchaseNoExist))
      stringSql += " AND  BarCode IN  (SELECT  BarCode  FROM  Doc2M010  WHERE  PurchaseNoExist  =  '" + stringPurchaseNoExist + "') ";
    if (!"".equals(stringBarCodeExcept))
      stringSql += " AND  BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum = doParseDouble(retDoc2M012[0][0].trim());
    return doubleRealTotalMoneySum;
  }

  public double getRealTotalMoneySumForDoc2M012Except(String stringBarCodeExcept, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1,
      String stringPurchaseNoExist, String[][] retDoc7M011) throws Throwable {
    double doubleRealTotalMoneySum = 0;
    String stringCostID = "";
    String stringCostID1 = "";
    String stringSql = "";
    String stringSqlTemp = "";
    String[][] retDoc2M012 = null;
    //
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  Doc2M012 " + " WHERE  CostID  <>  '13' "
        + "  AND  BarCode IN  (SELECT  BarCode  FROM  Doc2M010  WHERE  UNDERGO_WRITE<>'E' ";
    if (!"".equals(stringPurchaseNoExist))
      stringSql += "  AND PurchaseNoExist  =  '" + stringPurchaseNoExist + "' ";
    stringSql += ") ";
    if (!"".equals(stringBarCodeExcept))
      stringSql += " AND  BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum = doParseDouble(retDoc2M012[0][0].trim());
    return doubleRealTotalMoneySum;
  }

  public double getRealTotalMoneySumSpecForDoc2M012(String stringBarCodeExcept, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1,
      String stringPurchaseNoExist, String stringSqlAnd, String[][] retDoc7M011) throws Throwable {
    double doubleRealTotalMoneySum = 0;
    String stringCostID = "";
    String stringCostID1 = "";
    String stringSql = "";
    String stringSqlTemp = "";
    String[][] retDoc2M012 = null;
    //
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  Doc2M012 " + "  WHERE  BarCode IN  (SELECT  BarCode  FROM  Doc2M010  WHERE  UNDERGO_WRITE<>'E' ";
    if (!"".equals(stringPurchaseNoExist))
      stringSql += "  AND PurchaseNoExist  =  '" + stringPurchaseNoExist + "' ";
    stringSql += ") ";
    if (!"".equals(stringPurchaseNoExist))
      stringSql += " AND  BarCode IN  (SELECT  BarCode  FROM  Doc2M010  WHERE  PurchaseNoExist  =  '" + stringPurchaseNoExist + "') ";
    if (!"".equals(stringBarCodeExcept))
      stringSql += " AND  BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    stringSql += stringSqlAnd;
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum = doParseDouble(retDoc2M012[0][0].trim());
    return doubleRealTotalMoneySum;
  }

  public double getRealTotalMoneySumForDoc2M012(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc2M012 = null;
    double doubleRealTotalMoneySum = 0;
    //
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + " FROM  Doc2M012 M12,  Doc2M010  M10 " + " WHERE  M12.BarCode  =  M10.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.BarCode  IN  (SELECT BarCode " + " FROM  Doc2M017 " + " WHERE  PurchaseNo1  =  '" + stringPurchaseNo1 + "' "
        + " AND  PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  PurchaseNo3  =  '" + stringPurchaseNo3 + "') ";
    if (!"".equals(stringBarCode)) {
      stringSql += " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    }
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum = doParseDouble(retDoc2M012[0][0].trim());
    return doubleRealTotalMoneySum;
  }

  public double getRealTotalMoneySumForDoc2M012(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringPurchaseNo4) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M012 = null;
    double doubleRealTotalMoneySum = 0;
    //
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + " FROM  Doc2M012 M12,  Doc2M010  M10 " + " WHERE  M12.BarCode  =  M10.BarCode " + " AND  M10.ComNo  =  '" + stringComNo + "' "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.BarCode  IN  (SELECT BarCode " + " FROM  Doc2M017 " + " WHERE  PurchaseNo1  =  '" + stringPurchaseNo1 + "' "
        + " AND  PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  PurchaseNo4  =  '" + stringPurchaseNo4 + "') ";
    if (!"".equals(stringBarCode)) {
      stringSql += " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    }
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum = doParseDouble(retDoc2M012[0][0].trim());
    return doubleRealTotalMoneySum;
  }

  // 0 CostID 1 CostID1
  public String[][] getBarCodeForDoc2M012(String[][] retDoc2M020) throws Throwable {
    String stringCostID = "";
    String stringCostID1 = "";
    String stringSql = "";
    String[][] retDoc2M012 = null;
    //
    stringSql = "SELECT  DISTINCT  BarCode " + " FROM  Doc2M012 " + " WHERE  1  =  1 ";
    for (int intNo = 0; intNo < retDoc2M020.length; intNo++) {
      stringCostID = retDoc2M020[intNo][0].trim();
      stringCostID1 = retDoc2M020[intNo][1].trim();
      if (intNo == 0) {
        stringSql += "AND  ((  CostID  =  '" + stringCostID + "'  AND  CostID1  =  '" + stringCostID1 + "' ) ";
      } else {
        stringSql += " OR  (  CostID  =  '" + stringCostID + "'  AND  CostID1  =  '" + stringCostID1 + "' ) ";
      }
    }
    if (retDoc2M020.length > 0)
      stringSql += ") ";
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    return retDoc2M012;
  }

  public String[][] getDoc2M012(String stringBarCode, String stringRecordNo) throws Throwable {
    return getDoc2M012Union("Doc2M012", stringBarCode, stringRecordNo);
  }

  public String[][] getDoc2M012Union(String stringTable, String stringBarCode, String stringRecordNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M012 = null;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 RealMoney 7 RealTotalMoney
    stringSql = "SELECT  InOut,     DepartNo,     ProjectID,             ProjectID1,  CostID, " + " CostID1,   RealMoney,    RealTotalMoney " + " FROM  " + stringTable + " "
        + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  RecordNo  =  " + stringRecordNo;
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    return retDoc2M012;
  }

  public String[][] getDoc2M012(String stringBarCode) throws Throwable {
    return getDoc2M012Union("Doc2M012", stringBarCode);
  }

  public String[][] getDoc2M012Union(String stringTable, String stringBarCode) throws Throwable {
    return getDoc2M012MultUnion(stringTable, stringBarCode, "");
  }

  public String[][] getDoc2M012MultUnion(String stringTable, String stringBarCode, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M012 = null;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 RealMoney 7 RealTotalMoney
    stringSql = "SELECT  InOut,     DepartNo,     ProjectID,       ProjectID1,  CostID, " + " CostID1,   RealMoney,    RealTotalMoney " + " FROM  " + stringTable + " "
        + " WHERE  1=1 ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    stringSql += stringSqlAnd + " ORDER BY  RecordNo ";
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    return retDoc2M012;
  }

  public String getUpdateDoc2M012Sql(String stringRealMoney, String stringBarCode, String stringRecordNo) throws Throwable {
    return getUpdateDoc2M012SqlUnion("Doc2M012", stringRealMoney, stringBarCode, stringRecordNo);
  }

  public String getUpdateDoc2M012SqlUnion(String stringTable, String stringRealMoney, String stringBarCode, String stringRecordNo) throws Throwable {
    String stringSql = "";
    //
    stringSql = "UPDATE  " + stringTable + " " + "  SET  RealMoney  =  " + stringRealMoney + " " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  RecordNo  =  "
        + stringRecordNo;
    return stringSql;
  }

  public String[][] getDoc2M012(String stringBarCode, String stringInOut, String stringDepartNo, String stringProjectID1, String stringCostID, String stringCostID1)
      throws Throwable {
    return getDoc2M012Union("Doc2M012", stringBarCode, stringInOut, stringDepartNo, stringProjectID1, stringCostID, stringCostID1);
  }

  public String[][] getDoc2M012Union(String stringTable, String stringBarCode, String stringInOut, String stringDepartNo, String stringProjectID1, String stringCostID,
      String stringCostID1) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M012 = null;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 RealMoney 7 RealTotalMoney 8 RecordNo
    stringSql = "SELECT  InOut,     DepartNo,     ProjectID,       ProjectID1,  CostID, " + " CostID1,   RealMoney,    RealTotalMoney,  RecordNo " + " FROM  " + stringTable + " "
        + " WHERE  1  =  1 ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    stringSql += " ORDER BY  RecordNo ";
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    return retDoc2M012;
  }

  // 表格 Doc2M0121
  // 2011-04-08 033FG 修正
  public String[][] getDoc2M0121(String stringBarCode, String stringFunctionType, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M0121 = null;
    // 0 ID 1 BarCode 2 FunctionType 3 ProjectID1 4 RealMoney
    // 5 LAST_USER 6 LAST_YMD
    stringSql = "SELECT  ID,          BarCode,     FunctionType,       ProjectID1,  RealMoney, " + " LAST_USER,   LAST_YMD " + " FROM  Doc2M0121 " + " WHERE  1  =  1 ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringFunctionType))
      stringSql += " AND  FunctionType  =  '" + stringFunctionType + "' ";
    stringSql += stringSqlAnd + " ORDER BY  LAST_YMD,  BarCode ";
    retDoc2M0121 = dbDoc.queryFromPool(stringSql);
    return retDoc2M0121;
  }

  // 表格 Doc5M0221
  public String[][] getDoc5M0221(String stringTable, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M0221 = null;
    // 0 BorrowAmt 1 DateStart 2 DateEnd 3 AccrualRate 4 Formula 5 Accrual
    stringSql = "SELECT  BorrowAmt,  DateStart,  DateEnd,  AccrualRate,  Formula,  Accrual " + " FROM  " + stringTable + " " + " WHERE  BarCode  =  '" + stringBarCode + "' "
        + " ORDER BY  RecordNo ";
    retDoc5M0221 = dbDoc.queryFromPool(stringSql);
    return retDoc5M0221;
  }

  // 表格 Doc5M0222
  public String[][] getDoc5M0222(String stringTable, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M0222 = null;
    // 0 InvestmentTrust 1 FundNo 2 BandNo 3 AccountNo 4 AccountName
    // 5 Amt 6 Unit 7 NetAmt
    stringSql = "SELECT  InvestmentTrust,  FundNo,  BandNo,  AccountNo,  AccountName, " + " Amt,              Unit,    NetAmt " + " FROM  " + stringTable + " "
        + " WHERE  BarCode  =  '" + stringBarCode + "' " + " ORDER BY  RecordNo ";
    retDoc5M0222 = dbDoc.queryFromPool(stringSql);
    return retDoc5M0222;
  }

  // 表格 Doc5M0224
  public String[][] getDoc5M0224(String stringBarCode, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M0224 = null;
    // 0 BarCode 1 VOUCHER_YMD 2 VOUCHER_FLOW_NO 3 VOUCHER_SEQ_NO 4 FactoryNo 5 Amt
    // 6 CostID 7 CostID1
    stringSql = "SELECT  BarCode,  VOUCHER_YMD,  VOUCHER_FLOW_NO, VOUCHER_SEQ_NO,  FactoryNo,  Amt,  CostID,  CostID1 " + " FROM  Doc5M0224 " + " WHERE  BarCode  =  '"
        + stringBarCode + "' " + " ORDER BY  RecordNo ";
    retDoc5M0224 = dbDoc.queryFromPool(stringSql);
    return retDoc5M0224;
  }

  public Hashtable getVouherAmtDoc5M0224(String stringBarCode, String stringComNo, FargloryUtil exeUtil) throws Throwable {
    String stringSql = "";
    String stringDateStart = datetime.getToday("YYYYmmdd");
    String[][] retDoc5M0224 = null;
    //
    stringDateStart = exeUtil.getDateConvert(datetime.dateAdd(stringDateStart, "y", -2));
    // 0 VOUCHER_YMD 1 VOUCHER_FLOW_NO 2 VOUCHER_SEQ_NO 3 AMT
    stringSql = "SELECT  VOUCHER_YMD,  VOUCHER_FLOW_NO,  VOUCHER_SEQ_NO,  Amt " + " FROM  Doc5M0224 " + " WHERE  BarCode  <>  '" + stringBarCode + "' "
        + " AND BarCode  NOT  IN  (SELECT  BarCode " + " FROM  Doc2M014 " + " WHERE  VOUCHER_YMD  >  '" + stringDateStart + "' " + " AND  STATUS_CD  =  'Z') "
        + " AND (BarCode  IN  (SELECT  BarCode " + " FROM  Doc5M020 " + " WHERE  CDate  >  '" + stringDateStart + "' " + " AND  ComNo  =  '" + stringComNo + "' "
        + " AND UNDERGO_WRITE  <>  'E') " + " OR BarCode  IN  (SELECT  BarCode " + " FROM  Doc2M010 " + " WHERE  CDate  >  '" + stringDateStart + "' " + " AND  ComNo  =  '"
        + stringComNo + "' " + " AND UNDERGO_WRITE  <>  'E')) " + " ORDER BY  VOUCHER_YMD,  VOUCHER_FLOW_NO,  VOUCHER_SEQ_NO ";
    retDoc5M0224 = dbDoc.queryFromPool(stringSql);
    //
    String stringVoucher = "";
    String stringVoucherYMD = "";
    String stringVoucherFlowNo = "";
    String stringVoucherSeqNo = "";
    String stringAmt = "";
    Hashtable hashtableVoucherAmt = new Hashtable();
    for (int intNo = 0; intNo < retDoc5M0224.length; intNo++) {
      stringVoucherYMD = retDoc5M0224[intNo][0].trim();
      stringVoucherFlowNo = retDoc5M0224[intNo][1].trim();
      stringVoucherSeqNo = retDoc5M0224[intNo][2].trim();
      stringAmt = retDoc5M0224[intNo][3].trim();
      stringVoucher = stringVoucherYMD + "-" + convert.add0(stringVoucherFlowNo, "5") + "-" + convert.add0(stringVoucherSeqNo, "4");
      stringAmt = "" + (exeUtil.doParseDouble(stringAmt) + exeUtil.doParseDouble("" + hashtableVoucherAmt.get(stringVoucher)));
      hashtableVoucherAmt.put(stringVoucher, stringAmt);
    }
    return hashtableVoucherAmt;
  }

  // 表格 Doc5M0225
  public String[][] getDoc5M0225(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M0225 = null;
    // 0 ComNo 1 BarCodeF 2 RecordNo 3 CostID 4 RealTotalMoney
    stringSql = "SELECT  ComNo,  BarCodeF,  RecordNo,  CostID,  RealTotalMoney " + " FROM  Doc5M0225 " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " ORDER BY  RecordNo ";
    retDoc5M0225 = dbDoc.queryFromPool(stringSql);
    return retDoc5M0225;
  }

  // 表格 Doc5M0226
  public String[][] getDoc5M0226(String stringBarCode, String stringBarCodeRef, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M0226 = null;
    // 0 BarCode 1 BarCodeRef
    stringSql = "SELECT  BarCode,  BarCodeRef " + " FROM  Doc5M0226 " + " WHERE  1=1 ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringBarCodeRef))
      stringSql += " AND  BarCodeRef  =  '" + stringBarCodeRef + "' ";
    stringSql += stringSqlAnd + " ORDER BY  RecordNo ";
    retDoc5M0226 = dbDoc.queryFromPool(stringSql);
    return retDoc5M0226;
  }

  // 表格 Doc2M013
  public String[][] getDoc2M013(String stringBarCode) throws Throwable {
    return getDoc2M013Union("Doc2M013", stringBarCode);
  }

  public String[][] getDoc2M013Union(String stringTable, String stringBarCode) throws Throwable {
    return getDoc2M013MultUnion(stringTable, stringBarCode, "");
  }

  public String[][] getDoc2M013MultUnion(String stringTable, String stringBarCode, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringAcctNO2 = "Doc5M023".equals(stringTable) ? "ACCT_NO2" : " '' ";
    String[][] retDoc2M013 = null;
    // 0 FactoryNo 1 ReceiptKind 2 ReceiptDate 3 ReceiptMoney 4 ReceiptTax
    // 5 ReceiptTotalMoney 6 ReceiptTaxType 7 ACCT_NO 8 PayCondition1 9 DepartNo
    // 10 ACCT_NO2 11 SupplementMoney
    stringSql = "SELECT  FactoryNo,          ReceiptKind,     ReceiptDate,  ReceiptMoney,   ReceiptTax, "
        + " ReceiptTotalMoney,  ReceiptTaxType,  ACCT_NO,      PayCondition1,  DepartNo, " + " " + stringAcctNO2 + ",  SupplementMoney " + " FROM  " + stringTable + " "
        + " WHERE  1=1  ";
    if (!"".equals(stringBarCode))
      stringSql += " and BarCode  =  '" + stringBarCode + "' ";
    stringSql += stringSqlAnd + " ORDER BY  RecordNo ";
    retDoc2M013 = dbDoc.queryFromPool(stringSql);
    return retDoc2M013;
  }

  public String[][] getDoc2M013ForRetain(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M013 = null;
    // 0 RecordNo 1 FactoryNo 2 ReceiptKind 3 ReceiptTotalMoney 4 ReceiptMoney
    // 5 ReceiptTax 6 ReceiptTaxType
    stringSql = "SELECT  RecordNo,    FactoryNo,           ReceiptKind,  ReceiptTotalMoney,  ReceiptMoney, " + " ReceiptTax,  ReceiptTaxType " + " FROM  Doc2M013 "
        + " WHERE  BarCode  =  '" + stringBarCode + "' " + " ORDER BY  RecordNo ";
    retDoc2M013 = dbDoc.queryFromPool(stringSql);
    return retDoc2M013;
  }

  public String[][] getDoc2M013(String stringBarCode, String stringRecordNo) throws Throwable {
    return getDoc2M013Union("Doc2M013", stringBarCode, stringRecordNo);
  }

  public String[][] getDoc2M013Union(String stringTable, String stringBarCode, String stringRecordNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M013 = null;
    // 0 FactoryNo 1 ReceiptKind 2 ReceiptDate 3 ReceiptMoney 4 ReceiptTax
    // 5 ReceiptTotalMoney 6 ReceiptTaxType 7 ACCT_NO
    stringSql = "SELECT  FactoryNo,          ReceiptKind,     ReceiptDate,  ReceiptMoney,  ReceiptTax, " + " ReceiptTotalMoney,  ReceiptTaxType,  ACCT_NO " + " FROM  "
        + stringTable + " " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  RecordNo  =  '" + stringRecordNo + "' ";
    retDoc2M013 = dbDoc.queryFromPool(stringSql);
    return retDoc2M013;
  }

  public String[][] getBarCodeForDoc2M013(String stringFactoryNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M013 = null;
    // 0 BarCode
    stringSql = "SELECT  DISTINCT  BarCode " + " FROM  Doc2M013 " + " WHERE  FactoryNo  =  '" + stringFactoryNo + "' ";
    retDoc2M013 = dbDoc.queryFromPool(stringSql);
    return retDoc2M013;
  }

  public double getReceiptTotalMoneySumForDoc2M013(String stringBarCode) throws Throwable {
    return getReceiptTotalMoneySumForDoc2M013Union("Doc2M013", stringBarCode);
  }

  public double getReceiptTotalMoneySumForDoc2M013Union(String stringTable, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M013 = null;
    double doubleReceiptTotalMoney = 0;
    //
    stringSql = "SELECT  SUM(ReceiptTotalMoney) " + " FROM  " + stringTable + " " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc6M013 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M013.length != 0) {
      doubleReceiptTotalMoney = doParseDouble(retDoc6M013[0][0].trim());
    }
    return doubleReceiptTotalMoney;
  }

  public String getUpdateDoc2M013Sql(String stringReceiptTax, String stringReceiptDate, String stringReceiptTotalMoney, String stringReceiptMoney, String stringReceiptTaxType,
      String stringBarCode, String stringRecordNo) throws Throwable {
    return getUpdateDoc2M013SqlUnion(stringReceiptTax, stringReceiptDate, stringReceiptTotalMoney, stringReceiptMoney, stringReceiptTaxType, stringBarCode, stringRecordNo,
        "Doc2M013");

  }

  public String getUpdateDoc2M013SqlUnion(String stringReceiptTax, String stringReceiptDate, String stringReceiptTotalMoney, String stringReceiptMoney, String stringReceiptTaxType,
      String stringBarCode, String stringRecordNo, String stringTable) throws Throwable {
    String stringSql = "";
    //
    stringSql = "UPDATE  " + stringTable + "  SET   ReceiptTax  =  " + stringReceiptTax + ", " + " ReceiptTotalMoney  =  " + stringReceiptTotalMoney + ", " + " ReceiptMoney  =  "
        + stringReceiptMoney + ", " + " ReceiptDate  =  '" + stringReceiptDate + "', " + " ReceiptTaxType  =  '" + stringReceiptTaxType + "' " + " WHERE  BarCode  =  '"
        + stringBarCode + "' " + " AND  RecordNo  =  '" + stringRecordNo + "' ";
    return stringSql;
  }

  public String[][] getFactoryNoDoc2M013() throws Throwable {
    String stringSql = "";
    String[][] retDoc2M013 = null;
    //
    stringSql = "SELECT  DISTINCT  FactoryNo " + " FROM  Doc2M013 " + " WHERE  BarCode  IN  (SELECT  BarCode  FROM  Doc2M010  WHERE  RetainMoney  >  0) "
        + " AND  BarCode  IN  (SELECT  BarCode  FROM  Doc2M014  WHERE  STATUS_CD  =  'Z') ";
    retDoc2M013 = dbDoc.queryFromPool(stringSql);
    return retDoc2M013;
  }

  // 表格 Doc2M014_ProjectID1
  public Vector getDoc2M014ProjectID1(String stringUseStatus) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M014ProjectID1 = null;
    Vector vectorProjectID1 = new Vector();
    //
    stringSql = "SELECT  ProjectID1 " + " FROM  Doc2M014_ProjectID1 " + " WHERE  1=1 ";
    if (!"".equals(stringUseStatus))
      stringSql += " AND  UseStatus  =  '" + stringUseStatus + "' ";
    stringSql += " ORDER BY ProjectID1 ";
    retDoc2M014ProjectID1 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc2M014ProjectID1.length; intNo++)
      vectorProjectID1.add(retDoc2M014ProjectID1[intNo][0].trim());
    return vectorProjectID1;
  }

  // 表格 Doc2M014
  public void doUpdateForDoc2M014(String stringFieldName, String stringFieldValue, String stringBarCode) throws Throwable {
    String stringSql = "";
    String stringStatus = "";
    //
    stringSql = "UPDATE  Doc2M014  SET  " + stringFieldName + "  =  '" + stringFieldValue + "' " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    dbDoc.execFromPool(stringSql);
  }

  public String getStatusForDoc2M014(String stringBarCode) throws Throwable {
    return getStatusForDoc2M014(stringBarCode, "");
  }

  public String getStatusForDoc2M014(String stringBarCode, String stringType) throws Throwable {
    String stringSql = "";
    String stringStatus = "U";
    String[][] retDoc2M014 = null;
    String[][] retDoc2M0143 = null;
    //
    // 薪資 Doc2M0143 判斷：實際及預估皆轉傳票時，才算完成
    stringSql = "SELECT  STATUS_CD,  VOUCHER_YMD,  VOUCHER_FLOW_NO \n" + " FROM  Doc2M0143 \n" + " WHERE  BarCode  =  '" + stringBarCode + "' \n" + " ORDER BY  TEMP_KEY \n";
    retDoc2M0143 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M0143.length == 0) {
      stringSql = "SELECT  STATUS_CD \n" + " FROM  Doc2M014 \n" + " WHERE  BarCode  =  '" + stringBarCode + "' \n" + " ORDER BY  VOUCHER_YMD,  VOUCHER_FLOW_NO \n";
      retDoc2M014 = dbDoc.queryFromPool(stringSql);
      if (retDoc2M014.length != 0)
        return retDoc2M014[0][0].trim();
    }
    //
    String stringKEY = "";
    Vector vectorKEY = new Vector();
    for (int intNo = 0; intNo < retDoc2M0143.length; intNo++) {
      stringKEY = retDoc2M0143[intNo][1].trim() + "%-%" + retDoc2M0143[intNo][2].trim();
      if (vectorKEY.indexOf(stringKEY) == -1)
        continue;
      vectorKEY.add(stringKEY);
    }
    for (int intNo = 0; intNo < retDoc2M0143.length; intNo++) {
      stringStatus = retDoc2M0143[intNo][0].trim();
      if ("CHECK".equals(stringType)) {
        if ("Z".equals(stringStatus))
          return "Z";
      } else if ("START".equals(stringType)) {
        if (intNo == 0)
          return stringStatus;
      } else if ("END".equals(stringType)) {
        if (vectorKEY.size() <= 1)
          return "U";
        if (intNo == retDoc2M0143.length - 1)
          return stringStatus;
      } else {
        if (vectorKEY.size() <= 1)
          return "U";
        if ("U".equals(stringStatus))
          return "U";
      }
    }
    //
    return stringStatus;
  }

  public String[][] getSpecAcctNoForDoc2M014(String stringAcctNo, String stringInvoiceNoS, String stringInvoiceNoE, String stringVoucherDateS, String stringVoucherDateE,
      String stringObjectCd, String stringBarCode, String stringDocNoQ) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M014 = null;
    //

    // 0 BarCode 1 VOUCHER_YMD 2 VOUCHER_FLOW_NO 3 COMPANY_CD 4 KIND
    stringSql = "SELECT  DISTINCT  BarCode,  VOUCHER_YMD,  VOUCHER_FLOW_NO,  COMPANY_CD,  KIND " + " FROM  Doc2M014 " + " WHERE  STATUS_CD  =  'Z' ";
    // " AND ACCT_NO = '" + stringAcctNo + "' " ;
    // 發票號碼
    if (!"".equals(stringInvoiceNoS) && !"".equals(stringInvoiceNoE)) {
      // stringSql += " AND DESCRIPTION_2 BETWEEN '" + stringInvoiceNoS + "' AND '" +
      // stringInvoiceNoE + "' " ;
      stringSql += " AND  BarCode  IN  (SELECT BarCode FROM  Doc2M011 WHERE  InvoiceNo  BETWEEN'" + stringInvoiceNoS + "'  AND  '" + stringInvoiceNoE + "') ";
    }
    // 傳票日期
    if (!"".equals(stringVoucherDateS) && !"".equals(stringVoucherDateE)) {
      stringVoucherDateS = convert.roc2ac(stringVoucherDateS);
      stringVoucherDateS = convert.FormatedDate(stringVoucherDateS, "/");
      stringVoucherDateE = convert.roc2ac(stringVoucherDateE);
      stringVoucherDateE = convert.FormatedDate(stringVoucherDateE, "/");
      stringSql += " AND  VOUCHER_YMD  BETWEEN  '" + stringVoucherDateS + "'  AND  '" + stringVoucherDateE + "' ";
    }
    // 廠商
    if (!"".equals(stringObjectCd)) {
      stringSql += " AND  OBJECT_CD  =  '" + stringObjectCd + "' ";
    }
    //
    if (!"".equals(stringDocNoQ)) {
      stringSql += " AND  (BarCode  IN  (SELECT  BarCode  FROM  Doc2M010  WHERE  DocNo  LIKE  '%" + stringDocNoQ + "%') OR  "
          + " BarCode  IN  (SELECT  BarCode  FROM  Doc6M010  WHERE  DocNo  LIKE  '%" + stringDocNoQ + "%')) ";
    }
    // 條碼編號
    if (!"".equals(stringBarCode)) {
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    }
    //
    stringSql += " ORDER BY  VOUCHER_YMD,  VOUCHER_FLOW_NO ";
    retDoc2M014 = dbDoc.queryFromPool(stringSql);
    return retDoc2M014;
  }

  public String[][] getDoc2M014(String stringBarCode, String stringRowType) throws Throwable {
    return getDoc2M014Union(stringBarCode, stringRowType, "");
  }

  public String[][] getDoc2M014Union(String stringBarCode, String stringRowType, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M014 = null;
    // 0 ACCT_NO 1 VOUCHER_YMD 2 VOUCHER_FLOW_NO 3 VOUCHER_SEQ_NO 4 COMPANY_CD
    // 5 KIND 6 AMT
    stringSql = "SELECT  ACCT_NO,  VOUCHER_YMD,  VOUCHER_FLOW_NO,  VOUCHER_SEQ_NO,  COMPANY_CD,  KIND,  AMT " + " FROM  Doc2M014 " + " WHERE  1=1 ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringRowType))
      stringSql += " AND  RTRIM(RowType)  =  '" + stringRowType + "' ";
    stringSql += stringSqlAnd;
    retDoc2M014 = dbDoc.queryFromPool(stringSql);
    return retDoc2M014;
  }

  public String[][] getDoc2M014(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M014 = null;
    // 0 BarCode 1 DocNo 2 RowType 3 RecordNo 4 VOUCHER_YMD
    // 5 VOUCHER_FLOW_NO 6 VOUCHER_SEQ_NO 7 COMPANY_CD 8 KIND 9 DB_CR_CD
    // 10 ACCT_NO 11 DEPT_CD 12 OBJECT_CD 13 AMT 14 EXCHANG_AMT
    // 15 MONTEARY 16 ClaimerMoney 17 STATUS_CD 18 DESCRIPTION_1 19 DESCRIPTION_2
    // 20 DESCRIPTION_3 21 DESCRIPTION_4 22 DESCRIPTION_5 23 DESCRIPTION 24
    // LAST_USER
    // 25 LAST_YMD
    stringSql = "SELECT  BarCode,                       DocNo,                     RowType,                RecordNo,               VOUCHER_YMD, "
        + " VOUCHER_FLOW_NO,    VOUCHER_SEQ_NO,   COMPANY_CD,          KIND,                      DB_CR_CD, "
        + " ACCT_NO,                     DEPT_CD,                OBJECT_CD,           AMT,                       EXCHANG_AMT, "
        + " MONTEARY,                    ClaimerMoney,        STATUS_CD,           DESCRIPTION_1,    DESCRIPTION_2, "
        + " DESCRIPTION_3,            DESCRIPTION_4,       DESCRIPTION_5,    DESCRIPTION,         LAST_USER, " + " LAST_YMD ,                  'A' " + " FROM  Doc2M014 "
        + " WHERE  BarCode  =  '" + stringBarCode + "' " + " ORDER BY  VOUCHER_YMD,  VOUCHER_FLOW_NO,  VOUCHER_SEQ_NO ";
    retDoc2M014 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc2M014.length; intNo++) {
      retDoc2M014[intNo][13] = convert.FourToFive(retDoc2M014[intNo][13].trim(), 0);
      retDoc2M014[intNo][14] = convert.FourToFive(retDoc2M014[intNo][14].trim(), 0);
      retDoc2M014[intNo][15] = convert.FourToFive(retDoc2M014[intNo][15].trim(), 0);
      retDoc2M014[intNo][16] = convert.FourToFive(retDoc2M014[intNo][16].trim(), 0);
      retDoc2M014[intNo][18] = retDoc2M014[intNo][18].trim();
      retDoc2M014[intNo][19] = retDoc2M014[intNo][19].trim();
      retDoc2M014[intNo][20] = retDoc2M014[intNo][20].trim();
      retDoc2M014[intNo][21] = retDoc2M014[intNo][21].trim();
      retDoc2M014[intNo][22] = retDoc2M014[intNo][22].trim();
      retDoc2M014[intNo][23] = retDoc2M014[intNo][23].trim();
    }
    return retDoc2M014;
  }

  public String[][] getDoc2M014(String stringVoucherYMD, String stringVoucherFlowNo, String stringCompanyCd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M014 = null;
    // 0 BarCode 1 DocNo 2 RowType 3 RecordNo 4 VOUCHER_YMD
    // 5 VOUCHER_FLOW_NO 6 VOUCHER_SEQ_NO 7 COMPANY_CD 8 KIND 9 DB_CR_CD
    // 10 ACCT_NO 11 DEPT_CD 12 OBJECT_CD 13 AMT 14 EXCHANG_AMT
    // 15 MONTEARY 16 ClaimerMoney 17 STATUS_CD 18 DESCRIPTION_1 19 DESCRIPTION_2
    // 20 DESCRIPTION_3 21 DESCRIPTION_4 22 DESCRIPTION_5 23 DESCRIPTION 24
    // LAST_USER
    // 25 LAST_YMD
    stringSql = "SELECT  BarCode,          DocNo,           RowType,       RecordNo,        VOUCHER_YMD, "
        + " VOUCHER_FLOW_NO,  VOUCHER_SEQ_NO,  COMPANY_CD,    KIND,            DB_CR_CD, " + " ACCT_NO,          DEPT_CD,         OBJECT_CD,     AMT,             EXCHANG_AMT, "
        + " MONTEARY,         ClaimerMoney,    STATUS_CD,     DESCRIPTION_1,   DESCRIPTION_2, " + " DESCRIPTION_3,    DESCRIPTION_4,   DESCRIPTION_5, DESCRIPTION,     LAST_USER, "
        + " LAST_YMD ,        'A' " + " FROM  Doc2M014 " + " WHERE  VOUCHER_YMD  =  '" + stringVoucherYMD + "' " + " AND  VOUCHER_FLOW_NO  =  '" + stringVoucherFlowNo + "' "
        + " AND  COMPANY_CD  =  '" + stringCompanyCd + "' " + " AND  KIND  =  '0' ";
    retDoc2M014 = dbDoc.queryFromPool(stringSql);
    return retDoc2M014;
  }

  public void doInsertDoc2M014Batch(String[][] retDoc2M014) throws Throwable {
    String stringSql = "";
    Vector vectorSql = new Vector();
    //
    for (int intNo = 0; intNo < retDoc2M014.length; intNo++) {
      stringSql = getInsertDoc2M014Sql(retDoc2M014[intNo]);
      System.out.println(intNo + "----------[" + stringSql + "]");
      vectorSql.add(stringSql);
    }
    if (vectorSql.size() > 0)
      System.out.println("SQL 數目----------[" + vectorSql.size() + "]");
    dbDoc.execFromPool((String[]) vectorSql.toArray(new String[0]));
  }

  public String getInsertDoc2M014Sql(String[] retDoc2M014) throws Throwable {
    String stringSql = "";
    //
    retDoc2M014[25] = convert.replace(retDoc2M014[25], "/", "");
    // 0 BarCode 1 DocNo 2 RowType 3 RecordNo 4 VOUCHER_YMD
    // 5 VOUCHER_FLOW_NO 6 VOUCHER_SEQ_NO 7 COMPANY_CD 8 KIND 9 DB_CR_CD
    // 10 ACCT_NO 11 DEPT_CD 12 OBJECT_CD 13 AMT 14 EXCHANG_AMT
    // 15 MONTEARY 16 STATUS_CD 17 DESCRIPTION_1 18 DESCRIPTION_2 19 DESCRIPTION_3
    // 20 DESCRIPTION_4 21 DESCRIPTION_5 22 DESCRIPTION 23 ClaimerMoney 24 LAST_USER
    // 25 LAST_YMD
    stringSql = "INSERT  Doc2M014 ( BarCode,          DocNo,           RowType,         RecordNo,       VOUCHER_YMD, "
        + " VOUCHER_FLOW_NO,  VOUCHER_SEQ_NO,  COMPANY_CD,      KIND,           DB_CR_CD, " + " ACCT_NO,          DEPT_CD,         OBJECT_CD,       AMT,            EXCHANG_AMT, "
        + " MONTEARY,         STATUS_CD,       DESCRIPTION_1,   DESCRIPTION_2,  DESCRIPTION_3, "
        + " DESCRIPTION_4,    DESCRIPTION_5,   DESCRIPTION,     ClaimerMoney,   LAST_USER,       LAST_YMD ) " + " VALUES( '" + retDoc2M014[0].trim() + "', " + " '"
        + retDoc2M014[1].trim() + "', " + " '" + retDoc2M014[2].trim() + "', " + " '" + retDoc2M014[3].trim() + "', " + " '" + retDoc2M014[4].trim() + "', " + " "
        + retDoc2M014[5].trim() + ", " + " " + retDoc2M014[6].trim() + ", " + " '" + retDoc2M014[7].trim() + "', " + " '" + retDoc2M014[8].trim() + "', " + " '"
        + retDoc2M014[9].trim() + "', " + " '" + retDoc2M014[10].trim() + "', " + " '" + retDoc2M014[11].trim() + "', " + " '" + retDoc2M014[12].trim() + "', " + " "
        + retDoc2M014[13].trim() + ", " + " " + retDoc2M014[14].trim() + ", " + " " + retDoc2M014[15].trim() + ", " + " '" + retDoc2M014[17].trim() + "', " + " '"
        + retDoc2M014[18].trim() + "', " + " '" + retDoc2M014[19].trim() + "', " + " '" + retDoc2M014[20].trim() + "', " + " '" + retDoc2M014[21].trim() + "', " + " '"
        + retDoc2M014[22].trim() + "', " + " '" + retDoc2M014[23].trim() + "', " + "  " + retDoc2M014[16].trim() + " , " + " '" + retDoc2M014[24].trim() + "', " + " '"
        + retDoc2M014[25].trim() + "')";
    return stringSql;
  }

  public String getInsertDoc2M014Sql(String stringVoucherFlowNo, String stringVoucherSeqNo, String stringKind, String[] retDoc2M014) throws Throwable {
    String stringSql = "";
    String stringVoucherDate = convert.FormatedDate(convert.roc2ac(convert.replace(retDoc2M014[4].trim(), "/", "")), "/");
    // 0 BarCode 1 DocNo 2 RowType 3 RecordNo 4 VOUCHER_YMD
    // 5 VOUCHER_FLOW_NO 6 VOUCHER_SEQ_NO 7 COMPANY_CD 8 KIND 9 DB_CR_CD
    // 10 ACCT_NO 11 DEPT_CD 12 OBJECT_CD 13 AMT 14 EXCHANG_AMT
    // 15 MONTEARY 16 ClaimerMoney 17 STATUS_CD 18 DESCRIPTION_1 19 DESCRIPTION_2
    // 20 DESCRIPTION_3 21 DESCRIPTION_4 22 DESCRIPTION_5 23 DESCRIPTION 24
    // LAST_USER 25 LAST_YMD
    stringSql = "INSERT  Doc2M014 ( BarCode,          DocNo,            RowType,       RecordNo,        VOUCHER_YMD, "
        + " VOUCHER_FLOW_NO,  VOUCHER_SEQ_NO,   COMPANY_CD,    KIND,            DB_CR_CD, " + " ACCT_NO,          DEPT_CD,          OBJECT_CD,     AMT,             EXCHANG_AMT, "
        + " MONTEARY,         ClaimerMoney,     STATUS_CD,     DESCRIPTION_1,   DESCRIPTION_2, "
        + " DESCRIPTION_3,    DESCRIPTION_4,    DESCRIPTION_5, DESCRIPTION,     LAST_USER,  " + " LAST_YMD ) " + " VALUES( '" + retDoc2M014[0].trim() + "', " + " '"
        + retDoc2M014[1].trim() + "', " + " '" + retDoc2M014[2].trim() + "', " + " '" + retDoc2M014[3].trim() + "', " + " '" + stringVoucherDate + "', " + " " + stringVoucherFlowNo
        + ", " + " " + stringVoucherSeqNo + ", " + " '" + retDoc2M014[7].trim() + "', " + " '" + stringKind + "', " + " '" + retDoc2M014[9].trim() + "', " + " '"
        + retDoc2M014[10].trim() + "', " + " '" + retDoc2M014[11].trim() + "', " + " '" + retDoc2M014[12].trim() + "', " + " " + retDoc2M014[13].trim() + ", " + " "
        + retDoc2M014[14].trim() + ", " + " " + retDoc2M014[15].trim() + ", " + " " + retDoc2M014[16].trim() + ", " + " '" + "Z" + "', " + " '" + retDoc2M014[18].trim() + "', "
        + " '" + retDoc2M014[19].trim() + "', " + " '" + retDoc2M014[20].trim() + "', " + " '" + retDoc2M014[21].trim() + "', " + " '" + retDoc2M014[22].trim() + "', " + " '"
        + retDoc2M014[23].trim() + "', " + " '" + retDoc2M014[24].trim() + "', " + " '" + retDoc2M014[25].trim() + "')";
    return stringSql;
  }

  public void doDeleteDoc2M014(String stringBarCode) throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    doDeleteDoc2M014(stringBarCode, exeUtil);
  }

  public void doDeleteDoc2M014(String stringBarCode, FargloryUtil exeUtil) throws Throwable {
    Hashtable hashtableAnd = new Hashtable();
    Hashtable hashtableTmp = new Hashtable();
    String stringSqlAnd = "";
    String stringVouceherYMD = "";
    String stringVouceherFlowNo = "";
    String stringStatusCd = "";
    Vector vectorDoc2M0143 = new Vector();
    boolean booleanDB = true;
    //
    hashtableAnd.put("BarCode", stringBarCode);
    vectorDoc2M0143 = getQueryDataHashtableDoc("Doc2M0143", hashtableAnd, "", new Vector(), exeUtil);
    if (vectorDoc2M0143.size() > 0) {
      for (int intNo = 0; intNo < vectorDoc2M0143.size(); intNo++) {
        hashtableTmp = (Hashtable) vectorDoc2M0143.get(intNo);
        if (hashtableTmp == null)
          continue;
        stringStatusCd = "" + hashtableTmp.get("STATUS_CD");
        //
        if (!"Z".equals(stringStatusCd))
          continue;
        //
        stringVouceherYMD = "" + hashtableTmp.get("VOUCHER_YMD");
        stringVouceherFlowNo = "" + hashtableTmp.get("VOUCHER_FLOW_NO");
        //
        stringSqlAnd += " AND  NOT (VOUCHER_YMD  =  '" + stringVouceherYMD + "'   AND  VOUCHER_FLOW_NO  =  '" + stringVouceherFlowNo + "') ";
      }
    }
    //
    hashtableAnd.put("BarCode", stringBarCode);
    doDeleteDBDoc("Doc2M014", hashtableAnd, stringSqlAnd, booleanDB, exeUtil);
  }

  // 請款申請書-簽核總理之表格資料
  public String[][] getTableForDoc2M014(String stringBarCodeQ, String stringDescriptQ, String stringStatusQ, String stringFactoryNoQ, String stringDocNoQ, String stringCompanyCdQ,
      String stringVoucherYMDQ, String stringDateLimitQ) throws Throwable {
    Vector vectorTableData = new Vector();
    //
    vectorTableData = getTableForDoc2M014(stringBarCodeQ, stringDescriptQ, stringStatusQ, stringFactoryNoQ, stringDocNoQ, stringCompanyCdQ, stringVoucherYMDQ, stringDateLimitQ,
        vectorTableData, "", true);
    return (String[][]) vectorTableData.toArray(new String[0][0]);
  }

  public Vector getTableForDoc2M014(String stringBarCodeQ, String stringDescriptQ, String stringStatusQ, String stringFactoryNoQ, String stringDocNoQ, String stringCompanyCdQ,
      String stringVoucherYMDQ, String stringDateLimitQ, Vector vectorTableData, String stringUserIDQ, boolean booleanSource) throws Throwable {
    String stringSql = "";
    String stringToday = datetime.getToday("YYYY/mm/dd");
    String[][] retDoc2M014 = null;
    // 0 BarCode 1 VOUCHER_YMD 2 OBJECT_CD 3 DESCRIPTION
    // 4 STATUS_CD 5 DocNo1 6 DocNo2 7 DocNo3
    // 8 VOUCHER_FLOW_NO 9 ComNo
    stringSql = "SELECT  DISTINCT  M14.BarCode,         M14.VOUCHER_YMD,   M14.OBJECT_CD,  M14.DESCRIPTION, "
        + " M14.STATUS_CD,       M10.DocNo1,        M10.DocNo2,     M10.DocNo3, " + " M14.VOUCHER_FLOW_NO, M10.ComNo " + " FROM  " + (booleanSource ? "Doc2M010" : "Doc5M020")
        + "  M10,  Doc2M014  M14 " + " WHERE  M10.BarCode  =  M14.BarCode " + " AND RTRIM(M14.RowType)  IN ('B', 'F',  'J',  'S',  'L','P','Q','R') ";
    // 條碼編號
    if (!"".equals(stringBarCodeQ)) {
      String stringSqlL = "";
      String stringBarCodeL = "";
      String[] arrayBarCode = convert.StringToken(stringBarCodeQ, ",");
      for (int intNo = 0; intNo < arrayBarCode.length; intNo++) {
        stringBarCodeL = arrayBarCode[intNo].trim();
        //
        if ("".equals(stringBarCodeL))
          continue;
        //
        if (!"".equals(stringSqlL))
          stringSqlL += " OR ";
        stringSqlL += " M14.BarCode  =  '" + stringBarCodeL + "' ";
      }
      if (!"".equals(stringSqlL))
        stringSql += " AND (" + stringSqlL + ") ";
    }
    // 公文內容
    if (!"".equals(stringDescriptQ)) {
      stringSql += " AND  M10.Descript  LIKE  '%" + stringDescriptQ + "%' ";
    }
    // 公文編碼
    if (!"".equals(stringDocNoQ)) {
      stringSql += " AND  M10.DocNo  LIKE  '%" + stringDocNoQ + "%' ";
    }
    // 狀態
    if (!"A".equals(stringStatusQ)) {
      stringSql += " AND  M14.STATUS_CD  =  '" + stringStatusQ + "' ";
    }
    // 統一編號
    if (!"".equals(stringFactoryNoQ)) {
      if (booleanSource) {
        stringSql += " AND  ((M14.BarCode  IN (SELECT  BarCode " + " FROM  Doc2M011 " + " WHERE   FactoryNo  LIKE  '%" + stringFactoryNoQ + "%')) "
            + " OR  (M14.BarCode  IN (SELECT  BarCode " + " FROM  Doc2M013 " + " WHERE   FactoryNo  LIKE  '%" + stringFactoryNoQ + "%'))) ";
      } else {
        stringSql += " AND  ((M14.BarCode  IN (SELECT  BarCode " + " FROM  Doc5M021 " + " WHERE   FactoryNo  LIKE  '%" + stringFactoryNoQ + "%')) "
            + " OR  (M14.BarCode  IN (SELECT  BarCode " + " FROM  Doc5M0211 " + " WHERE   FactoryNo  LIKE  '%" + stringFactoryNoQ + "%')) "
            + " OR  (M14.BarCode  IN (SELECT  BarCode " + " FROM  Doc5M023 " + " WHERE   FactoryNo  LIKE  '%" + stringFactoryNoQ + "%'))) ";
      }
    }
    // 公司
    if (!"".equals(stringCompanyCdQ)) {
      stringSql += " AND  M14.COMPANY_CD  =  '" + stringCompanyCdQ + "' ";
    }
    // 人員權限
    if (!"".equals(stringUserIDQ) && !"B3018".equals(stringUserIDQ) && stringUserIDQ.length() != 6) {
      stringSql += " AND M14.COMPANY_CD IN (SELECT  ComNo " + " FROM  Doc2M046 " + " WHERE  EmployeeNo  =  '" + stringUserIDQ + "' "
          + " AND  (UseDateStart = '9999/99/99'  OR UseDateStart <= '" + stringToday + "') " + " AND  UseDateEnd   >= '" + stringToday + "' ) ";
    }
    // 傳票日
    if (!"".equals(stringVoucherYMDQ)) {
      stringSql += " AND  VOUCHER_YMD  =  '" + stringVoucherYMDQ + "' ";
    }
    // DateBetween
    if (!"A".equals(stringDateLimitQ)) {
      String stringThisMonth = getToday("YYYY/mm/dd").substring(0, 8) + "01";
      String stringNextMonth = convert.FormatedDate(datetime.dateAdd(convert.replace(stringThisMonth, "/", ""), "m", 1), "/");
      String stringLastMonth = convert.FormatedDate(datetime.dateAdd(convert.replace(stringThisMonth, "/", ""), "m", -1), "/");
      if ("ThisMonth".equals(stringDateLimitQ)) {
        stringSql += " AND  VOUCHER_YMD  >=  '" + stringThisMonth + "' " + " AND  VOUCHER_YMD  <  '" + stringNextMonth + "' ";
      } else if ("LastMonth".equals(stringDateLimitQ)) {
        stringSql += " AND  VOUCHER_YMD  >=  '" + stringLastMonth + "' " + " AND  VOUCHER_YMD  <  '" + stringThisMonth + "' ";
      } else {
        stringSql += " AND  VOUCHER_YMD  >=  '" + stringNextMonth + "' ";
      }
    }
    stringSql += " ORDER BY  M14.STATUS_CD,  M10.DocNo1,  M10.DocNo2,  M10.DocNo3,  M14.BarCode,  M14.VOUCHER_YMD,  M14.OBJECT_CD ";
    retDoc2M014 = dbDoc.queryFromPool(stringSql);
    // 再處理
    if (retDoc2M014.length == 0)
      return vectorTableData;
    //
    String stringBarCode = "";
    String stringVoucherYMD = "";
    String stringVoucherYMDF = "";
    String stringObjectCd = "";
    String stringDescription = "";
    String stringStatus = "";
    String stringDocNo1 = "";
    String stringDocNo2 = "";
    String stringDocNo3 = "";
    String stringAmt = "";
    String stringComNo = "";
    String stringVoucherFlowNo = "";
    String[] retTableData = null;
    String[][] retTable = null;
    String[][] retDoc2M014L = null;
    String[][] retDoc2M012 = null;
    double doubleTaxRate = doParseDouble(getDoc2M040()[4].trim());
    Vector vectorBarCode = new Vector();
    Vector vectorCostIDG0010 = getDoc2M0401V("", "D", " AND  FunctionName LIKE '%立沖傳票對應%' ");
    boolean booleanVoucherExist = true;
    // 0 BarCode 1 VOUCHER_YMD 2 OBJECT_CD 3 DESCRIPTION
    // 4 STATUS_CD 5 DocNo1 6 DocNo2 7 DocNo3
    // 8 VOUCHER_FLOW_NO 9 ComNo
    for (int intNo = 0; intNo < retDoc2M014.length; intNo++) {
      retTableData = new String[9];
      stringBarCode = retDoc2M014[intNo][0].trim();
      stringVoucherYMD = retDoc2M014[intNo][1].trim();
      stringObjectCd = retDoc2M014[intNo][2].trim();
      stringDescription = retDoc2M014[intNo][3].trim();
      stringStatus = retDoc2M014[intNo][4].trim();
      stringDocNo1 = retDoc2M014[intNo][5].trim();
      stringDocNo2 = retDoc2M014[intNo][6].trim();
      stringDocNo3 = retDoc2M014[intNo][7].trim();
      stringVoucherFlowNo = retDoc2M014[intNo][8].trim();
      stringComNo = retDoc2M014[intNo][9].trim();
      stringAmt = "" + getRealTotalMoneySumUnion(booleanSource ? "Doc2M012" : "Doc5M022", stringBarCode);
      //
      if (vectorBarCode.indexOf(stringBarCode) != -1)
        continue;
      vectorBarCode.add(stringBarCode);
      //
      // stringAmt = ""+(doParseDouble(stringAmt) * (1 + doubleTaxRate/100)) ;
      stringAmt = convert.FourToFive(stringAmt, 0);
      //
      if (stringVoucherYMD.length() == 10) {
        stringVoucherYMDF = convert.replace(stringVoucherYMD, "/", "");
        stringVoucherYMDF = convert.ac2roc(stringVoucherYMDF);
        retTable = getFED1012(stringVoucherYMDF, stringVoucherFlowNo, stringComNo, "0");
        if (retTable.length == 0) {
          booleanVoucherExist = false;
        } else {
          booleanVoucherExist = true;
        }
      } else {
        booleanVoucherExist = false;
      }
      retDoc2M012 = getDoc2M012Union(booleanSource ? "Doc2M012" : "Doc5M022", stringBarCode);
      for (int i = 0; i < retDoc2M012.length; i++) {
        if (vectorCostIDG0010.indexOf("," + retDoc2M012[i][4].trim() + ",") != -1) {
          // if(",F282201,F282301,F282302,F283101,F283102,F283103,F283201,F283202,F283203,F283204,F283205,F283206,F283207,F283299,F283301,F283401,F283501,F283502,".indexOf(","+retDoc2M012[i][4].trim()+",")!=-1)
          // {
          stringObjectCd = "G0010";
          break;
        }
        if (",101,420,C010304,".indexOf("," + retDoc2M012[i][4].trim() + retDoc2M012[i][5].trim() + ",") != -1) {
          stringObjectCd = "Z0001";
          break;
        }
      }
      // 流水號
      retTableData[0] = "" + (intNo + 1);
      // 公文編號
      retTableData[1] = stringDocNo1 + "-" + stringDocNo2 + "-" + stringDocNo3;
      // 條碼編號
      retTableData[2] = stringBarCode;
      // 對象
      retTableData[3] = stringObjectCd;
      // 摘要(公文內容 )
      retTableData[4] = stringDescription;
      // 實付金額
      retTableData[5] = stringAmt;
      // 狀態
      retTableData[6] = !booleanVoucherExist ? "U" : stringStatus;
      // 傳票號碼
      if (!"".equals(stringVoucherYMD) && booleanVoucherExist) {
        retTableData[7] = convert.ac2roc(convert.replace(stringVoucherYMD, "/", "")) + "-" + convert.add0(stringVoucherFlowNo, "5");
      } else {
        retTableData[7] = "";
      }
      // 會計科目
      retDoc2M014L = getDoc2M014(stringBarCode, "C");
      if (retDoc2M014L.length == 0) {
        retDoc2M014L = getDoc2M014(stringBarCode, "T");
      }
      if (retDoc2M014L.length > 0)
        retTableData[8] = retDoc2M014L[0][0].trim();
      //
      vectorTableData.add(retTableData);
    }
    return vectorTableData;
  }

  // 請款申請書-簽核總理之表格資料(借款)
  public String[][] getTable2ForDoc2M014(String stringBarCodeQ, String stringDescriptQ, String stringStatusQ, String stringFactoryNoQ, String stringDocNoQ, String stringCompanyCdQ,
      String stringVoucherYMDQ, String stringDateLimitQ) throws Throwable {
    return getTable2ForDoc2M014(stringBarCodeQ, stringDescriptQ, stringStatusQ, stringFactoryNoQ, stringDocNoQ, stringCompanyCdQ, stringVoucherYMDQ, stringDateLimitQ, "");
  }

  public String[][] getTable2ForDoc2M014(String stringBarCodeQ, String stringDescriptQ, String stringStatusQ, String stringFactoryNoQ, String stringDocNoQ, String stringCompanyCdQ,
      String stringVoucherYMDQ, String stringDateLimitQ, String stringUserIDQ) throws Throwable {
    String stringSql = "";
    String stringKindNo = "26";
    String stringToday = datetime.getToday("YYYY/mm/dd");
    String[][] retDoc2M014 = null;
    // 0 BarCode 1 VOUCHER_YMD 2 OBJECT_CD 3 DESCRIPTION
    // 4 STATUS_CD 5 DocNo1 6 DocNo2 7 DocNo3
    // 8 VOUCHER_FLOW_NO
    stringSql = "SELECT  DISTINCT  M14.BarCode,         M14.VOUCHER_YMD,   M14.OBJECT_CD,  M14.DESCRIPTION, "
        + " M14.STATUS_CD,       M10.DocNo1,        M10.DocNo2,     M10.DocNo3, " + " M14.VOUCHER_FLOW_NO " + " FROM  Doc6M010  M10,  Doc2M014  M14 "
        + " WHERE  M10.BarCode  =  M14.BarCode " + " AND  M10.KindNo  =  '" + stringKindNo + "' " + " AND (RTRIM(M14.RowType)  =  'O'  OR RTRIM(M14.RowType)  =  'R') ";
    // 條碼編號
    if (!"".equals(stringBarCodeQ)) {
      String stringSqlL = "";
      String stringBarCodeL = "";
      String[] arrayBarCode = convert.StringToken(stringBarCodeQ, ",");
      for (int intNo = 0; intNo < arrayBarCode.length; intNo++) {
        stringBarCodeL = arrayBarCode[intNo].trim();
        //
        if ("".equals(stringBarCodeL))
          continue;
        //
        if (!"".equals(stringSqlL))
          stringSqlL += " OR ";
        stringSqlL += " M14.BarCode  =  '" + stringBarCodeL + "' ";
      }
      if (!"".equals(stringSqlL))
        stringSql += " AND (" + stringSqlL + ") ";
    }
    // 公文內容
    if (!"".equals(stringDescriptQ)) {
      stringSql += " AND  M14.BarCode  IN (SELECT  BarCode " + " FROM  Doc6M010 " + "  WHERE  Descript  LIKE  '%" + stringDescriptQ + "%') ";
    }
    // 公文編碼
    if (!"".equals(stringDocNoQ)) {
      stringSql += " AND  M14.BarCode  IN (SELECT  BarCode " + " FROM  Doc6M010 " + "  WHERE  DocNo  LIKE  '%" + stringDocNoQ + "%') ";
    }
    // 狀態
    if (!"A".equals(stringStatusQ)) {
      stringSql += " AND  M14.STATUS_CD  =  '" + stringStatusQ + "' ";
    }
    // 統一編號
    if (!"".equals(stringFactoryNoQ)) {
      stringSql += " AND  ((M14.BarCode  IN (SELECT  BarCode " + " FROM  Doc6M011 " + " WHERE   FactoryNo  LIKE  '%" + stringFactoryNoQ + "%')) "
          + " OR  (M14.BarCode  IN (SELECT  BarCode " + " FROM  Doc6M013 " + " WHERE   FactoryNo  LIKE  '%" + stringFactoryNoQ + "%'))) ";
    }
    // 公司
    if (!"".equals(stringCompanyCdQ)) {
      stringSql += " AND  M14.COMPANY_CD  =  '" + stringCompanyCdQ + "' ";
    }

    // 人員權限
    if (!"".equals(stringUserIDQ) && !"B3018".equals(stringUserIDQ) && stringUserIDQ.length() != 6) {
      stringSql += " AND M14.COMPANY_CD IN (SELECT  ComNo " + " FROM  Doc2M046 " + " WHERE  EmployeeNo  =  '" + stringUserIDQ + "' "
          + " AND  (UseDateStart = '9999/99/99'  OR UseDateStart <= '" + stringToday + "') " + " AND  UseDateEnd   >= '" + stringToday + "' ) ";
    }
    // 傳票日
    if (!"".equals(stringVoucherYMDQ)) {
      stringSql += " AND  M14.VOUCHER_YMD  =  '" + stringVoucherYMDQ + "' ";
    }
    // DateBetween
    if (!"A".equals(stringDateLimitQ)) {
      String stringThisMonth = getToday("YYYY/mm/dd").substring(0, 8) + "01";
      String stringNextMonth = convert.FormatedDate(datetime.dateAdd(convert.replace(stringThisMonth, "/", ""), "m", 1), "/");
      String stringLastMonth = convert.FormatedDate(datetime.dateAdd(convert.replace(stringThisMonth, "/", ""), "m", -1), "/");
      if ("ThisMonth".equals(stringDateLimitQ)) {
        stringSql += " AND  VOUCHER_YMD  >=  '" + stringThisMonth + "' " + " AND  VOUCHER_YMD  <  '" + stringNextMonth + "' ";
      } else if ("LastMonth".equals(stringDateLimitQ)) {
        stringSql += " AND  VOUCHER_YMD  >=  '" + stringLastMonth + "' " + " AND  VOUCHER_YMD  <  '" + stringThisMonth + "' ";
      } else {
        stringSql += " AND  VOUCHER_YMD  >=  '" + stringNextMonth + "' ";
      }
    }
    stringSql += " ORDER BY  M14.STATUS_CD,  M10.DocNo1,  M10.DocNo2,  M10.DocNo3,  M14.BarCode,  M14.VOUCHER_YMD,  M14.OBJECT_CD ";
    retDoc2M014 = dbDoc.queryFromPool(stringSql);
    // 再處理
    if (retDoc2M014.length == 0)
      return new String[0][0];
    //
    String stringBarCode = "";
    String stringVoucherYMD = "";
    String stringVoucherYMDF = "";
    String stringObjectCd = "";
    String stringDescription = "";
    String stringStatus = "";
    String stringDocNo1 = "";
    String stringDocNo2 = "";
    String stringDocNo3 = "";
    String stringAmt = "";
    String stringVoucherFlowNo = "";
    String[] retTableData = null;
    String[][] retTable = null;
    double doubleTaxRate = doParseDouble(getDoc2M040()[4].trim());
    double doubleAmt = 0;
    Vector vectorBarCode = new Vector();
    Vector vectorTableData = new Vector();
    boolean booleanVoucherExist = false;
    // 0 BarCode 1 VOUCHER_YMD 2 OBJECT_CD 3 DESCRIPTION
    // 4 STATUS_CD 5 DocNo1 6 DocNo2 7 DocNo3
    // 8 AMT 9 VOUCHER_FLOW_NO
    for (int intNo = 0; intNo < retDoc2M014.length; intNo++) {
      retTableData = new String[9];
      stringBarCode = retDoc2M014[intNo][0].trim();
      stringVoucherYMD = retDoc2M014[intNo][1].trim();
      stringObjectCd = retDoc2M014[intNo][2].trim();
      stringDescription = retDoc2M014[intNo][3].trim();
      stringStatus = retDoc2M014[intNo][4].trim();
      stringDocNo1 = retDoc2M014[intNo][5].trim();
      stringDocNo2 = retDoc2M014[intNo][6].trim();
      stringDocNo3 = retDoc2M014[intNo][7].trim();
      stringVoucherFlowNo = retDoc2M014[intNo][8].trim();
      //
      if (vectorBarCode.indexOf(stringBarCode) != -1)
        continue;
      vectorBarCode.add(stringBarCode);
      //
      doubleAmt = getInvoiceTotalMoneySum(stringBarCode);
      if (doubleAmt == 0) {
        doubleAmt = getReceiptTotalMoneySum(stringBarCode);
      }
      //
      stringVoucherYMDF = convert.replace(stringVoucherYMD, "/", "");
      stringVoucherYMDF = convert.ac2roc(stringVoucherYMDF);
      retTable = getFED1012(stringVoucherYMDF, stringVoucherFlowNo, "Z6", "0");
      if (retTable.length == 0) {
        booleanVoucherExist = false;
      } else {
        booleanVoucherExist = true;
      }
      // 流水號
      retTableData[0] = "" + (intNo + 1);
      // 公文編號
      retTableData[1] = stringDocNo1 + "-" + stringDocNo2 + "-" + stringDocNo3;
      // 條碼編號
      retTableData[2] = stringBarCode;
      // 對象
      retTableData[3] = stringObjectCd;
      // 摘要(公文內容 )
      retTableData[4] = stringDescription;
      // 實付金額
      retTableData[5] = convert.FourToFive("" + doubleAmt, 0);
      // 狀態
      retTableData[6] = !booleanVoucherExist ? "U" : stringStatus;
      // 傳票號碼
      if (!"".equals(stringVoucherYMD) && booleanVoucherExist) {
        retTableData[7] = convert.ac2roc(convert.replace(stringVoucherYMD, "/", "")) + "-" + convert.add0(stringVoucherFlowNo, "5");
      } else {
        retTableData[7] = "";
      }
      // 會計科目
      retTableData[8] = ""; // getDoc2M014(stringBarCode, "C")[0][0].trim( ) ;
      //
      vectorTableData.add(retTableData);
    }
    return (String[][]) vectorTableData.toArray(new String[0][0]);
  }

  // 請款申請書-簽核總理之表格資料(借款沖銷)
  public String[][] getTable3ForDoc2M014(String stringBarCodeQ, String stringDescriptQ, String stringStatusQ, String stringFactoryNoQ, String stringDocNoQ, String stringCompanyCdQ,
      String stringVoucherYMDQ, String stringDateLimitQ) throws Throwable {
    return getTable3ForDoc2M014(stringBarCodeQ, stringDescriptQ, stringStatusQ, stringFactoryNoQ, stringDocNoQ, stringCompanyCdQ, stringVoucherYMDQ, stringDateLimitQ, "");
  }

  public String[][] getTable3ForDoc2M014(String stringBarCodeQ, String stringDescriptQ, String stringStatusQ, String stringFactoryNoQ, String stringDocNoQ, String stringCompanyCdQ,
      String stringVoucherYMDQ, String stringDateLimitQ, String stringUserIDQ) throws Throwable {
    String stringSql = "";
    String stringToday = datetime.getToday("YYYY/mm/dd");
    String stringKindNo = "24";
    String[][] retDoc2M014 = null;
    // 0 BarCode 1 VOUCHER_YMD 2 OBJECT_CD 3 DESCRIPTION
    // 4 STATUS_CD 5 DocNo1 6 DocNo2 7 DocNo3
    // 8 VOUCHER_FLOW_NO
    stringSql = "SELECT  DISTINCT  M14.BarCode,         M14.VOUCHER_YMD,   M14.OBJECT_CD,  M14.DESCRIPTION, "
        + " M14.STATUS_CD,       M10.DocNo1,        M10.DocNo2,     M10.DocNo3, " + " M14.VOUCHER_FLOW_NO " + " FROM  Doc6M010  M10,  Doc2M014  M14 "
        + " WHERE  M10.BarCode  =  M14.BarCode " + " AND  M10.KindNo  =  '" + stringKindNo + "' "
        + " AND (RTRIM(M14.RowType)  =  'M'  OR RTRIM(M14.RowType)  =  'N'  OR RTRIM(M14.RowType)  =  'S'  OR RTRIM(M14.RowType)  =  'T') ";
    // 條碼編號
    if (!"".equals(stringBarCodeQ)) {
      String stringSqlL = "";
      String stringBarCodeL = "";
      String[] arrayBarCode = convert.StringToken(stringBarCodeQ, ",");
      for (int intNo = 0; intNo < arrayBarCode.length; intNo++) {
        stringBarCodeL = arrayBarCode[intNo].trim();
        //
        if ("".equals(stringBarCodeL))
          continue;
        //
        if (!"".equals(stringSqlL))
          stringSqlL += " OR ";
        stringSqlL += " M14.BarCode  =  '" + stringBarCodeL + "' ";
      }
      if (!"".equals(stringSqlL))
        stringSql += " AND (" + stringSqlL + ") ";
    }
    // 公文內容
    if (!"".equals(stringDescriptQ)) {
      stringSql += " AND  M14.BarCode  IN (SELECT  BarCode " + " FROM  Doc6M010 " + "  WHERE  Descript  LIKE  '%" + stringDescriptQ + "%') ";
    }
    // 公文編碼
    if (!"".equals(stringDocNoQ)) {
      stringSql += " AND  M14.BarCode  IN (SELECT  BarCode " + " FROM  Doc6M010 " + "  WHERE  DocNo  LIKE  '%" + stringDocNoQ + "%') ";
    }
    // 狀態
    if (!"A".equals(stringStatusQ)) {
      stringSql += " AND  M14.STATUS_CD  =  '" + stringStatusQ + "' ";
    }
    // 統一編號
    if (!"".equals(stringFactoryNoQ)) {
      stringSql += " AND  ((M14.BarCode  IN (SELECT  M10.BarCode " + " FROM  Doc6M011 M11,  Doc6M010 M10,  Doc6M0101  M101,  Doc6M010 M102 "
          + " WHERE  M102.DocNo  =  M101.BorrowNo " + " AND  M10.BarCode  =  M11.BarCode " + " AND  M11.BarCode  =  M102.BarCode " + " AND  M11.FactoryNo  LIKE  '%"
          + stringFactoryNoQ + "%')) " + " OR  (M14.BarCode  IN (SELECT  M10.BarCode " + " FROM  Doc6M011 M11,  Doc6M010 M10 " + " WHERE  M10.BarCode  =  M11.BarCode "
          + " AND  M11.FactoryNo  LIKE  '%" + stringFactoryNoQ + "%')) " + " OR  (M14.BarCode  IN (SELECT  M10.BarCode "
          + " FROM  Doc6M013 M13,  Doc6M010 M10,  Doc6M0101  M101,  Doc6M010 M102 " + " WHERE  M102.DocNo  =  M101.BorrowNo " + " AND  M10.BarCode  =  M13.BarCode "
          + " AND  M13.BarCode  =  M101.BarCode " + " AND  M13.FactoryNo  LIKE  '%" + stringFactoryNoQ + "%')) " + " OR  (M14.BarCode  IN (SELECT  M10.BarCode "
          + " FROM  Doc6M013 M13,  Doc6M010 M10 " + " WHERE  M10.BarCode  =  M13.BarCode " + " AND  M13.FactoryNo  LIKE  '%" + stringFactoryNoQ + "%'))) ";
    }
    // 公司
    if (!"".equals(stringCompanyCdQ)) {
      stringSql += " AND  M14.COMPANY_CD  =  '" + stringCompanyCdQ + "' ";
    }
    // 人員權限
    if (!"".equals(stringUserIDQ) && !"B3018".equals(stringUserIDQ) && stringUserIDQ.length() != 6) {
      stringSql += " AND M14.COMPANY_CD IN (SELECT  ComNo " + " FROM  Doc2M046 " + " WHERE  EmployeeNo  =  '" + stringUserIDQ + "' "
          + " AND  (UseDateStart = '9999/99/99'  OR UseDateStart <= '" + stringToday + "') " + " AND  UseDateEnd   >= '" + stringToday + "' ) ";
    }
    // 傳票日
    if (!"".equals(stringVoucherYMDQ)) {
      stringSql += " AND  M14.VOUCHER_YMD  =  '" + stringVoucherYMDQ + "' ";
    }
    // DateBetween
    if (!"A".equals(stringDateLimitQ)) {
      String stringThisMonth = getToday("YYYY/mm/dd").substring(0, 8) + "01";
      String stringNextMonth = convert.FormatedDate(datetime.dateAdd(convert.replace(stringThisMonth, "/", ""), "m", 1), "/");
      String stringLastMonth = convert.FormatedDate(datetime.dateAdd(convert.replace(stringThisMonth, "/", ""), "m", -1), "/");
      if ("ThisMonth".equals(stringDateLimitQ)) {
        stringSql += " AND  VOUCHER_YMD  >=  '" + stringThisMonth + "' " + " AND  VOUCHER_YMD  <  '" + stringNextMonth + "' ";
      } else if ("LastMonth".equals(stringDateLimitQ)) {
        stringSql += " AND  VOUCHER_YMD  >=  '" + stringLastMonth + "' " + " AND  VOUCHER_YMD  <  '" + stringThisMonth + "' ";
      } else {
        stringSql += " AND  VOUCHER_YMD  >=  '" + stringNextMonth + "' ";
      }
    }
    stringSql += " ORDER BY  M14.STATUS_CD,  M10.DocNo1,  M10.DocNo2,  M10.DocNo3,  M14.BarCode,  M14.VOUCHER_YMD,  M14.OBJECT_CD ";
    retDoc2M014 = dbDoc.queryFromPool(stringSql);
    // 再處理
    if (retDoc2M014.length == 0)
      return new String[0][0];
    //
    String stringBarCode = "";
    String stringVoucherYMD = "";
    String stringVoucherYMDF = "";
    String stringObjectCd = "";
    String stringDescription = "";
    String stringStatus = "";
    String stringDocNo1 = "";
    String stringDocNo2 = "";
    String stringDocNo3 = "";
    String stringAmt = "";
    String stringVoucherFlowNo = "";
    String stringBarCode11 = "";
    String[] retTableData = null;
    String[][] retTable = null;
    double doubleTaxRate = doParseDouble(getDoc2M040()[4].trim());
    double doubleAmt = 0;
    Vector vectorBarCode = new Vector();
    Vector vectorTableData = new Vector();
    boolean booleanVoucherExist = false;
    // 0 BarCode 1 VOUCHER_YMD 2 OBJECT_CD 3 DESCRIPTION
    // 4 STATUS_CD 5 DocNo1 6 DocNo2 7 DocNo3
    // 8 AMT 9 VOUCHER_FLOW_NO
    for (int intNo = 0; intNo < retDoc2M014.length; intNo++) {
      retTableData = new String[9];
      stringBarCode = retDoc2M014[intNo][0].trim();
      stringVoucherYMD = retDoc2M014[intNo][1].trim();
      stringObjectCd = retDoc2M014[intNo][2].trim();
      stringDescription = retDoc2M014[intNo][3].trim();
      stringStatus = retDoc2M014[intNo][4].trim();
      stringDocNo1 = retDoc2M014[intNo][5].trim();
      stringDocNo2 = retDoc2M014[intNo][6].trim();
      stringDocNo3 = retDoc2M014[intNo][7].trim();
      stringVoucherFlowNo = retDoc2M014[intNo][8].trim();
      //
      if (vectorBarCode.indexOf(stringBarCode) != -1)
        continue;
      vectorBarCode.add(stringBarCode);
      //
      doubleAmt = getRealTotalMoneySum(stringBarCode);
      //
      stringVoucherYMDF = convert.replace(stringVoucherYMD, "/", "");
      stringVoucherYMDF = convert.ac2roc(stringVoucherYMDF);
      retTable = getFED1012(stringVoucherYMDF, stringVoucherFlowNo, "Z6", "0");
      if (retTable.length == 0) {
        booleanVoucherExist = false;
      } else {
        booleanVoucherExist = true;
      }
      // 流水號
      retTableData[0] = "" + (intNo + 1);
      // 公文編號
      retTableData[1] = stringDocNo1 + "-" + stringDocNo2 + "-" + stringDocNo3;
      // 條碼編號
      retTableData[2] = stringBarCode;
      // 對象
      retTableData[3] = stringObjectCd;
      // 摘要(公文內容 )
      retTableData[4] = stringDescription;
      // 實付金額
      retTableData[5] = convert.FourToFive("" + doubleAmt, 0);
      // 狀態
      retTableData[6] = !booleanVoucherExist ? "U" : stringStatus;
      // 傳票號碼
      if (!"".equals(stringVoucherYMD) && booleanVoucherExist) {
        retTableData[7] = convert.ac2roc(convert.replace(stringVoucherYMD, "/", "")) + "-" + convert.add0(stringVoucherFlowNo, "5");
      } else {
        retTableData[7] = "";
      }
      // 會計科目
      retTableData[8] = ""; // getDoc2M014(stringBarCode, "C")[0][0].trim( ) ;
      //
      vectorTableData.add(retTableData);
    }
    return (String[][]) vectorTableData.toArray(new String[0][0]);
  }

  // 表格 Doc2M015
  public String getRecordNoForDoc2M015(String stringBarCode, String stringKey) throws Throwable {
    return getRecordNoForDoc2M015Union("Doc2M015", stringBarCode, stringKey);
  }

  public String getRecordNoForDoc2M015Union(String stringTable, String stringBarCode, String stringKey) throws Throwable {
    String stringSql = "";
    String stringRecordNo = "";
    String[][] retDoc2M015 = null;
    //
    stringSql = "SELECT  RecordNo " + " FROM  " + stringTable + " " + " WHERE  BarCode  =  '" + stringBarCode + "' "
        + " AND  RTRIM(InOut)+'-'+RTRIM(DepartNo)+'-'+RTRIM(ProjectID)+'-'+RTRIM(ProjectID1) = '" + stringKey + "' ";
    retDoc2M015 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M015.length == 0)
      return stringRecordNo;
    stringRecordNo = retDoc2M015[0][0].trim();
    return stringRecordNo;
  }

  public String[][] getDoc2M015(String stringBarCode) throws Throwable {
    return getDoc2M015Union("Doc2M015", stringBarCode);
  }

  public String[][] getDoc2M015Union(String stringTable, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M015 = null;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 DiscountMoney 7 RecordNo 8 DiscountNoTaxMoney 9 InvoiceNo
    stringSql = "SELECT  InOut,    DepartNo,       ProjectID,  ProjectID1,          CostID, " + "  CostID1,  DiscountMoney,  RecordNo,   DiscountNoTaxMoney,  InvoiceNo "
        + " FROM  " + stringTable + " " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " ORDER BY  RecordNo ";
    retDoc2M015 = dbDoc.queryFromPool(stringSql);
    return retDoc2M015;
  }

  public String[][] getDoc2M015(String stringBarCode, String stringRecordNo) throws Throwable {
    return getDoc2M015Union("Doc2M015", stringBarCode, stringRecordNo);
  }

  public String[][] getDoc2M015Union(String stringTalbe, String stringBarCode, String stringRecordNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M015 = null;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID 5 CostID1 6
    // DiscountMoney
    stringSql = "SELECT  InOut,  DepartNo,  ProjectID,  ProjectID1,  CostID,  CostID1,  DiscountMoney " + " FROM  " + stringTalbe + " " + " WHERE  BarCode  =  '" + stringBarCode
        + "' " + " AND  RecordNo  =  " + stringRecordNo + " ";
    retDoc2M015 = dbDoc.queryFromPool(stringSql);
    return retDoc2M015;
  }

  public String[][] getDoc2M015(String stringBarCode, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1, String stringCostID,
      String stringCostID1) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M015 = null;
    // 0 DiscountMoney 1 DiscountNoTaxMoney
    stringSql = "SELECT  DiscountMoney,  DiscountNoTaxMoney " + " FROM  Doc2M015 " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  InOut  =  '" + stringInOut + "' "
        + " AND  DepartNo  =  '" + stringDepartNo + "' " + " AND  ProjectID  =  '" + stringProjectID + "' " + " AND  ProjectID1  =  '" + stringProjectID1 + "' "
        + " AND  CostID  =  '" + stringCostID + "' " + " AND  CostID1  =  '" + stringCostID1 + "' ";
    retDoc2M015 = dbDoc.queryFromPool(stringSql);
    return retDoc2M015;
  }

  public void doUpdateDiscountMoneyForDoc2M015(String stringDiscountMoney, String stringBarCode, String stringRecordNo) throws Throwable {
    doUpdateDiscountMoneyForDoc2M015Union("Doc2M015", stringDiscountMoney, stringBarCode, stringRecordNo);
  }

  public void doUpdateDiscountMoneyForDoc2M015Union(String stringTable, String stringDiscountMoney, String stringBarCode, String stringRecordNo) throws Throwable {
    String stringSql = "";
    //
    stringSql = "UPDATE  " + stringTable + " " + "  SET  DiscountMoney  =  " + stringDiscountMoney + " " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  RecordNo  =  "
        + stringRecordNo;
    // System.out.println("doUpdateDiscountMoneyForDoc2M015-----------------"+stringSql)
    // ;
    dbDoc.execFromPool(stringSql);
  }

  public double getDiscountTotalMoneySumForDoc2M015(String stringBarCode) throws Throwable {
    //
    String stringSql = "";
    String[][] retDoc2M015 = null;
    double doubleDiscountTotalMoneySum = 0;
    //
    stringSql = "SELECT  SUM(DiscountMoney) " + " FROM  Doc2M015 " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc2M015 = dbDoc.queryFromPool(stringSql);
    doubleDiscountTotalMoneySum = doParseDouble(retDoc2M015[0][0].trim());
    return doubleDiscountTotalMoneySum;
  }

  // 表格 Doc2M016
  public double getDiscountTotalMoneySum(String stringInvoiceNo) throws Throwable {
    //
    String stringSql = "";
    String[][] retDoc2M016 = null;
    double doubleDiscountTotalMoneySum = 0;
    //
    stringSql = "SELECT  SUM(DiscountTotalMoney) " + " FROM  Doc2M016 " + " WHERE  InvoiceNo  =  '" + stringInvoiceNo + "' ";
    retDoc2M016 = dbDoc.queryFromPool(stringSql);
    doubleDiscountTotalMoneySum = doParseDouble(retDoc2M016[0][0].trim());

    return doubleDiscountTotalMoneySum;
  }

  // 取得折讓單號碼
  public String getDiscountNo(String stringCompanyCd, String stringDepartNo, String stringDiscountDate) throws Throwable {
    //
    String stringSql = "";
    String stringDiscountNo = "";
    String stringmaxNo = "";
    String stringYM = (Integer.parseInt(stringDiscountDate.substring(0, 4)) - 1911) + stringDiscountDate.substring(5, 7);
    String[][] retDoc2M016 = null;
    //
    stringSql = "SELECT  MAX(DiscountNo) " + " FROM  Doc2M016 " + " WHERE  ComNo  =  '" + stringCompanyCd + "' " + " AND  DepartNo  =  '" + stringDepartNo + "' "
        + " AND  SUBSTRING(DiscountDate, 1, 7)  =  SUBSTRING('" + stringDiscountDate + "' , 1, 7) ";
    retDoc2M016 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M016.length > 0 && !"".equals(retDoc2M016[0][0].trim())) {
      stringmaxNo = retDoc2M016[0][0];
      stringmaxNo = "000" + (Integer.parseInt(stringmaxNo.substring(stringmaxNo.length() - 3)) + 1);
      stringmaxNo = stringmaxNo.substring(stringmaxNo.length() - 3);
      stringDiscountNo = stringCompanyCd + convert.add0(stringDepartNo, "10") + stringYM + stringmaxNo;
    } else {
      stringDiscountNo = stringCompanyCd + convert.add0(stringDepartNo, "10") + stringYM + "001";
    }
    return stringDiscountNo;
  }

  // 0 CompanyNo 1 DepartNo 2 ProjectID1 3 EDate
  public void doInsertDoc2M016(String stringDiscountNo, String stringDiscountDate, String stringBarCode, String stringInvoiceNo, String stringComNo, String stringDescription,
      String stringDepartNo, double doubleDiscountTotalMoney) throws Throwable {
    String stringSql = "";
    String stringDiscountTotalMoney = convert.FourToFive("" + doubleDiscountTotalMoney, 0);
    String stringDiscountMoney = "";
    String stringDiscountTax = "";
    double doubleDiscountMoney = doubleDiscountTotalMoney / 1.05;
    double doubleDiscountTax = 0;
    //
    stringDiscountMoney = convert.FourToFive("" + doubleDiscountMoney, 0);
    doubleDiscountTax = doubleDiscountTotalMoney - doParseDouble(stringDiscountMoney);
    stringDiscountTax = convert.FourToFive("" + doubleDiscountTax, 0);
    //
    stringSql = "INSERT  INTO  Doc2M016 ( DiscountNo,    DiscountDate,   BarCode,           InvoiceNo,     ComNo, "
        + " Description,   DiscountMoney,     DiscountTax,   DiscountTotalMoney,  PrintYes, " + " PrintTimes,    DELYes,            LuChangYes,    LAST_USER,            LAST_YMD, "
        + " DepartNo) " + " VALUES ( '" + stringDiscountNo + "', " + // 折讓單號碼
        " '" + stringDiscountDate + "', " + // 折讓單日期
        " '" + stringBarCode + "', " + // 條碼編號
        " '" + stringInvoiceNo + "', " + // 發票號碼
        " '" + stringComNo + "', " + // 公司代碼
        " '" + stringDescription + "', " + // 摘要
        " " + stringDiscountMoney + ", " + // 折讓未稅金額
        " " + stringDiscountTax + ", " + // 折讓稅額
        " " + stringDiscountTotalMoney + ", " + // 折讓總金額
        " '" + "N" + "', " + // 已列印(Y/N)
        " " + "0" + ", " + // 補印次數
        " '" + "N" + "', " + // 作癈
        " '" + "N" + "', " + // 入帳
        " '" + getUser() + "', " + // 修改人
        " '" + datetime.getToday("YYYYmmdd") + "', " + // 修改時間
        " '" + stringDepartNo + "') "; // 部門
    // System.out.println("doInsertInvoM040-----------------"+stringSql) ;
    dbDoc.execFromPool(stringSql);
  }

  public void doInsertDoc2M016(String stringDiscountNo, String stringDiscountDate, String stringBarCode, String stringInvoiceNo, String stringComNo, String stringDescription,
      String stringDepartNo, String stringDiscountTotalMoney, String stringDiscountMoney, String stringDiscountTax) throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  INTO  Doc2M016 ( DiscountNo,   DiscountDate,   BarCode,       InvoiceNo,           ComNo, "
        + " Description,  DiscountMoney,  DiscountTax,   DiscountTotalMoney,  PrintYes, " + " PrintTimes,   DELYes,         LuChangYes,    LAST_USER,           LAST_YMD, "
        + " DepartNo) " + " VALUES ( '" + stringDiscountNo + "', " + // 折讓單號碼
        " '" + stringDiscountDate + "', " + // 折讓單日期
        " '" + stringBarCode + "', " + // 條碼編號
        " '" + stringInvoiceNo + "', " + // 發票號碼
        " '" + stringComNo + "', " + // 公司代碼
        " '" + stringDescription + "', " + // 摘要
        " " + stringDiscountMoney + ", " + // 折讓未稅金額
        " " + stringDiscountTax + ", " + // 折讓稅額
        " " + stringDiscountTotalMoney + ", " + // 折讓總金額
        " '" + "N" + "', " + // 已列印(Y/N)
        " " + "0" + ", " + // 補印次數
        " '" + "N" + "', " + // 作癈
        " '" + "N" + "', " + // 入帳
        " '" + getUser() + "', " + // 修改人
        " '" + datetime.getToday("YYYYmmdd") + "', " + // 修改時間
        " '" + stringDepartNo + "') "; // 部門
    // System.out.println("doInsertInvoM040-----------------"+stringSql) ;
    dbDoc.execFromPool(stringSql);
  }

  // 表格 Doc2M017
  // [前後期關係]不正確 false，正確 true
  public boolean isPurchaseNoRelationOK(String stringComNo, String stringFactoryNo, Vector vectorPurchaseNo, String stringBarCode, String stringSqlAnd, boolean booleanSource)
      throws Throwable {
    String stringPurchaseNo = "";
    String stringEDateTime = "";
    Vector vectorEDateTime = new Vector();
    Hashtable hashtableDocNo = new Hashtable();
    Hashtable hashtableBarCode = new Hashtable();
    Vector vectorTemp = new Vector();
    Vector vectorPurchaseNoKey = new Vector();
    //
    doGetPurchaseNoOrderByEDateTime(hashtableDocNo, hashtableBarCode, vectorEDateTime, stringComNo, stringFactoryNo, vectorPurchaseNo, stringSqlAnd, booleanSource);
    //
    String[] arrayEDateTime = (String[]) vectorEDateTime.toArray(new String[0]);
    Arrays.sort(arrayEDateTime);
    boolean booleanExist = false;
    for (int intNo = 0; intNo < arrayEDateTime.length; intNo++) {
      stringEDateTime = arrayEDateTime[intNo].trim();
      vectorTemp = (Vector) hashtableDocNo.get(stringEDateTime);
      if (vectorTemp == null)
        continue;
      //
      booleanExist = false;
      for (int intNoL = 0; intNoL < vectorTemp.size(); intNoL++) {
        stringPurchaseNo = "" + vectorTemp.get(intNoL);
        if (vectorPurchaseNoKey.indexOf(stringPurchaseNo) != -1)
          booleanExist = true;
        vectorPurchaseNoKey.add(stringPurchaseNo);
      }
      if (intNo != 0 && !booleanExist) {
        return false;
      }
    }
    return true;
  }

  // [前後期關係]的請購單號之請款順序
  public void doGetPurchaseNoOrderByEDateTime(Hashtable hashtableDocNo, Hashtable hashtableBarCode, Vector vectorEDateTime, String stringComNo, String stringFactoryNo,
      Vector vectorPurchaseNo, String stringSqlAnd, boolean booleanSource) throws Throwable {
    String stringSql = "";
    String stringPurchaseNoSql = getPurchaseNoSql(vectorPurchaseNo);
    String stringPurchaseNo = "";
    String stringTable17 = booleanSource ? "Doc2M017" : "Doc5M027";
    String stringTable10 = booleanSource ? "Doc2M010" : "Doc5M020";
    String stringTable60 = booleanSource ? "Doc6M010" : "Doc5M030";
    String stringEDateTime = "";
    String stringBarCode = "";
    String[][] retDoc2M017 = null;
    String[][] retDoc6M010 = null;
    Vector vectorTemp = new Vector();
    Vector vectorBarCode = new Vector();
    // 請款
    stringSql = "SELECT  DISTINCT  M10.EDateTime,  M17.PurchaseNo, M10.BarCode " + " FROM  " + stringTable17 + " M17,  " + stringTable10 + " M10 "
        + " WHERE  M17.BarCode  =  M10.BarCode " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' "
        + " AND  M17.PurchaseNo  IN (" + stringPurchaseNoSql + ") " + stringSqlAnd + " ORDER BY  M10.EDateTime,  M17.PurchaseNo, M10.BarCode ";
    retDoc2M017 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc2M017.length; intNo++) {
      stringEDateTime = retDoc2M017[intNo][0].trim();
      stringPurchaseNo = retDoc2M017[intNo][1].trim();
      stringBarCode = retDoc2M017[intNo][2].trim();
      System.out.println("stringBarCode(" + stringBarCode + ")--------------------");
      //
      if (vectorEDateTime.indexOf(stringEDateTime) == -1)
        vectorEDateTime.add(stringEDateTime);
      //
      vectorTemp = (Vector) hashtableDocNo.get(stringEDateTime);
      vectorBarCode = (Vector) hashtableBarCode.get(stringEDateTime);
      if (vectorTemp == null) {
        vectorTemp = new Vector();
        vectorBarCode = new Vector();
        hashtableDocNo.put(stringEDateTime, vectorTemp);
        hashtableBarCode.put(stringEDateTime, vectorBarCode);
      }
      vectorTemp.add(stringPurchaseNo);
      vectorBarCode.add(stringBarCode);
    }
    /*
     * 行銷-借款沖銷無保留款的機制，管理費用尚未作借款沖銷，故暫不考量 //借款沖銷 stringSql =
     * "SELECT  M10.EDateTime,  M10.PurchaseNo,  M10.BarCode " + " FROM  " +
     * stringTable60+ " M10 " + " WHERE  1=1 " +
     * " AND  M10.ComNo  =  '"+stringComNo+"' " +
     * " AND  M10.FactoryNo  =  '"+stringFactoryNo+"' " +
     * " AND  M10.PurchaseNo  IN ("+stringPurchaseNoSql+") " + stringSqlAnd ;
     * retDoc6M010 = dbDoc.queryFromPool(stringSql) ; for(int intNo=0 ;
     * intNo<retDoc6M010.length ; intNo++) { stringEDateTime =
     * retDoc2M017[intNo][0].trim() ; stringPurchaseNo =
     * retDoc6M010[intNo][1].trim() ; stringBarCode = retDoc2M017[intNo][2].trim() ;
     * // if(vectorEDateTime.indexOf(stringEDateTime) ==-1)
     * vectorEDateTime.add(stringEDateTime) ; // vectorTemp = (Vector)
     * hashtableDocNo.get(stringEDateTime) ; vectorBarCode = (Vector)
     * hashtableBarCode.get(stringEDateTime) ; if(vectorTemp == null) { vectorTemp =
     * new Vector() ; vectorBarCode = new Vector() ;
     * hashtableDocNo.put(stringEDateTime, vectorTemp) ;
     * hashtableBarCode.put(stringEDateTime, vectorBarCode) ; }
     * vectorTemp.add(stringPurchaseNo) ; vectorBarCode.add(stringBarCode) ; }
     */
  }

  // [前後期關係]的請購單號之條碼編號
  public String[][] getBarCodeDoc5M011(String stringComNo, String stringFactoryNo, Vector vectorPurchaseNo, String stringSqlAnd, boolean booleanSource) throws Throwable {
    String stringSql = "";
    String stringPurchaseNoSql = getPurchaseNoSql(vectorPurchaseNo);
    String stringPurchaseNo = "";
    String stringTable11 = booleanSource ? "Doc3M011" : "Doc5M011";
    String stringTable13 = booleanSource ? "Doc3M013" : "Doc5M012";
    String[][] retDoc5M011 = null;
    // 請款
    stringSql = "SELECT   DISTINCT  M11.BarCode,  M11.EDateTime,  M11.DocNo " + " FROM  " + stringTable11 + " M11,  " + stringTable13 + " M13 "
        + " WHERE  M11.BarCode  =  M13.BarCode " + " AND  M11.ComNo  =  '" + stringComNo + "' " + " AND  M13.FactoryNo  =  '" + stringFactoryNo + "' " + " AND  M11.DocNo  IN ("
        + stringPurchaseNoSql + ") " + stringSqlAnd + " ORDER BY  M11.EDateTime,  M11.BarCode,  M11.DocNo ";
    retDoc5M011 = dbDoc.queryFromPool(stringSql);
    return retDoc5M011;
  }

  // 由某一組請購單，取得所有有[前後期關係]的請購單號
  public Vector getAllPurchaseNo(String stringComNo, String stringFactoryNo, Vector vectorPurchaseNo, String stringBarCode, String stringSqlAnd, boolean booleanSource)
      throws Throwable {
    String stringSql = "";
    String stringPurchaseNoSql = getPurchaseNoSql(vectorPurchaseNo);
    String stringPurchaseNo = "";
    String stringTable17 = booleanSource ? "Doc2M017" : "Doc5M027";
    String stringTable10 = booleanSource ? "Doc2M010" : "Doc5M020";
    String stringTable60 = booleanSource ? "Doc6M010" : "Doc5M030";
    String[][] retDoc2M017 = null;
    String[][] retDoc6M010 = null;
    Vector vectorPurchaseNoAll = new Vector();
    if (vectorPurchaseNo.size() == 0)
      return vectorPurchaseNoAll;
    // 請款
    boolean booleanFlag = true;
    for (int intNo = 0; intNo < 100; intNo++) {
      stringSql = "SELECT  M17.PurchaseNo " + " FROM  " + stringTable17 + " M17,  " + stringTable10 + " M10 " + " WHERE  M17.BarCode  =  M10.BarCode "
          + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' "
          + " AND  M10.BarCode  IN  (SELECT  M20.BarCode " + " FROM  " + stringTable17 + " M27,  " + stringTable10 + " M20 " + " WHERE  M27.BarCode  =  M20.BarCode "
          + " AND  M20.ComNo  =  '" + stringComNo + "' " + " AND  M27.FactoryNo  =  '" + stringFactoryNo + "' " + " AND  M27.PurchaseNo  IN (" + stringPurchaseNoSql + ")) "
          + stringSqlAnd;
      if (!"".equals(stringBarCode))
        stringSql += " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
      retDoc2M017 = dbDoc.queryFromPool(stringSql);
      booleanFlag = false;
      for (int intNoL = 0; intNoL < retDoc2M017.length; intNoL++) {
        stringPurchaseNo = retDoc2M017[intNoL][0].trim();
        //
        if (vectorPurchaseNoAll.indexOf(stringPurchaseNo) == -1) {
          vectorPurchaseNoAll.add(stringPurchaseNo);
          booleanFlag = true;
        }
      }
      if (!booleanFlag) {
        break;
      }
      stringPurchaseNoSql = getPurchaseNoSql(vectorPurchaseNoAll);
    }
    // 借款單僅單一請購單，故不須再作查詢
    //
    return vectorPurchaseNoAll;
  }

  public String getPurchaseNoSql(Vector vectorPurchaseNo) throws Throwable {
    String stringSqlAnd = "";
    String stringPurchaseNo = "";
    for (int intNo = 0; intNo < vectorPurchaseNo.size(); intNo++) {
      stringPurchaseNo = ("" + vectorPurchaseNo.get(intNo)).trim();
      if ("null".equals(stringPurchaseNo))
        continue;
      if ("".equals(stringPurchaseNo))
        continue;
      if (!"".equals(stringSqlAnd))
        stringSqlAnd += ", ";
      stringSqlAnd += "'" + stringPurchaseNo + "'";
    }
    return stringSqlAnd;
  }

  public double getRetainMoneySum(String stringBarCode, String stringPurchaseNo, String stringSqlAnd) throws Throwable {
    return getRetainMoneySumUnion(stringBarCode, stringPurchaseNo, stringSqlAnd, false);
  }

  public double getRetainMoneySumUnion(String stringBarCode, String stringPurchaseNo, String stringSqlAnd, boolean booleanSource) throws Throwable {
    String stringSql = "";
    String stringTable17 = booleanSource ? "Doc2M017" : "Doc5M027";
    String stringTable10 = booleanSource ? "Doc2M010" : "Doc5M020";
    String[][] retDoc2M017 = null;
    double doubleRetainMoney = 0;
    //
    stringSql = "SELECT  SUM(RetainMoney) " + " FROM  " + stringTable17 + " " + " WHERE  BarCode IN (SELECT BarCode  From  " + stringTable10 + "  WHERE  UNDERGO_WRITE  <>  'E' ) "
        + " AND  PurchaseNo  =  '" + stringPurchaseNo + "' " + stringSqlAnd;
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  <>  '" + stringBarCode + "' ";
    retDoc2M017 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M017.length > 0) {
      doubleRetainMoney = doParseDouble(retDoc2M017[0][0].trim());
    }
    return doubleRetainMoney;
  }

  public double getPurchaseMoneySum2ForFactoryNo(String stringBarCode, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4,
      String stringFactoryNo, String stringComNo, String stringSqlAnd) throws Throwable {
    return getPurchaseMoneySum2ForFactoryNoUnion(stringBarCode, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, stringPurchaseNo4, stringFactoryNo, stringComNo,
        stringSqlAnd, true);
  }

  public double getPurchaseMoneySum2ForFactoryNoUnion(String stringBarCode, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4,
      String stringFactoryNo, String stringComNo, String stringSqlAnd, boolean booleanSource) throws Throwable {
    String stringSql = "";
    String stringTable10 = booleanSource ? "Doc2M010" : "Doc5M020";
    String stringTable17 = booleanSource ? "Doc2M017" : "Doc5M027";
    String[][] retDoc2M017 = null;
    double doublePurchaseMoney = 0;
    //
    stringSql = "SELECT  SUM(PurchaseMoney) " + " FROM  " + stringTable17 + " M17,  " + stringTable10 + " M10 " + " WHERE  M17.BarCode  =  M10.BarCode "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M17.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M17.PurchaseNo3  =  '" + stringPurchaseNo3 + "' "
        + " AND  RTRIM(M17.PurchaseNo1)+RTRIM(ISNULL(M17.ProjectID1,''))  =  '" + stringPurchaseNo1 + "' ";
    if (!"".equals(stringPurchaseNo4))
      stringSql += " AND  M17.PurchaseNo4  =  '" + stringPurchaseNo4 + "' ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  M10.BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  M10.ComNo  =  '" + stringComNo + "' ";
    stringSql += stringSqlAnd;
    retDoc2M017 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M017.length > 0) {
      doublePurchaseMoney = doParseDouble(retDoc2M017[0][0].trim());
    }
    return doublePurchaseMoney;
  }

  // 廢止
  public double getPurchaseMoneySum(String stringBarCode, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3) throws Throwable {
    return getPurchaseMoneySum2ForFactoryNoUnion(stringBarCode, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", "", "Z6", "", true);
  }

  // 廢止
  public double getPurchaseMoneySumForFactoryNo(String stringBarCode, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringFactoryNo)
      throws Throwable {
    return getPurchaseMoneySum2ForFactoryNoUnion(stringBarCode, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", stringFactoryNo, "Z6", "", true);
  }

  // 廢止
  public double getPurchaseMoneySum(String stringBarCode, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4) throws Throwable {
    return getPurchaseMoneySum2ForFactoryNoUnion(stringBarCode, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, stringPurchaseNo4, "", "Z6", "", true);
  }

  public String[][] getCustomDoc2M017(String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4, String stringComNo,
      String stringSqlAnd) throws Throwable {
    return getCustomDoc2M017Union(true, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, stringPurchaseNo4, stringComNo, stringSqlAnd);
  }

  public String[][] getCustomDoc2M017Union(boolean booleanSource, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4,
      String stringComNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringTable1 = booleanSource ? "Doc2M017" : "Doc5M027";
    String stringTable2 = booleanSource ? "Doc2M010" : "Doc5M020";
    String[][] retDoc2M017 = null;
    double doubleRetainMoney = 0;
    //
    stringSql = "SELECT  M17.BarCode,  M17.FactoryNo " + " FROM  " + stringTable1 + " M17,  " + stringTable2 + " M10 " + " WHERE  M17.BarCode  =  M10.BarCode "
        + " AND  M17.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M17.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M10.ComNo  =  '" + stringComNo + "' ";
    if (booleanSource) {
      stringSql += " AND  M17.PurchaseNo1  =  '" + stringPurchaseNo1 + "' ";
    } else {
      stringSql += " AND  RTRIM(M17.PurchaseNo1)+RTRIM(M17.ProjectID1)  =  '" + stringPurchaseNo1 + "' ";
    }
    if (!"".equals(stringPurchaseNo4))
      stringSql += " AND  M17.PurchaseNo4  =  '" + stringPurchaseNo4 + "' ";
    stringSql += stringSqlAnd;
    retDoc2M017 = dbDoc.queryFromPool(stringSql);

    return retDoc2M017;
  }

  // 廢止
  public String[][] getCustomDoc2M017(String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringSqlAnd) throws Throwable {
    return getDoc2M017Union(true, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", "Z6", stringSqlAnd);
  }

  // 廢止
  public String[][] getDoc2M017(String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3) throws Throwable {
    return getDoc2M017Union(true, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", "Z6", "");
  }

  // 廢止
  public String[][] getDoc2M017(String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4) throws Throwable {
    return getDoc2M017Union(true, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, stringPurchaseNo4, "Z6", "");
  }

  // 廢止
  public String[][] getDoc2M017(String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4, String stringComNo, String stringSqlAnd)
      throws Throwable {
    return getDoc2M017Union(true, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, stringPurchaseNo4, stringComNo, stringSqlAnd);
  }

  public String[][] getDoc2M017Union(boolean booleanSource, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4,
      String stringComNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringTable10 = booleanSource ? "Doc2M010" : "Doc5M020";
    String stringTable17 = booleanSource ? "Doc2M017" : "Doc5M027";
    String[][] retDoc2M017 = null;
    // 0 BarCode 1 FactoryNo 2 PurchaseNo4
    stringSql = "SELECT  M17.BarCode,  M17.FactoryNo,  M17.PurchaseNo4 " + " FROM  " + stringTable17 + " M17,  " + stringTable10 + " M10 " + " WHERE  M17.BarCode  =  M10.BarCode ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringPurchaseNo1))
      stringSql += " AND  RTRIM(PurchaseNo1)+RTRIM(ISNULL(ProjectID1,''))  =  '" + stringPurchaseNo1 + "' ";
    if (!"".equals(stringPurchaseNo2))
      stringSql += " AND  PurchaseNo2  =  '" + stringPurchaseNo2 + "' ";
    if (!"".equals(stringPurchaseNo3))
      stringSql += " AND  PurchaseNo3  =  '" + stringPurchaseNo3 + "' ";
    if (!"".equals(stringPurchaseNo4))
      stringSql += " AND  PurchaseNo4  =  '" + stringPurchaseNo4 + "' ";
    stringSql += stringSqlAnd;
    retDoc2M017 = dbDoc.queryFromPool(stringSql);

    return retDoc2M017;
  }

  public String[][] getDoc2M017(String stringBarCode) throws Throwable {
    return getDoc2M017Union("Doc2M017", stringBarCode);
  }

  public String[][] getDoc2M017Union(String stringTable, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M017 = null;
    // 0 PurchaseNo1 1 PurchaseNo2 2 PurchaseNo3 3 RetainMoney 4 PurchaseMoney
    // 5 PurchaseNo4 6 FactoryNo 7 ProjectID1 8 PurchaseNo
    stringSql = "SELECT  PurchaseNo1,  PurchaseNo2,  PurchaseNo3,  RetainMoney,  PurchaseMoney, " + " PurchaseNo4,  FactoryNo,    ProjectID1,   PurchaseNo " + " FROM  "
        + stringTable + " " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc2M017 = dbDoc.queryFromPool(stringSql);

    return retDoc2M017;
  }

  // 表格 Doc5M0272
  public String[][] getDoc5M0272(String stringBarCode, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M0272 = null;
    // 0 ID 1 BarCode 2 PurchaseNo 3 RecordNo12 4 RecordNo130
    // 5 CostID 6 FactoryNo 7 PayCondition1 8 PayCondition2 9 RequestPrice
    // 10 RequestNum 11 PurchaseMoney 12 RetainPercent 13 DocNoSource
    stringSql = "SELECT ID,          BarCode,        PurchaseNo,     RecordNo12,     RecordNo130," + " CostID,      FactoryNo,      PayCondition1,  PayCondition2,  RequestPrice, "
        + " RequestNum,  PurchaseMoney,  RetainPercent,  DocNoSource  " + " FROM  Doc5M0272 " + " WHERE  1=1 ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    if ("".equals(stringSqlAnd)) {
      stringSql += " ORDER BY  PurchaseNo,  RecordNo12,  RecordNo130 ";
    } else {
      stringSql += stringSqlAnd;
    }
    retDoc5M0272 = dbDoc.queryFromPool(stringSql);
    return retDoc5M0272;
  }

  // 表格 Doc2M018
  public String getOptometryNo3Max(String stringComNo, String stringOptometryType, String stringOptometryNo1, String stringOptometryNo2) throws Throwable {
    String stringProjectID1 = "";
    for (int intNo = 0; intNo < stringOptometryNo1.length(); intNo++) {
      if (!Character.isDigit(stringOptometryNo1.charAt(intNo))) {
        stringProjectID1 = stringOptometryNo1.substring(intNo);
        stringOptometryNo1 = stringOptometryNo1.substring(0, intNo);
        break;
      }
    }
    return getOptometryNo3Max(stringComNo, stringOptometryType, stringOptometryNo1, stringProjectID1, stringOptometryNo2);
  }

  public String getOptometryNo3Max(String stringComNo, String stringOptometryType, String stringOptometryNo1, String stringProjectID1, String stringOptometryNo2) throws Throwable {
    String stringSql = "";
    String stringKindNo = "22";
    String strinOptometryNo3Max = "";
    String strinOptometryNo3MaxCf = "";
    String[][] retDataDB = null;
    // 請款
    stringSql = "SELECT  MAX(OptometryNo3) " + " FROM  Doc2M018 " + " WHERE  OptometryNo1  =  '" + stringOptometryNo1 + stringProjectID1 + "' " + " AND  OptometryNo2  =  '"
        + stringOptometryNo2 + "' " + " AND  BarCode  IN  (SELECT  BarCode  FROM  Doc2M010  WHERE  ComNo  =  '" + stringComNo + "') ";
    System.out.println("------------------" + stringSql);
    retDataDB = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDataDB.length; intNo++) {
      strinOptometryNo3Max = convert.add0("" + (doParseInteger(retDataDB[intNo][0]) + 1), "3");
    }
    stringSql = "SELECT  MAX(OptometryNo3) " + " FROM  Doc5M028 " + " WHERE  OptometryNo1  =  '" + stringOptometryNo1 + "' " + " AND  ProjectID1  =  '" + stringProjectID1 + "' "
        + " AND  OptometryNo2  =  '" + stringOptometryNo2 + "' " + " AND  BarCode  IN  (SELECT  BarCode  FROM  Doc5M020  WHERE  ComNo  =  '" + stringComNo + "') ";
    System.out.println("------------------" + stringSql);
    retDataDB = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDataDB.length; intNo++) {
      strinOptometryNo3MaxCf = convert.add0("" + (doParseInteger(retDataDB[intNo][0]) + 1), "3");
    }
    if (strinOptometryNo3Max.compareTo(strinOptometryNo3MaxCf) < 0) {
      strinOptometryNo3Max = strinOptometryNo3MaxCf;
    }
    // 借款沖銷
    stringSql = "SELECT  MAX(OptometryNo3) " + " FROM  Doc6M010 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  OptometryNo1  =  '" + stringOptometryNo1 + stringProjectID1
        + "' " + " AND  OptometryNo2  =  '" + stringOptometryNo2 + "' ";
    System.out.println("------------------" + stringSql);
    retDataDB = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDataDB.length; intNo++) {
      strinOptometryNo3MaxCf = convert.add0("" + (doParseInteger(retDataDB[intNo][0]) + 1), "3");
    }
    if (strinOptometryNo3Max.compareTo(strinOptometryNo3MaxCf) < 0) {
      strinOptometryNo3Max = strinOptometryNo3MaxCf;
    }
    // 驗收
    stringSql = "SELECT  MAX(DocNo3) " + " FROM  Doc5M060 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  DocNo1  =  '" + stringOptometryNo1 + stringProjectID1 + "' "
        + " AND  DocNo2  =  '" + stringOptometryNo2 + "' ";
    System.out.println("------------------" + stringSql);
    retDataDB = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDataDB.length; intNo++) {
      strinOptometryNo3MaxCf = convert.add0("" + (doParseInteger(retDataDB[intNo][0]) + 1), "3");
    }
    if (strinOptometryNo3Max.compareTo(strinOptometryNo3MaxCf) < 0) {
      strinOptometryNo3Max = strinOptometryNo3MaxCf;
    }
    // 公文
    if ("Z6".equals(stringComNo))
      stringComNo = "06";
    if ("ZA".equals(stringComNo))
      stringComNo = "Z7";
    if ("20".equals(stringComNo))
      stringComNo = "2O";
    if ("75".equals(stringComNo))
      stringComNo = "74";
    if ("AA".equals(stringComNo))
      stringComNo = "20";
    if ("CS".equals(stringComNo))
      stringComNo = "20";
    //
    stringSql = "SELECT  MAX(DocNo3) " + " FROM  Doc1M030 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' " + " AND  DocNo1  =  '"
        + stringOptometryNo1 + stringProjectID1 + "' " + " AND  DocNo2  =  '" + stringOptometryNo2 + "' ";
    System.out.println("------------------" + stringSql);
    retDataDB = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDataDB.length; intNo++) {
      strinOptometryNo3MaxCf = convert.add0("" + (doParseInteger(retDataDB[intNo][0]) + 1), "3");
    }
    if (strinOptometryNo3Max.compareTo(strinOptometryNo3MaxCf) < 0) {
      strinOptometryNo3Max = strinOptometryNo3MaxCf;
    }
    return strinOptometryNo3Max;
  }

  public String[][] getDoc2M018(String stringBarCode) throws Throwable {
    return getDoc2M018Union("Doc2M018", stringBarCode);
  }

  public String[][] getDoc2M018Union(String stringTable, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M018 = null;
    // 0 OptometryNo1 1 OptometryNo2 2 OptometryNo3 3 OptometryType 4 PurchaseNo
    // 5 OptometryType
    stringSql = "SELECT  OptometryNo1,  OptometryNo2,  OptometryNo3,  OptometryType,  PurchaseNo,  OptometryType" + " FROM  " + stringTable + " " + " WHERE  BarCode  =  '"
        + stringBarCode + "' ";
    retDoc2M018 = dbDoc.queryFromPool(stringSql);

    return retDoc2M018;
  }

  // 存在回傳 true，否則回傳 false。
  public boolean isExistOptometryNo(String stringComNo, String stringOptometryNo11, String stringOptometryNo12, String stringOptometryNo2, String stringOptometryNo3,
      String stringBarCode) throws Throwable {
    return isExistOptometryNo(stringComNo, stringOptometryNo11, stringOptometryNo2, stringOptometryNo3, stringOptometryNo12, stringBarCode, stringBarCode);
  }

  public boolean isExistOptometryNo(String stringComNo, String stringOptometryNo11, String stringOptometryNo2, String stringOptometryNo3, String stringOptometryNo12,
      String stringBarCode, String stringBarCodeRef) throws Throwable {
    Hashtable hashtableCondition = new Hashtable();
    return isExistOptometryNo(stringComNo, stringOptometryNo11, stringOptometryNo12, stringOptometryNo2, stringOptometryNo3, stringBarCode, stringBarCodeRef, hashtableCondition);
  }

  public boolean isExistOptometryNo(String stringComNo, String stringOptometryNo11, String stringOptometryNo12, String stringOptometryNo2, String stringOptometryNo3,
      String stringBarCode, String stringBarCodeRef, Hashtable hashtableCondition) throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    String stringSql = "";
    String stringKindNo = "22";
    String stringID = exeUtil.doParseDouble(stringBarCode) <= 0 ? "-1" : stringBarCode;
    String stringSource = "" + hashtableCondition.get("SOURCE");
    String[][] retDoc = null;
    if (!"驗收".equals(stringSource)) {
      // 表格 Doc2M018(請款)
      stringSql = "SELECT  BarCode " + " FROM  Doc2M018 " + " WHERE  OptometryNo1  =  '" + stringOptometryNo11 + stringOptometryNo12 + "' " + " AND  OptometryNo2  =  '"
          + stringOptometryNo2 + "' " + " AND  OptometryNo3  =  '" + stringOptometryNo3 + "' " + " AND  BarCode IN  (SELECT  BarCode" + "  FROM  Doc2M010 " + "  WHERE  ComNo  =  '"
          + stringComNo + "' " + " AND  UNDERGO_WRITE  <>  'E') " + " AND  BarCode  <>  '" + stringBarCode + "' ";
      retDoc = dbDoc.queryFromPool(stringSql);
      if (retDoc.length > 0) {
        for (int intNo = 0; intNo < retDoc.length; intNo++) {
          System.out.println("請款----------" + (intNo + 1) + "----------" + retDoc[intNo][0]);
        }
        return true;
      }
      // 表格 Doc6M010(借款沖銷)
      stringSql = "SELECT  BarCode " + " FROM  Doc6M010 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  OptometryNo1  =  '" + stringOptometryNo11 + stringOptometryNo12
          + "' " + " AND  OptometryNo2  =  '" + stringOptometryNo2 + "' " + " AND  OptometryNo3  =  '" + stringOptometryNo3 + "' " + " AND  UNDERGO_WRITE  <>  'E' "
          + " AND  BarCode  <>  '" + stringBarCode + "' ";
      retDoc = dbDoc.queryFromPool(stringSql);
      if (retDoc.length > 0) {
        for (int intNo = 0; intNo < retDoc.length; intNo++) {
          System.out.println("借款沖銷----------" + (intNo + 1) + "----------" + retDoc[intNo][0]);
        }
        return true;
      }
      // 表格 Doc5M028(請款)
      stringSql = "SELECT  BarCode " + " FROM  Doc5M028 " + " WHERE  OptometryNo1  =  '" + stringOptometryNo11 + "' " + " AND  ISNULL(ProjectID1,'')    =  '" + stringOptometryNo12
          + "' " + " AND  OptometryNo2  =  '" + stringOptometryNo2 + "' " + " AND  OptometryNo3  =  '" + stringOptometryNo3 + "' " + " AND  BarCode IN  (SELECT  BarCode"
          + "  FROM  Doc5M020 " + "  WHERE  ComNo  =  '" + stringComNo + "' " + " AND  UNDERGO_WRITE  <>  'E') " + " AND  BarCode  <>  '" + stringBarCode + "' ";
      retDoc = dbDoc.queryFromPool(stringSql);
      if (retDoc.length > 0) {
        for (int intNo = 0; intNo < retDoc.length; intNo++) {
          System.out.println("請款-一般物料----------" + (intNo + 1) + "----------" + retDoc[intNo][0]);
        }
        return true;
      }
    }
    // 表格 Doc5M060(驗收)
    stringSql = "SELECT  ID " + " FROM  Doc5M060 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  DocNo1  =  '" + stringOptometryNo11 + stringOptometryNo12 + "' "
        + " AND  DocNo2  =  '" + stringOptometryNo2 + "' " + " AND  DocNo3  =  '" + stringOptometryNo3 + "' " + " AND  UNDERGO_WRITE  <>  'E' " + " AND  ID  <>  " + stringID + " ";
    retDoc = dbDoc.queryFromPool(stringSql);
    if (retDoc.length > 0) {
      for (int intNo = 0; intNo < retDoc.length; intNo++) {
        System.out.println("驗收----------" + (intNo + 1) + "----------" + retDoc[intNo][0]);
      }
      return true;
    }
    // 公文
    if ("Z6".equals(stringComNo))
      stringComNo = "06";
    if ("ZA".equals(stringComNo))
      stringComNo = "Z7";
    if ("20".equals(stringComNo))
      stringComNo = "2O";
    if ("75".equals(stringComNo))
      stringComNo = "74";
    if ("AA".equals(stringComNo))
      stringComNo = "20";
    if ("CS".equals(stringComNo))
      stringComNo = "20";
    //
    if (!"驗收".equals(stringSource)) {
      stringSql = "SELECT  BarCode " + " FROM  Doc1M030 " + " WHERE  DocNo1  =  '" + stringOptometryNo11 + stringOptometryNo12 + "' " + " AND  DocNo2  =  '" + stringOptometryNo2
          + "' " + " AND  DocNo3  =  '" + stringOptometryNo3 + "' " + " AND  KindNo  =  '" + stringKindNo + "' " + " AND  BarCode  <>  '" + stringBarCodeRef + "' "
          + " AND  ComNo  =  '" + stringComNo + "' ";
      retDoc = dbDoc.queryFromPool(stringSql);
      if (retDoc.length != 0) {
        for (int intNo = 0; intNo < retDoc.length; intNo++)
          System.out.println("------------------------與 Doc1M030 之 BarCode 重複 " + retDoc[intNo][0]);
        return true;
      }
    }
    return false;
  }

  /*
   * public boolean isExistOptometryNoDoc5(String stringComNo, String
   * stringOptometryNo1, String stringOptometryNo2, String stringOptometryNo3,
   * String stringOptometryType, String stringBarCode) throws Throwable { String
   * stringSql = "" ; String[][] retDoc = null ; // 表格 Doc2M018(請款) stringSql =
   * "SELECT  BarCode " + " FROM  Doc5M028 " + " WHERE  OptometryNo1  =  '" +
   * stringOptometryNo1 + "' " + " AND  OptometryNo2  =  '" + stringOptometryNo2 +
   * "' " + " AND  OptometryNo3  =  '" + stringOptometryNo3 + "' " +
   * " AND  BarCode IN  (SELECT  BarCode" + "  FROM  Doc5M020 " +
   * "  WHERE  ComNo  =  '" + stringComNo + "' " +
   * " AND  UNDERGO_WRITE  <>  'E') " + " AND  BarCode  <>  '" + stringBarCode +
   * "' " ; retDoc = dbDoc.queryFromPool(stringSql) ; if(retDoc.length > 0) {
   * for(int intNo=0 ; intNo<retDoc.length ; intNo++) {
   * System.out.println("請款-一般物料----------"+(intNo+1)+"----------"+retDoc[intNo][0
   * ]) ; } return true ; } // 表格 Doc6M010(借款沖銷) stringSql = "SELECT  BarCode " +
   * " FROM  Doc5M030 " + " WHERE  ComNo  =  '" + stringComNo + "' " +
   * " AND  OptometryNo1  =  '" + stringOptometryNo1 + "' " +
   * " AND  OptometryNo2  =  '" + stringOptometryNo2 + "' " +
   * " AND  OptometryNo3  =  '" + stringOptometryNo3 + "' " +
   * " AND  UNDERGO_WRITE  <>  'E' " + " AND  BarCode  <>  '" + stringBarCode +
   * "' " ; retDoc = dbDoc.queryFromPool(stringSql) ; if(retDoc.length > 0) {
   * for(int intNo=0 ; intNo<retDoc.length ; intNo++) {
   * System.out.println("借款沖銷-一般物料----------"+(intNo+1)+"----------"+retDoc[intNo]
   * [0]) ; } return true ; } return false ; }
   */
  // 表格 Doc2M020 (包含原 Doc7M011)
  // 小請款代碼
  public String[][] getDoc2M020(String stringCostID) throws Throwable {
    return getComNoDoc2M020("Z6", stringCostID, "");
  }

  public String[][] getComNoDoc2M020(String stringComNo, String stringCostID, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M020 = null;
    //
    stringSql = " SELECT  CostID,  CostID1,  DESCRIPTION " + " FROM  Doc2M020 " + " WHERE  UseStatus  =  'Y' ";
    if (!"".equals(stringCostID)) {
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    }
    if (!"".equals(stringComNo)) {
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    }
    stringSql += stringSqlAnd + " ORDER BY CostID,  CostID1 ";
    retDoc2M020 = dbDoc.queryFromPool(stringSql);
    return retDoc2M020;
  }

  public String[][] getCostID() throws Throwable {
    return getCostID("Z6");
  }

  public String[][] getCostID(String stringComNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M020 = null;
    //
    stringSql = " SELECT  DISTINCT  CostID " + " FROM  Doc2M020 " + " WHERE  UseStatus  =  'Y' ";
    if (!"".equals(stringComNo)) {
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    }
    stringSql += " ORDER BY CostID ";
    retDoc2M020 = dbDoc.queryFromPool(stringSql);
    return retDoc2M020;
  }

  public String getCostID1(String stringCostID) throws Throwable {
    return getCostID1("Z6", stringCostID);
  }

  public String getCostID1(String stringComNo, String stringCostID) throws Throwable {
    String stringSql = "";
    String stringCostID1 = "";
    String[][] retDoc2M020 = null;
    //
    stringSql = " SELECT  CostID1 " + " FROM  Doc2M020 " + " WHERE  UseStatus  =  'Y' " + " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringComNo)) {
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    }
    stringSql += " ORDER BY CostID1 ";
    retDoc2M020 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M020.length != 0) {
      stringCostID1 = retDoc2M020[0][0].trim();
    }
    return stringCostID1;
  }

  // 廢止
  public String getCostID1View(String stringCostID, String StringCostID1) throws Throwable {
    return getCostID1View("Z6", stringCostID, StringCostID1);
  }

  public String getCostID1View(String stringComNo, String stringCostID, String StringCostID1) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc2M020 = null;
    //
    stringSql = " SELECT  DESCRIPTION " + " FROM  Doc2M020 " + " WHERE  CostID  =  '" + stringCostID + "' " + " AND  COstID1  =  '" + StringCostID1 + "' ";
    if (!"".equals(stringComNo)) {
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    }
    retDoc2M020 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M020.length != 0) {
      stringDescription = retDoc2M020[0][0].trim();
    }
    return stringDescription;
  }

  // 廢止
  public Vector getNoPurchaseCOSTIDForDoc2M020() throws Throwable {
    return getNoPurchaseCOSTIDForDoc2M020("Z6");
  }

  public Vector getNoPurchaseCOSTIDForDoc2M020(String stringComNo) throws Throwable {
    String[][] retDoc2M020 = getNoPurchaseCostIDForDoc2M020(stringComNo, "Y", "");
    Vector vectorDoc2M020 = new Vector();
    Vector vectorCostID = new Vector();
    Vector vectorCostID1 = new Vector();
    Vector vectorDESCRIPTION = new Vector();
    //
    for (int intNo = 0; intNo < retDoc2M020.length; intNo++) {
      vectorCostID.add(retDoc2M020[intNo][0].trim());
      vectorCostID1.add(retDoc2M020[intNo][1].trim());
      vectorDESCRIPTION.add(retDoc2M020[intNo][2].trim());
    }
    vectorDoc2M020.add(vectorCostID);
    vectorDoc2M020.add(vectorCostID1);
    vectorDoc2M020.add(vectorDESCRIPTION);
    return vectorDoc2M020;
  }

  // 廢止
  public Vector getNoPurchaseCostID2ForDoc2M020() throws Throwable {
    return getNoPurchaseCostID2ForDoc2M020("Z6");
  }

  public Vector getNoPurchaseCostID2ForDoc2M020(String stringComNo) throws Throwable {
    Vector vectorKey = new Vector();
    String stringCostID = "";
    String stringCostID1 = "";
    String stringKey = "";
    String[][] retDoc2M020 = getNoPurchaseCostIDForDoc2M020(stringComNo, "", "");
    for (int intNo = 0; intNo < retDoc2M020.length; intNo++) {
      stringCostID = retDoc2M020[intNo][0].trim();
      stringCostID1 = retDoc2M020[intNo][1].trim();
      stringKey = stringCostID + "-" + stringCostID1;
      if (vectorKey.indexOf(stringKey) != -1)
        continue;
      vectorKey.add(stringKey);
    }
    return vectorKey;
  }

  // 廢止
  public String[][] getNoPurchaseCostIDForDoc2M020(String stringUseStatus, String stringSqlAnd) throws Throwable {
    return getNoPurchaseCostIDForDoc2M020("Z6", stringUseStatus, stringSqlAnd);
  }

  public String[][] getNoPurchaseCostIDForDoc2M020(String stringComNo, String stringUseStatus, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M020 = null;
    Vector vectorDoc2M020 = new Vector();
    // 0 CostID 1 CostID1 2 DESCRIPTION
    stringSql = " SELECT  CostID,  CostID1,  DESCRIPTION " + " FROM  Doc2M020 " + " WHERE  Purchase  =  'Y' ";
    if (!"".equals(stringUseStatus))
      stringSql += " AND  UseStatus  =  '" + stringUseStatus + "' ";
    if (!"".equals(stringComNo)) {
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    }
    if ("".equals(stringSqlAnd)) {
      stringSql += " ORDER BY  CostID,  CostID1 ";
    } else {
      stringSql += stringSqlAnd;
    }
    retDoc2M020 = dbDoc.queryFromPool(stringSql);
    return retDoc2M020;
  }

  // 廢止
  public String[][] getDoc2M020(String stringCostID, String stringCostID1) throws Throwable {
    return getDoc2M020("Z6", stringCostID, stringCostID1);
  }

  public String[][] getDoc2M020(String stringComNo, String stringCostID, String stringCostID1) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M020 = null;
    // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD 4 InvoiceType 5 DESCRIPTION
    stringSql = " SELECT  ACCT_IN,  ACCT_OUT,  ITEM_CD,  USED_CD,  InvoiceType,  DESCRIPTION " + " FROM  Doc2M020 " + " WHERE  UseStatus  =  'Y' " + " AND  CostID  =  '"
        + stringCostID + "' " + " AND  CostID1  =  '" + stringCostID1 + "' ";
    if (!"".equals(stringComNo)) {
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    }
    retDoc2M020 = dbDoc.queryFromPool(stringSql);
    return retDoc2M020;
  }

  public String[][] getDoc2M020All(String stringCostID, String stringCostID1) throws Throwable {
    return getDoc2M020All("Z6", stringCostID, stringCostID1);
  }

  public String[][] getDoc2M020All(String stringComNo, String stringCostID, String stringCostID1) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M020 = null;
    // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD 4 InvoiceType
    // 5 ACCT_C_IN 6 ACCT_C_OUT
    stringSql = " SELECT  ACCT_IN,    ACCT_OUT,  ITEM_CD,  USED_CD,  InvoiceType, " + " ACCT_C_IN,  ACCT_C_OUT " + " FROM  Doc2M020 " + " WHERE  ComNo  =  '" + stringComNo + "' "
        + " AND  CostID  =  '" + stringCostID + "' " + " AND  CostID1  =  '" + stringCostID1 + "' ";
    retDoc2M020 = dbDoc.queryFromPool(stringSql);
    return retDoc2M020;
  }

  // 表格 Doc2M0201
  // 廢止
  public Vector getCostIDVDoc2M0201(String stringCostID, String stringCostID1, String stringFunctionType) throws Throwable {
    return getCostIDVDoc2M0201("Z6", stringCostID, stringCostID1, stringFunctionType);
  }

  // 廢止
  public Vector getCostIDVDoc2M0201(String stringComNo, String stringCostID, String stringCostID1, String stringFunctionType) throws Throwable {
    return getCostIDVDoc2M0201V(stringComNo, stringCostID, stringCostID1, stringFunctionType, "");
  }

  public Vector getCostIDVDoc2M0201V(String stringComNo, String stringCostID, String stringCostID1, String stringFunctionType, String stringDate) throws Throwable {
    return getCostIDVDoc2M0201V(stringComNo, stringCostID, stringCostID1, stringFunctionType, stringDate, "");
  }

  public Vector getCostIDVDoc2M0201V(String stringComNo, String stringCostID, String stringCostID1, String stringFunctionType, String stringDate, String stringSqlAnd)
      throws Throwable {
    String[][] retDoc2M0201 = getDoc2M0201(stringComNo, stringCostID, stringCostID, stringFunctionType, stringDate, stringSqlAnd);
    Vector vectorCostID = new Vector();
    for (int intNo = 0; intNo < retDoc2M0201.length; intNo++) {
      stringCostID = retDoc2M0201[intNo][0].trim();
      stringCostID1 = retDoc2M0201[intNo][1].trim();
      if (vectorCostID.indexOf(stringCostID + stringCostID1) == -1)
        vectorCostID.add(stringCostID + stringCostID1);
    }
    return vectorCostID;
  }

  public Hashtable getCostIDVDoc2M0201H(String stringComNo, String stringCostID, String stringCostID1, String stringDate, String stringSqlAnd) throws Throwable {
    String stringFunctionType = "";
    String stringFunctionTypeL = "";
    String[][] retDoc2M0201 = getDoc2M0201(stringComNo, stringCostID, stringCostID, "", stringDate, stringSqlAnd);
    Vector vectorCostID = new Vector();
    Hashtable hashtbleFunctionType = new Hashtable();
    for (int intNo = 0; intNo < retDoc2M0201.length; intNo++) {
      stringCostID = retDoc2M0201[intNo][0].trim();
      stringCostID1 = retDoc2M0201[intNo][1].trim();
      stringFunctionType = retDoc2M0201[intNo][2].trim();
      //
      for (int intNoL = 0; intNoL < stringFunctionType.length(); intNoL++) {
        stringFunctionTypeL = stringFunctionType.substring(intNoL, intNoL + 1);
        vectorCostID = (Vector) hashtbleFunctionType.get(stringFunctionTypeL);
        if (vectorCostID == null) {
          vectorCostID = new Vector();
          hashtbleFunctionType.put(stringFunctionTypeL, vectorCostID);
        }
        //
        if (vectorCostID.indexOf(stringCostID + stringCostID1) == -1) {
          vectorCostID.add(stringCostID + stringCostID1);
        }
      }
    }
    return hashtbleFunctionType;
  }

  // 廢止
  public String[][] getDoc2M0201(String stringCostID, String stringCostID1, String stringFunctionType) throws Throwable {
    return getDoc2M0201("Z6", stringCostID, stringCostID1, stringFunctionType);
  }

  // 廢止
  public String[][] getDoc2M0201(String stringComNo, String stringCostID, String stringCostID1, String stringFunctionType) throws Throwable {
    return getDoc2M0201(stringComNo, stringCostID, stringCostID1, stringFunctionType, "", "");
  }

  public String[][] getDoc2M0201(String stringComNo, String stringCostID, String stringCostID1, String stringFunctionType, String stringDate, String stringSqlAnd)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc2M0201 = null;
    // 0 CostID 1 CostID1 2 FunctionType 3 DateStart 4 DateEnd
    // 5 ComNo 6 Remark 7 FunctionName
    stringSql = " SELECT  CostID,  CostID1,  FunctionType,  DateStart,  DateEnd, " + " ComNo,   Remark,   FunctionName " + " FROM  Doc2M0201 " + " WHERE  1=1 ";
    if (!"".equals(stringComNo)) {
      stringSql += " AND (ComNo  =  'ALL'  OR  ComNo  =  '" + stringComNo + "') ";
    }
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID   =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    if (!"".equals(stringFunctionType))
      stringSql += " AND  FunctionType  LIKE  '%" + stringFunctionType + "%' ";
    if (!"".equals(stringDate)) {
      stringSql += " AND  (DateStart  <=  '" + stringDate + "' OR  DateStart  =  '9999/99/99') " + " AND  (DateEnd    >=  '" + stringDate + "' OR  DateEnd    =  '9999/99/99') ";
    }
    //
    stringSql += stringSqlAnd;
    if (stringSql.indexOf("ORDER") == -1) {
      stringSql += " ORDER BY CostID,  CostID1 ";
    }
    retDoc2M0201 = dbDoc.queryFromPool(stringSql);
    return retDoc2M0201;
  }

  // 表格 Doc2M020 例外之條碼編號
  // 小請款代碼
  public Vector getDoc2M021(String stringCostID, String stringCostID1) throws Throwable {
    return getDoc2M021("Z6", stringCostID, stringCostID1);
  }

  public Vector getDoc2M021(String stringComNo, String stringCostID, String stringCostID1) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M021 = null;
    Vector vectorBarCode = new Vector();
    //
    stringSql = " SELECT  BarCode " + " FROM  Doc2M021 " + " WHERE  1=1 ";
    if ("".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if ("".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if ("".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    retDoc2M021 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc2M021.length; intNo++)
      vectorBarCode.add(retDoc2M021[intNo][0].trim());
    return vectorBarCode;
  }

  // 表格 Doc2M030
  public String[][] getDoc2M030(String stringAcctNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M030 = null;
    // 0 ACCT_C 1RecordNo
    stringSql = " SELECT  ACCT_C,  RecordNo " + " FROM  Doc2M030 " + " WHERE  ACCT_D  =  '" + stringAcctNo + "' " + " AND  DefaultValue  =  'Y' " + " ORDER BY  RecordNo ";
    retDoc2M030 = dbDoc.queryFromPool(stringSql);
    return retDoc2M030;
  }

  // 表格 Doc2M040
  public String[] getDoc2M040() throws Throwable {
    String stringSql = "";
    String[][] retDoc2M040 = null;
    // 0 ACCT_D 1 ACCT_C 2 MailMoney1 3 MailMoney2 4 TaxRate
    // 5 CostID 6 CostMoney 7 ACCT_Mail 8 MailMoney3 9 MailMoney4
    // 10 BarCode 11 BarCodeDoc6M010 12 BarCodeDoc5M020 13 BarCodeDoc2M014 14
    // YearEndDate
    // 15 BarCodeDoc3M011, 16 BarCodeDoc6M0101
    stringSql = " SELECT  ACCT_D,                    ACCT_C,                    MailMoney1,             MailMoney2,             TaxRate, "
        + " CostID,                      CostMoney,                 ACCT_Mail,              MailMoney3,             MailMoney4, "
        + " BarCode,                  BarCodeDoc6M010,     BarCodeDoc5M020,     BarCodeDoc2M014,     YearEndDate, " + " BarCodeDoc3M011,  BarCodeDoc6M0101 " + " FROM  Doc2M040 ";
    retDoc2M040 = dbDoc.queryFromPool(stringSql);
    return retDoc2M040[0];
  }

  // N 表示用民國年，Y表示用西元年
  public String getDateStatus() throws Throwable {
    String stringSql = "";
    String[][] retDoc2M040 = null;
    //
    stringSql = " SELECT  DateStatus " + " FROM  Doc2M040 ";
    retDoc2M040 = dbDoc.queryFromPool(stringSql);
    return retDoc2M040[0][0];
  }

  // 表格 Doc2M0401
  public String[][] getDoc2M0401(String stringCostID, String stringUseType, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringSqlAndL = "";
    String[] arrayUseType = convert.StringToken(stringUseType, ",");
    String[][] retDoc2M0401 = null;
    // 0 CostID 1 UseType 2 Remark 3 FunctionName
    stringSql = " SELECT  CostID,  UseType,  Remark,  FunctionName " + " FROM  Doc2M0401 " + " WHERE  UseStatus = 'Y' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    for (int intNo = 0; intNo < arrayUseType.length; intNo++) {
      if (!"".equals(stringSqlAndL))
        stringSqlAndL += " OR ";
      stringSqlAndL += " UseType  LIKE  '%" + arrayUseType[intNo] + "%' ";
    }
    if (!"".equals(stringSqlAndL))
      stringSql += " AND (" + stringSqlAndL + ")";
    stringSql += stringSqlAnd;
    retDoc2M0401 = dbDoc.queryFromPool(stringSql);
    return retDoc2M0401;
  }

  public Vector getDoc2M0401V(String stringCostID, String stringUseType, String stringSqlAnd) throws Throwable {
    String[][] retDoc2M040 = getDoc2M0401(stringCostID, stringUseType, stringSqlAnd);
    Vector vectorCostID = new Vector();
    for (int intNo = 0; intNo < retDoc2M040.length; intNo++)
      vectorCostID.add(retDoc2M040[intNo][0].trim());
    return vectorCostID;
  }

  public Hashtable getDoc2M0401H(String stringCostID, String stringUseType, String stringSqlAnd) throws Throwable {
    String stringUseTypeL = "";
    String[] arrayUseType = convert.StringToken(stringUseType, ",");
    String[][] retDoc2M0401 = getDoc2M0401(stringCostID, stringUseType, stringSqlAnd);
    Vector vectorCostID = new Vector();
    Hashtable hashtableType = new Hashtable();
    Object objectTemp = null;
    for (int intNo = 0; intNo < retDoc2M0401.length; intNo++) {
      stringCostID = retDoc2M0401[intNo][0].trim();
      stringUseType = retDoc2M0401[intNo][1].trim();
      for (int intNoL = 0; intNoL < stringUseType.length(); intNoL++) {
        stringUseTypeL = stringUseType.substring(intNoL, intNoL + 1);
        //
        objectTemp = hashtableType.get(stringUseTypeL);
        if (objectTemp == null) {
          vectorCostID = new Vector();
          hashtableType.put(stringUseTypeL, vectorCostID);
        } else {
          vectorCostID = (Vector) objectTemp;
        }
        System.out.println("stringUseTypeL(" + stringUseTypeL + ")stringCostID(" + stringCostID + ")--------------------");
        vectorCostID.add(stringCostID);
      }
    }
    return hashtableType;
  }

  public String[][] getDoc2M04011(String stringCostID, String stringCostID2, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M04011 = null;
    // 0 CostID 1 UseType 2 CostID2 3 Remark
    stringSql = " SELECT  CostID,  UseType,  CostID2,  Remark " + " FROM  Doc2M04011 " + " WHERE  1=1 ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID   =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID2))
      stringSql += " AND  CostID2  =  '" + stringCostID2 + "' ";
    stringSql += stringSqlAnd;
    retDoc2M04011 = dbDoc.queryFromPool(stringSql);
    return retDoc2M04011;
  }

  public Vector getDoc2M04011V(String stringCostID, String stringCostID2, String stringSqlAnd) throws Throwable {
    String[][] retDoc2M04011 = getDoc2M04011(stringCostID, stringCostID2, stringSqlAnd);
    Vector vectorDoc2M04011 = new Vector();
    // 0 CostID 1 UseType 2 CostID2 3 Remark
    for (int intNo = 0; intNo < retDoc2M04011.length; intNo++) {
      vectorDoc2M04011.add(retDoc2M04011[intNo][2].trim());
    }
    return vectorDoc2M04011;
  }

  // 表格 Doc2M0402 (關係人廠商)
  public Vector getDoc2M0402() throws Throwable {
    String stringSql = "";
    String[][] retDoc2M0402 = null;
    Vector vectorFactoryNo = new Vector();
    //
    stringSql = " SELECT  FactoryNo FROM  Doc2M0402 ";
    retDoc2M0402 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc2M0402.length; intNo++)
      vectorFactoryNo.add(retDoc2M0402[intNo][0].trim());
    return vectorFactoryNo;
  }

  // 表格 Doc2M0403 (列表機位置)
  public String[][] getDoc2M0403(String stringPrinterName) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M0403 = null;
    //
    stringSql = " SELECT  PrinterName,  IP,  ReMark,  PrinterLabel " + " FROM  Doc2M0403 " + " WHERE  ISNULL(IP,  '')  <> '' ";
    if (!"".equals(stringPrinterName))
      stringSql += " AND  PrinterName  =  '" + stringPrinterName + "' ";
    retDoc2M0403 = dbDoc.queryFromPool(stringSql);
    return retDoc2M0403;
  }

  // 表格 Doc2M0404
  public Vector getEmployeeNoDoc2M0404(String stringComNo, String stringDepartNo, String stringSqlAnd) throws Throwable {
    return getEmployeeNoDoc2M0404(stringComNo, stringDepartNo, "", "", "", stringSqlAnd);
  }

  public String[][] getDoc2M0404(String stringComNo, String stringDepartNo, String stringSqlAnd) throws Throwable {
    return getDoc2M0404(stringComNo, stringDepartNo, "", "", "", "");
  }

  public Vector getEmployeeNoDoc2M0404(String stringComNo, String stringDepartNo, String stringEmployeeNo, String stringDateStart, String stringDateEnd, String stringSqlAnd)
      throws Throwable {
    String[][] retDoc2M0404 = getDoc2M0404(stringComNo, stringDepartNo, stringEmployeeNo, stringDateStart, stringDateEnd, stringSqlAnd);
    Vector vectorEmployeeNo = new Vector();
    for (int intNo = 0; intNo < retDoc2M0404.length; intNo++) {
      if (vectorEmployeeNo.indexOf(retDoc2M0404[intNo][2].trim()) == -1)
        vectorEmployeeNo.add(retDoc2M0404[intNo][2].trim());
    }
    return vectorEmployeeNo;
  }

  public String[][] getDoc2M0404(String stringComNo, String stringDepartNo, String stringEmployeeNo, String stringDateStart, String stringDateEnd, String stringSqlAnd)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc2M0404 = null;
    // 0 ComNo 1 DepartNo 2 EmployeeNo 3 DateStart 4 DateEnd ５ DepartNoE
    stringSql = " SELECT  ComNo,  DepartNo,  EmployeeNo,  DateStart,  DateEnd,  DepartNoE " + " FROM  Doc2M0404 " + " WHERE  1  = 1 ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo     =  '" + stringComNo + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringEmployeeNo))
      stringSql += " AND  EmployeeNo  =  '" + stringEmployeeNo + "' ";
    if (!"".equals(stringDateStart))
      stringSql += " AND  DateStart  >=  '" + stringDateStart + "' ";
    if (!"".equals(stringDateEnd))
      stringSql += " AND  DateEnd  <=  '" + stringDateEnd + "' ";
    if (!"".equals(stringSqlAnd))
      stringSql += stringSqlAnd;
    retDoc2M0404 = dbDoc.queryFromPool(stringSql);
    return retDoc2M0404;
  }

  // 表格 Doc2M04041
  public String getTYPEDoc2M04041(String stringDeptCd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M04041 = null;
    //
    stringSql = " SELECT  TYPE " + " FROM  Doc2M04041 " + " WHERE  1=1 ";
    if (!"".equals(stringDeptCd))
      stringSql += " AND  DEPT_CD  =  '" + stringDeptCd + "' ";
    retDoc2M04041 = dbDoc.queryFromPool(stringSql);
    //
    if (retDoc2M04041.length > 0)
      return retDoc2M04041[0][0].trim();
    return "A"; // A 室 B 科

  }

  // 表格 Doc2M0405
  public String[][] getSqlFullDoc2M0405(String stringReturnType, String stringInOut, String stringComNo, String stringAcctNoType, String stringDataLimit, String stringSqlAndQ)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc2M0405 = new String[0][0];// 0 ComNo 1 AcctNoType 2 DepartNoSum 3 DataLimit
    Vector vectorSql = new Vector();
    // 特殊部門
    if (!"".equals(stringComNo) || !"".equals(stringAcctNoType)) {
      retDoc2M0405 = getSqlDoc2M0405(stringComNo, stringAcctNoType, stringDataLimit, stringSqlAndQ, vectorSql);
    }
    String stringSqlUnion = "";
    String stringSqlAnd = "";
    String stringSqlLikeAnd = "";
    if (vectorSql.size() == 3) {
      stringSqlUnion = ("" + vectorSql.get(0)).trim();
      stringSqlAnd = ("" + vectorSql.get(1)).trim();
      stringSqlLikeAnd = ("" + vectorSql.get(2)).trim();
    }
    if (retDoc2M0405.length == 0 || !"Y".equals(retDoc2M0405[0][3].trim())) {
      // 不限制
      if (!"".equals(stringSqlUnion))
        stringSqlUnion += " UNION ";
      stringSql = stringSqlUnion + "SELECT  DEPT_CD,  DEPT_NAME,  DEPT_CD " + " FROM  FE3D01 " + " WHERE  1=1 " + " AND  LEN(RTRIM(ISNULL(DEPT_CD,'')))  >  4 "
          + " AND  NOT(SUBSTRING(DEPT_CD,4,1) >= 'A'  AND  SUBSTRING(DEPT_CD,4,1) <= 'Z')  " + " AND DEPT_CD  NOT  IN ('034舊K',  '030大MALL',  '032大MALL') "
          + " AND  SUBSTRING(DEPT_CD , 1,3) IN (SELECT  SUBSTRING(GroupType, 1,3) " + " FROM  Doc7M040 " + " WHERE  DepartType  =  'Y') " + stringSqlAnd + stringSqlLikeAnd;
      if ("I".equals(stringInOut)) {
        // 內業
        stringSql += " AND  LEN(RTRIM(ISNULL(DEPT_CD,'')))  =  4 " + " AND  NOT  ((SUBSTRING(DEPT_CD,5,1) >= 'A'  AND  SUBSTRING(DEPT_CD,5,1) <= 'Z')  OR "
            + " (SUBSTRING(DEPT_CD,6,1) >= 'A'  AND  SUBSTRING(DEPT_CD,6,1) <= 'Z'))";
      } else {
        stringSql += " AND  LEN(RTRIM(ISNULL(DEPT_CD,'')))  >  4 " + " AND  ((SUBSTRING(DEPT_CD,5,1) >= 'A'  AND  SUBSTRING(DEPT_CD,5,1) <= 'Z')  OR "
            + " (SUBSTRING(DEPT_CD,6,1) >= 'A'  AND  SUBSTRING(DEPT_CD,6,1) <= 'Z'))";
        if ("01,02,00,".indexOf(stringComNo) != -1) {
          stringSql += " AND  (DEPT_CD  =  '0011R'      OR " + " DEPT_CD  LIKE  '033%'   OR " + " DEPT_CD  LIKE  '133%'   OR " + " DEPT_CD  LIKE  '0322%' OR "
              + " DEPT_CD  LIKE  '0324%' OR " + " DEPT_CD  LIKE  '0328%' OR " + " DEPT_CD  LIKE  '0351%' OR " + " DEPT_CD  LIKE  '0381%') ";
        } else if ("10,12,".indexOf(stringComNo) != -1) {
          stringSql += " AND  (DEPT_CD  =  '0011R'   OR  DEPT_CD  LIKE  '034%' OR DEPT_CD  LIKE  '234%') ";
        }
      }
      stringSql += " ORDER BY  DEPT_CD ";
    } else {
      // 限制
      stringSql = stringSqlUnion;
    }
    if ("SQL".equals(stringReturnType)) {
      retDoc2M0405 = new String[1][1];
      retDoc2M0405[0][0] = stringSql;
    } else {
      retDoc2M0405 = dbDoc.queryFromPool(stringSql);
    }
    return retDoc2M0405;
  }

  public String[][] getSqlDoc2M0405(String stringComNo, String stringAcctNoType, String stringDataLimit, String stringSqlAndQ, Vector vectorSql) throws Throwable {
    String stringDepartNo = "";
    String stringDepartName = "";
    String stringDepartNoSum = "";
    String stringSqlAnd = "";
    String stringSqlLikeAnd = "";
    String stringSqlUnion = "";
    String[] arrayDepartNo = null;
    String[][] retDoc2M0405 = getDoc2M0405(stringComNo, stringAcctNoType, stringDataLimit, stringSqlAndQ);
    //
    if (retDoc2M0405.length == 0)
      return retDoc2M0405;
    //
    stringDepartNoSum = retDoc2M0405[0][2].trim();
    arrayDepartNo = convert.StringToken(stringDepartNoSum, ",");
    for (int intNo = 0; intNo < arrayDepartNo.length; intNo++) {
      stringDepartNo = arrayDepartNo[intNo].trim();
      //
      if (stringDepartNo.indexOf("%") == -1) {
        stringDepartName = getDepartNameFED1006(stringDepartNo);
        if ("".equals(stringDepartName)) {
          stringDepartName = getDepartName(stringDepartNo);
        }
        //
        if (!"".equals(stringSqlUnion))
          stringSqlUnion += " UNION ";
        stringSqlUnion += "SELECT  '" + stringDepartNo + "' AS DEPT_CD,  '" + stringDepartName + "' AS DEPT_NAME,  '" + stringDepartNo + "' AS DEPT_CD ";
        //
        if (!"".equals(stringSqlAnd))
          stringSqlAnd += ", ";
        stringSqlAnd += " '" + stringDepartNo + "' ";
      } else {
        stringSqlLikeAnd += " AND  DEPT_CD  LIKE  '" + stringDepartNo + "' ";
      }

    }
    if (!"".equals(stringSqlAnd))
      stringSqlAnd = " AND DEPT_CD  NOT IN(" + stringSqlAnd + ") ";
    //
    vectorSql.add(stringSqlUnion);
    vectorSql.add(stringSqlAnd);
    vectorSql.add(stringSqlLikeAnd);
    return retDoc2M0405;
  }

  public void getDataLimitAndDepartNoSum(String stringComNo, String stringAcctNoType, String stringDataLimit, String stringSqlAnd, Hashtable hashtableDataLimit,
      Hashtable hashtableDepartNoSum) throws Throwable {
    String stringAcctNoTypeL = "";
    String stringDepartNoSumL = "";
    String stringDataLimitL = "";
    String[][] retDoc2M0405 = getDoc2M0405(stringComNo, stringAcctNoType, stringDataLimit, stringSqlAnd);
    for (int intNo = 0; intNo < retDoc2M0405.length; intNo++) {
      stringAcctNoTypeL = retDoc2M0405[intNo][1].trim();
      stringDepartNoSumL = retDoc2M0405[intNo][2].trim();
      stringDataLimitL = retDoc2M0405[intNo][3].trim();
      //
      hashtableDepartNoSum.put(stringAcctNoTypeL, stringDepartNoSumL);
      hashtableDataLimit.put(stringAcctNoTypeL, stringDataLimitL);
    }
  }

  public String[][] getDoc2M0405(String stringComNo, String stringAcctNoType, String stringDataLimit, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M0405 = null;
    // 0 ComNo 1 AcctNoType 2 DepartNoSum 2 DataLimit
    stringSql = " SELECT  ComNo,  AcctNoType,  DepartNoSum,  DataLimit " + " FROM  Doc2M0405 " + " WHERE  1  = 1 ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo     =  '" + stringComNo + "' ";
    if (!"".equals(stringAcctNoType))
      stringSql += " AND  AcctNoType  =  '" + stringAcctNoType + "' ";
    if (!"".equals(stringDataLimit))
      stringSql += " AND  DataLimit  =  '" + stringDataLimit + "' ";
    if (!"".equals(stringSqlAnd))
      stringSql += stringSqlAnd;
    retDoc2M0405 = dbDoc.queryFromPool(stringSql);
    return retDoc2M0405;
  }

  // 表格 Doc2M041
  public Hashtable getDoc2M041() throws Throwable {
    String stringSql = "";
    String stringAcct = "";
    String stringPosition = "";
    String[][] retDoc2M041 = null;
    Hashtable hashtableDoc2M041 = new Hashtable();
    //
    stringSql = " SELECT  ACCT,  POSITION    FROM  Doc2M041 ";
    retDoc2M041 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc2M041.length; intNo++) {
      stringAcct = retDoc2M041[intNo][0].trim();
      stringPosition = retDoc2M041[intNo][1].trim();
      hashtableDoc2M041.put(stringAcct, stringPosition);
    }
    return hashtableDoc2M041;
  }

  // 表格 Doc2M042
  public Hashtable getDoc2M042() throws Throwable {
    String stringSql = "";
    String stringAcct = "";
    String stringPosition = "";
    String[][] retDoc2M042 = null;
    Hashtable hashtableDoc2M042 = new Hashtable();
    //
    stringSql = " SELECT  ACCT,  POSITION  FROM  Doc2M042 ";
    retDoc2M042 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc2M042.length; intNo++) {
      stringAcct = retDoc2M042[intNo][0].trim();
      stringPosition = retDoc2M042[intNo][1].trim();
      hashtableDoc2M042.put(stringAcct, stringPosition);
    }
    return hashtableDoc2M042;
  }

  public Vector getDoc2M042V() throws Throwable {
    String stringSql = "";
    String stringAcct = "";
    String stringPosition = "";
    String[][] retDoc2M042 = null;
    Vector VectorDoc2M042 = new Vector();
    //
    stringSql = " SELECT  ACCT,  POSITION  FROM  Doc2M042 ";
    retDoc2M042 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc2M042.length; intNo++) {
      stringAcct = retDoc2M042[intNo][0].trim();
      VectorDoc2M042.add(stringAcct);
    }
    return VectorDoc2M042;
  }

  // 表格 Doc2M044
  public String[][] getDoc2M044(String stringComNo, String stringDeptCd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M044 = null;
    // 0 BarCodeStart 1 BarCodeEnd
    stringSql = "SELECT  BarCodeStart,  BarCodeEnd,  DEPT_CD " + " FROM  Doc2M044 " + " WHERE  1=1 ";
    // 公司限定
    if (stringDeptCd.startsWith("023") || stringDeptCd.startsWith("A17") || stringDeptCd.startsWith("021") || stringDeptCd.startsWith("A19")) {
      // 人總室、採購室
      if ("01,12,Z6,".indexOf(stringComNo + ",") == -1) {
        stringComNo = "OTHER";
      }
    } else if (stringDeptCd.startsWith("038") || stringDeptCd.startsWith("B35")) {
      // 不動產
    } else {
      // 營業部
      if ("01,D01,".indexOf(stringComNo + ",") == -1) {
        stringComNo = "OTHER";
      }
    }
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  IN  ('" + stringComNo + "','ALL') ";
    // 部門限定
    // System.out.println("stringDeptCd("+stringDeptCd+")-----------------"+(",023,A17,035,B34,038,B35,".indexOf(stringDeptCd.trim())
    // != -1)) ;
    if (",023,A17,035,B34,038,B35,".indexOf(stringDeptCd.substring(0, 3)) != -1) {
      // System.out.println("不限定部室至科-----------------") ;
      // 營業部、人總室、不動產
      if (!"".equals(stringDeptCd)) {
        if (Character.isDigit(stringDeptCd.charAt(0))) {
          stringSql += " AND  DEPT_CD  LIKE  '" + stringDeptCd.substring(0, 3) + "%' ";
        } else {
          stringSql += " AND  DEPT_CD_NEW  LIKE  '" + stringDeptCd.substring(0, 3) + "%' ";
        }
      }
    } else {
      // 財務室
      // System.out.println("限定部室至科-----------------") ;
      if (!"".equals(stringDeptCd)) {
        if (Character.isDigit(stringDeptCd.charAt(0))) {
          stringSql += " AND  DEPT_CD  =  '" + stringDeptCd + "' ";
        } else {
          stringSql += " AND  DEPT_CD_NEW  =  '" + stringDeptCd + "' ";
        }
      }
    }
    stringSql += " ORDER BY  BarCodeStart ";
    //
    retDoc2M044 = dbDoc.queryFromPool(stringSql);
    return retDoc2M044;
  }

  // 表格 Doc2M045
  public Vector getDoc2M045() throws Throwable {
    String stringSql = "";
    String[][] retDoc2M045 = null;
    Vector vectorCostID = new Vector();
    //
    stringSql = "SELECT  CostID FROM  Doc2M045 ";
    //
    retDoc2M045 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc2M045.length; intNo++) {
      vectorCostID.add(retDoc2M045[intNo][0].trim());
    }
    return vectorCostID;
  }

  // 表格 Doc2M046
  public Vector getDoc2M046(String strngEmployeeNo) throws Throwable {
    return getDoc2M046(strngEmployeeNo, "", "");
  }

  public Vector getDoc2M046(String strngEmployeeNo, String stringUseDate, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M046 = null;
    Vector vectorComNo = new Vector();
    //
    stringSql = "SELECT  DISTINCT  ComNo " + " FROM  Doc2M046 " + " WHERE  ISNULL(ComNo, '') <> '' ";
    if (!"".equals(strngEmployeeNo))
      stringSql += " AND  EmployeeNo  =  '" + strngEmployeeNo + "' ";
    if (!"".equals(stringUseDate)) {
      stringSql += " AND  (UseDateStart = '9999/99/99'  OR UseDateStart <= '" + stringUseDate + "') " + " AND  UseDateEnd    >=  '" + stringUseDate + "' ";
    }
    //
    stringSql += stringSqlAnd + " ORDER BY  ComNo ";
    retDoc2M046 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc2M046.length; intNo++) {
      vectorComNo.add(retDoc2M046[intNo][0].trim());
    }
    return vectorComNo;
  }

  // 表格 Doc2M047
  public boolean isCheckInvoiceDoc2M047OK(String stringInvoiceNoFirst2, String stringACYear, String stringMonth, String stringInvoiceType) throws Throwable {
    String stringSql = "";
    String stringCF = "";
    String[][] retDoc2M047 = null;
    //
    stringSql = " SELECT  TypeHeadA,   TypeHeadB,     TypeHeadC,  TypeHeadD " + " FROM  Doc2M047 " + " WHERE  1=1 ";
    if (!"".equals(stringACYear))
      stringSql += " AND  ACYear  =  " + stringACYear + " ";
    if (!"".equals(stringMonth))
      stringSql += " AND  MonthStart  <=  " + stringMonth + " " + " AND  MonthEnd  >=  " + stringMonth + " ";
    retDoc2M047 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M047.length == 0)
      return true;
    if ("A".equals(stringInvoiceType)) {
      // 甲種：三聯式(電算)A、三聯式收銀機(收銀)B
      stringCF = retDoc2M047[0][0].trim();
    } else if ("B".equals(stringInvoiceType)) {
      // 乙種
      stringCF = retDoc2M047[0][1].trim();
    } else if ("C".equals(stringInvoiceType)) {
      // 丙種
      stringCF = retDoc2M047[0][2].trim();
    } else if ("D".equals(stringInvoiceType)) {
      // 丁種
      stringCF = retDoc2M047[0][3].trim();
    } else if ("ALL".equals(stringInvoiceType)) {
      stringCF = retDoc2M047[0][0].trim() + "," + retDoc2M047[0][1].trim() + retDoc2M047[0][2].trim() + retDoc2M047[0][3].trim();
    }
    if ("".equals(stringCF))
      return true;
    if (stringCF.indexOf(stringInvoiceNoFirst2) == -1)
      return false;
    return true;
  }

  // 表格 Doc2M048
  public String[][] getDoc2m048(String stringCostID, String stringCostID1, String stringDateAC, String stringFactoryNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M048 = null;
    // 0 CostID 1 CostID1 2 LimitDateS 3 LimitDateE 4 FactoryNo 5 RealTotalMoney
    stringSql = " SELECT  CostID,  CostID1,  LimitDateS,  LimitDateE,  FactoryNo,  RealTotalMoney " + " FROM  Doc2M048  " + " WHERE  CostID  =  '" + stringCostID + "' "
        + " AND  CostID1  =  '" + stringCostID1 + "' " + " AND  FactoryNo  =  '" + stringFactoryNo + "' " + " AND  LimitDateS  <=  '" + stringDateAC + "'  AND  LimitDateE  >=  '"
        + stringDateAC + "' ";
    retDoc2M048 = dbDoc.queryFromPool(stringSql);
    return retDoc2M048;
  }

  public double getUseMoneyAboutDoc2M048(String stringCostID, String stringCostID1, String stringLimitDateS, String stringLimitDateE, String stringFactoryNo,
      String stringEDateTime, String stringSign, FargloryUtil exeUtil) throws Throwable {
    String stringSql = "";
    String[][] retDoc = null;
    double doubleUserMoneySum = 0;
    //
    stringLimitDateS = exeUtil.getDateConvertRoc(stringLimitDateS);
    stringLimitDateE = exeUtil.getDateConvertRoc(stringLimitDateE);
    // 請款
    stringSql = " SELECT  SUM(RealTotalMoney) " + " FROM  Doc2M012 " + " WHERE  CostID  =  '" + stringCostID + "' " + " AND  CostID1  =  '" + stringCostID1 + "' "
        + " AND  BarCode  IN  (SELECT  BarCode " + " FROM  Doc2M010 " + " WHERE  CDate  BETWEEN  '" + stringLimitDateS + "'  AND  '" + stringLimitDateE + "' " + " AND  EDateTime  "
        + stringSign + " '" + stringEDateTime + "' " + " AND  PurchaseNoExist  =  'N')" + " AND  (BarCode  IN  (SELECT  BarCode  FROM  Doc2M011  WHERE  FactoryNo  =  '"
        + stringFactoryNo + "' )  OR  " + " BarCode  IN  (SELECT  BarCode  FROM  Doc2M013  WHERE  FactoryNo  =  '" + stringFactoryNo + "' )) ";
    retDoc = dbDoc.queryFromPool(stringSql);
    doubleUserMoneySum = exeUtil.doParseDouble(retDoc[0][0]);
    // 借款
    stringSql = " SELECT  SUM(RealTotalMoney) " + " FROM  Doc6M012 " + " WHERE  CostID  =  '" + stringCostID + "' " + " AND  CostID1  =  '" + stringCostID1 + "' "
        + " AND  BarCode  IN  (SELECT  BarCode " + " FROM  Doc6M010 " + " WHERE  CDate  BETWEEN  '" + stringLimitDateS + "'  AND  '" + stringLimitDateE + "' " + " AND  EDateTime  "
        + stringSign + " '" + stringEDateTime + "' " + " AND  PurchaseNoExist  =  'N' " + " AND  KindNo  = '24' )"
        + " AND  (BarCode  IN  (SELECT  BarCode  FROM  Doc6M011  WHERE  FactoryNo  =  '" + stringFactoryNo + "' )  OR  "
        + " BarCode  IN  (SELECT  BarCode  FROM  Doc6M013  WHERE  FactoryNo  =  '" + stringFactoryNo + "' ) OR " + " BarCode  IN  (SELECT  BarCode  FROM  Doc6M0101 "
        + " WHERE  BorrowNo  IN  ( SELECT    DocNo " + " FROM    Doc6M010 " + " WHERE    KindNo  = '26' "
        + " AND  (BarCode  IN  (SELECT  BarCode  FROM  Doc6M011  WHERE  FactoryNo  =  '" + stringFactoryNo + "' )  OR  "
        + " BarCode  IN  (SELECT  BarCode  FROM  Doc6M013  WHERE  FactoryNo  =  '" + stringFactoryNo + "' )  OR  " + " FactoryNo  =  '" + stringFactoryNo + "' " + ") " + ")" + ")"
        + ") ";
    retDoc = dbDoc.queryFromPool(stringSql);
    doubleUserMoneySum += exeUtil.doParseDouble(retDoc[0][0]);
    return doubleUserMoneySum;
  }

  // 表格 Doc2M049
  public Vector getDoc2M049(String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M049 = null;
    Vector vectorCostID = new Vector();
    //
    stringSql = "SELECT  CostID FROM  Doc2M049 WHERE  1=1 " + stringSqlAnd;
    //
    retDoc2M049 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc2M049.length; intNo++) {
      vectorCostID.add(retDoc2M049[intNo][0].trim());
    }
    return vectorCostID;
  }

  // 表格 Doc2M050
  public String[][] getProjectID1ForDoc2M050(String stringUserID) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M050 = null;
    //
    stringSql = " SELECT  InOut,  ProjectID1 " + " FROM  Doc2M050 " + " WHERE  EMP_NO  =  '" + stringUserID + "' " + " AND  ProjectID1  <>  'A' " + " ORDER BY  InOut ";
    retDoc2M050 = dbDoc.queryFromPool(stringSql);
    return retDoc2M050;
  }

  // 表格 Doc2M051
  // 仲介案別SQL語法
  public String getDoc2M051Sql(String stringProjectID1) throws Throwable {
    String stringSqlAnd = "";
    String stringProjectID1L = "";
    String[][] retDoc2M051 = getDoc2M051("", "A", "");
    for (int intNo = 0; intNo < retDoc2M051.length; intNo++) {
      stringProjectID1L = retDoc2M051[intNo][0].trim();
      //
      if (!"".equals(stringSqlAnd))
        stringSqlAnd += ", ";
      stringSqlAnd += " '" + stringProjectID1L + "' ";
    }
    if (!"".equals(stringSqlAnd))
      stringSqlAnd = " AND  " + stringProjectID1 + " IN  (" + stringSqlAnd + ")";
    return stringSqlAnd;
  }

  public String getDoc2M051SelectSql(String stringProjectID1) throws Throwable {
    return getDoc2M051SelectSql(stringProjectID1, "");
  }

  public String getDoc2M051SelectSql(String stringProjectID1, String stringSqlAndQ) throws Throwable {
    String stringSqlAnd = "";
    String stringProjectID1L = "";
    String[][] retDoc2M051 = getDoc2M051("", "A", stringSqlAndQ);
    for (int intNo = 0; intNo < retDoc2M051.length; intNo++) {
      stringProjectID1L = retDoc2M051[intNo][0].trim();
      //
      if (!"".equals(stringSqlAnd))
        stringSqlAnd += " UNION ";
      stringSqlAnd += " SELECT  '" + stringProjectID1L + "' AS  ProjectID,  '" + stringProjectID1L + "' AS  ProjectID1,  '" + stringProjectID1L + "-" + stringProjectID1L
          + "' AS   PrintOut ";
    }
    return stringSqlAnd;
  }

  public Vector getDoc2M051() throws Throwable {
    return getDoc2M051("");
  }

  public Vector getDoc2M051(String stringSqlAnd) throws Throwable {
    String stringProjectID1L = "";
    String[][] retDoc2M051 = getDoc2M051("", "A", stringSqlAnd);
    Vector vectorProjectID1 = new Vector();
    for (int intNo = 0; intNo < retDoc2M051.length; intNo++) {
      stringProjectID1L = retDoc2M051[intNo][0].trim();
      //
      vectorProjectID1.add(stringProjectID1L);
    }
    return vectorProjectID1;
  }

  public String get053ProjectID1Doc2M051(String stringProjectID1) throws Throwable {
    String stringSqlAnd = "";
    String[][] retDoc2M051 = getDoc2M051(stringProjectID1, "A", stringSqlAnd);
    //
    if (retDoc2M051.length == 0)
      return "";
    //
    stringProjectID1 = retDoc2M051[0][2].trim();
    if ("".equals(stringProjectID1))
      stringProjectID1 = retDoc2M051[0][0].trim();
    return "053" + stringProjectID1;
  }

  public String getProjectID1Doc2M051(String stringProjectID1Sale) throws Throwable {
    String stringSqlAnd = " AND  ProjectID1Sale  =  '" + stringProjectID1Sale.replaceAll("053", "") + "' ";
    String[][] retDoc2M051 = getDoc2M051("", "A", stringSqlAnd);
    //
    if (retDoc2M051.length == 0)
      return "";
    return retDoc2M051[0][0].trim();
  }

  public Hashtable get053ProjectID1HDoc2M051() throws Throwable {
    String stringSqlAnd = "";
    String stringProjectID1 = "";
    String stringProjectID1Sale = "";
    String[][] retDoc2M051 = getDoc2M051("", "A", stringSqlAnd);
    Hashtable hashtableSaleProjectID1 = new Hashtable();
    //
    for (int intNo = 0; intNo < retDoc2M051.length; intNo++) {
      stringProjectID1 = retDoc2M051[intNo][0].trim();
      stringProjectID1Sale = retDoc2M051[intNo][2].trim();
      //
      if ("".equals(stringProjectID1Sale))
        stringProjectID1Sale = stringProjectID1;
      stringProjectID1Sale = "053" + stringProjectID1Sale;
      //
      hashtableSaleProjectID1.put(stringProjectID1, stringProjectID1Sale);
    }
    return hashtableSaleProjectID1;
  }

  public Hashtable getProjectID1HDoc2M051() throws Throwable {
    String stringSqlAnd = "";
    String stringProjectID1 = "";
    String stringProjectID1Sale = "";
    String[][] retDoc2M051 = getDoc2M051("", "A", "");
    Hashtable hashtableProjectID1 = new Hashtable();
    //
    for (int intNo = 0; intNo < retDoc2M051.length; intNo++) {
      stringProjectID1 = retDoc2M051[intNo][0].trim();
      stringProjectID1Sale = retDoc2M051[intNo][2].trim();
      //
      if ("".equals(stringProjectID1Sale))
        stringProjectID1Sale = stringProjectID1;
      //
      hashtableProjectID1.put(stringProjectID1Sale, stringProjectID1);
      hashtableProjectID1.put("053" + stringProjectID1Sale, stringProjectID1);
    }
    return hashtableProjectID1;
  }

  public String[][] getDoc2M051(String stringProjectID1, String stringFunctionType, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringSqlAndL = "";
    String[][] retDoc2M051 = null;
    // 0 ProjectID1 1 FunctionType 2 ProjectID1Sale
    stringSql = " SELECT  ProjectID1,  FunctionType,  ProjectID1Sale " + " FROM  Doc2M051 ";
    if (!"".equals(stringProjectID1)) {
      if (!"".equals(stringSqlAndL))
        stringSqlAndL += " AND ";
      stringSqlAndL += " ProjectID1  =  '" + stringProjectID1 + "' ";
    }
    if (!"".equals(stringFunctionType)) {
      if (!"".equals(stringSqlAndL))
        stringSqlAndL += " AND ";
      stringSqlAndL += "  FunctionType  =  '" + stringFunctionType + "' ";
    }
    if (!"".equals(stringSqlAndL)) {
      stringSql += " WHERE " + stringSqlAndL;
    } else {
      if (stringSqlAnd.trim().toUpperCase().startsWith("AND")) {
        int intPos = stringSqlAnd.toUpperCase().indexOf("AND");
        stringSqlAnd = " WHERE  " + stringSqlAnd.substring(intPos + 3, stringSqlAnd.length());
      }
    }
    stringSql += stringSqlAnd;
    retDoc2M051 = dbDoc.queryFromPool(stringSql);
    return retDoc2M051;
  }

  // 表格 Doc2M070
  public String getInsertDoc2M070Sql(String stringVoucherNo, String stringRecordNo, String stringProjectID1, String stringFactoryNo, String stringBarCode, String stringComNo,
      String stringDocNo, String stringDepartNo, String stringRetainMoney, String stringLastUser, String stringLastDate) throws Throwable {
    String stringSql = " INSERT  INTO  Doc2M070 (VOUCHER_NO,  RecordNo,  ProjectID1,   FactoryNo,       BarCode, "
        + " ComNo,       DocNo,     DepartNo,     RetainMoney,     LastUser, " + " LastDate) " + " VALUES ( '" + stringVoucherNo + "',  " + "  " + stringRecordNo + ",  " + " '"
        + stringProjectID1 + "',  " + " '" + stringFactoryNo + "',  " + " '" + stringBarCode + "',  " + " '" + stringComNo + "',  " + " '" + stringDocNo + "',  " + " '"
        + stringDepartNo + "',  " + "  " + stringRetainMoney + ",  " + " '" + stringLastUser + "',  " + " '" + stringLastDate + "')  ";
    return stringSql;
  }

  public String[][] getDoc2M070(String stringVoucherNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M070 = null;
    // 0 1 BarCode 2 ComNo 3 DocNo 4 DepartNo,
    // 5 RetainMoney 6 ProjectID1 7 FactoryNo 8 LastUser 9 LastDate
    stringSql = "SELECT  '',           BarCode,     ComNo,      DocNo,     DepartNo, " + " RetainMoney,  ProjectID1,  FactoryNo,  LastUser,  LastDate " + " FROM  Doc2M070 "
        + " WHERE  VOUCHER_NO  =  '" + stringVoucherNo + "' " + " ORDER BY  RecordNo ";
    retDoc2M070 = dbDoc.queryFromPool(stringSql);
    return retDoc2M070;
  }

  public String doDeleteDoc2M070(String stringVoucherNo, boolean booleanDB) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M080 = null;
    //
    stringSql = "DELETE  FROM  Doc2M080 " + " WHERE  VOUCHER_NO  =  '" + stringVoucherNo + "' ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  // 表格 Doc2M080
  public String doInsertDoc2M080(String[] arrayData, boolean booleanDB) throws Throwable {
    return doInsertDoc2M080("Z6", arrayData, booleanDB);
  }

  public String doInsertDoc2M080(String stringComNo, String[] arrayData, boolean booleanDB) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M080 = null;
    /*
     * 0 VoucherNo 1 ID_Def 2 BarCode 3 FactoryNo 4 InOut 5 CostID 6 CostID1 7
     * Descript 8 DocNo 9 DocNo1 10 DocNo2 11 DocNo3 12 FutureMoney 13 InvoiceDate
     * 14 InvoiceNo 15 InvoiceMoney 16 InvoiceTax 17 InvoiceTotalMoney 18 Remark 19
     * Status 20 LastUser 21 LastDate 22 BarCodeOrder 23 UseStatus 24 PurchaseNo 25
     * 26 ProjectCd
     */
    stringSql = "INSERT  INTO  Doc2M080 (VOUCHER_NO,    ID_Def,      BarCode,            FactoryNo,    InOut, "
        + " CostID,        CostID1,     Descript,           DocNo,        DocNo1, " + " DocNo2,        DocNo3,      FutureMoney,        InvoiceDate,  InvoiceNo, "
        + " InvoiceMoney,  InvoiceTax,  InvoiceTotalMoney,  Remark,       Status, " + " LastUser,      LastDate,    BarCodeOrder,       UseStatus,    PurchaseNo, "
        + " ProjectCd,     ComNo) " + " VALUES( '" + arrayData[0] + "', " + " " + arrayData[1] + ", " + " '" + arrayData[2] + "', " + " '" + arrayData[3] + "', " + " '"
        + arrayData[4] + "', " + " '" + arrayData[5] + "', " + //
        " '" + arrayData[6] + "', " + " '" + arrayData[7] + "', " + " '" + arrayData[8] + "', " + " '" + arrayData[9] + "', " + " '" + arrayData[10] + "', " + //
        " '" + arrayData[11] + "', " + " '" + arrayData[12] + "', " + " '" + arrayData[13] + "', " + " '" + arrayData[14] + "', " + " " + arrayData[15] + ", " + //
        " " + arrayData[16] + ", " + " " + arrayData[17] + ", " + " '" + arrayData[18] + "', " + " '" + arrayData[19] + "', " + " '" + arrayData[20] + "', " + //
        " '" + arrayData[21] + "', " + " '" + arrayData[22] + "', " + " '" + arrayData[23] + "', " + " '" + arrayData[24] + "', " + " '" + arrayData[26] + "', " + " '"
        + stringComNo + "') ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String doUpdateDoc2M080(String stringID, String stringStatus, String stringBarCode, String stringInvoiceNo, String stringFactoryNo, String stringDocNo, boolean booleanDB)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc2M080 = null;
    //
    stringSql = "UPDATE  Doc2M080  SET  Status  =  '" + stringStatus + "' " + " WHERE  1  =  1 ";
    if (!"".equals(stringID))
      stringSql += " AND  ID  =  '" + stringID + "' ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringInvoiceNo))
      stringSql += " AND  InvoiceNo  =  '" + stringInvoiceNo + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringDocNo))
      stringSql += " AND  DocNo  =  '" + stringDocNo + "' ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String doUpdateDoc2M080(String stringFieldName, String stringFieldValue, String stringID, String stringBarCode, boolean booleanDB) throws Throwable {
    String stringSql = " UPDATE  Doc2M080  SET  " + stringFieldName + "  =  '" + stringFieldValue + "' " + " WHERE  1  =  1 ";
    if (!"".equals(stringID))
      stringSql += " AND  ID  =  " + stringID + " ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String doUpdateDoc2M080LimitBarCodeOrder(String stringFieldName, String stringFieldValue, String stringID, String stringBarCode, boolean booleanDB) throws Throwable {
    return doUpdateDoc2M080LimitBarCodeOrder(stringFieldName, stringFieldValue, stringID, stringBarCode, "Z6", booleanDB);
  }

  public String doUpdateDoc2M080LimitBarCodeOrder(String stringFieldName, String stringFieldValue, String stringID, String stringBarCode, String stringComNo, boolean booleanDB)
      throws Throwable {
    String stringSql = " UPDATE  Doc2M080  SET  " + stringFieldName + "  =  '" + stringFieldValue + "' " + " WHERE  1  =  1 ";
    if (!"".equals(stringID))
      stringSql += " AND  ID  =  " + stringID + " ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCodeOrder  =  '" + stringBarCode + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String doDeleteDoc2M080(String stringBarCode, String stringBarCodeOrder, String stringInvoiceNo, String stringFactoryNo, String stringDocNo, boolean booleanDB)
      throws Throwable {
    return doDeleteDoc2M080(stringBarCode, stringBarCodeOrder, stringInvoiceNo, stringFactoryNo, stringDocNo, "Z6", booleanDB);
  }

  public String doDeleteDoc2M080(String stringBarCode, String stringBarCodeOrder, String stringInvoiceNo, String stringFactoryNo, String stringDocNo, String stringComNo,
      boolean booleanDB) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M080 = null;
    //
    stringSql = "DELETE  FROM  Doc2M080 " + " WHERE  1  =  1 ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringInvoiceNo))
      stringSql += " AND  InvoiceNo  =  '" + stringInvoiceNo + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringDocNo))
      stringSql += " AND  DocNo  =  '" + stringDocNo + "' ";
    if (!"".equals(stringBarCodeOrder))
      stringSql += " AND  BarCodeOrder  =  '" + stringBarCodeOrder + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public int getMaxIDForDoc2M080() throws Throwable {
    String stringSql = "";
    String[][] retDoc2M080 = null;
    //
    stringSql = "SELECT  MAX(ID)  FROM  Doc2M080 ";
    retDoc2M080 = dbDoc.queryFromPool(stringSql);
    return doParseInteger(retDoc2M080[0][0]);
  }

  public String[][] getDoc2M080(String stringBarCode, String stringInvoiceNo, String stringFactoryNo, String stringDocNo, String stringVoucherNo) throws Throwable {
    return getDoc2M080(stringBarCode, stringInvoiceNo, stringFactoryNo, stringDocNo, stringVoucherNo, "");
  }

  public String[][] getDoc2M080(String stringBarCode, String stringInvoiceNo, String stringFactoryNo, String stringDocNo, String stringVoucherNo, String stringSqlAnd)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc2M080 = null;
    /*
     * 1 BarCode, 2 FactoryNo, 3 InOut, 4 CostID, 5 CostID1, // 6 Descript, 7
     * PurchaseNo 8 DocNo, 9 DocNo1, 10 DocNo2 11 DocNo3, 12 FutureMoney 13
     * InvoiceDate, 14 InvoiceNo, 15 InvoiceMoney // 16 InvoiceTax, 17
     * InvoiceTotalMoney, 18 Remark, 19 Status, 20 LastUser, // 21 LastDate, 22
     * ID_Def, 23 VOUCHER_NO, 24 BarCodeOrder 25 UseStatus
     */
    stringSql = "SELECT  '',            BarCode,     FactoryNo,          InOut,        CostID,  " + " CostID1,       Descript,    PurchaseNo,         DocNo,        DocNo1,  "
        + " DocNo2,        DocNo3,      FutureMoney,        InvoiceDate,  InvoiceNo, " + " InvoiceMoney,  InvoiceTax,  InvoiceTotalMoney,  Remark,       Status, "
        + " LastUser,      LastDate,   ID_Def,             VOUCHER_NO,   BarCodeOrder, " + " UseStatus,     ProjectCd " + " FROM  Doc2M080 " + " WHERE  1  =  1 ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringInvoiceNo))
      stringSql += " AND  InvoiceNo  =  '" + stringInvoiceNo + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringDocNo))
      stringSql += " AND  DocNo  =  '" + stringDocNo + "' ";
    if (!"".equals(stringVoucherNo))
      stringSql += " AND  SUBSTRING(VOUCHER_NO, 1,12)  =  '" + stringVoucherNo + "' ";
    if (!"".equals(stringSqlAnd))
      stringSql += stringSqlAnd;
    if ("".equals(stringSqlAnd) || stringSqlAnd.indexOf("ORDER") == -1)
      stringSql += " ORDER BY  ID,  BarCode,  VOUCHER_NO ";
    retDoc2M080 = dbDoc.queryFromPool(stringSql);
    return retDoc2M080;
  }

  public String[][] getDoc2M080(String stringIDDef) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M080 = null;
    /*
     * 1 BarCode, 2 FactoryNo, 3 InOut, 4 CostID, 5 CostID1, // 6 Descript, 7
     * PurchaseNo 8 DocNo, 9 DocNo1, 10 DocNo2 11 DocNo3, 12 FutureMoney 13
     * InvoiceDate, 14 InvoiceNo, 15 InvoiceMoney // 16 InvoiceTax, 17
     * InvoiceTotalMoney, 18 Remark, 19 Status, 20 LastUser, // 21 LastDate, 22
     * ID_Def, 23 VOUCHER_NO, 24 BarCodeOrder 25 UseStatus
     */
    stringSql = "SELECT  '',            BarCode,            FactoryNo,    InOut,         CostID,        CostID1, "
        + " Descript,    PurchaseNo,         DocNo,        DocNo1,        DocNo2, " + " DocNo3,      FutureMoney,        InvoiceDate,  InvoiceNo,     InvoiceMoney, "
        + " InvoiceTax,  InvoiceTotalMoney,  Remark,       Status,        LastUser, " + " LastDate,    ID_Def,             VOUCHER_NO,   BarCodeOrder,  UseStatus"
        + " FROM  Doc2M080 " + " WHERE  1=1 " +
        // " AND Status <> 'Y' " +
        " AND  ID_Def  =  " + stringIDDef + " ";
    stringSql += " ORDER BY  ID,  BarCode,  VOUCHER_NO ";
    retDoc2M080 = dbDoc.queryFromPool(stringSql);
    return retDoc2M080;
  }

  public String[][] getDoc2M080_2(String stringIDDef, String stringRemark, String stringComNo) throws Throwable {
    return getDoc2M080_2(stringIDDef, stringRemark, stringComNo, "");
  }

  public String[][] getDoc2M080_2(String stringIDDef, String stringRemark, String stringComNo, String stringSqlAndQ) throws Throwable {
    String stringSqlAnd = "";
    if ("預估".equals(stringRemark)) {
      stringSqlAnd = " AND  (Remark  LIKE  '預估%' OR  Remark  LIKE  '估列%' OR  Remark  LIKE  '估%') ";
      stringRemark = "";
    } else {
      stringSqlAnd = " AND  Status  <>  'Y' ";
    }
    return getDoc2M080(stringIDDef, stringRemark, stringComNo, stringSqlAnd + stringSqlAndQ);
  }

  public String[][] getDoc2M080(String stringIDDef, String stringRemark, String stringSqlAnd) throws Throwable {
    return getDoc2M080(stringIDDef, stringRemark, "Z6", stringSqlAnd);
  }

  public String[][] getDoc2M080(String stringIDDef, String stringRemark, String stringComNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M080 = null;
    /*
     * 1 BarCode, 2 FactoryNo, 3 InOut, 4 CostID, 5 CostID1, // 6 Descript, 7
     * PurchaseNo 8 DocNo, 9 DocNo1, 10 DocNo2 // 11 DocNo3, 12 FutureMoney 13
     * InvoiceDate, 14 InvoiceNo, 15 InvoiceMoney // 16 InvoiceTax, 17
     * InvoiceTotalMoney, 18 Remark, 19 Status, 20 LastUser, // 21 LastDate, 22
     * ID_Def, 23 VOUCHER_NO, 24 BarCodeOrder 25 UseStatus
     */
    stringSql = "SELECT  '',            BarCode,            FactoryNo,    InOut,         CostID,        CostID1, "
        + " Descript,    PurchaseNo,         DocNo,        DocNo1,        DocNo2, " + " DocNo3,      FutureMoney,        InvoiceDate,  InvoiceNo,     InvoiceMoney, "
        + " InvoiceTax,  InvoiceTotalMoney,  Remark,       Status,        LastUser, " + " LastDate,    ID_Def,             VOUCHER_NO,   BarCodeOrder,  UseStatus"
        + " FROM  Doc2M080 " + " WHERE  ID_Def  =  " + stringIDDef + " ";
    if (!"".equals(stringRemark))
      stringSql += " AND  Remark  LIKE  '" + stringRemark + "%' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    stringSql += stringSqlAnd + " ORDER BY  ID,  BarCode,  VOUCHER_NO ";
    retDoc2M080 = dbDoc.queryFromPool(stringSql);
    return retDoc2M080;
  }

  public String[][] getDoc2M080LimitVoucherNo(String stringKey) throws Throwable {
    return getDoc2M080LimitVoucherNo("Z6", stringKey);
  }

  public String[][] getDoc2M080LimitVoucherNo(String stringComNo, String stringKey) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M080 = null;
    /*
     * 1 BarCode, 2 FactoryNo, 3 InOut, 4 CostID, 5 CostID1, // 6 Descript, 7
     * PurchaseNo 8 DocNo, 9 DocNo1, 10 DocNo2 11 DocNo3, 12 FutureMoney 13
     * InvoiceDate, 14 InvoiceNo, 15 InvoiceMoney // 16 InvoiceTax, 17
     * InvoiceTotalMoney, 18 Remark, 19 Status, 20 LastUser, // 21 LastDate, 22
     * ID_Def, 23 VOUCHER_NO 24 BarCodeOrder 25 UseStatus 26 ProjectCd 27 ID
     */
    stringSql = "SELECT  '',                      BarCode,            FactoryNo,          InOut,         CostID,        CostID1, "
        + " Descript,                PurchaseNo,         DocNo,         DocNo1,        DocNo2, "
        + " DocNo3,                  FutureMoney,        InvoiceDate,   InvoiceNo,     InvoiceMoney, "
        + " InvoiceTax,              InvoiceTotalMoney,  Remark,        Status,        LastUser, "
        + " LastDate,                   ID_Def,             VOUCHER_NO,    BarCodeOrder,  UseStatus," + " ProjectCd,               ID " + " FROM  Doc2M080 "
        + " WHERE  Status  <>  'Y' " + " AND  VOUCHER_NO  LIKE  '" + stringKey + "%' " + " AND  ComNo  =  '" + stringComNo + "' ";
    stringSql += " ORDER BY  ID,  BarCode,  VOUCHER_NO ";
    retDoc2M080 = dbDoc.queryFromPool(stringSql);
    return retDoc2M080;
  }

  public boolean isStatusYDoc2M080(String stringIDDef) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M080 = null;
    //
    stringSql = "SELECT  BarCode" + " FROM  Doc2M080 " + " WHERE  Status  =  'Y' " + " AND  ID_Def  =  " + stringIDDef + " ";
    retDoc2M080 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M080.length > 0)
      return true;
    return false;
  }

  // 表格 Doc2M090
  public String doUpdateForDoc2M090(String stringFieldName, String stringFieldValue, String stringID, boolean booleanDB) throws Throwable {
    String stringSql = "";
    String stringStatus = "";
    //
    stringSql = "UPDATE  Doc2M090  SET  " + stringFieldName + "  =  '" + stringFieldValue + "' " + " WHERE  id  =  " + stringID + " ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String getMaxIDForDoc2M090() throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return getMaxIDUnionDoc("Doc2M090", exeUtil);
  }

  public String[][] getDoc2M090(String stringID, String stringBarCode, String stringYEAR, String stringDocNo1, String stringDocNo2, String stringDocNo3, String stringStatus,
      String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M090 = null;
    // 0 ID 1 BarCode 2 CDate 3 YEAR 4 CTime
    // 5 ComNo 6 EmployeeNo 7 DepartNo 8 KindNo 9 DocNo1
    // 10 DocNo2 11 DocNo3 12 Descript 13 Remark 14 Status
    // 15 UseStatus
    stringSql = "SELECT  ID,      BarCode,     CDate,     YEAR,    CTime, " + " ComNo,   EmployeeNo,  DepartNo,  KindNo,  DocNo1, "
        + " DocNo2,  DocNo3,      Descript,  Remark,  Status," + " UseStatus " + " FROM  Doc2M090  " + "WHERE  1=1 ";
    if (!"".equals(stringID))
      stringSql += " AND  ID  =  " + stringID + " ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringYEAR))
      stringSql += " AND  YEAR  =  '" + stringYEAR + "' ";
    if (!"".equals(stringDocNo1))
      stringSql += " AND  DocNo1  =  '" + stringDocNo1 + "' ";
    if (!"".equals(stringDocNo2))
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' ";
    if (!"".equals(stringDocNo3))
      stringSql += " AND  DocNo3  =  '" + stringDocNo3 + "' ";
    if (!"".equals(stringStatus))
      stringSql += " AND  Status  =  '" + stringStatus + "' ";
    if ("".equals(stringSqlAnd))
      stringSql += " ORDER BY  ID ";
    stringSql += stringSqlAnd;
    //
    retDoc2M090 = dbDoc.queryFromPool(stringSql);
    return retDoc2M090;
  }

  // 表格 Doc2M091
  public String[][] getDoc2M091(String stringID, String stringInvoiceNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M091 = null;
    // 0 ID 1 FactoryNo 2 InvoiceKind 3 InvoiceDate 4 InvoiceNo
    // 5 InvoiceMoney 6 InvoiceTax 7 InvoiceTotalMoney 8 InvoiceTaxType
    stringSql = "SELECT  ID,            FactoryNo,   InvoiceKind,        InvoiceDate,  InvoiceNo, " + " InvoiceMoney,  InvoiceTax,  InvoiceTotalMoney,  InvoiceTaxType "
        + " FROM  Doc2M091  " + " WHERE  1=1 ";
    if (!"".equals(stringID))
      stringSql += " AND  ID  =  " + stringID + " ";
    if (!"".equals(stringInvoiceNo))
      stringSql += " AND  InvoiceNo  =  '" + stringInvoiceNo + "' ";
    if ("".equals(stringSqlAnd))
      stringSql += " ORDER BY  RecordNo ";
    stringSql += stringSqlAnd;
    //
    retDoc2M091 = dbDoc.queryFromPool(stringSql);
    return retDoc2M091;
  }

  // 表格 Doc2M092
  public double getRealTotalMoneySumDoc2M092(String stringInOut, String stringDepartNo, String stringProjectID1, String stringCostID, String stringCostID1, String stringSqlAnd)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc2M092 = null;
    // 0 ID 1 RecordNo 2 InOut 3 DepartNo 4 ProjectID
    // 5 ProjectID1 6 CostID 7 CostID1 8 RealMoney 9 RealTotalMoney
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  Doc2M092  " + "WHERE  1=1 ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    stringSql += stringSqlAnd;
    //
    retDoc2M092 = dbDoc.queryFromPool(stringSql);
    return doParseDouble(retDoc2M092[0][0].trim());
  }

  public String[][] getDoc2M092(String stringID, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1, String stringCostID,
      String stringCostID1, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M092 = null;
    // 0 ID 1 RecordNo 2 InOut 3 DepartNo 4 ProjectID
    // 5 ProjectID1 6 CostID 7 CostID1 8 RealMoney 9 RealTotalMoney
    stringSql = "SELECT  ID,          RecordNo,   InOut,      DepartNo,    ProjectID, " + " ProjectID1,  CostID,     CostID1,    RealMoney,   RealTotalMoney " + " FROM  Doc2M092  "
        + "WHERE  1=1 ";
    if (!"".equals(stringID))
      stringSql += " AND  ID  =  " + stringID + " ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    if ("".equals(stringSqlAnd))
      stringSql += " ORDER BY  RecordNo ";
    stringSql += stringSqlAnd;
    //
    retDoc2M092 = dbDoc.queryFromPool(stringSql);
    return retDoc2M092;
  }

  // 表格 Doc2M093
  public String[][] getDoc2M093(String stringID, String stringFactoryNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M093 = null;
    // 0 ID 1 FactoryNo 2 ReceiptKind 3 ReceiptMoney 4 ReceiptTax
    // 5 ReceiptTotalMoney 6 ReceiptTaxType
    stringSql = "SELECT  ID,                 FactoryNo,             ReceiptKind,      ReceiptMoney,    ReceiptTax, " + " ReceiptTotalMoney,  ReceiptTaxType" + " FROM  Doc2M093  "
        + " WHERE  1=1 ";
    if (!"".equals(stringID))
      stringSql += " AND  ID  =  " + stringID + " ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    if ("".equals(stringSqlAnd))
      stringSql += " ORDER BY  RecordNo ";
    stringSql += stringSqlAnd;
    //
    retDoc2M093 = dbDoc.queryFromPool(stringSql);
    return retDoc2M093;
  }

  // 表格 Doc2M097
  public String[][] getDoc2M097(String stringID, String stringFactoryNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringSqlAnd)
      throws Throwable {
    return getDoc2M097(stringID, stringFactoryNo, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "Z6", stringSqlAnd);
  }

  public String[][] getDoc2M097(String stringID, String stringFactoryNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringComNo,
      String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M097 = null;
    // 0 ID 1 RecordNo 2 PurchaseNo1 3 PurchaseNo2 4 PurchaseNo3
    // 5 FactoryNo 6 PurchaseMoney
    stringSql = "SELECT  M97.ID,         M97.RecordNo,      M97.PurchaseNo1,      M97.PurchaseNo2,    M97.PurchaseNo3, " + " M97.FactoryNo,  M97.PurchaseMoney"
        + " FROM  Doc2M097 M97,  Doc2M090 M90  " + "WHERE  M90.ID  =  M97.ID " + " AND  Status  = 'U' ";
    if (!"".equals(stringID))
      stringSql += " AND  M90.ID  =  " + stringID + " ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  M97.FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringPurchaseNo1))
      stringSql += " AND  M97.PurchaseNo1  =  '" + stringPurchaseNo1 + "' ";
    if (!"".equals(stringPurchaseNo2))
      stringSql += " AND  M97.PurchaseNo2  =  '" + stringPurchaseNo2 + "' ";
    if (!"".equals(stringPurchaseNo3))
      stringSql += " AND  M97.PurchaseNo3  =  '" + stringPurchaseNo3 + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  M90.ComNo  =  '" + stringComNo + "' ";
    if ("".equals(stringSqlAnd))
      stringSql += " ORDER BY  M97.RecordNo ";
    stringSql += stringSqlAnd;
    //
    retDoc2M097 = dbDoc.queryFromPool(stringSql);
    return retDoc2M097;
  }

  public String[][] getUseDoc2M097(String stringID, String stringFactoryNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringComNo,
      String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M097 = null;
    // 0 ID 1 RecordNo 2 PurchaseNo1 3 PurchaseNo2 4 PurchaseNo3
    // 5 FactoryNo 6 PurchaseMoney
    stringSql = "SELECT  M97.ID,         M97.RecordNo,      M97.PurchaseNo1,      M97.PurchaseNo2,    M97.PurchaseNo3, " + " M97.FactoryNo,  M97.PurchaseMoney"
        + " FROM  Doc2M097 M97,  Doc2M090 M90  " + "WHERE  M90.ID  =  M97.ID ";
    if (!"".equals(stringID))
      stringSql += " AND  M90.ID  =  " + stringID + " ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  M97.FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringPurchaseNo1))
      stringSql += " AND  M97.PurchaseNo1  =  '" + stringPurchaseNo1 + "' ";
    if (!"".equals(stringPurchaseNo2))
      stringSql += " AND  M97.PurchaseNo2  =  '" + stringPurchaseNo2 + "' ";
    if (!"".equals(stringPurchaseNo3))
      stringSql += " AND  M97.PurchaseNo3  =  '" + stringPurchaseNo3 + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  M90.ComNo  =  '" + stringComNo + "' ";
    if ("".equals(stringSqlAnd))
      stringSql += " ORDER BY  M97.RecordNo ";
    stringSql += stringSqlAnd;
    //
    retDoc2M097 = dbDoc.queryFromPool(stringSql);
    return retDoc2M097;
  }

  // 表格 Doc3M010
  public boolean isExistDocNoCheckForDoc3M010(String stringDocNo1, String stringDocNo2, String stringDocNo3, String stringKindNo, String stringComNo, String stringBarCode)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    String[][] retDoc3M010 = null;
    String[][] retDoc6M010 = null;
    String[][] retDoc1M030 = null;
    // 請購
    stringSql = "SELECT  BarCode " + " FROM  Doc3M010 " + " WHERE  DocNo1  =  '" + stringDocNo1 + "' " + " AND  DocNo2  =  '" + stringDocNo2 + "' " + " AND  DocNo3  =  '"
        + stringDocNo3 + "' " + " AND  KindNo  =  '" + stringKindNo + "' " + " AND  BarCode  <>  '" + stringBarCode + "' " + " AND  ComNo  =  '" + stringComNo + "' ";
    retDoc3M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc3M010.length != 0)
      return false;
    return true;
  }

  public boolean isExistDocNoCheckForDoc3M010(String stringDocNo1, String stringDocNo2, String stringDocNo3, String stringDocNo4, String stringKindNo, String stringComNo,
      String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    String[][] retDoc3M010 = null;
    String[][] retDoc6M010 = null;
    String[][] retDoc1M030 = null;
    // 請購
    stringSql = "SELECT  BarCode " + " FROM  Doc3M010 " + " WHERE  DocNo1  =  '" + stringDocNo1 + "' " + " AND  DocNo2  =  '" + stringDocNo2 + "' " + " AND  DocNo3  =  '"
        + stringDocNo3 + "' " + " AND  DocNo4  =  '" + stringDocNo4 + "' " + " AND  KindNo  =  '" + stringKindNo + "' " + " AND  BarCode  <>  '" + stringBarCode + "' "
        + " AND  ComNo  =  '" + stringComNo + "' ";
    retDoc3M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc3M010.length != 0)
      return false;
    return true;
  }

  public String[][] getDoc3M010(String stringDocNo1, String stringDocNo2, String stringDocNo3, String stringKindNo, String stringComNo, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    String[][] retDoc3M010 = null;
    String[][] retDoc6M010 = null;
    String[][] retDoc1M030 = null;
    // 請購
    // 0 FactoryNo 1 CostID 2 CostID1 3 PurchaseMoney 4 Unipurchase 5 BarCode
    stringSql = "SELECT  FactoryNo,  CostID,  CostID1,  PurchaseMoney,  Unipurchase,  BarCode,  DocNo4 " + " FROM  Doc3M010 " + " WHERE  DocNo1  =  '" + stringDocNo1 + "' "
        + " AND  DocNo2  =  '" + stringDocNo2 + "' " + " AND  DocNo3  =  '" + stringDocNo3 + "' " + " AND  KindNo  =  '" + stringKindNo + "' " +
        // " AND BarCode <> '" + stringBarCode + "' " +
        " AND  ComNo  =  '" + stringComNo + "' ";
    retDoc3M010 = dbDoc.queryFromPool(stringSql);
    return retDoc3M010;
  }

  public String[][] getDoc3M010(String stringDocNo1, String stringDocNo2, String stringDocNo3, String stringDocNo4, String stringKindNo, String stringComNo, String stringBarCode)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    String[][] retDoc3M010 = null;
    String[][] retDoc6M010 = null;
    String[][] retDoc1M030 = null;
    // 請購
    // 0 FactoryNo 1 CostID 2 CostID1 3 PurchaseMoney 4 Unipurchase 5 BarCode
    stringSql = "SELECT  FactoryNo,  CostID,  CostID1,  PurchaseMoney,  Unipurchase,  BarCode " + " FROM  Doc3M010 " + " WHERE  DocNo1  =  '" + stringDocNo1 + "' "
        + " AND  DocNo2  =  '" + stringDocNo2 + "' " + " AND  DocNo3  =  '" + stringDocNo3 + "' " + " AND  DocNo4  =  '" + stringDocNo4 + "' " + " AND  KindNo  =  '" + stringKindNo
        + "' " +
        // " AND BarCode <> '" + stringBarCode + "' " +
        " AND  ComNo  =  '" + stringComNo + "' ";
    retDoc3M010 = dbDoc.queryFromPool(stringSql);
    return retDoc3M010;
  }

  // 合約金額
  public String getPurchaseMoney(String stringCom, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3) throws Throwable {
    String stringSql = "";
    String stringPurchaseMoney = "0";
    String[][] retDoc3M010 = null;
    //
    stringSql = "SELECT  PurchaseMoney " + " FROM  Doc3M010 " + " WHERE  DocNo1  =  '" + stringPurchaseNo1 + "' " + " AND  DocNo2  =  '" + stringPurchaseNo2 + "' "
        + " AND  DocNo3  =  '" + stringPurchaseNo3 + "' " + " AND  ComNo  =  '" + stringCom + "' ";
    retDoc3M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc3M010.length != 0)
      stringPurchaseMoney = retDoc3M010[0][0].trim();
    return stringPurchaseMoney;
  }

  public String getPurchaseMoney(String stringCom, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4) throws Throwable {
    String stringSql = "";
    String stringPurchaseMoney = "0";
    String[][] retDoc3M010 = null;
    //
    stringSql = "SELECT  PurchaseMoney " + " FROM  Doc3M010 " + " WHERE  DocNo1  =  '" + stringPurchaseNo1 + "' " + " AND  DocNo2  =  '" + stringPurchaseNo2 + "' "
        + " AND  DocNo3  =  '" + stringPurchaseNo3 + "' " + " AND  DocNo4  =  '" + stringPurchaseNo4 + "' " + " AND  ComNo  =  '" + stringCom + "' ";
    retDoc3M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc3M010.length != 0)
      stringPurchaseMoney = retDoc3M010[0][0].trim();
    return stringPurchaseMoney;
  }

  // 統購回傳 true，否則，回傳 false。
  public boolean getUniPurchase(String stringCom, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M010 = null;
    boolean booleanUniPurchase = false;
    //
    stringSql = "SELECT  Unipurchase " + " FROM  Doc3M010 " + " WHERE  DocNo1  =  '" + stringPurchaseNo1 + "' " + " AND  DocNo2  =  '" + stringPurchaseNo2 + "' "
        + " AND  DocNo3  =  '" + stringPurchaseNo3 + "' " + " AND  ComNo  =  '" + stringCom + "' ";
    retDoc3M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc3M010.length != 0 && "Y".equals(retDoc3M010[0][0].trim()))
      booleanUniPurchase = true;
    return booleanUniPurchase;
  }

  public boolean getUniPurchase(String stringCom, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M010 = null;
    boolean booleanUniPurchase = false;
    //
    stringSql = "SELECT  Unipurchase " + " FROM  Doc3M010 " + " WHERE  DocNo1  =  '" + stringPurchaseNo1 + "' " + " AND  DocNo2  =  '" + stringPurchaseNo2 + "' "
        + " AND  DocNo3  =  '" + stringPurchaseNo3 + "' " + " AND  DocNo4  =  '" + stringPurchaseNo4 + "' " + " AND  ComNo  =  '" + stringCom + "' ";
    retDoc3M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc3M010.length != 0 && "Y".equals(retDoc3M010[0][0].trim()))
      booleanUniPurchase = true;
    return booleanUniPurchase;
  }

  public String[][] getDoc3M010(String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringComNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M010 = null;
    // 0 ComNo 1 DepartNo 2 FactoryNo 3 PayCondition1 4 PayCondition2
    // 5 PurchaseMoney 6 Unipurchase 7 Descript 8 BarCode 9 CostID
    // 10 CostID1 11 ExistPurchaseMoney 12 FactoryNo 13 ContractAffirmDate 14
    // ExistDate
    stringSql = "SELECT  ComNo,          '',                  FactoryNo,  PayCondition1,       PayCondition2, "
        + " PurchaseMoney,  Unipurchase,         Descript ,  BarCode,             CostID, " + " CostID1,        ExistPurchaseMoney,  FactoryNo,  ContractAffirmDate,  ExistDate, "
        + " DocNo4 " + " FROM  Doc3M010 " + " WHERE  DocNo1  =  '" + stringPurchaseNo1 + "' " + " AND  DocNo2  =  '" + stringPurchaseNo2 + "' " + " AND  DocNo3  =  '"
        + stringPurchaseNo3 + "' " + " AND  ComNo  =  '" + stringComNo + "' ";
    retDoc3M010 = dbDoc.queryFromPool(stringSql);
    return retDoc3M010;
  }

  public String[][] getDoc3M010(String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4, String stringComNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M010 = null;
    // 0 ComNo 1 DepartNo 2 FactoryNo 3 PayCondition1 4 PayCondition2
    // 5 PurchaseMoney 6 Unipurchase 7 Descript 8 BarCode 9 CostID
    // 10 CostID1 11 ExistPurchaseMoney 12 FactoryNo 13 ContractAffirmDate
    stringSql = "SELECT  ComNo,          '',                  FactoryNo,  PayCondition1,       PayCondition2, "
        + " PurchaseMoney,  Unipurchase,         Descript ,  BarCode,             CostID, " + " CostID1,        ExistPurchaseMoney,  FactoryNo,  ContractAffirmDate,  ExistDate "
        + " FROM  Doc3M010 " + " WHERE  DocNo1  =  '" + stringPurchaseNo1 + "' " + " AND  DocNo2  =  '" + stringPurchaseNo2 + "' " + " AND  DocNo3  =  '" + stringPurchaseNo3 + "' "
        + " AND  DocNo4  =  '" + stringPurchaseNo4 + "' " + " AND  ComNo  =  '" + stringComNo + "' ";
    retDoc3M010 = dbDoc.queryFromPool(stringSql);
    return retDoc3M010;
  }

  public String[][] getDoc3M010ForFactoryNo(String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringFactoryNo, String stringComNo)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc3M010 = null;
    // 0 ComNo 1 DepartNo 2 FactoryNo 3 PayCondition1 4 PayCondition2
    // 5 PurchaseMoney 6 Unipurchase 7 Descript 8 BarCode 9 CostID
    // 10 CostID1 11 ExistPurchaseMoney 12 FactoryNo 13 ContractAffirmDate
    stringSql = "SELECT  ComNo,          '',                  FactoryNo,    PayCondition1,       PayCondition2, "
        + " PurchaseMoney,  Unipurchase,         Descript ,    BarCode,             CostID, "
        + " CostID1,        ExistPurchaseMoney,  FactoryNo,    ContractAffirmDate,  ExistDate " + " FROM  Doc3M010 " + " WHERE  DocNo1     =  '" + stringPurchaseNo1 + "' "
        + " AND  DocNo2     =  '" + stringPurchaseNo2 + "' " + " AND  DocNo3     =  '" + stringPurchaseNo3 + "' " + " AND  FactoryNo  =  '" + stringFactoryNo + "' "
        + " AND  ComNo      =  '" + stringComNo + "' ";
    retDoc3M010 = dbDoc.queryFromPool(stringSql);
    return retDoc3M010;
  }

  public String[][] getDoc3M010(String stringPurchaseNo, String stringComNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M010 = null;
    // 0 ComNo 1 DepartNo 2 FactoryNo 3 PayCondition1 4 PayCondition2
    // 5 PurchaseMoney 6 Unipurchase 7 Descript 8 BarCode 9 CostID
    // 10 CostID1 11 ExistPurchaseMoney 12 FactoryNo 13 DocNo1 14 DocNo2
    // 15 DocNo3 16 ContractAffirmDate
    stringSql = "SELECT  ComNo,          '',                  FactoryNo,    PayCondition1,  PayCondition2, "
        + " PurchaseMoney,  Unipurchase,         Descript ,    BarCode,        CostID, " + " CostID1,        ExistPurchaseMoney,  FactoryNo,    DocNo1,         DocNo2, "
        + " DocNo3,         ContractAffirmDate " + " FROM  Doc3M010 " + " WHERE  DocNo  =  '" + stringPurchaseNo + "' " + " AND  ComNo  =  '" + stringComNo + "' ";
    retDoc3M010 = dbDoc.queryFromPool(stringSql);
    return retDoc3M010;
  }

  public void doUpdateCloseDateForDoc3M010(String stringCloseDate, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringPurchaseNo4) throws Throwable {
    String stringSql = "";
    String stringPurchaseMoney = "0";
    String[][] retDoc3M010 = null;
    //
    stringSql = "UPDATE  Doc3M010  SET   CloseDate  =  '" + stringCloseDate + "' " + " WHERE  DocNo1  =  '" + stringPurchaseNo1 + "' " + " AND  DocNo2  =  '" + stringPurchaseNo2
        + "' " + " AND  DocNo3  =  '" + stringPurchaseNo3 + "' " + " AND  DocNo4  =  '" + stringPurchaseNo4 + "' " + " AND  ComNo   =  '" + stringComNo + "' ";
    dbDoc.execFromPool(stringSql);
  }

  public void doUpdateForDoc3M010(String stringPayCondition1, String stringPayCondition2, String stringEditClose, String stringComNo, String stringPurchaseNo1,
      String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4) throws Throwable {
    String stringSql = "";
    String stringPurchaseMoney = "0";
    String[][] retDoc3M010 = null;
    //
    stringSql = "UPDATE  Doc3M010  SET   PayCondition1  =  '" + stringPayCondition1 + "', " + " PayCondition2  =  '" + stringPayCondition2 + "', " + " EditClose  =  '"
        + stringEditClose + "' " + " WHERE  DocNo1  =  '" + stringPurchaseNo1 + "' " + " AND  DocNo2  =  '" + stringPurchaseNo2 + "' " + " AND  DocNo3  =  '" + stringPurchaseNo3
        + "' " + " AND  DocNo4  =  '" + stringPurchaseNo4 + "' " + " AND  ComNo  =  '" + stringComNo + "' ";
    dbDoc.execFromPool(stringSql);
  }

  public boolean isPurchaseNoExist(String stringProjectID1, String stringDateStart) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M011 = null;
    boolean booleanExist = true;
    //
    stringSql = "SELECT  BarCode " + " FROM  Doc3M011 " + " WHERE  CDate  >=  '" + stringDateStart + "' "
        + " AND  BarCode  IN  (SELECT  BarCode  FROM  Doc3M014  WHERE  ProjectID1  =  '" + stringProjectID1 + "') ";
    retDoc3M011 = dbDoc.queryFromPool(stringSql);
    if (retDoc3M011.length == 0)
      booleanExist = false;
    return booleanExist;
  }

  // 表格 Doc3M011
  public void doUpdateStatusForDoc3M011(String stringFieldName, String stringFieldValue, String stringBarCode) throws Throwable {
    doUpdateUnion("Doc3M011", stringFieldName, stringFieldValue, stringBarCode);
  }

  public String getMaxIDForDoc3M011() throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return getMaxIDUnionDoc("Doc3M011", exeUtil);
  }

  public String[][] getDoc3M011(String stringBarCode) throws Throwable {
    return getDoc3M011Union("Doc3M011", stringBarCode);
  }

  public String[][] getDoc3M011Union(String stringTable, String stringBarCode) throws Throwable {
    String stringSql = "";
    String stringDocType = "Doc3M011".equals(stringTable) ? ", '' " : ", DocType ";
    String[][] retDoc3M011 = null;
    // 0 ComNo 1 DocNo 2 CDate 3 NeedDate 4 ApplyType
    // 5 Analysis 6 DepartNo 7 EDateTime 8 CDate 9 PrintCount
    // 10 CheckAdd 11 CheckAddDescript 12 ExistDate 13 PayConditionCross 14
    // UNDERGO_WRITE
    // 15 Table1Source
    stringSql = " SELECT  ComNo,              DocNo,               CDate,            NeedDate,            ApplyType, "
        + " Analysis,           DepartNo,            EDateTime,        CDate,               PrintCount, "
        + " CheckAdd,           CheckAddDescript,    ExistDate,        PayConditionCross,   UNDERGO_WRITE, " + " Table1Source " + stringDocType + " FROM  " + stringTable + " "
        + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  UNDERGO_WRITE  <>  'X' ";
    retDoc3M011 = dbDoc.queryFromPool(stringSql);
    return retDoc3M011;
  }

  public String[][] getDoc3M011(String stringComNo, String stringDocNo1, String stringDocNo2, String stringDocNo3, String stringSqlAnd) throws Throwable {
    return getDoc3M011Union("Doc3M011", stringComNo, stringDocNo1, stringDocNo2, stringDocNo3, stringSqlAnd);
  }

  public String[][] getDoc3M011Union(String stringTable, String stringComNo, String stringDocNo1, String stringDocNo2, String stringDocNo3, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringDocType = "Doc3M011".equals(stringTable) ? " '' " : " DocType ";
    String[][] retDoc3M011 = null;
    // 0 ComNo 1 DocNo 2 CDate 3 NeedDate 4 ApplyType
    // 5 Analysis 6 DepartNo 7 EDateTime 8 CDate 9 PrintCount
    // 10 CheckAdd 11 CheckAddDescript 12 BarCode 13 ID 14 PayConditionCross
    // 15 UNDERGO_WRITE 16 ExistDate 17 DocType 18 LabelKind
    stringSql = " SELECT  ComNo,                 DocNo,                        CDate,                     NeedDate,      ApplyType, "
        + " Analysis,                DepartNo,                  EDateTime,              CDate,            PrintCount, "
        + " CheckAdd,             CheckAddDescript,    BarCode,                   ID,                  PayConditionCross, " + " UNDERGO_WRITE,  ExistDate,         " + stringDocType
        + ",     LabelKind " + " FROM  " + stringTable + " " + " WHERE  1  =  1 ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringDocNo1))
      stringSql += " AND  DocNo1  =  '" + stringDocNo1 + "' ";
    if (!"".equals(stringDocNo2))
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' ";
    if (!"".equals(stringDocNo3))
      stringSql += " AND  DocNo3  =  '" + stringDocNo3 + "' ";
    if ("".equals(stringSqlAnd))
      stringSql += " ORDER BY  DocNo1,  DocNo2,  DocNo3 ";
    retDoc3M011 = dbDoc.queryFromPool(stringSql + stringSqlAnd);
    return retDoc3M011;
  }

  // 表格 Doc3M011_History
  // 廢止(改用下列程式代替)
  public String doInsertForDoc3M011History(String stringIdRef, String stringEDateTime, String stringEmployeeNo, String stringDepartNo, String stringActionStatus,
      String stringRemark, boolean booleanDB) throws Throwable {
    return doInsertForDoc3M011History(stringIdRef, stringEDateTime, stringEmployeeNo, stringDepartNo, stringActionStatus, stringRemark, "Z6", "A", booleanDB);
  }

  // 廢止(改用下列程式代替)
  public String doInsertForDoc3M011History(String stringIdRef, String stringEDateTime, String stringEmployeeNo, String stringDepartNo, String stringActionStatus,
      String stringRemark, String stringComNo, boolean booleanDB) throws Throwable {
    return doInsertForDoc3M011History(stringIdRef, stringEDateTime, stringEmployeeNo, stringDepartNo, stringActionStatus, stringRemark, stringComNo, "A", booleanDB);
  }

  public String doInsertForDoc3M011History(String stringIdRef, String stringEDateTime, String stringEmployeeNo, String stringDepartNo, String stringActionStatus,
      String stringRemark, String stringComNo, String stringSourceType, boolean booleanDB) throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  INTO  Doc3M011_History(ID_ref,      EDateTime,     EmployeeNo,  DepartNo,  actionStatus, " + " ComNo,    Remark,         SourceType) " + " VALUES( "
        + stringIdRef + ", " + " '" + stringEDateTime + "' , " + " '" + stringEmployeeNo + "' , " + " '" + stringDepartNo + "' , " + " '" + stringActionStatus + "' , " + " '"
        + stringComNo + "' , " + " N'" + stringRemark + "' , " + " '" + stringSourceType + "')  ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String[][] getDoc3M011History(String stringIdRef) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M011History = null;
    //
    stringSql = "SELECT  EDateTime " + " FROM  Doc3M011_History " + " WHERE  ID_ref  =  " + stringIdRef + " " + " ORDER BY  EDateTime ";
    retDoc3M011History = dbDoc.queryFromPool(stringSql);
    return retDoc3M011History;
  }

  // 表格 Doc3M011_USE
  public double getUSEMoney(String stringComNo, String stringDocNo, String stringFactoryNo, FargloryUtil exeUtil) throws Throwable {
    return getUSEMoney(stringComNo, stringDocNo, stringFactoryNo, "", exeUtil);
  }

  public double getUSEMoney(String stringComNo, String stringDocNo, String stringFactoryNo, String stringSqlAnd, FargloryUtil exeUtil) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M011Use = null;
    double doubleMoneySum = 0;
    //
    stringSql = "SELECT  SUM(USEMoney) " + " FROM  Doc3M011_USE " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  DocNo  =  '" + stringDocNo + "' " + " AND  FactoryNo  =  '"
        + stringFactoryNo + "' ";
    retDoc3M011Use = dbDoc.queryFromPool(stringSql);
    doubleMoneySum += exeUtil.doParseDouble(retDoc3M011Use[0][0].trim());
    stringSql = "SELECT  SUM(RequestPrice) " + " FROM  Doc5M02722 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  PurchaseNo  =  '" + stringDocNo + "' "
        + " AND  FactoryNo  =  '" + stringFactoryNo + "' " + stringSqlAnd;
    retDoc3M011Use = dbDoc.queryFromPool(stringSql);
    doubleMoneySum += exeUtil.doParseDouble(retDoc3M011Use[0][0].trim());
    return exeUtil.doParseDouble(convert.FourToFive("" + doubleMoneySum, 0));
  }

  // 表格 Doc3M011_EmployeeNo
  /*
   * public String getNotCanUseCostIDSql (String stringOriEmployeeNo) throws
   * Throwable{ String stringCostIDPower = "" ; String[][] retDoc3M011EmployeeNo =
   * getDoc3M011EmployeeNo("09",
   * " AND  EmployeeNo  =  '"+stringOriEmployeeNo+"' ") ; //
   * if(retDoc3M011EmployeeNo.length > 0) { for(int intNo=0 ;
   * intNo<retDoc3M011EmployeeNo.length ; intNo++) { stringCostIDPower +=
   * ","+retDoc3M011EmployeeNo[intNo][2].trim()+"," ; } } // return
   * getAllCostIDSql (stringCostIDPower) ; } public String getAllCostIDSql (String
   * stringCostIDPower) throws Throwable{ String stringSqlCostID = "" ; String
   * stringCostID = "" ; String[] arrayCostID = null ; String[][]
   * retDoc3M011EmployeeNo = null ; // retDoc3M011EmployeeNo =
   * getDoc3M011EmployeeNo("09", "") ; if(retDoc3M011EmployeeNo.length > 0) {
   * for(int intNoS=0 ; intNoS<retDoc3M011EmployeeNo.length ; intNoS++) {
   * arrayCostID = convert.StringToken(retDoc3M011EmployeeNo[intNoS][2].trim(),
   * ",") ; for(int intNo=0 ; intNo<arrayCostID.length ; intNo++) { stringCostID =
   * arrayCostID[intNo].trim() ; if("".equals(stringCostID)) continue ; //
   * if(stringCostIDPower.indexOf(stringCostID) != -1) continue ; //
   * if(!"".equals(stringSqlCostID)) stringSqlCostID += ",  " ; stringSqlCostID +=
   * " '"+stringCostID+"' " ; } } } // return stringSqlCostID ; }
   */
  public String[][] getDoc3M011EmployeeNo(String FunctionType, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M011EmployeeNo = null;
    //
    stringSql = " SELECT  EmployeeNo,  FunctionType,  Remark " + " FROM  Doc3M011_EmployeeNo ";
    if (!"".equals(FunctionType)) {
      stringSql += " WHERE  FunctionType  =  '" + FunctionType + "'  " + stringSqlAnd;
    } else {
      if (!"".equals(stringSqlAnd)) {
        if (stringSqlAnd.trim().toUpperCase().startsWith("AND")) {
          int intPos = stringSqlAnd.toUpperCase().indexOf("AND");
          stringSqlAnd = " WHERE  " + stringSqlAnd.substring(intPos + 3, stringSqlAnd.length());
        }
        stringSql += stringSqlAnd;
      } else {
        stringSql += " ORDER BY  EmployeeNo, FunctionType ";
      }
    }
    retDoc3M011EmployeeNo = dbDoc.queryFromPool(stringSql);
    return retDoc3M011EmployeeNo;
  }

  public Vector getEmployeeNoDoc3M011(String FunctionType, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringEmployeeNo = "";
    String[][] retDoc3M011EmployeeNo = getDoc3M011EmployeeNo(FunctionType, stringSqlAnd);
    Vector vectorEmployeeNo = new Vector();
    //
    for (int intNo = 0; intNo < retDoc3M011EmployeeNo.length; intNo++) {
      stringEmployeeNo = retDoc3M011EmployeeNo[intNo][0].trim();
      if (vectorEmployeeNo.indexOf(stringEmployeeNo) != -1)
        continue;
      vectorEmployeeNo.add(stringEmployeeNo);
    }
    return vectorEmployeeNo;
  }

  // 表格 Doc3M012
  public boolean isExistDoc3M012(String stringCostID, String stringCostID1) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M012 = null;
    //
    stringSql = "SELECT  CostID " + " FROM  Doc3M012 " + " WHERE  CostID    =  '" + stringCostID + "' " + " AND  CostID1  =  '" + stringCostID1 + "' ";
    retDoc3M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc3M012.length > 0)
      return true;
    return false;
  }

  public String[][] getDoc3M012(String stringBarCode) throws Throwable {
    return getDoc3M012Union("Doc3M012", stringBarCode, "");
  }

  public String[][] getDoc3M012(String stringBarCode, String stringFactoryNo) throws Throwable {
    return getDoc3M012Union("Doc3M012", stringBarCode, stringFactoryNo);
  }

  public String[][] getDoc3M012Union(String stringTable, String stringBarCode, String stringFactoryNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M012 = null;
    /*
     * 0 CostID 1 CostID1 2 ClassName 3 Descript 4 Unit / 5 BudgetNum 6 ActualNum 7
     * HistoryPrice 8 FactoryNo 9 ActualPrice / 10 PurchaseMoney 11 ApplyMoney 12
     * PurchaseMoney 13 ProjectID1 14 ClassNameDescript 15 MonthCount 16 FILTER
     */
    stringSql = " SELECT  CostID,                CostID1,          ClassName,           Descript,         Unit, "
        + " BudgetNum,        ActualNum,     HistoryPrice,        FactoryNo,     ActualPrice, "
        + " PurchaseMoney,  ApplyMoney,   PurchaseMoney,    ProjectID1,    ClassNameDescript, " + " MonthCount,       FILTER " + " FROM  " + stringTable + " "
        + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    stringSql += " ORDER BY  RecordNo ";
    retDoc3M012 = dbDoc.queryFromPool(stringSql);
    return retDoc3M012;
  }

  public String[][] getDoc3M012Union(boolean booleanSource, String stringComNo, String stringDocNo, String stringFactoryNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringTable11 = booleanSource ? "Doc3M011" : "Doc5M011";
    String stringTable12 = booleanSource ? "Doc3M012" : "Doc5M012";
    String[][] retDoc3M012 = null;
    /*
     * 0 CostID 1 CostID1 2 ClassName 3 Descript 4 Unit / 5 BudgetNum 6 ActualNum 7
     * HistoryPrice 8 FactoryNo 9 ActualPrice / 10 PurchaseMoney 11 ApplyMoney 12
     * PurchaseMoney 13 ProjectID1 14 ClassNameDescript
     */
    stringSql = " SELECT  M12.CostID,         M12.CostID1,      M12.ClassName,      M12.Descript,    M12.Unit, "
        + " M12.BudgetNum,      M12.ActualNum,    M12.HistoryPrice,   M12.FactoryNo,   M12.ActualPrice, "
        + " M12.PurchaseMoney,  M12.ApplyMoney,   M12.PurchaseMoney,  M12.ProjectID1,  M12.ClassNameDescript,  MonthCount " + " FROM  " + stringTable12 + " M12,  " + stringTable11
        + " M11 " + " WHERE  M11.BarCode  =  M12.BarCode " + " AND  M11.ComNo  =  '" + stringComNo + "' " + " AND  M11.DocNo  =  '" + stringDocNo + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  M12.FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringSqlAnd)) {
      stringSql += stringSqlAnd;
    } else {
      stringSql += " ORDER BY  RecordNo ";
    }
    retDoc3M012 = dbDoc.queryFromPool(stringSql);
    return retDoc3M012;
  }

  public String[][] getDoc3M012(String stringCostID, String stringCostID1, String stringClassName, String stringClassNameDescript) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M012 = null;
    /*
     * 0 CostID 1 CostID1 2 ClassName 3 Descript 4 Unit / 5 BudgetNum 6 ActualNum 7
     * HistoryPrice 8 FactoryNo 9 ActualPrice / 10 PurchaseMoney 11 ApplyMoney 12
     * PurchaseMoney 13 ProjectID1 14 ClassNameDescript
     */
    stringSql = " SELECT  CostID,         CostID1,     ClassName,      Descript,    Unit, " + " BudgetNum,      ActualNum,   HistoryPrice,   FactoryNo,   ActualPrice, "
        + " PurchaseMoney,  ApplyMoney,  PurchaseMoney,  ProjectID1,  ClassNameDescript " + " FROM  Doc3M012 " + " WHERE  1=1 ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    if (!"".equals(stringClassName))
      stringSql += " AND  ClassName  =  '" + stringClassName + "' ";
    if (!"".equals(stringClassNameDescript))
      stringSql += " AND  ClassNameDescript  =  '" + stringClassNameDescript + "' ";
    stringSql += " ORDER BY  RecordNo ";
    retDoc3M012 = dbDoc.queryFromPool(stringSql);
    return retDoc3M012;
  }

  public String doUpdateDoc3M012(String stringCostID, String stringCostID1, String stringFieldName, String stringFieldValue, String stringFieldValueOld, boolean booleanDB)
      throws Throwable {
    String stringSql = "";
    //
    stringSql = "UPDATE  Doc3M012  SET  " + stringFieldName + "  =  '" + stringFieldValue + "' " + " WHERE  CostID  =  '" + stringCostID + "' " + " AND  CostID1  =  '"
        + stringCostID1 + "' " + " AND " + stringFieldName + "  =  '" + stringFieldValueOld + "' ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  // 表格 Doc3M013
  public String[][] getDoc3M013(String stringBarCode, String stringFactoryNo) throws Throwable {
    return getDoc3M013Union("Doc3M013", stringBarCode, stringFactoryNo);
  }

  public String[][] getDoc3M013Union(String stringTable, String stringBarCode, String stringFactoryNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M013 = null;
    // 0 FactoryNo 1 PurchaseSumMoney 2 PercentRate 3 MonthNum 4 PurchaseMoney
    // 5 PayCondition1 6 PayCondition2 7 Descript 8 NoUseRealMoney 9 RecordNo
    stringSql = " SELECT  FactoryNo,          PurchaseSumMoney,       PercentRate,  MonthNum,             PurchaseMoney, "
        + " PayCondition1,    PayCondition2,                Descript,         NoUseRealMoney,   RecordNo " + " FROM  " + stringTable + " " + " WHERE  BarCode  =  '" + stringBarCode
        + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    stringSql += " ORDER BY FactoryNo, RecordNo ";
    retDoc3M013 = dbDoc.queryFromPool(stringSql);
    return retDoc3M013;
  }

  public String[][] getDoc3M013(String stringComNo, String stringDocNo, String stringFactoryNo) throws Throwable {
    return getDoc3M013Union(stringComNo, stringDocNo, stringFactoryNo, true);
  }

  public String[][] getDoc3M013Union(String stringComNo, String stringDocNo, String stringFactoryNo, boolean booleanTable) throws Throwable {
    String stringSql = "";
    String stringTable1 = booleanTable ? "Doc3M013" : "Doc5M013";
    String stringTable2 = booleanTable ? "Doc3M011" : "Doc5M011";
    String[][] retDoc3M013 = null;
    // 0 FactoryNo 1 PurchaseSumMoney 2 PercentRate 3 MonthNum 4 PurchaseMoney
    // 5 PayCondition1 6 PayCondition2 7 Descript 8 NoUseRealMoney
    stringSql = " SELECT  FactoryNo,              PurchaseSumMoney,   PercentRate,  MonthNum,      PurchaseMoney, "
        + " PayCondition1,          PayCondition2,      Descript,     NoUseRealMoney" + " FROM  " + stringTable1 + " " + " WHERE  BarCode IN  (SELECT BarCode " + " FROM  "
        + stringTable2 + " " + " WHERE  ComNo =  '" + stringComNo + "' " + " AND  DocNo  =  '" + stringDocNo + "') ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    stringSql += " ORDER BY FactoryNo, RecordNo ";
    retDoc3M013 = dbDoc.queryFromPool(stringSql);
    return retDoc3M013;
  }

  // 表格 Doc3M0130
  public String[][] getDoc3M0130Union(String stringComNo, String stringDocNo, String stringFactoryNo, String stringSqlAnd, boolean booleanTable) throws Throwable {
    String stringSql = "";
    String stringTable1 = booleanTable ? "" : "Doc5M0130";
    String stringTable2 = booleanTable ? "Doc3M011" : "Doc5M011";
    String stringTable3 = booleanTable ? "Doc3M012" : "Doc5M012";
    String[][] retDoc3M013 = null;
    // 0 RecordNo 1 PayCondition1 2 PayCondition2 3 ActualNum 4 PurchaseMoney
    // 5 RetainPercent 6 NoUseRealMoney 7 FactoryNo 8 ExistDate
    stringSql = " SELECT    M13.RecordNo,       M13.PayCondition1,   M13.PayCondition2,  M13.ActualNum,   M13.PurchaseMoney, "
        + " M13.RetainPercent,  M13.NoUseRealMoney,  M12.FactoryNo,      M13.ExistDate " + " FROM  " + stringTable1 + " M13,  " + stringTable2 + " M11,  " + stringTable3 + " M12"
        + " WHERE  M13.BarCode   =  M12.BarCode " + " AND  M13.BarCode   =  M11.BarCode " + " AND  M12.RecordNo  =  M13.RecordNo " + " AND  M11.ComNo     =  '" + stringComNo + "' "
        + " AND  M11.DocNo     =  '" + stringDocNo + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  M12.FactoryNo  =  '" + stringFactoryNo + "' ";
    stringSql += stringSqlAnd;
    stringSql += " ORDER BY M12.FactoryNo, M13.RecordNo,  M13.RecordNo130 ";
    retDoc3M013 = dbDoc.queryFromPool(stringSql);
    return retDoc3M013;
  }

  public String[][] getDoc3M0130Union(String stringBarCode, String stringFactoryNo, String stringSqlAnd, boolean booleanTable) throws Throwable {
    String stringSql = "";
    String stringTable1 = booleanTable ? "" : "Doc5M0130";
    String stringTable2 = booleanTable ? "Doc3M011" : "Doc5M011";
    String stringTable3 = booleanTable ? "Doc3M012" : "Doc5M012";
    String[][] retDoc3M013 = null;
    // 0 RecordNo 1 PayCondition1 2 PayCondition2 3 ActualNum 4 PurchaseMoney
    // 5 RetainPercent 6 NoUseRealMoney 7 FactoryNo 8 ExistDate
    stringSql = " SELECT    M13.RecordNo,       M13.PayCondition1,   M13.PayCondition2,  M13.ActualNum,   M13.PurchaseMoney, "
        + " M13.RetainPercent,  M13.NoUseRealMoney,  M12.FactoryNo,      M13.ExistDate " + " FROM  " + stringTable1 + " M13,  " + stringTable2 + " M11,  " + stringTable3 + " M12"
        + " WHERE  M13.BarCode   =  M12.BarCode " + " AND  M13.BarCode   =  M11.BarCode " + " AND  M12.RecordNo  =  M13.RecordNo " + " AND  M11.BarCode   =  '" + stringBarCode
        + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  M12.FactoryNo  =  '" + stringFactoryNo + "' ";
    stringSql += stringSqlAnd;
    stringSql += " ORDER BY M12.FactoryNo, M13.RecordNo,  M13.RecordNo130 ";
    retDoc3M013 = dbDoc.queryFromPool(stringSql);
    return retDoc3M013;
  }

  // 表格 Doc3M014
  public double getNoUseRealMoneySumDoc3M014(String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1, String stringCostID, String stringCostID1,
      String stringDocNo, String stringSqlAnd) throws Throwable {
    return getNoUseRealMoneySumDoc3M014Union(stringInOut, stringDepartNo, stringProjectID, stringProjectID1, stringCostID, stringCostID1, stringDocNo, stringSqlAnd, true);
  }

  public double getNoUseRealMoneySumDoc3M014Union(String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1, String stringCostID,
      String stringCostID1, String stringDocNo, String stringSqlAnd, boolean booleanSource) throws Throwable {
    double doubleNoUseRealMoneySum = 0;
    String stringSql = "";
    String stringSqlAndL = "";
    String stringTable14 = booleanSource ? "Doc3M014" : "Doc5M014";
    String stringTable11 = booleanSource ? "Doc3M011" : "Doc5M011";
    String[][] retDoc3M014 = null;
    //
    stringSql = "SELECT  SUM(NoUseRealMoney) " + " FROM  " + stringTable14 + " ";
    if (!"".equals(stringInOut)) {
      if (!"".equals(stringSqlAndL))
        stringSqlAndL += " AND ";
      stringSqlAndL += " InOut  =  '" + stringInOut + "' ";
    }
    if (!"".equals(stringDepartNo)) {
      if (!"".equals(stringSqlAndL))
        stringSqlAndL += " AND ";
      stringSqlAndL += " DepartNo  =  '" + stringDepartNo + "' ";
    }
    if (!"".equals(stringProjectID)) {
      if (!"".equals(stringSqlAndL))
        stringSqlAndL += " AND ";
      stringSqlAndL += " ProjectID  =  '" + stringProjectID + "' ";
    }
    if (!"".equals(stringProjectID1)) {
      if (!"".equals(stringSqlAnd))
        stringSqlAndL += " AND ";
      stringSqlAndL += " ProjectID1  =  '" + stringProjectID1 + "' ";
    }
    if (!"".equals(stringCostID)) {
      if (!"".equals(stringSqlAndL))
        stringSqlAndL += " AND ";
      stringSqlAndL += " CostID  =  '" + stringCostID + "' ";
    }
    if (!"".equals(stringCostID1)) {
      if (!"".equals(stringSqlAndL))
        stringSqlAndL += " AND ";
      stringSqlAndL += " CostID1  =  '" + stringCostID1 + "' ";
    }
    if (!"".equals(stringDocNo)) {
      if (!"".equals(stringSqlAndL))
        stringSqlAndL += " AND ";
      stringSqlAndL += " BarCode  IN  (SELECT BarCode FROM  " + stringTable11 + " WHERE  DocNo  =  '" + stringDocNo + "') ";
    }
    if (!"".equals(stringSqlAndL)) {
      stringSqlAndL = " WHERE  " + stringSqlAndL;
    } else {
      if (stringSqlAnd.trim().toUpperCase().startsWith("AND")) {
        int intPos = stringSqlAnd.toUpperCase().indexOf("AND");
        stringSqlAnd = " WHERE  " + stringSqlAnd.substring(intPos + 3, stringSqlAnd.length());
      }
    }
    stringSql += stringSqlAndL + "" + stringSqlAnd;
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    doubleNoUseRealMoneySum = doParseDouble(retDoc3M014[0][0].trim());
    return doubleNoUseRealMoneySum;
  }

  // 引用：
  public double getNoUseRealMoneySumDoc3M014(String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1, String stringCostID, String stringCostID1,
      String stringDocNo, String stringNoUseFactoryNo, String stringStatus, String stringSqlAnd) throws Throwable {
    double doubleNoUseRealMoneySum = 0;
    String stringSql = "";
    String[][] retDoc3M014 = null;
    //
    stringSql = "SELECT  SUM(NoUseRealMoney) " + " FROM  Doc3M014 " + " WHERE  1=1 ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    if (!"".equals(stringNoUseFactoryNo))
      stringSql += " AND  NoUseFactoryNo  =  '" + stringNoUseFactoryNo + "' ";
    if (!"".equals(stringStatus))
      stringSql += " AND  Status  =  '" + stringStatus + "' ";
    if (!"".equals(stringDocNo))
      stringSql += " AND  BarCode  =  (SELECT BarCode FROM  Doc3M011 WHERE  DocNo  =  '" + stringDocNo + "') ";
    stringSql += stringSqlAnd;
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    doubleNoUseRealMoneySum = doParseDouble(retDoc3M014[0][0].trim());
    return doubleNoUseRealMoneySum;
  }

  // 引用：新請購單之使用狀態
  public String[][] getNoUseRealMoneySumDoc3M014(String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1, String stringCostID,
      String stringCostID1, String stringDocNo, String stringNoUseFactoryNo, String stringComNo, String stringSelectList, String stringSqlAnd) throws Throwable {
    return getNoUseRealMoneySumDoc3M014Union(stringInOut, stringDepartNo, stringProjectID, stringProjectID1, stringCostID, stringCostID1, stringDocNo, stringNoUseFactoryNo,
        stringComNo, stringSelectList, stringSqlAnd, true);
  }

  public String[][] getNoUseRealMoneySumDoc3M014Union(String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1, String stringCostID,
      String stringCostID1, String stringDocNo, String stringNoUseFactoryNo, String stringComNo, String stringSelectList, String stringSqlAnd, boolean booleanSource)
      throws Throwable {
    double doubleNoUseRealMoneySum = 0;
    String stringSql = "";
    String stringTable14 = booleanSource ? "Doc3M014" : "Doc5M014";
    String stringTable11 = booleanSource ? "Doc3M011" : "Doc5M011";
    String[][] retDoc3M014 = null;
    //
    if (!"".equals(stringSelectList)) {
      stringSql = " SELECT " + stringSelectList + " ";
    } else {
      stringSql = "SELECT  SUM(NoUseRealMoney) ";
    }
    stringSql += " FROM  " + stringTable14 + " M14,  " + stringTable11 + " M11 " + " WHERE  M14.BarCode  =  M11.BarCode ";
    if (!"".equals(stringInOut))
      stringSql += " AND  M14.InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  M14.DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  M14.ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  M14.ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  M14.CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  M14.CostID1  =  '" + stringCostID1 + "' ";
    if (!"".equals(stringNoUseFactoryNo))
      stringSql += " AND  M14.NoUseFactoryNo  =  '" + stringNoUseFactoryNo + "' ";
    if (!"".equals(stringDocNo))
      stringSql += " AND  M11.DocNo  =  '" + stringDocNo + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  M11.ComNo  =  '" + stringComNo + "' ";
    stringSql += stringSqlAnd;
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    return retDoc3M014;
  }

  public double getRealMoneySumDoc3M014(String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1, String stringCostID, String stringCostID1,
      String stringSqlAnd) throws Throwable {
    double doubleRealMoneySum = 0;
    String stringSql = "";
    String[][] retDoc3M014 = null;
    //
    stringSql = "SELECT  SUM(RealMoney - NoUseRealMoney) " + " FROM  Doc3M014 " + " WHERE  BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc3M011  WHERE  UNDERGO_WRITE  =  'X') "
        + stringSqlAnd;
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    doubleRealMoneySum = doParseDouble(retDoc3M014[0][0].trim());
    return doubleRealMoneySum;
  }

  public double getRealMoneySumForDoc3M014(String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1, String stringSqlAnd, String[][] retDoc7M011)
      throws Throwable {
    double doubleRealMoneySum = 0;
    String stringSql = "";
    String stringSqlTemp = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String[][] retDoc3M014 = null;
    //
    stringSql = "SELECT  SUM(RealMoney-NoUseRealMoney) " + " FROM  Doc3M014 " + " WHERE  BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc3M011  WHERE  UNDERGO_WRITE  =  'X') ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringSqlAnd))
      stringSql += stringSqlAnd;
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    doubleRealMoneySum = doParseDouble(retDoc3M014[0][0].trim());
    return doubleRealMoneySum;
  }

  public double getBudgetMoneySumForDoc3M014(String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1, String stringSqlAnd,
      String[][] retDoc7M011) throws Throwable {
    // stringTableType A 行銷 B 管理費用
    Farglory.util.FargloryUtil exeUtil = new Farglory.util.FargloryUtil();
    return getBudgetMoneySumForDoc3M014(stringInOut, stringDepartNo, stringProjectID, stringProjectID1, stringSqlAnd, retDoc7M011, "A", exeUtil);
  }

  public double getBudgetMoneySumForDoc3M014(String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1, String stringSqlAnd,
      String[][] retDoc7M011, String stringTableType, FargloryUtil exeUtil) throws Throwable {
    double doubleRealMoneySum = 0;
    String stringSql = "";
    String stringSqlTemp = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String[][] retDoc3M014 = null;
    //
    String stringTable11 = ("A".equals(stringTableType)) ? "Doc3M011" : "Doc5M011";
    //
    stringSql = "SELECT  SUM(BudgetMoney) " + " FROM  Doc3M014 " + " WHERE  BarCode  NOT  IN  (SELECT  BarCode  FROM  " + stringTable11 + "  WHERE  UNDERGO_WRITE  =  'X') "
        + stringSqlAnd;
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    doubleRealMoneySum = exeUtil.doParseDouble(retDoc3M014[0][0].trim());
    return doubleRealMoneySum;
  }

  public double getRealMoneySumDoc3M014(String stringProjectID1, String stringEDateTime, String stringDateStart, String stringDateEnd, String stringUnderGOWrite,
      String[][] retDoc7M011) throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String stringCostID = "";
    String stringCostID1 = "";
    double doubleRealMoneySum = 0;
    String[][] retDoc3M014 = null;
    //
    stringSql = "SELECT  SUM(RealMoney-NoUseRealMoney) " + " FROM  Doc3M014 " + " WHERE  ProjectID1  =  '" + stringProjectID1 + "' "
        + " AND  BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc3M011  WHERE  UNDERGO_WRITE  =  'X') ";
    if (!"".equals(stringEDateTime)) {
      stringSql += " AND  ID  NOT  IN  (SELECT ID FROM  Doc3M011  WHERE  EDateTime  ='" + stringEDateTime + "')";
    }
    if (!"".equals(stringDateStart) || !"".equals(stringDateEnd)) {
      if (!"".equals(stringDateStart)) {
        stringSqlTemp = " CDate  >=  '" + stringDateStart + "' ";
      }
      if (!"".equals(stringDateEnd)) {
        if (!"".equals(stringSqlTemp))
          stringSqlTemp += " AND ";
        stringSqlTemp += " CDate  <=  '" + stringDateEnd + "' ";
      }
      stringSql += "AND  ID  IN  (SELECT  ID " + " FROM  Doc3M011 " + " WHERE  1  =  1 ";
      if (!"".equals(stringUnderGOWrite))
        stringSql += " AND  UNDERGO_WRITE  =  '" + stringUnderGOWrite + "' ";
      stringSql += " AND  (" + stringSqlTemp + ")) ";

    }
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    doubleRealMoneySum = doParseDouble(retDoc3M014[0][0].trim());
    return doubleRealMoneySum;
  }

  public double getBudgetMoneySumDoc3M014(String stringProjectID1, String stringDepartNo, String stringEDateTime, String stringDateStart, String stringDateEnd,
      String stringUnderGOWrite, String[][] retDoc7M011) throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String stringCostID = "";
    String stringCostID1 = "";
    double doubleRealMoneySum = 0;
    String[][] retDoc3M014 = null;
    //
    stringSql = "SELECT  SUM(BudgetMoney) " + " FROM  Doc3M014 " + " WHERE  ProjectID1  =  '" + stringProjectID1 + "' "
        + " AND  BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc3M011  WHERE  UNDERGO_WRITE  =  'X') ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringEDateTime))
      stringSql += " AND  ID  NOT  IN  (SELECT ID FROM  Doc3M011  WHERE  EDateTime  ='" + stringEDateTime + "')";
    if (!"".equals(stringDateStart) || !"".equals(stringDateEnd)) {
      if (!"".equals(stringDateStart)) {
        stringSqlTemp = " CDate  >=  '" + stringDateStart + "' ";
      }
      if (!"".equals(stringDateEnd)) {
        if (!"".equals(stringSqlTemp))
          stringSqlTemp += " AND ";
        stringSqlTemp += " CDate  <=  '" + stringDateEnd + "' ";
      }
      stringSql += "AND  ID  IN  (SELECT  ID " + " FROM  Doc3M011 " + " WHERE  1  =  1 ";
      if (!"".equals(stringUnderGOWrite))
        stringSql += " AND  UNDERGO_WRITE  =  '" + stringUnderGOWrite + "' ";
      stringSql += " AND  (" + stringSqlTemp + ")) ";

    }
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    doubleRealMoneySum = doParseDouble(retDoc3M014[0][0].trim());
    return doubleRealMoneySum;
  }

  public double getRealMoneySumDoc3M014(String stringProjectID1, String stringDepartNo, String stringEDateTime, String stringDateStart, String stringDateEnd,
      String stringUnderGOWrite, String[][] retDoc7M011) throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String stringCostID = "";
    String stringCostID1 = "";
    double doubleRealMoneySum = 0;
    String[][] retDoc3M014 = null;
    //
    stringSql = "SELECT  SUM(RealMoney-NoUseRealMoney) " + " FROM  Doc3M014 " + " WHERE  ProjectID1  =  '" + stringProjectID1 + "' "
        + " AND  BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc3M011  WHERE  UNDERGO_WRITE  =  'X') ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringEDateTime))
      stringSql += " AND  ID  NOT  IN  (SELECT ID FROM  Doc3M011  WHERE  EDateTime  ='" + stringEDateTime + "')";
    if (!"".equals(stringDateStart) || !"".equals(stringDateEnd)) {
      if (!"".equals(stringDateStart)) {
        stringSqlTemp = " CDate  >=  '" + stringDateStart + "' ";
      }
      if (!"".equals(stringDateEnd)) {
        if (!"".equals(stringSqlTemp))
          stringSqlTemp += " AND ";
        stringSqlTemp += " CDate  <=  '" + stringDateEnd + "' ";
      }
      stringSql += "AND  ID  IN  (SELECT  ID " + " FROM  Doc3M011 " + " WHERE  1  =  1 ";
      if (!"".equals(stringUnderGOWrite))
        stringSql += " AND  UNDERGO_WRITE  =  '" + stringUnderGOWrite + "' ";
      stringSql += " AND  (" + stringSqlTemp + ")) ";

    }
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    doubleRealMoneySum = doParseDouble(retDoc3M014[0][0].trim());
    return doubleRealMoneySum;
  }

  public double getRealMoneySum2Doc3M014(String stringProjectID1, String stringEDateTime, String stringDateStart, String stringDateEnd, boolean booleanUnderGOWrite,
      String[][] retDoc7M011) throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String stringCostID = "";
    String stringCostID1 = "";
    double doubleRealMoneySum = 0;
    String[][] retDoc3M014 = null;
    //
    stringSql = "SELECT  SUM(RealMoney-NoUseRealMoney) " + " FROM  Doc3M014 " + " WHERE  ProjectID1  =  '" + stringProjectID1 + "' "
        + " AND  BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc3M011  WHERE  UNDERGO_WRITE  =  'X') ";
    if (!"".equals(stringEDateTime))
      stringSql += " AND  ID  NOT  IN  (SELECT ID FROM  Doc3M011  WHERE  EDateTime  ='" + stringEDateTime + "')";
    if (!"".equals(stringDateStart) || !"".equals(stringDateEnd) || booleanUnderGOWrite) {
      if (!"".equals(stringDateStart)) {
        stringSqlTemp = " CDate  >=  '" + stringDateStart + "' ";
      }
      if (!"".equals(stringDateEnd)) {
        if (!"".equals(stringSqlTemp))
          stringSqlTemp += " AND ";
        stringSqlTemp += " CDate  <=  '" + stringDateEnd + "' ";
      }
      stringSql += "AND  ID  IN  (SELECT  ID " + " FROM  Doc3M011 " + " WHERE  1  =  1 ";
      if (booleanUnderGOWrite)
        stringSql += " AND  (UNDERGO_WRITE  =  'Y' OR UNDERGO_WRITE  =  'C') ";
      if (!"".equals(stringDateStart) || !"".equals(stringDateEnd))
        stringSql += " AND  (" + stringSqlTemp + ")) ";
      else
        stringSql += ") ";
    }
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    doubleRealMoneySum = doParseDouble(retDoc3M014[0][0].trim());
    return doubleRealMoneySum;
  }

  public String[][] getProjectID1ForDoc3M014(String stringDateStart, String stringDateEnd, String StringUnderGOWrite, String stringFunctionType) throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String[][] retDoc3M014 = null;
    //
    stringSql = "SELECT  DISTINCT  ProjectID1 " + " FROM  Doc3M014 " + " WHERE  1  =  1 "
        + " AND  BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc3M011  WHERE  UNDERGO_WRITE  =  'X') ";
    if (!"".equals(stringDateStart) || !"".equals(stringDateEnd)) {
      if (!"".equals(stringDateStart)) {
        stringSqlTemp = " CDate  >=  '" + stringDateStart + "' ";
      }
      if (!"".equals(stringDateEnd)) {
        if (!"".equals(stringSqlTemp))
          stringSqlTemp += " AND ";
        stringSqlTemp += " CDate  <=  '" + stringDateEnd + "' ";
      }
      stringSql += "AND  ID  IN  (SELECT  ID " + " FROM  Doc3M011 " + " WHERE  1  =  1 ";
      if (!"".equals(StringUnderGOWrite))
        stringSql += " AND  UNDERGO_WRITE  =  '" + StringUnderGOWrite + "' ";
      stringSql += " AND  (" + stringSqlTemp + ")) ";

    }
    if (!"".equals(stringFunctionType)) {
      stringSql += " AND  CostID+CostID1  IN  (SELECT  CostID+CostID1  FROM  Doc2M020  WHERE  BudgetID  LIKE 'B%')";
    }
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    return retDoc3M014;
  }

  public String[][] getDoc3M014(String stringProjectID1, String stringDateStart, String stringDateEnd, String StringUnderGOWrite, String stringCostID, String stringCostID1)
      throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String[][] retDoc3M014 = null;
    //
    stringSql = "SELECT  M11.BarCode,  M11.CDate,  M11.ClassNameList,  (M14.RealMoney-M14.NoUseRealMoney),  M14.BudgetMoney " + " FROM  Doc3M014 M14,  Doc3M011 M11 "
        + " WHERE  M14.ProjectID1  =  '" + stringProjectID1 + "' " + " AND  M11.BarCode  =  M14.BarCode "
        + " AND  M11.BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc3M011  WHERE  UNDERGO_WRITE  =  'X') ";
    if (!"".equals(stringDateStart) || !"".equals(stringDateEnd)) {
      if (!"".equals(stringDateStart)) {
        stringSqlTemp = " CDate  >=  '" + stringDateStart + "' ";
      }
      if (!"".equals(stringDateEnd)) {
        if (!"".equals(stringSqlTemp))
          stringSqlTemp += " AND ";
        stringSqlTemp += " CDate  <=  '" + stringDateEnd + "' ";
      }
      stringSql += "AND  M14.ID  IN  (SELECT  ID " + " FROM  Doc3M011 " + " WHERE  1  =  1 ";
      if (!"".equals(StringUnderGOWrite))
        stringSql += " AND  UNDERGO_WRITE  =  '" + StringUnderGOWrite + "' ";
      stringSql += " AND  (" + stringSqlTemp + ")) ";

    }
    if (!"".equals(stringCostID))
      stringSql += " AND  M14.CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  M14.CostID1  =  '" + stringCostID1 + "' ";
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    return retDoc3M014;
  }

  public String[][] getDoc3M014(String stringProjectID1, String stringDepartNo, String stringDateStart, String stringDateEnd, String StringUnderGOWrite, String stringCostID,
      String stringCostID1) throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String[][] retDoc3M014 = null;
    //
    stringSql = "SELECT  M11.BarCode,  M11.CDate,  M11.ClassNameList,  (M14.RealMoney-M14.NoUseRealMoney) " + " FROM  Doc3M014 M14,  Doc3M011 M11 " + " WHERE  M14.ProjectID1  =  '"
        + stringProjectID1 + "' " + " AND  M11.BarCode  =  M14.BarCode " + " AND  M11.BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc3M011  WHERE  UNDERGO_WRITE  =  'X') ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  M14.DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringDateStart) || !"".equals(stringDateEnd)) {
      if (!"".equals(stringDateStart)) {
        stringSqlTemp = " CDate  >=  '" + stringDateStart + "' ";
      }
      if (!"".equals(stringDateEnd)) {
        if (!"".equals(stringSqlTemp))
          stringSqlTemp += " AND ";
        stringSqlTemp += " CDate  <=  '" + stringDateEnd + "' ";
      }
      stringSql += "AND  M14.ID  IN  (SELECT  ID " + " FROM  Doc3M011 " + " WHERE  1  =  1 ";
      if (!"".equals(StringUnderGOWrite))
        stringSql += " AND  UNDERGO_WRITE  =  '" + StringUnderGOWrite + "' ";
      stringSql += " AND  (" + stringSqlTemp + ")) ";

    }
    if (!"".equals(stringCostID))
      stringSql += " AND  M14.CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  M14.CostID1  =  '" + stringCostID1 + "' ";
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    return retDoc3M014;
  }

  public String[][] getDoc3M014ForDoc7M012(String stringProjectID1, String stringDateStart, String stringDateEnd, String stringSign, String StringUnderGOWrite,
      String[][] retDoc7M011) throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String[][] retDoc3M014 = null;
    //
    stringSql = "SELECT  M11.BarCode,  M11.CDate,  M11.Descript,  (M14.RealMoney-M14.NoUseRealMoney) " + " FROM  Doc3M014 M14,  Doc3M011 M11 " + " WHERE  M14.ProjectID1  =  '"
        + stringProjectID1 + "' " + " AND  M11.BarCode  =  M14.BarCode " + " AND  M11.BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc3M011  WHERE  UNDERGO_WRITE  =  'X') ";
    if (!"".equals(stringDateStart) || !"".equals(stringDateEnd)) {
      if (!"".equals(stringDateStart)) {
        stringSqlTemp = " CDate  >=  '" + stringDateStart + "' ";
      }
      if (!"".equals(stringDateEnd)) {
        if (!"".equals(stringSqlTemp))
          stringSqlTemp += " AND ";
        stringSqlTemp += " CDate  <=  '" + stringDateEnd + "' ";
      }
      stringSql += "AND  M14.ID  IN  (SELECT  ID " + " FROM  Doc3M011 " + " WHERE  1  =  1 ";
      if (!"".equals(StringUnderGOWrite) && !"".equals(stringSign))
        stringSql += " AND  UNDERGO_WRITE  " + stringSign + "  '" + StringUnderGOWrite + "' ";
      stringSql += " AND  (" + stringSqlTemp + ")) ";

    }
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    return retDoc3M014;
  }

  //
  public String[][] getDoc3M014ForPurchaseNo(String stringDocNo) throws Throwable {
    return getDoc3M014ForPurchaseNo("Z6", stringDocNo);
  }

  public String[][] getDoc3M014ForPurchaseNo(String stringComNo, String stringDocNo) throws Throwable {
    return getDoc3M014ForPurchaseNoUnion("Doc3M014", stringComNo, stringDocNo);
  }

  public String[][] getDoc3M014ForPurchaseNoUnion(String stringTable, String stringComNo, String stringDocNo) throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String stringTable2 = "Doc3M014".equals(stringTable) ? "Doc3M011" : "Doc5M011";
    String[][] retDoc3M014 = null;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 RealMoney 7 BudgetMoney 8 BarCode
    stringSql = "SELECT  InOut,    DepartNo,                  ProjectID,    ProjectID1, CostID, " + " CostID1, (RealMoney-NoUseRealMoney), BudgetMoney,  BarCode " + " FROM  "
        + stringTable + " " + " WHERE  1=1 " + " AND  BarCode  IN  (SELECT  BarCode " + " FROM  " + stringTable2 + " " + " WHERE  UNDERGO_WRITE  <>  'X'" + " AND  DocNo  =  '"
        + stringDocNo + "' " + " AND  ComNo  =  '" + stringComNo + "') " + " ORDER BY  ProjectID1,  CostID,  CostID1 ";
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    return retDoc3M014;
  }

  public String[][] getDoc3M014(String stringBarCode) throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String[][] retDoc3M014 = null;
    // 0 ProjectID1 1 CostID 2 CostID1 3 RealMoney 4 InOut
    stringSql = "SELECT  ProjectID1,  CostID,  CostID1,  (RealMoney-NoUseRealMoney),  InOut " + " FROM  Doc3M014 " + " WHERE  BarCode  =  '" + stringBarCode + "' "
        + " AND  BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc3M011  WHERE  UNDERGO_WRITE  =  'X') " + " ORDER BY  ProjectID1,  CostID,  CostID1 ";
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    return retDoc3M014;
  }

  public String[][] getDoc3M014ForPrint(String stringBarCode) throws Throwable {
    return getDoc3M014ForPrintUnion(stringBarCode, "Doc3M014");
  }

  public String[][] getDoc3M014ForPrintUnion(String stringBarCode, String stringTable) throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String[][] retDoc3M014 = null;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 BudgetMoney 7 RealMoney 8 NoUseRealMoney
    stringSql = "SELECT  InOut,    DepartNo,     ProjectID,     ProjectID1,  CostID, " + " CostID1,  BudgetMoney,  RealMoney,     NoUseRealMoney " + " FROM  " + stringTable + " "
        + " WHERE  BarCode  =  '" + stringBarCode + "' " + " ORDER BY  RecordNo ";
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    return retDoc3M014;
  }

  public String[][] getDoc3M014(String stringBarCode, String stringLimit, Vector vectorCostID) throws Throwable {
    return getDoc3M014("Doc3M014", stringBarCode, stringLimit, vectorCostID);
  }

  public String[][] getDoc3M014(String stringTable, String stringBarCode, String stringLimit, Vector vectorCostID) throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String[] arrayTemp = null;
    String[][] retDoc3M014 = null;
    // 0 ProjectID 1 ProjectID1 2 CostID 3 CostID1 4 RealMoney
    // 5 BudgetMoney 6 DepartNo
    stringSql = "SELECT  ProjectID,    ProjectID1,  CostID,  CostID1,  (RealMoney-NoUseRealMoney), " + " BudgetMoney,  DepartNo " + " FROM  " + stringTable + " "
        + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc3M011  WHERE  UNDERGO_WRITE  =  'X') ";
    for (int intNo = 0; intNo < vectorCostID.size(); intNo++) {
      arrayTemp = convert.StringToken("" + vectorCostID.get(intNo), stringLimit);
      //
      if (arrayTemp.length != 2)
        continue;
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID =  '" + arrayTemp[0].trim() + "'  AND  CostID1 =  '" + arrayTemp[1].trim() + "') ";
    }
    if (!"".equals(stringSqlTemp))
      stringSql += " AND  (" + stringSqlTemp + ")";
    stringSql += " ORDER BY  ProjectID,  ProjectID1 ";
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    return retDoc3M014;
  }

  public String[][] getDoc3M014(String stringProjectID1, String stringCDate, String stringDateStart, String stringDateEnd, String StringUnderGOWrite, String[][] retDoc7M011)
      throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String stringCostID = "";
    String stringCostID1 = "";
    double doubleRealMoneySum = 0;
    String[][] retDoc3M014 = null;
    //
    stringSql = "SELECT  CostID+CostID1,  BarCode,  (RealMoney-NoUseRealMoney) " + " FROM  Doc3M014 " + " WHERE  ProjectID1  =  '" + stringProjectID1 + "' "
        + " AND  BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc3M011  WHERE  UNDERGO_WRITE  =  'X') ";
    if (!"".equals(stringCDate))
      stringSql += " AND  ID  NOT  IN  (SELECT ID FROM  Doc3M011  WHERE  EDateTime  ='" + stringCDate + "')";
    if (!"".equals(stringDateStart) || !"".equals(stringDateEnd)) {
      if (!"".equals(stringDateStart)) {
        stringSqlTemp = " CDate  >=  '" + stringDateStart + "' ";
      }
      if (!"".equals(stringDateEnd)) {
        if (!"".equals(stringSqlTemp))
          stringSqlTemp += " AND ";
        stringSqlTemp += " CDate  <=  '" + stringDateEnd + "' ";
      }
      stringSql += "AND  ID  IN  (SELECT  ID " + " FROM  Doc3M011 " + " WHERE  1  =  1 ";
      if (!"".equals(StringUnderGOWrite))
        stringSql += " AND  UNDERGO_WRITE  =  '" + StringUnderGOWrite + "' ";
      stringSql += " AND  (" + stringSqlTemp + ")) ";

    }
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    stringSql += " ORDER BY  CostID+CostID1 ";
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    return retDoc3M014;
  }

  // 表格 Doc3M0141
  public double getRealMoneySumForDoc3M0141(String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1, String stringComNo, String stringBudgetID,
      String stringFunctiontype, String stringDateStart, String stringDateEnd, String stringSqlAnd) throws Throwable {
    double doubleRealMoneySum = 0;
    String stringSql = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String[][] retDoc3M0141 = null;
    //
    stringSql = "SELECT  SUM(RealMoney) " + " FROM  Doc3M0141 " + " WHERE  1=1 ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringBudgetID) || !"".equals(stringComNo) || !"".equals(stringFunctiontype)) {
      stringSql += " AND  RTRIM(CostID)+RTRIM(CostID1)  IN  (SELECT  RTRIM(CostID)+RTRIM(CostID1) " + " FROM  Doc2M020 " + " WHERE  1=1";
      if (!"".equals(stringBudgetID))
        stringSql += " AND  BudgetID  =  '" + stringBudgetID + "' ";
      if (!"".equals(stringComNo))
        stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
      if (!"".equals(stringFunctiontype))
        stringSql += " AND  BudgetID  LIKE  '" + stringFunctiontype + "%' ";
      stringSql += " ) ";
    }
    if (!"".equals(stringDateStart))
      stringSql += " AND  CDate  >=  '" + stringDateStart + "' ";
    if (!"".equals(stringDateEnd))
      stringSql += " AND  CDate  <=  '" + stringDateEnd + "' ";
    if (!"".equals(stringSqlAnd))
      stringSql += stringSqlAnd;
    retDoc3M0141 = dbDoc.queryFromPool(stringSql);
    doubleRealMoneySum = doParseDouble(retDoc3M0141[0][0].trim());
    return doubleRealMoneySum;
  }

  // 表格 Doc3M015
  public String getFactoryNameForDoc3M015(String stringFactoryNo) throws Throwable {
    String stringSql = "";
    String stringFactoryName = "";
    String[][] retDoc3M015 = null;
    //
    stringSql = " SELECT  OBJECT_SHORT_NAME " + " FROM  Doc3M015 " + " WHERE  OBJECT_CD  =  '" + stringFactoryNo + "' " + " AND  UseStatus  =  'Y' ";
    retDoc3M015 = dbDoc.queryFromPool(stringSql);
    if (retDoc3M015.length != 0) {
      stringFactoryName = retDoc3M015[0][0].trim();
    }
    return stringFactoryName;
  }

  public String[][] getDoc3M015(String stringObjectCd) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M015 = null;
    // 0 OBJECT_FULL_NAME 1 OBJECT_SHORT_NAME 2 COMPANY_TEL_NO1 3 COMPANY_TEL_NO2 4
    // COMPANY_TEL_NO3
    // 5 CONTACT_NO 6 CONTACT_TEL_NO1 7 CONTACT_TEL_NO2 8 CONTACT_TEL_NO3 9
    // OBJECT_AREA
    stringSql = "SELECT  OBJECT_FULL_NAME,  OBJECT_SHORT_NAME,  COMPANY_TEL_NO1,  COMPANY_TEL_NO2,  COMPANY_TEL_NO3, "
        + " CONTACT_NO,        CONTACT_TEL_NO1,    CONTACT_TEL_NO2,  CONTACT_TEL_NO3,  OBJECT_AREA " + " FROM  Doc3M015 " + " WHERE  OBJECT_CD  =  '" + stringObjectCd + "' "
        + " AND  UseStatus  =  'Y' ";
    retDoc3M015 = dbDoc.queryFromPool(stringSql);
    return retDoc3M015;
  }

  public String[][] getDoc3M015And(String stringObjectCd, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M015 = null;
    // 0 OBJECT_FULL_NAME 1 OBJECT_SHORT_NAME 2 COMPANY_TEL_NO1 3 COMPANY_TEL_NO2 4
    // COMPANY_TEL_NO3
    // 5 CONTACT_NO
    stringSql = "SELECT  OBJECT_FULL_NAME,  OBJECT_SHORT_NAME,  COMPANY_TEL_NO1,  COMPANY_TEL_NO2,  COMPANY_TEL_NO3, "
        + " CONTACT_NO,        CONTACT_TEL_NO1,    CONTACT_TEL_NO2,  CONTACT_TEL_NO3,  OBJECT_CD " + " FROM  Doc3M015 " + " WHERE  UseStatus  =  'Y' ";
    if (!"".equals(stringObjectCd))
      stringSql += " AND  OBJECT_CD  =  '" + stringObjectCd + "' ";
    stringSql += stringSqlAnd;
    retDoc3M015 = dbDoc.queryFromPool(stringSql);
    return retDoc3M015;
  }

  public String[][] getDoc3M015(String stringObjectCd, String stringObjectShortName) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M015 = null;
    // 0 OBJECT_CD 1 OBJECT_FULL_NAME 2 OBJECT_SHORT_NAME
    stringSql = "SELECT  OBJECT_CD,  OBJECT_FULL_NAME,  OBJECT_SHORT_NAME " + " FROM  Doc3M015 " + " WHERE  UseStatus  =  'Y' ";
    if (!"".equals(stringObjectCd))
      stringSql += " AND  OBJECT_CD  =  '" + stringObjectCd + "' ";
    if (!"".equals(stringObjectShortName))
      stringSql += " AND  OBJECT_SHORT_NAME  =  '" + stringObjectShortName + "' ";
    retDoc3M015 = dbDoc.queryFromPool(stringSql);
    return retDoc3M015;
  }

  public String[][] getLikeShortNameDoc3M015(String stringObjectCd, String stringObjectShortName) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M015 = null;
    // 0 OBJECT_CD 1 OBJECT_FULL_NAME 2 OBJECT_SHORT_NAME
    stringSql = "SELECT  OBJECT_CD,  OBJECT_FULL_NAME,  OBJECT_SHORT_NAME " + " FROM  Doc3M015 " + " WHERE  UseStatus  =  'Y' ";
    if (!"".equals(stringObjectCd))
      stringSql += " AND  OBJECT_CD  =  '" + stringObjectCd + "' ";
    if (!"".equals(stringObjectShortName))
      stringSql += " AND  OBJECT_SHORT_NAME  LIKE  '%" + stringObjectShortName + "%' ";
    retDoc3M015 = dbDoc.queryFromPool(stringSql);
    return retDoc3M015;
  }

  public String doInsertDoc3M015(String[] arrayData, boolean booleanDB) throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  INTO  Doc3M015 ( OBJECT_CD,         OBJECT_ID,         OBJECT_TYPE,      OBJECT_KIND,      OBJECT_SHORT_NAME, "
        + " OBJECT_FULL_NAME,  BeginDate,         capitalization,   ComProperty,      CHAIRMAN, "
        + " Manager,           CONTACT_MAN,       PeopleNum,        COMPANY_TEL_NO1,  COMPANY_TEL_NO2, "
        + " COMPANY_TEL_NO3,   COMPANY_FAX_NO1,   COMPANY_FAX_NO2,  COMPANY_FAX_NO3,  CONTACT_NO, "
        + " INVOICE_ADDR,      MAIL_ADDR,         Net_ADDR,         EMAIL,            BusinessEvent, "
        + " TradeMoney,        TradeBenefit,      TradeEPS,         TradePing,        FactoryArea, "
        + " FactoryAddress,    AssetSituation1,   AssetSituation2,  AssetSituation3,  LoanType, "
        + " AssetRent,         AssetDescription,  PlanType,         LAST_USER,        LAST_YMD) " + " VALUES ( '" + arrayData[0] + "', " + // OBJECT_CD
        " '" + arrayData[1] + "', " + // OBJECT_ID
        " '" + arrayData[2] + "', " + // OBJECT_TYPE
        " '" + arrayData[3] + "', " + // OBJECT_KIND
        " N'" + arrayData[4] + "', " + // OBJECT_SHORT_NAME
        " N'" + arrayData[5] + "', " + // OBJECT_FULL_NAME
        " '" + arrayData[6] + "', " + // BeginDate
        "  " + arrayData[7] + ", " + // capitalization
        " '" + arrayData[8] + "', " + // ComProperty
        " N'" + arrayData[9] + "', " + // CHAIRMAN
        " N'" + arrayData[10] + "', " + // Manager
        " '" + arrayData[11] + "', " + // CONTACT_MAN
        "  " + arrayData[12] + ", " + // PeopleNum
        " '" + arrayData[13] + "', " + // COMPANY_TEL_NO1
        " '" + arrayData[14] + "', " + // COMPANY_TEL_NO2
        " '" + arrayData[15] + "', " + // COMPANY_TEL_NO3
        " '" + arrayData[16] + "', " + // COMPANY_FAX_NO1
        " '" + arrayData[17] + "', " + // COMPANY_FAX_NO2
        " '" + arrayData[18] + "', " + // COMPANY_FAX_NO3
        " '" + arrayData[19] + "', " + // CONTACT_NO
        " '" + arrayData[20] + "', " + // INVOICE_ADDR
        " '" + arrayData[21] + "', " + // MAIL_ADDR
        " '" + arrayData[22] + "', " + // Net_ADDR
        " '" + arrayData[23] + "', " + // EMAIL
        " N'" + arrayData[24] + "', " + // BusinessEvent
        "  " + arrayData[25] + ", " + // TradeMoney
        "  " + arrayData[26] + ", " + // TradeBenefit
        "  " + arrayData[27] + ", " + // TradeEPS *
        "  " + arrayData[28] + ", " + // TradePing *
        "  " + arrayData[29] + ", " + // FactoryArea *
        " N'" + arrayData[30] + "', " + // FactoryAddress
        " '" + arrayData[31] + "', " + // AssetSituation1
        " '" + arrayData[32] + "', " + // AssetSituation2
        " '" + arrayData[33] + "', " + // AssetSituation3
        " '" + arrayData[34] + "', " + // LoanType
        " '" + arrayData[35] + "', " + // AssetRent
        " N'" + arrayData[36] + "', " + // AssetDescription
        " '" + arrayData[37] + "', " + // PlanType
        " '" + arrayData[38] + "', " + // LAST_USER
        " '" + arrayData[39] + "') "; // LAST_YMD
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  // 表格 Doc3M016
  public boolean isCostIDExistDoc3M016(String stringCostID, String stringCostID1, String stringSqlAnd) throws Throwable {
    return isCostIDExistDoc3M016(stringCostID, stringCostID1, "XX", stringSqlAnd);
  }

  public boolean isCostIDExistDoc3M016(String stringCostID, String stringCostID1, String stringCostID2, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M016 = null;
    boolean booleanFlag = true;
    // 請購
    stringSql = "SELECT  CostID " + " FROM  Doc3M016 " + " WHERE  CostID  =  '" + stringCostID + "' " + " AND  CostID1  =  '" + stringCostID1 + "' " + " AND  CostID2  =  '"
        + stringCostID2 + "' " + stringSqlAnd;
    retDoc3M016 = dbDoc.queryFromPool(stringSql);
    if (retDoc3M016.length == 0)
      booleanFlag = false;
    return booleanFlag;
  }

  public boolean isCostIDExistDoc3M016(String stringCostID, String stringCostID1, String stringDateStart, String stringDateEnd, String stringSqlAnd) throws Throwable {
    return isCostIDExistDoc3M016(stringCostID, stringCostID1, "XX", stringDateStart, stringDateEnd, stringSqlAnd);
  }

  public boolean isCostIDExistDoc3M016(String stringCostID, String stringCostID1, String stringCostID2, String stringDateStart, String stringDateEnd, String stringSqlAnd)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc3M016 = null;
    boolean booleanFlag = true;
    // 請購
    stringSql = "SELECT  CostID " + " FROM  Doc3M016 " + " WHERE  CostID     =  '" + stringCostID + "' " + " AND  CostID1  =  '" + stringCostID1 + "' " + " AND  CostID2  =  '"
        + stringCostID2 + "' " + " AND  DateStart  <>  '" + stringDateStart + "' " + " AND  ( (DateStart  >=  '" + stringDateStart + "'  AND  DateStart  <=  '" + stringDateEnd
        + "')  OR " + " (DateEnd  >=  '" + stringDateStart + "'  AND  DateEnd  <=  '" + stringDateEnd + "')  OR " + " (DateStart  <=  '" + stringDateStart
        + "'  AND  DateEnd  >=  '" + stringDateEnd + "')  OR " + " (DateStart  >=  '" + stringDateStart + "'  AND  DateEnd  <=  '" + stringDateEnd + "')) ";
    retDoc3M016 = dbDoc.queryFromPool(stringSql);
    if (retDoc3M016.length == 0)
      booleanFlag = false;
    stringSql += stringSqlAnd;
    return booleanFlag;
  }

  public String[][] getDoc3M016(String stringCostID, String stringCostID1, String stringDateStart, String stringDateEnd, String stringSqlAnd) throws Throwable {
    return getDoc3M016(stringCostID, stringCostID1, "XX", stringDateStart, stringDateEnd, stringSqlAnd);
  }

  public String[][] getDoc3M016(String stringCostID, String stringCostID1, String stringCostID2, String stringDateStart, String stringDateEnd, String stringSqlAnd)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc3M016 = null;
    boolean booleanFlag = true;
    // 請購
    stringSql = "SELECT  CostID " + " FROM  Doc3M016 " + " WHERE  CostID  =  '" + stringCostID + "' " + " AND  CostID1  =  '" + stringCostID1 + "' " + " AND  CostID2  =  '"
        + stringCostID2 + "' " + " AND  DateStart  =  '" + stringDateStart + "' ";
    if (!"".equals(stringDateEnd))
      stringSql += " AND  DateEnd  =  '" + stringDateEnd + "' ";
    stringSql += stringSqlAnd;
    retDoc3M016 = dbDoc.queryFromPool(stringSql);
    return retDoc3M016;
  }

  // 引用：統購廠商 POP
  public String[][] getBetweenDoc3M016(String stringCostID, String stringCostID1, String stringDateStart, String stringDateEnd, String stringSqlAnd) throws Throwable {
    return getBetweenDoc3M016(stringCostID, stringCostID1, "XX", stringDateStart, stringDateEnd, stringSqlAnd);
  }

  public String[][] getBetweenDoc3M016(String stringCostID, String stringCostID1, String stringCostID2, String stringDateStart, String stringDateEnd, String stringSqlAnd)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc3M016 = null;
    boolean booleanFlag = true;
    // 請購
    stringSql = "SELECT  CostID,  CostID1, CostID_New " + " FROM  Doc3M016 " + " WHERE  CostID  <>  '' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    if (!"".equals(stringCostID2))
      stringSql += " AND  CostID2  =  '" + stringCostID2 + "' ";
    if (!"".equals(stringDateStart) && !"".equals(stringDateEnd)) {
      stringSql += " AND  ( (DateStart  >=  '" + stringDateStart + "'  AND  DateStart  <=  '" + stringDateEnd + "')  OR " + " (DateEnd   >=  '" + stringDateStart
          + "'  AND  DateEnd   <=  '" + stringDateEnd + "')  OR " + " (DateStart  <=  '" + stringDateStart + "'  AND  DateEnd   >=  '" + stringDateEnd + "')  OR "
          + " (DateStart  >=  '" + stringDateStart + "'  AND  DateEnd   <=  '" + stringDateEnd + "')) ";
    }
    stringSql += stringSqlAnd;
    retDoc3M016 = dbDoc.queryFromPool(stringSql);
    return retDoc3M016;
  }

  // 表格 Doc3M017
  public String[][] getDoc3M017(String stringCostID, String stringCostID1, String stringItemName, String stringDescript, String stringUnit, String stringStatus, String stringArea,
      String stringVersionPos, String stringDateStart, String stringDateEnd, String stringSqlAnd) throws Throwable {
    return getDoc3M017(stringCostID, stringCostID1, stringItemName, stringDescript, stringUnit, stringStatus, stringArea, stringVersionPos, "", stringDateStart, stringDateEnd,
        stringSqlAnd);
  }

  public String[][] getDoc3M017(String stringCostID, String stringCostID1, String stringItemName, String stringDescript, String stringUnit, String stringStatus, String stringArea,
      String stringVersionPos, String stringCostIDTxt, String stringDateStart, String stringDateEnd, String stringSqlAnd) throws Throwable {
    return getDoc3M017(stringCostID, stringCostID1, "XX", stringItemName, stringDescript, stringUnit, stringStatus, stringArea, stringVersionPos, stringCostIDTxt, stringDateStart,
        stringDateEnd, stringSqlAnd);

  }

  public String[][] getDoc3M017(String stringCostID, String stringCostID1, String stringCostID2, String stringItemName, String stringDescript, String stringUnit,
      String stringStatus, String stringArea, String stringVersionPos, String stringCostIDTxt, String stringDateStart, String stringDateEnd, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M017 = null;
    // 請購
    // 0 CostID 1 CostID1 2 DateStart 3 DateEnd 4 ItemName
    // 5 Descript 6 Unit 7 Status 8 Area 9 VersionPos
    // 10 Price 11 PayCondition1 12 Remark 13 PayCondition1Amt 14 PayCondition2
    // 15 PayCondition2Amt 16 RecordNo 17 FactoryNo 18 StubPath
    stringSql = "SELECT  CostID,            CostID1,        DateStart,  DateEnd,           ItemName, "
        + " Descript,          Unit,           Status,     Area,              VersionPos, " + " Price,             PayCondition1,  Remark,     PayCondition1Amt,  PayCondition2, "
        + " PayCondition2Amt,  RecordNo,       FactoryNo,   StubPath " + " FROM  Doc3M017 " + " WHERE  CostID  <> '' ";
    if (!"".equals(stringItemName))
      stringSql += " AND  ItemName  =  '" + stringItemName + "' ";
    if (!"".equals(stringDescript))
      stringSql += " AND  Descript  =  '" + stringDescript + "' ";
    if (!"".equals(stringUnit))
      stringSql += " AND  Unit  =  '" + stringUnit + "' ";
    if (!"".equals(stringStatus))
      stringSql += " AND  Status  =  '" + stringStatus + "' ";
    if (!"".equals(stringArea))
      stringSql += " AND  Area  =  '" + stringArea + "' ";
    if (!"".equals(stringVersionPos))
      stringSql += " AND  VersionPos  =  '" + stringVersionPos + "' ";

    if (!"".equals(stringDateStart) || !"".equals(stringDateEnd) || !"".equals(stringCostID) || !"".equals(stringCostID1)) {
      stringSql += " AND  RTRIM(CostID)+RTRIM(CostID1)+RTRIM(DateStart)+RTRIM(DateEnd) IN ( " + " SELECT RTRIM(CostID)+RTRIM(CostID1)+RTRIM(DateStart)+RTRIM(DateEnd) "
          + " FROM  Doc3M016 " + " WHERE  CostID  <>  '' ";
      if (!"".equals(stringCostID))
        stringSql += " AND  CostID  =  '" + stringCostID + "' ";
      if (!"".equals(stringCostID1))
        stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
      if (!"".equals(stringCostID2))
        stringSql += " AND  CostID2  =  '" + stringCostID2 + "' ";
      if (!"".equals(stringCostIDTxt))
        stringSql += " AND  (CostID_New  =  '" + stringCostIDTxt + "' OR  CostID  =  '" + stringCostIDTxt + "' )";
      if (!"".equals(stringDateStart) && !"".equals(stringDateEnd)) {
        stringSql += " AND  ( (DateStart  >=  '" + stringDateStart + "'  AND  DateStart  <=  '" + stringDateEnd + "')  OR " + " (DateEnd   >=  '" + stringDateStart
            + "'  AND  DateEnd   <=  '" + stringDateEnd + "')  OR " + " (DateStart  <=  '" + stringDateStart + "'  AND  DateEnd   >=  '" + stringDateEnd + "')  OR "
            + " (DateStart  >=  '" + stringDateStart + "'  AND  DateEnd   <=  '" + stringDateEnd + "')) ";
      }
      stringSql += ") ";
    }
    if (!"".equals(stringSqlAnd)) {
      stringSql += stringSqlAnd;
    } else {
      stringSql += "ORDER BY CostID,  CostID1";
    }
    retDoc3M017 = dbDoc.queryFromPool(stringSql);
    return retDoc3M017;
  }

  public String doUpdateDoc3M017(String stringCostID, String stringCostID1, String stringFieldName, String stringFieldValue, String stringFieldValueOld, boolean booleanDB)
      throws Throwable {
    return doUpdateDoc3M017(stringCostID, stringCostID1, "XX", stringFieldName, stringFieldValue, stringFieldValueOld, booleanDB);
  }

  public String doUpdateDoc3M017(String stringCostID, String stringCostID1, String stringCostID2, String stringFieldName, String stringFieldValue, String stringFieldValueOld,
      boolean booleanDB) throws Throwable {
    String stringSql = "";
    //
    stringSql = "UPDATE  Doc3M017  SET  " + stringFieldName + "  =  '" + stringFieldValue + "' " + " WHERE  CostID  =  '" + stringCostID + "' " + " AND  CostID1  =  '"
        + stringCostID1 + "' " + " AND " + stringFieldName + "  =  '" + stringFieldValueOld + "' ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  // 表格 Doc3M0171
  // 引用：請購單後端檢核
  public String[][] getDoc3M0171(String stringCostID, String stringCostID1, String stringFactoryNo, String stringDateStart, String stringDateEnd, String stringSqlAnd)
      throws Throwable {
    return getDoc3M0171(stringCostID, stringCostID1, stringFactoryNo, stringDateStart, stringDateEnd, "", stringSqlAnd);
  }

  public String[][] getDoc3M0171(String stringCostID, String stringCostID1, String stringFactoryNo, String stringDateStart, String stringDateEnd, String stringCostID_New,
      String stringSqlAnd) throws Throwable {
    return getDoc3M0171(stringCostID, stringCostID1, "XX", stringFactoryNo, stringDateStart, stringDateEnd, stringCostID_New, stringSqlAnd);

  }

  public String[][] getDoc3M0171(String stringCostID, String stringCostID1, String stringCostID2, String stringFactoryNo, String stringDateStart, String stringDateEnd,
      String stringCostID_New, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M0171 = null;
    // 請購
    // 0 CostID 1 CostID1 2 DateStart 3 DateEnd 4 FactoryNo
    stringSql = "SELECT  CostID,  CostID1,  DateStart,  DateEnd,  FactoryNo " + " FROM  Doc3M0171 " + " WHERE  CostID  <> '' ";
    if (!"".equals(stringCostID) || !"".equals(stringCostID_New) || !"".equals(stringCostID1)) {
      stringSql += " AND  RTRIM(CostID)+RTRIM(CostID1) IN (SELECT  RTRIM(CostID)+RTRIM(CostID1) " + " FROM Doc3M016 " + " WHERE  CostID  <>  '' ";
      if (!"".equals(stringCostID))
        stringSql += " AND  CostID  =  '" + stringCostID + "' ";
      if (!"".equals(stringCostID_New))
        stringSql += " AND  (CostID  =  '" + stringCostID_New + "' OR  CostID_New  =  '" + stringCostID_New + "') ";
      if (!"".equals(stringCostID1))
        stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
      if (!"".equals(stringCostID2))
        stringSql += " AND  CostID2  =  '" + stringCostID2 + "' ";
      stringSql += ")";
    }

    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringDateStart) && !"".equals(stringDateEnd)) {
      stringSql += " AND  ( (DateStart  >=  '" + stringDateStart + "'   AND  DateStart  <=  '" + stringDateEnd + "')  OR " + " (DateEnd   >=  '" + stringDateStart
          + "'   AND  DateEnd    <=  '" + stringDateEnd + "')  OR " + " (DateStart  <=  '" + stringDateStart + "'   AND  DateEnd    >=  '" + stringDateEnd + "')  OR "
          + " (DateStart  >=  '" + stringDateStart + "'   AND  DateEnd    <=  '" + stringDateEnd + "')) ";
    }
    if (!"".equals(stringSqlAnd)) {
      stringSql += stringSqlAnd;
    } else {
      stringSql += "ORDER BY CostID,  CostID1";
    }
    retDoc3M0171 = dbDoc.queryFromPool(stringSql);
    return retDoc3M0171;
  }

  // 表格 Doc3M020
  public String[][] getDoc3M020(String stringCostID, String stringCostID1) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M020 = null;
    //
    stringSql = " SELECT  CostID,  CostID1,  CostIDText " + " FROM  Doc3M020 " + " WHERE  CostID  <>  '' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID   =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    stringSql += " ORDER BY  CostID,  CostID1 ";
    retDoc3M020 = dbDoc.queryFromPool(stringSql);
    return retDoc3M020;
  }

  // 表格 Doc3M021-Doc3M026
  public String[][] getDoc3M02X(String stringCostID, String stringCostID1, String stringGroupValue, String stringDefaultValue, String stringFieldValue, String stringFieldName,
      String stringTableName) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M02X = null;
    // 0 CostID 1 CostID1 2 GroupValue 3 DefaultValue 4 FieldName
    stringSql = " SELECT  CostID,  CostID1,  GroupValue, DefaultValue, " + stringFieldName + ",  RecordNo " + " FROM  " + stringTableName + " " + " WHERE  CostID  <>  '' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID   =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    if (!"".equals(stringGroupValue))
      stringSql += " AND  GroupValue  =  '" + stringGroupValue + "' ";
    if (!"".equals(stringDefaultValue))
      stringSql += " AND  DefaultValue  =  '" + stringDefaultValue + "' ";
    if (!"".equals(stringFieldValue))
      stringSql += " AND  " + stringFieldName + "  =  '" + stringFieldValue + "' ";
    stringSql += " ORDER BY  RecordNo ";
    retDoc3M02X = dbDoc.queryFromPool(stringSql);
    return retDoc3M02X;
  }

  // 表格 Doc3M030
  public String[][] getDoc3M030(String stringSheetClass, String stringItemNo, String stringSqlSelect, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M030 = null;
    //
    if ("".equals(stringSqlSelect)) {
      // 0 SheetClass 1 ItemNo 2 CostID 3 CostID1 4 FactoryNo
      // 5 PayCondition1 6 PayCondition1Amt 7 PayCondition2 8 PayCondition2Amt
      stringSql = " SELECT  SheetClass,     ItemNo,            CostID,         CostID1,         FactoryNo, "
          + " PayCondition1,  PayCondition1Amt,  PayCondition2,  PayCondition2Amt ";
    } else {
      stringSql = stringSqlSelect;
    }
    stringSql += " FROM  Doc3M030 " + " WHERE  1=1 ";
    if (!"".equals(stringSheetClass))
      stringSql += " AND  SheetClass   =  '" + stringSheetClass + "' ";
    if (!"".equals(stringItemNo))
      stringSql += " AND  ItemNo  =  '" + stringItemNo + "' ";
    if ("".equals(stringSqlAnd)) {
      stringSql += " ORDER BY  SheetClass,  ItemNo ";
    } else {
      stringSql += stringSqlAnd;
    }
    retDoc3M030 = dbDoc.queryFromPool(stringSql);
    return retDoc3M030;
  }

  // 表格 Doc5M010
  public String getRecordNoForDoc5M010(String stringBarCode, String stringKey) throws Throwable {
    String stringSql = "";
    String stringRecordNo = "";
    String[][] retDoc5M010 = null;
    //
    stringSql = "SELECT  RecordNo " + " FROM  Doc5M010 " + " WHERE  BarCode  =  '" + stringBarCode + "' "
        + " AND  RTRIM(InOut)+'-'+RTRIM(DepartNo)+'-'+RTRIM(ProjectID)+'-'+RTRIM(ProjectID1) = '" + stringKey + "' ";
    retDoc5M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc5M010.length == 0)
      return stringRecordNo;
    stringRecordNo = retDoc5M010[0][0].trim();
    return stringRecordNo;
  }

  public double getDiscountMoneyForDoc5M010(String stringBarCode, String stringRecordNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M010 = null;
    double doubleDiscountMoney = 0;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID 5 CostID1 6
    // DiscountMoney
    stringSql = "SELECT   DiscountMoney " + " FROM  Doc5M010 " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  RecordNo  =  " + stringRecordNo + " ";
    retDoc5M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc5M010.length > 0)
      doubleDiscountMoney = doParseDouble(retDoc5M010[0][0].trim());
    return doubleDiscountMoney;
  }

  // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID 5 CostID1 6
  // DiscountMoney
  public String getDiscountMoneyForDoc5M010(String stringBarCode, String[] retDoc2M015) throws Throwable {
    String stringSql = "";
    String stringDiscountMoney = "0";
    String[][] retDoc5M010 = null;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID 5 CostID1 6
    // DiscountMoney
    stringSql = "SELECT   DiscountMoney " + " FROM  Doc5M010 " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  RTRIM(InOut)  =  '" + retDoc2M015[0].trim() + "' "
        + " AND  RTRIM(DepartNo)  =  '" + retDoc2M015[1].trim() + "' " + " AND  RTRIM(ProjectID)  =  '" + retDoc2M015[2].trim() + "' " + " AND  RTRIM(ProjectID1)  =  '"
        + retDoc2M015[3].trim() + "' " + " AND  RTRIM(CostID)  =  '" + retDoc2M015[4].trim() + "' " + " AND  RTRIM(CostID1)  =  '" + retDoc2M015[5].trim() + "' "
        + " ORDER BY  RecordNo ";
    retDoc5M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc5M010.length > 0)
      stringDiscountMoney = retDoc5M010[0][0].trim();
    return stringDiscountMoney;
  }

  public String[][] getDoc5M010(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M010 = null;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID 5 CostID1
    // 6 DiscountMoney 7 RecordNo
    stringSql = "SELECT  InOut,  DepartNo,  ProjectID,  ProjectID1,  CostID,  CostID1,  DiscountMoney,  RecordNo " + " FROM  Doc5M010 " + " WHERE  BarCode  =  '" + stringBarCode
        + "' " + " ORDER BY  RecordNo ";
    retDoc5M010 = dbDoc.queryFromPool(stringSql);
    return retDoc5M010;
  }

  // 表格 Doc5M011(一般物料之請購)
  public void doUpdateStatusForDoc5M011(String stringFieldName, String stringFieldValue, String stringBarCode) throws Throwable {
    doUpdateUnion("Doc5M011", stringFieldName, stringFieldValue, stringBarCode);
  }

  public String getMaxIDForDoc5M011() throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return getMaxIDUnionDoc("Doc5M011", exeUtil);
  }

  public String[][] getDoc5M011(String stringComNo, String stringDocNo1, String stringDocNo2, String stringDocNo3, String stringSqlAnd) throws Throwable {
    return getDoc3M011Union("Doc5M011", stringComNo, stringDocNo1, stringDocNo2, stringDocNo3, stringSqlAnd);
  }

  // 表格 Doc5M012(一般物料之請購)
  public String[][] getDoc5M012(String stringBarCode, String stringFactoryNo) throws Throwable {
    return getDoc3M012Union("Doc5M012", stringBarCode, stringFactoryNo);
  }

  public String[][] getDoc5M012(String stringComNo, String stringDocNo, String stringFactoryNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M012 = null;
    /*
     * 0 CostID 1 CostID1 2 ClassName 3 Descript 4 Unit / 5 BudgetNum 6 ActualNum 7
     * HistoryPrice 8 FactoryNo 9 ActualPrice / 10 PurchaseMoney 11 ApplyMoney 12
     * PurchaseMoney 13 ProjectID1 14 ClassNameDescript 15 LastUse 16 RecordNo 17
     * DocNo
     */
    stringSql = " SELECT  M12.CostID,         M12.CostID1,      M12.ClassName,      M12.Descript,    M12.Unit, "
        + " M12.BudgetNum,      M12.ActualNum,    M12.HistoryPrice,   M12.FactoryNo,   M12.ActualPrice, "
        + " M12.PurchaseMoney,  M12.ApplyMoney,   M12.PurchaseMoney,  M12.ProjectID1,  M12.ClassNameDescript, " + " M12.LastUse,        M12.RecordNo,     M11.DocNo "
        + " FROM  Doc5M012 M12,  Doc5M011 M11 " + " WHERE  M11.BarCode  =  M12.BarCode " + " AND  M11.ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringDocNo))
      stringSql += " AND  M11.DocNo  =  '" + stringDocNo + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  M12.FactoryNo  =  '" + stringFactoryNo + "' ";
    stringSql += stringSqlAnd + " ORDER BY  RecordNo ";
    retDoc3M012 = dbDoc.queryFromPool(stringSql);
    return retDoc3M012;
  }

  // 表格 Doc5M0121(一般物料之請購項目案別分攤)
  public String[][] getDoc5M0121(String stringComNo, String stringDocNo, String stringRecordNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc3M0121 = null;
    /*
     * 0 BarCode 1 RecordNo 2 RecordNo121 3 InOut 4 DepartNo / 5 ProjectID 6
     * ProjectID1 7 ApplyMoney 8 PurchaseMoney 9 DocNo
     */
    stringSql = " SELECT  M12.BarCode,    M12.RecordNo,    M12.RecordNo121,  M12.InOut,          M12.DepartNo, "
        + " M12.ProjectID,  M12.ProjectID1,  M12.ApplyMoney,   M12.PurchaseMoney,  M11.DocNo " + " FROM  Doc5M0121 M12,  Doc5M011 M11 " + " WHERE  M11.BarCode  =  M12.BarCode "
        + " AND  M11.ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringDocNo))
      stringSql += " AND  M11.DocNo  =  '" + stringDocNo + "' ";
    if (!"".equals(stringRecordNo))
      stringSql += " AND  M12.RecordNo  =  '" + stringRecordNo + "' ";
    if (!"".equals(stringSqlAnd))
      stringSql += stringSqlAnd;
    if (stringSqlAnd.toUpperCase().indexOf("ORDER") == -1)
      stringSql += " ORDER BY  M12.RecordNo,  M12.RecordNo121 ";
    retDoc3M0121 = dbDoc.queryFromPool(stringSql);
    return retDoc3M0121;
  }

  // 表格 Doc5M0123(一般物料之請購-項目-階段-案別分攤)
  public String[][] getDoc5M0123(String stringBarCode, String stringComNo, String stringDocNo, String stringRecordNo12, String stringRecordNo130, String stringSqlAnd)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc3M0123 = new String[0][0];
    /*
     * 0 BarCode 1 RecordNo12 2 RecordNo130 3 RecordNo 4 InOut / 5 DepartNo 6
     * ProjectID 7 ProjectID1 8 PurchaseMoney 9 NoUseRealMoney
     */
    stringSql = " SELECT  M123.BarCode,    M123.RecordNo12,    M123.RecordNo130,  M123.RecordNo,       M123.InOut, "
        + " M123.DepartNo,   M123.ProjectID,     M123.ProjectID1,   M123.PurchaseMoney,  M123.NoUseRealMoney " + " FROM  Doc5M0123 M123,  Doc5M011 M11"
        + " WHERE  M123.BarCode  =  M11.BarCode ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  M11.BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  M11.ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringDocNo))
      stringSql += " AND  M11.DocNo  =  '" + stringDocNo + "' ";
    if (!"".equals(stringRecordNo12))
      stringSql += " AND  M123.RecordNo12  =   " + stringRecordNo12 + " ";
    if (!"".equals(stringRecordNo130))
      stringSql += " AND  M123.RecordNo130  =  " + stringRecordNo130 + " ";
    if (!"".equals(stringSqlAnd))
      stringSql += stringSqlAnd;
    if (stringSqlAnd.toUpperCase().indexOf("ORDER") == -1)
      stringSql += " ORDER BY  M123.RecordNo12, M123.RecordNo130,  M123.RecordNo ";
    retDoc3M0123 = dbDoc.queryFromPool(stringSql);
    return retDoc3M0123;
  }

  // 表格 Doc5M013(一般物料之請購)
  public String[][] getDoc5M013(String stringBarCode, String stringFactoryNo) throws Throwable {
    return getDoc3M013Union("Doc5M013", stringBarCode, stringFactoryNo);
  }

  public String[][] getDoc5M013(String stringComNo, String stringDocNo, String stringFactoryNo) throws Throwable {
    return getDoc3M013Union(stringComNo, stringDocNo, stringFactoryNo, false);
  }

  // 表格 Doc5M0131 退保留資訊
  public String[][] getDoc5M0131(String stringBarCode, String stringFactoryNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String[][] retDoc3M0131 = null;
    // 0 RecordNo 1 FactoryNo 2 BackRetainPercent 3 BackRetainMoney 4 BackRetainYear
    stringSql = "SELECT  RecordNo,    FactoryNo,  BackRetainPercent, BackRetainMoney, BackRetainYear " + " FROM  Doc5M0131 " + " WHERE  BarCode  =  '" + stringBarCode + "' "
        + " AND  FactoryNo  =  '" + stringFactoryNo + "' " + " ORDER BY  RecordNo ";
    retDoc3M0131 = dbDoc.queryFromPool(stringSql);
    return retDoc3M0131;
  }

  // 表格 Doc5M014
  public String[][] getDoc5M014(String stringBarCode, String stringComNo, String stringDocNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String[][] retDoc3M014 = null;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 RealMoney 7 BudgetMoney
    stringSql = "SELECT  M14.InOut,    M14.DepartNo,                      M14.ProjectID, M14.ProjectID1, M14.CostID, "
        + " M14.CostID1, (M14.RealMoney-M14.NoUseRealMoney), M14.BudgetMoney " + " FROM  Doc5M014 M14 ,  Doc5M011 M11 " + " WHERE  M14.BarCode  =  M11.BarCode "
        + " AND  M11.UNDERGO_WRITE  <>  'X' ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  M11.BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  M11.ComNo    =  '" + stringComNo + "' ";
    if (!"".equals(stringDocNo))
      stringSql += " AND  M11.DocNo    =  '" + stringDocNo + "' ";
    stringSql += stringSqlAnd + " ORDER BY  M14.ProjectID1,  M14.CostID,  M14.CostID1 ";
    retDoc3M014 = dbDoc.queryFromPool(stringSql);
    return retDoc3M014;
  }

  // 表格 Doc5M015
  public String[][] getDoc5M015(String stringBarCode, String stringComNo, String stringDocNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringSqlTemp = "";
    String[][] retDoc3M015 = null;
    // 0 BarCode 1 ComNo 2 DocNo1 3 DocNo2 4 DocNo3
    // 5 ExistContractMoney 6 ContractMoney 7 MoneyKind 8 ContractKind 9 Descript
    // 10 PayConditionCross 11 STATUS
    stringSql = "SELECT  BarCode,             ComNo,          DocNo1,     DocNo2,        DocNo3, " + " ExistContractMoney,  ContractMoney,  MoneyKind,  ContractKind,  Descript, "
        + " PayConditionCross,   STATUS " + " FROM  Doc5M015 " + " WHERE  1=1 ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo    =  '" + stringComNo + "' ";
    if (!"".equals(stringDocNo))
      stringSql += " AND  DocNo    =  '" + stringDocNo + "' ";
    stringSql += stringSqlAnd;
    retDoc3M015 = dbDoc.queryFromPool(stringSql);
    return retDoc3M015;
  }

  // 表格 Doc5M020(一般物料之請購)
  public void doUpdateStatusForDoc5M020(String stringBarCode, String stringUndergoWrite) throws Throwable {
    doUpdateUnion("Doc5M020", "UNDERGO_WRITE", stringUndergoWrite, stringBarCode);
  }

  public String getExistFactoryNoRealMoneyForDoc5M020(String stringBarCode, String stringComNo, String stringEDateTime, String stringPurchaseNo1, String stringPurchaseNo2,
      String stringPurchaseNo3, String stringFactoryNo) throws Throwable {
    return "" + getPurchaseMoneyDoc2M017Union(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", stringFactoryNo, false);
  }

  public String[][] getDoc5M020(String stringBarCode) throws Throwable {
    return getDoc2M010Union("Doc5M020", stringBarCode);
  }

  // 表格 Doc5M021
  public String[][] getDoc5M021(String stringBarCode) throws Throwable {
    return getDoc2M011Union("Doc5M021", stringBarCode);
  }

  // 表格 Doc5M023
  public String[][] getDoc5M023(String stringBarCode) throws Throwable {
    return getDoc2M013Union("Doc5M023", stringBarCode);
  }

  // 表格 Doc5M030(一般物料之請購)
  public String getExistFactoryNoRealMoneyBorrowForDoc5M030(String stringBarCode, String stringComNo, String stringEDateTime, String stringPurchaseNo1, String stringPurchaseNo2,
      String stringPurchaseNo3, String stringFactoryNo) throws Throwable {
    return "" + getRealTotalMoneyDoc6M012Union(stringBarCode, stringComNo, stringEDateTime, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", stringFactoryNo, false);
  }

  //
  public String getExistRealMoneyForDoc5M020(String stringBarCode, String stringComNo, String stringEDateTime, String stringPurchaseNo1, String stringPurchaseNo2,
      String stringPurchaseNo3, String stringPurchaseNo4) throws Throwable {
    String stringSumRealMoney = "0";
    String stringSql = "";
    String[][] retDoc2M012 = null;
    //
    stringSql = "SELECT  SUM(M17.PurchaseMoney) " + " FROM  Doc5M020 M10,  Doc5M027 M17 " + " WHERE  M10.BarCode  =  M17.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  M17.PurchaseNo2  =  '" + stringPurchaseNo2 + "' "
        + " AND  M17.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M17.PurchaseNo4  =  '" + stringPurchaseNo4 + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    if (!"".equals(stringEDateTime))
      stringSql += " AND  M10.EDateTime  <  '" + stringEDateTime + "' ";

    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M012.length != 0) {
      stringSumRealMoney = retDoc2M012[0][0].trim();
      stringSumRealMoney = "" + doParseDouble(stringSumRealMoney);
      stringSumRealMoney = convert.FourToFive(stringSumRealMoney, 0);
    }
    return stringSumRealMoney;
  }

  public String getExistRealMoney2Doc5M020(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringPurchaseNo4) throws Throwable {
    return "" + getUseMoney(stringBarCode, stringComNo, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, stringPurchaseNo4, true);
  }

  public String getExistRealMoneyForFactoryNoDoc5M020(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringProjectID1, String stringPurchaseNo2,
      String stringPurchaseNo3, String stringFactoryNo) throws Throwable {
    return getExistRealMoneyForFactoryNoDoc5M020(stringBarCode, stringComNo, stringPurchaseNo1, stringProjectID1, stringPurchaseNo2, stringPurchaseNo3, stringFactoryNo, "");
  }

  public String getExistRealMoneyForFactoryNoDoc5M020(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringProjectID1, String stringPurchaseNo2,
      String stringPurchaseNo3, String stringFactoryNo, String stringSqlAnd) throws Throwable {
    String stringPurchaseMoney = "0";
    String stringSql = "";
    String[][] retDoc2M012 = null;
    String[][] retDoc6M012 = null;
    double doublePurchaseMoney = 0;
    // 請款
    stringSql = "SELECT  SUM(M17.PurchaseMoney) " + " FROM  Doc5M020 M10,  Doc5M027 M17 " + " WHERE  M10.BarCode  =  M17.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  ISNULL(M17.ProjectID1,'')   =  '" + stringProjectID1
        + "' " + " AND  M17.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M17.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M17.FactoryNo  =  '" + stringFactoryNo
        + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' " + " AND  M10.BarCode NOT IN (SELECT BarCode  FROM  Doc2M014 WHERE  STATUS_CD  =  'Z') " + stringSqlAnd;
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M012.length != 0) {
      stringPurchaseMoney = "" + doParseDouble(retDoc2M012[0][0].trim());
      stringPurchaseMoney = convert.FourToFive(stringPurchaseMoney, 0);
    }
    // System.out.println("已申請金額1---------------"+stringPurchaseMoney) ;
    return stringPurchaseMoney;
  }

  public String getPaidUpMoneyForFactoryNoDoc5M020(String stringComNo, String stringBarCodeOld, String stringPurchaseNo1, String stringProjectID1, String stringPurchaseNo2,
      String stringPurchaseNo3, String stringFactoryNo) throws Throwable {
    return getPaidUpMoneyForFactoryNoDoc5M020(stringComNo, stringBarCodeOld, stringPurchaseNo1, stringProjectID1, stringPurchaseNo2, stringPurchaseNo3, stringFactoryNo, "");
  }

  public String getPaidUpMoneyForFactoryNoDoc5M020(String stringComNo, String stringBarCodeOld, String stringPurchaseNo1, String stringProjectID1, String stringPurchaseNo2,
      String stringPurchaseNo3, String stringFactoryNo, String stringSqlAnd) throws Throwable {
    String stringPaidUpMoney = "0";
    String stringSql = "";
    String stringBarCode = "";
    String[][] retDoc2M010 = null;
    String[][] retDoc2M012 = null;
    String[][] retDoc2M017 = null;
    double doublePaidUpMoney = 0;
    // 請款
    stringSql = "SELECT  DISTINCT  M14.BarCode " + "FROM  Doc5M020 M10,  Doc5M027 M17,  Doc2M014 M14 " + " WHERE  M10.BarCode  =  M17.BarCode "
        + " AND  M17.BarCode  =  M14.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.PurchaseNo1  =  '"
        + stringPurchaseNo1 + "' " + " AND  ISNULL(M17.ProjectID1,'')  =  '" + stringProjectID1 + "' " + " AND  M17.PurchaseNo2  =  '" + stringPurchaseNo2 + "' "
        + " AND  M17.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' " + " AND  M14.STATUS_CD  =  'Z' ";
    if (!"".equals(stringBarCodeOld)) {
      stringSql += " AND  M14.BarCode  <>  '" + stringBarCodeOld + "' ";
    }
    stringSql += stringSqlAnd;
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    //
    for (int intNo = 0; intNo < retDoc2M012.length; intNo++) {
      stringBarCode = retDoc2M012[intNo][0].trim();
      stringSql = "SELECT  SUM(PurchaseMoney) " + " FROM  Doc5M027 " + " WHERE  PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  PurchaseNo2  =  '" + stringPurchaseNo2 + "' "
          + " AND  PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  ISNULL(ProjectID1,'')   =  '" + stringProjectID1 + "' " + " AND  BarCode  =  '" + stringBarCode + "' ";
      retDoc2M017 = dbDoc.queryFromPool(stringSql);
      if (retDoc2M017.length != 0) {
        doublePaidUpMoney += doParseDouble(retDoc2M017[0][0].trim());
      }
    }
    // System.out.println("已付金額1---------------"+doublePaidUpMoney) ;
    // 借款沖銷
    stringSql = "SELECT  SUM(M12.RealTotalMoney)" + " FROM  Doc5M030 M10,  Doc5M032  M12 " + " WHERE  PurchaseNoExist  =  'Y'  " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M10.BarCode  =  M12.BarCode " + " AND  M10.Barcode  IN  (SELECT  BarCode  FROM  Doc2M014  WHERE  STATUS_CD  =  'Z' )" + " AND  M10.ComNo  =  '" + stringComNo
        + "' " + " AND  M10.PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M10.PurchaseNo3  =  '"
        + stringPurchaseNo3 + "' " + " AND  M10.FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringBarCodeOld)) {
      stringSql += " AND  M10.BarCode  <>  '" + stringBarCodeOld + "' ";
    }
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M010.length != 0) {
      doublePaidUpMoney += doParseDouble(retDoc2M010[0][0].trim());
    }
    //
    stringPaidUpMoney = convert.FourToFive("" + doublePaidUpMoney, 0);
    // System.out.println("已付金額2---------------"+doublePaidUpMoney) ;
    return stringPaidUpMoney;
  }

  // 表格 Doc5M020
  public String getMaxIDForDoc5M020() throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return getMaxIDUnionDoc("Doc5M020", exeUtil);
  }

  public boolean isExistSignDoc5M020(String stringComNo, String stringPurchaseNo1, String stringProjectID1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringPurchaseNo4, String stringSign, String stringEDateTime) throws Throwable {
    return isExistSignDoc5M020(stringComNo, stringPurchaseNo1 + stringProjectID1 + stringPurchaseNo2 + stringPurchaseNo3, stringSign, stringEDateTime, "");
  }

  public boolean isExistSignDoc5M020(String stringComNo, String stringPurchaseNo, String stringSign, String stringEDateTime, String stringFactoryNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    boolean booleanStatus = false;
    //
    retDoc2M010 = getSignDoc5M020(false, stringComNo, stringPurchaseNo, stringSign, stringEDateTime, stringFactoryNo, "");
    if (retDoc2M010.length > 0)
      booleanStatus = true;
    for (int intNo = 0; intNo < retDoc2M010.length; intNo++) {
      System.out.println((intNo + 1) + "已使用(Doc2M010)--------------" + retDoc2M010[intNo][0]);
    }
    return booleanStatus;
  }

  public String[][] getSignDoc5M020(boolean booleanSource, String stringComNo, String stringPurchaseNo, String stringSign, String stringEDateTime, String stringFactoryNo,
      String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringTable10 = booleanSource ? "Doc5M020" : "Doc2M010";
    String stringTable17 = booleanSource ? "Doc5M027" : "Doc2M017";
    String[][] retDoc2M010 = null;
    //
    stringSql = "SELECT  M10.BarCode " + " FROM  " + stringTable10 + " M10,  " + stringTable17 + " M17 " + " WHERE  M17.BarCode  =  M10.BarCode " + " AND  M17.PurchaseNo  =  '"
        + stringPurchaseNo + "' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' " + " AND  M10.EDateTime  " + stringSign
        + "  '" + stringEDateTime + "' " + stringSqlAnd;
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    return retDoc2M010;
  }

  public boolean isExistRetainCheckForDoc5M020(String stringRetainBarCode, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    boolean booleanExist = false;
    // 0 ID
    stringSql = " SELECT  M10.BarCode " + " FROM  Doc5M020 M10" + " WHERE  M10.BarCode  <>  '" + stringBarCode + "' " + " AND  M10.RetainBarCode  =  '" + stringRetainBarCode + "' "
        + " AND  UNDERGO_WRITE  <>  'E' ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    //
    if (retDoc2M010.length > 0) {
      booleanExist = true;
      System.out.println("已使用退保之條碼編號---------------------------" + retDoc2M010[0][0] + "(" + retDoc2M010.length + ")");
    }
    return booleanExist;
  }

  public String[][] getUndergoWriterDoc5M020(String stringBarCode, String stringFactoryNo) throws Throwable {
    return getUndergoWriterDoc5M020(stringBarCode, "", stringFactoryNo);
  }

  public String[][] getUndergoWriterDoc5M020(String stringBarCode, String stringComNo, String stringFactoryNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M010 = null;
    boolean booleanFirstTime = false;
    // 0 UNDERGO_WRITE 1 BarCode
    stringSql = " SELECT  UNDERGO_WRITE,  BarCode " + " FROM  Doc5M020 " + " WHERE  BarCode  <>  '" + stringBarCode + "' " + " AND  (BarCode  IN  (SELECT  BarCode  "
        + " FROM  Doc5M021 " + " WHERE  FactoryNo  =  '" + stringFactoryNo + "') " + " OR  BarCode  IN  (SELECT  BarCode  " + " FROM  Doc5M023 " + " WHERE  FactoryNo  =  '"
        + stringFactoryNo + "') " + " OR FactoryNoSpec  =  '" + stringFactoryNo + "') ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "'";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    return retDoc2M010;
  }

  // 表格 Doc5M022
  public String[][] getDoc5M022(String stringBarCode) throws Throwable {
    return getDoc2M012Union("Doc5M022", stringBarCode);
  }

  public double getRealTotalMoneySumForDoc5M022(String stringBarCodeExcept, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1,
      String stringCostID, String stringCostID1, String stringPurchaseNoExist, String stringSqlAnd) throws Throwable {
    double doubleRealTotalMoneySum = 0;
    String stringSql = "";
    String[][] retDoc2M012 = null;
    //
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  Doc5M022 " + "  WHERE  BarCode IN  (SELECT  BarCode  FROM  Doc5M020  WHERE  UNDERGO_WRITE<>'E' ";
    if (!"".equals(stringPurchaseNoExist))
      stringSql += "  AND PurchaseNoExist  =  '" + stringPurchaseNoExist + "' ";
    stringSql += ") ";
    if (!"".equals(stringBarCodeExcept))
      stringSql += " AND  BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    stringSql += stringSqlAnd;
    retDoc2M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum = doParseDouble(retDoc2M012[0][0].trim());
    return doubleRealTotalMoneySum;
  }

  // 表格 Doc5M0220
  public String[][] getDoc5M0220(String stringBarCodeRef, String stringFactoryNo, String stringBarCode, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M0220 = null;
    // 0 BarCode 1 BarCodeRef 2 FactoryNo 3 RecordNo 4 BackRetainMoney 5 EDateTime
    stringSql = "SELECT  M220.BarCode,  M220.BarCodeRef,  M220.FactoryNo,  M220.RecordNo,  M220.BackRetainMoney,  M20.EDateTime " + " FROM  Doc5M0220 M220,  Doc5M020 M20 "
        + "  WHERE  M220.BarCode  =  M20.BarCode ";
    if (!"".equals(stringFactoryNo))
      stringSql += "  AND  M220.FactoryNo  =  '" + stringFactoryNo + "' ";
    if (!"".equals(stringBarCode))
      stringSql += "  AND  M220.BarCode    =  '" + stringBarCode + "' ";
    if (!"".equals(stringBarCodeRef))
      stringSql += "  AND  M220.BarCodeRef =  '" + stringBarCodeRef + "' ";
    stringSql += stringSqlAnd;
    if (stringSqlAnd.indexOf("ORDER") == -1) {
      stringSql += " ORDER BY  M20.EDateTime,  M220.RecordNo ";
    }
    retDoc5M0220 = dbDoc.queryFromPool(stringSql);
    return retDoc5M0220;
  }

  // 表格 Doc5M02201 退保留款沖銷表格
  public String[][] getDoc5M02201(String stringBarCode, String stringBarCodeRef, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M02201 = null;
    // 0 BarCode 1 BarCodeRef 2 BackRetainMoney
    stringSql = "SELECT  BarCode,  BarCodeRef,  BackRetainMoney " + " FROM  Doc5M02201 " + " WHERE  1=1 " + stringSqlAnd;
    if (!"".equals(stringBarCode))
      stringSql += "  AND  BarCode  = '" + stringBarCode + "' ";
    if (!"".equals(stringBarCodeRef))
      stringSql += "  AND  BarCodeRef  =  '" + stringBarCodeRef + "' ";
    if ("".equals(stringSqlAnd) || stringSqlAnd.indexOf("ORDER") == -1) {
      stringSql += " ORDER BY  RecordNo ";
    }
    retDoc5M02201 = dbDoc.queryFromPool(stringSql);
    return retDoc5M02201;
  }

  // 表格 Doc5M027
  public String[][] getDoc5M027(String stringBarCode) throws Throwable {
    return getDoc2M017Union("Doc5M027", stringBarCode);
  }

  // 表格 Doc5M0271
  public String[][] getDoc5M0271(String stringBarCode, String stringComNo, String stringContract, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M0271 = null;
    // 0 BarCode 1 ContractNo1 2 ContractNo2 3 ContractNo3 4 StageNo 5 FactoryNo 6
    // ContractMoney
    stringSql = "SELECT  BarCode,  ContractNo1,  ContractNo2,  ContractNo3,  StageNo,  FactoryNo,  ContractMoney " + " FROM  Doc5M0271 " + " WHERE  1=1 ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  BarCode  IN (SELECT  BarCode  FROM  DOc5M020  WHERE  ComNo  =  '" + stringComNo + "') ";
    if (!"".equals(stringContract))
      stringSql += " AND  ContractNo =  '" + stringContract + "' ";
    if ("".equals(stringSqlAnd)) {
      stringSql += " ORDER BY ContractNo1,  ContractNo2,  ContractNo3,  StageNo ";
    } else {
      stringSql += stringSqlAnd;
    }
    retDoc5M0271 = dbDoc.queryFromPool(stringSql);
    return retDoc5M0271;
  }

  // 表格 Doc5M0272
  public String[][] getDoc5M0272(String stringBarCode, String stringFactoryNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M0272 = null;
    // 0 PurchaseNo 1 RecordNo12 2 FactoryNo 3 CostID 4 RequestPrice
    // 5 RequestNum 6 PurchaseMoney 7 PayCondition1 8 PayCondition2
    stringSql = "SELECT  PurchaseNo,  RecordNo12,     FactoryNo,      CostID,       RequestPrice, " + " RequestNum,  PurchaseMoney,  PayCondition1,  PayCondition2 "
        + " FROM  Doc5M0272 " + " WHERE  1=1 ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    stringSql += stringSqlAnd;
    retDoc5M0272 = dbDoc.queryFromPool(stringSql);

    return retDoc5M0272;
  }

  public String[][] getDoc5M0272(String stringBarCode, String stringComNo, String stringDocNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M0272 = null;
    // 0 PurchaseNo 1 RecordNo12 2 FactoryNo 3 CostID 4 RequestPrice
    // 5 RequestNum 6 PurchaseMoney 7 PayCondition1 8 PayCondition2
    stringSql = "SELECT  M272.PurchaseNo,  M272.RecordNo12,     M272.FactoryNo,      M272.CostID,       M272.RequestPrice, "
        + " M272.RequestNum,  M272.PurchaseMoney,  M272.PayCondition1,  M272.PayCondition2 " + " FROM  Doc5M0272 M272,  Doc5M020  M20 " + " WHERE  M272.BarCode  =  M20.BarCode ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  M20.BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  M20.ComNo    =  '" + stringComNo + "' ";
    if (!"".equals(stringDocNo))
      stringSql += " AND  M20.DocNo    =  '" + stringDocNo + "' ";
    if ("".equals(stringSqlAnd))
      stringSql += stringSqlAnd;
    if (stringSqlAnd.toUpperCase().indexOf("ORDER") == -1)
      stringSql += " ORDER BY  RecordNo12,  RecordNo130 ";
    retDoc5M0272 = dbDoc.queryFromPool(stringSql);

    return retDoc5M0272;
  }

  // 表格 Doc5M02722
  public String[][] getDoc5M02722(String stringComNo, String stringPurchaseNo, String stringFactoryNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M02722 = null;
    // 0 ComNo 1 FIRM_NO 2 PurchaseNo 3 FactoryNo 4 CostID
    // 5 RecordNo12 6 RecordNo130 7 RequestPrice 8 RequestNum 9 RequestDate
    stringSql = "SELECT  ComNo,       FIRM_NO,      PurchaseNo,    FactoryNo,   CostID, " + " RecordNo12,  RecordNo130,  RequestPrice,  RequestNum,  RequestDate "
        + " FROM  Doc5M02722 " + " WHERE  1=1 ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringPurchaseNo))
      stringSql += " AND  PurchaseNo  =  '" + stringPurchaseNo + "' ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
    stringSql += stringSqlAnd;
    retDoc5M02722 = dbDoc.queryFromPool(stringSql);

    return retDoc5M02722;
  }

  // 表格 Doc5M0273
  public String[][] getDoc5M0273(String stringBarCode, String stringComNo, String stringDocNo, String stringPurchaseNo, String stringRecordNo12, String stringRecordNo130,
      String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M0273 = null;
    // 0 BarCode 1 PurchaseNo 2 RecordNo12 3 RecordNo130 4 RecordNo
    // 5 InOut 6 DepartNo 7 ProjectID 8 ProjectID1 9 CostID
    // 10 PurchaseMoney
    stringSql = "SELECT  M273.BarCode,       M273.PurchaseNo,     M273.RecordNo12,      M273.RecordNo130,  M273.RecordNo, "
        + " M273.InOut,         M273.DepartNo,       M273.ProjectID,       M273.ProjectID1,   M273.CostID, " + " M273.PurchaseMoney " + " FROM  Doc5M0273 M273,  Doc5M020  M20 "
        + " WHERE  M273.BarCode  =  M20.BarCode ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  M20.BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  M20.ComNo    =  '" + stringComNo + "' ";
    if (!"".equals(stringDocNo))
      stringSql += " AND  M20.DocNo    =  '" + stringDocNo + "' ";
    if (!"".equals(stringPurchaseNo))
      stringSql += " AND  M273.PurchaseNo     =  '" + stringPurchaseNo + "' ";
    if (!"".equals(stringRecordNo12))
      stringSql += " AND  M273.RecordNo12     =  " + stringRecordNo12 + " ";
    if (!"".equals(stringRecordNo130))
      stringSql += " AND  M273.RecordNo130    =  " + stringRecordNo130 + " ";
    if (!"".equals(stringSqlAnd))
      stringSql += stringSqlAnd;
    if (stringSqlAnd.toUpperCase().indexOf("ORDER") == -1)
      stringSql += " ORDER BY  PurchaseNo,  RecordNo12,  RecordNo130,  RecordNo ";
    retDoc5M0273 = dbDoc.queryFromPool(stringSql);

    return retDoc5M0273;
  }

  // 表格 Doc5M029
  public String[][] getDoc5M029(String stringCostID, String stringDocCode, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M029 = null;
    //
    stringSql = "SELECT  CostID,  DocCode,  Remark, ComNo " + " FROM  Doc5M029 " + " WHERE  1=1 ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringDocCode))
      stringSql += " AND  DocCode  =  '" + stringDocCode + "' ";
    if ("".equals(stringSqlAnd)) {
      stringSql += " ORDER BY CostID,  DocCode ";
    } else {
      stringSql += stringSqlAnd;
    }
    retDoc5M029 = dbDoc.queryFromPool(stringSql);
    return retDoc5M029;
  }

  // 表格 Doc5M0291
  public String getDocDescriptDoc5M0291(String stringDocCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc5M0291 = null;
    //
    stringSql = "SELECT  DocDescript " + " FROM  Doc5M0291 " + " WHERE  DocCode  =  '" + stringDocCode + "' ";
    retDoc5M0291 = dbDoc.queryFromPool(stringSql);
    if (retDoc5M0291.length > 0)
      return retDoc5M0291[0][0].trim();
    return "";
  }

  // 表格 Doc5M030
  public String[][] getUndergoWriterDoc5M030(String stringBarCode, String stringFactoryNo) throws Throwable {
    return getUndergoWriterDoc5M030(stringBarCode, "", stringFactoryNo);
  }

  public String[][] getUndergoWriterDoc5M030(String stringBarCode, String stringComNo, String stringFactoryNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M010 = null;
    boolean booleanFirstTime = false;
    //
    stringSql = " SELECT  UNDERGO_WRITE,  BarCode " + " FROM  Doc5M030 " + " WHERE  BarCode  <>  '" + stringBarCode + "' " + " AND  (BarCode  IN  (SELECT  BarCode  "
        + " FROM  Doc5M031 " + " WHERE  FactoryNo  =  '" + stringFactoryNo + "') " + " OR  BarCode  IN  (SELECT  BarCode  " + " FROM  Doc5M033 " + " WHERE  FactoryNo  =  '"
        + stringFactoryNo + "') " + " OR  FactoryNo  =  '" + stringFactoryNo + "' ) ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    return retDoc6M010;
  }

  public boolean isExistSignDoc5M030(String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringSign, String stringEDateTime)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc5M030 = null;
    boolean booleanStatus = false;
    //
    stringSql = "SELECT  BarCode " + " FROM  Doc5M030 " + " WHERE  PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  PurchaseNo2  =  '" + stringPurchaseNo2 + "' "
        + " AND  PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  ComNo  =  '" + stringComNo + "' " + " AND  EDateTime  " + stringSign + "  '" + stringEDateTime + "' ";
    retDoc5M030 = dbDoc.queryFromPool(stringSql);
    if (retDoc5M030.length > 0)
      booleanStatus = true;
    for (int intNo = 0; intNo < retDoc5M030.length; intNo++) {
      System.out.println((intNo + 1) + "已存在前期資料，不允刪除(Doc6M010)--------------" + retDoc5M030[intNo][0]);
    }
    return booleanStatus;
  }

  public double getRealTotalMoneySumForDoc5M032(String stringBarCodeExcept, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1,
      String stringCostID, String stringCostID1, String stringPurchaseNoExist, String stringSqlAnd) throws Throwable {
    double doubleRealTotalMoneySum = 0;
    String stringSql = "";
    String[][] retDoc6M012 = null;
    //
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  Doc5M032 " + " WHERE  BarCode  NOT  IN  (SELECT  BarCode  FROM  Doc5M030  WHERE  UNDERGO_WRITE  =  'E' )";
    if (!"".equals(stringPurchaseNoExist))
      stringSql += " AND  BarCode IN  (SELECT  BarCode  FROM  Doc5M020  WHERE  PurchaseNoExist  =  '" + stringPurchaseNoExist + "') ";
    if (!"".equals(stringBarCodeExcept))
      stringSql += " AND  BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    stringSql += stringSqlAnd;
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum = doParseDouble(retDoc6M012[0][0].trim());
    return doubleRealTotalMoneySum;
  }

  /*
   * public Hashtable getCheckMoney3(int intSize, int intYearAC, String
   * stringEDateTime, String stringFlow, Vector vectorDepartNo, Hashtable
   * hashtableDeptCdToCostID, Hashtable hashtableDeptCdToSubject, FargloryUtil
   * exeUtil) throws Throwable { return getCheckMoney3(intSize, intYearAC,
   * stringEDateTime, stringFlow, "", vectorDepartNo, hashtableDeptCdToCostID,
   * hashtableDeptCdToSubject, exeUtil); } public Hashtable getCheckMoney3(int
   * intSize, int intYearAC, String stringEDateTime, String stringFlow, String
   * stringComNoQ, Vector vectorDepartNo, Hashtable hashtableDeptCdToCostID,
   * Hashtable hashtableDeptCdToSubject, FargloryUtil exeUtil) throws Throwable {
   * String stringSql = "" ; String stringSqlAnd = "" ; String stringSqlCostID =
   * "" ; String stringSqlDeptartNo = "" ; String stringTemp = "" ; String[][]
   * retData = null ; Vector vectorCostID = new Vector() ; Vector vectorCostIDAll
   * = new Vector() ; Hashtable hashtableKey = new Hashtable() ; Object objectTemp
   * = null ; // if(vectorDepartNo.size() == 0) return hashtableKey ; // for(int
   * intNo=0 ; intNo<vectorDepartNo.size() ; intNo++) { stringTemp =
   * (""+vectorDepartNo.get(intNo)).trim() ; if("".equals(stringTemp) ||
   * "null".equals(stringTemp)) continue ; // 主部室邏輯修正(依新部門代碼) stringTemp =
   * exeUtil.doSubstring(stringTemp, 0, 3) ; stringSqlAnd =
   * " (M12.DepartNo  LIKE  '" + stringTemp + "%'  AND   LEN(M12.DepartNo)=4 ) " ;
   * if("033".equals(stringTemp)) stringSqlAnd +=
   * " OR  (M12.DepartNo  IN  ('03333',  '03362',  '03363',  '03392') )" ;
   * if("034".equals(stringTemp)) stringSqlAnd +=
   * " OR  (M12.DepartNo  IN  ('03472',  '03499') ) " ; stringSql = "("+
   * stringSqlAnd + ")"; if(!"".equals(stringSqlDeptartNo)) stringSqlDeptartNo +=
   * " OR " ; stringSqlDeptartNo += stringSql ; // stringTemp =
   * getSubjectDepartNoDoc7M040(stringTemp, hashtableDeptCdToSubject, exeUtil) ;
   * objectTemp = hashtableDeptCdToCostID.get(stringTemp) ; if(objectTemp == null)
   * continue ; vectorCostID = (Vector) objectTemp ; for(int intNoL=0 ;
   * intNoL<vectorCostID.size() ; intNoL++) { stringTemp =
   * (""+vectorCostID.get(intNoL)).trim() ;
   * if(vectorCostIDAll.indexOf(stringTemp)!=-1) continue ;
   * if("".equals(stringTemp) || "null".equals(stringTemp)) continue ;
   * if(!"".equals(stringSqlCostID)) stringSqlCostID += " OR " ; stringSqlCostID
   * += " SUBSTRING(CostID,1,"+intSize+") = '"+stringTemp+"' " ;
   * vectorCostIDAll.add(stringTemp) ; } } // 請購-採發金額 stringSql =
   * "SELECT  (CASE ComNo WHEN '01' THEN 'B' ELSE 'A' END),  M12.DepartNo,  SUBSTRING(CONVERT(char(10),NeedDate,111),6,2),  SUBSTRING(CostID,1,"
   * +intSize+"),  SUM(RealMoney-NoUseRealMoney) " +
   * " FROM  Doc5M014 M12,  Doc5M011 M10 " +
   * " WHERE  M12.BarCode  =  M10.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'X' "
   * + " AND  ((M10.Unipurchase='Y'  AND  M10.UNDERGO_WRITE  =  'H') OR " +
   * " (M10.UNDERGO_WRITE  =  'Y')) " ; if(intYearAC > 1900) stringSql +=
   * " AND  M10.NeedDate  BETWEEN   '"+intYearAC+"/01/01' AND '"
   * +intYearAC+"/12/31'  " ; if(!"".equals(stringEDateTime)) stringSql +=
   * " AND  M10.EDateTime  <>  '" + stringEDateTime + "' " ;
   * if(!"".equals(stringSqlDeptartNo)) stringSql += " AND  (" +
   * stringSqlDeptartNo + ") " ; if(!"".equals(stringComNoQ)){
   * if("01".equals(stringComNoQ)) { stringSql += " AND  M10.ComNo  =  '01' " ; }
   * else { stringSql += " AND  M10.ComNo  <>  '01' " ; } }
   * //if(!"".equals(stringSqlCostID)) stringSql += " AND  (" + stringSqlCostID +
   * ") " ; stringSql +=
   * " GROUP BY (CASE ComNo WHEN '01' THEN 'B' ELSE 'A' END),  M12.DepartNo,  SUBSTRING(CONVERT(char(10),NeedDate,111),6,2), SUBSTRING(CostID,1,"
   * +intSize+") " ; System.out.println("請購-採發金額------------------------------");
   * retData = dbDoc.queryFromPool(stringSql) ; // String stringKey = "" ; String
   * stringComNo = "" ; String stringDepartNo = "" ; String stringCostID = "" ;
   * String stringMONTH = "" ; String stringMoney = "" ; double doubleMoneySum = 0
   * ; for(int intNo=0 ; intNo<retData.length ; intNo++) { stringComNo =
   * retData[intNo][0].trim() ; stringDepartNo = retData[intNo][1].trim() ;
   * stringMONTH = retData[intNo][2].trim() ; stringCostID =
   * retData[intNo][3].trim() ; stringMoney = retData[intNo][4].trim() ; //
   * 公司-部門-請款代碼-月 stringKey = stringComNo + "-" +stringDepartNo+"-"+stringCostID +
   * "-" + exeUtil.doParseInteger(stringMONTH) ; doubleMoneySum =
   * exeUtil.doParseDouble(stringMoney)+exeUtil.doParseDouble(""+hashtableKey.get(
   * stringKey)) ; hashtableKey.put(stringKey, ""+doubleMoneySum) ; // 公司-部門-0-月
   * stringKey = stringComNo + "-" +stringDepartNo+"-0-" +
   * exeUtil.doParseInteger(stringMONTH) ; doubleMoneySum =
   * exeUtil.doParseDouble(stringMoney)+exeUtil.doParseDouble(""+hashtableKey.get(
   * stringKey)) ; hashtableKey.put(stringKey, ""+doubleMoneySum) ; } // 請購-請購金額
   * if(stringFlow.indexOf("採購") == -1) { stringSql =
   * "SELECT  (CASE ComNo WHEN '01' THEN 'B' ELSE 'A' END),  M12.DepartNo,  SUBSTRING(CONVERT(char(10),NeedDate,111),6,2),  SUBSTRING(CostID,1,"
   * +intSize+"),  SUM(BudgetMoney) " + " FROM  Doc5M014 M12,  Doc5M011 M10 " +
   * " WHERE  M12.BarCode  =  M10.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'X' "
   * + " AND  NOT  ((M10.Unipurchase='Y'  AND M10.UNDERGO_WRITE  =  'H') OR  " +
   * " (M10.UNDERGO_WRITE  =  'Y'))" ; if(intYearAC>1900) stringSql +=
   * " AND  M10.NeedDate  BETWEEN   '"+intYearAC+"/01/01' AND '"
   * +intYearAC+"/12/31'  " ; if(!"".equals(stringEDateTime)) stringSql +=
   * " AND  M10.EDateTime  <>  '" + stringEDateTime + "' " ;
   * if(!"".equals(stringSqlDeptartNo)) stringSql += " AND  (" +
   * stringSqlDeptartNo + ") " ; if(!"".equals(stringSqlCostID)) stringSql +=
   * " AND  (" + stringSqlCostID + ") " ; if(!"".equals(stringComNoQ)){
   * if("01".equals(stringComNoQ)) { stringSql += " AND  M10.ComNo  =  '01' " ; }
   * else { stringSql += " AND  M10.ComNo  <>  '01' " ; } } stringSql +=
   * " GROUP BY (CASE ComNo WHEN '01' THEN 'B' ELSE 'A' END),  M12.DepartNo,  SUBSTRING(CONVERT(char(10),NeedDate,111),6,2), SUBSTRING(CostID,1,"
   * +intSize+") " ;
   * //System.out.println("請購-請購金額------------------------------"); retData =
   * dbDoc.queryFromPool(stringSql) ; for(int intNo=0 ; intNo<retData.length ;
   * intNo++) { stringComNo = retData[intNo][0].trim() ; stringDepartNo =
   * retData[intNo][1].trim() ; stringMONTH = retData[intNo][2].trim() ;
   * stringCostID = retData[intNo][3].trim() ; stringMoney =
   * retData[intNo][4].trim() ; // 公司-部門-請款代碼-月 stringKey = stringComNo + "-"
   * +stringDepartNo+"-"+stringCostID + "-" + exeUtil.doParseInteger(stringMONTH)
   * ; doubleMoneySum =
   * exeUtil.doParseDouble(stringMoney)+exeUtil.doParseDouble(""+hashtableKey.get(
   * stringKey)) ; hashtableKey.put(stringKey, ""+doubleMoneySum) ; // 公司-部門-0-月
   * stringKey = stringComNo + "-" +stringDepartNo+"-0-" +
   * exeUtil.doParseInteger(stringMONTH) ; doubleMoneySum =
   * exeUtil.doParseDouble(stringMoney)+exeUtil.doParseDouble(""+hashtableKey.get(
   * stringKey)) ; hashtableKey.put(stringKey, ""+doubleMoneySum) ; } } // 請款
   * stringSql =
   * "SELECT  (CASE ComNo WHEN '01' THEN 'B' ELSE 'A' END),  M12.DepartNo,  SUBSTRING(CONVERT(char(10),CDate,111),6,2),  SUBSTRING(CostID,1,"
   * +intSize+"),  SUM(RealTotalMoney) " + " FROM  Doc5M022 M12,  Doc5M020 M10 " +
   * " WHERE  M12.BarCode  =  M10.BarCode " + " AND  PurchaseNoExist  =  'N' " +
   * " AND  UNDERGO_WRITE  <>  'E'  " ; if(intYearAC>1900) stringSql +=
   * " AND  M10.CDate  BETWEEN   '"+intYearAC+"/01/01' AND '"
   * +intYearAC+"/12/31'  " ; if(!"".equals(stringEDateTime)) stringSql +=
   * " AND  M10.EDateTime  <>  '" + stringEDateTime + "' " ;
   * if(!"".equals(stringSqlDeptartNo)) stringSql += " AND  (" +
   * stringSqlDeptartNo + ") " ; if(!"".equals(stringSqlCostID)) stringSql +=
   * " AND  (" + stringSqlCostID + ") " ; if(!"".equals(stringComNoQ)){
   * if("01".equals(stringComNoQ)) { stringSql += " AND  M10.ComNo  =  '01' " ; }
   * else { stringSql += " AND  M10.ComNo  <>  '01' " ; } } stringSql +=
   * " GROUP BY (CASE ComNo WHEN '01' THEN 'B' ELSE 'A' END),  M12.DepartNo,  SUBSTRING(CONVERT(char(10),CDate,111),6,2), SUBSTRING(CostID,1,"
   * +intSize+") " ; //System.out.println("請款------------------------------");
   * retData = dbDoc.queryFromPool(stringSql) ; for(int intNo=0 ;
   * intNo<retData.length ; intNo++) { stringComNo = retData[intNo][0].trim() ;
   * stringDepartNo = retData[intNo][1].trim() ; stringMONTH =
   * retData[intNo][2].trim() ; stringCostID = retData[intNo][3].trim() ;
   * stringMoney = retData[intNo][4].trim() ; // 公司-部門-請款代碼-月 stringKey =
   * stringComNo + "-" +stringDepartNo+"-"+stringCostID + "-" +
   * exeUtil.doParseInteger(stringMONTH) ; doubleMoneySum =
   * exeUtil.doParseDouble(stringMoney)+exeUtil.doParseDouble(""+hashtableKey.get(
   * stringKey)) ; hashtableKey.put(stringKey, ""+doubleMoneySum) ; // 公司-部門-0-月
   * stringKey = stringComNo + "-" +stringDepartNo+"-0-" +
   * exeUtil.doParseInteger(stringMONTH) ; doubleMoneySum =
   * exeUtil.doParseDouble(stringMoney)+exeUtil.doParseDouble(""+hashtableKey.get(
   * stringKey)) ; hashtableKey.put(stringKey, ""+doubleMoneySum) ; } // 借款沖銷
   * stringSql =
   * " SELECT  (CASE ComNo WHEN '01' THEN 'B' ELSE 'A' END),  M12.DepartNo,  SUBSTRING(CONVERT(char(10),CDate,111),6,2),  SUBSTRING(CostID,1,"
   * +intSize+"),  SUM(RealTotalMoney) " + " FROM  Doc5M032 M12,  Doc5M030 M10 " +
   * " WHERE  M12.BarCode  =  M10.BarCode " + " AND  PurchaseNoExist  =  'N' " +
   * " AND  UNDERGO_WRITE  <>  'E'  " ; if(intYearAC>1900) stringSql +=
   * " AND  M10.CDate  BETWEEN   '"+intYearAC+"/01/01' AND '"
   * +intYearAC+"/12/31'  " ; if(!"".equals(stringEDateTime)) stringSql +=
   * " AND  M10.EDateTime  <>  '" + stringEDateTime + "' " ;
   * if(!"".equals(stringSqlDeptartNo)) stringSql += " AND  (" +
   * stringSqlDeptartNo + ") " ; if(!"".equals(stringSqlCostID)) stringSql +=
   * " AND  (" + stringSqlCostID + ") " ; if(!"".equals(stringComNoQ)){
   * if("01".equals(stringComNoQ)) { stringSql += " AND  M10.ComNo  =  '01' " ; }
   * else { stringSql += " AND  M10.ComNo  <>  '01' " ; } } stringSql +=
   * " GROUP BY (CASE ComNo WHEN '01' THEN 'B' ELSE 'A' END),  M12.DepartNo,  SUBSTRING(CONVERT(char(10),CDate,111),6,2), SUBSTRING(CostID,1,"
   * +intSize+") " ; System.out.println("借款沖銷------------------------------");
   * retData = dbDoc.queryFromPool(stringSql) ; for(int intNo=0 ;
   * intNo<retData.length ; intNo++) { stringComNo = retData[intNo][0].trim() ;
   * stringDepartNo = retData[intNo][1].trim() ; stringMONTH =
   * retData[intNo][2].trim() ; stringCostID = retData[intNo][3].trim() ;
   * stringMoney = retData[intNo][4].trim() ; // 公司-部門-請款代碼-月 stringKey =
   * stringComNo + "-" +stringDepartNo+"-"+stringCostID + "-" +
   * exeUtil.doParseInteger(stringMONTH) ; doubleMoneySum =
   * exeUtil.doParseDouble(stringMoney)+exeUtil.doParseDouble(""+hashtableKey.get(
   * stringKey)) ; hashtableKey.put(stringKey, ""+doubleMoneySum) ; // 公司-部門-0-月
   * stringKey = stringComNo + "-" +stringDepartNo+"-0-" +
   * exeUtil.doParseInteger(stringMONTH) ; doubleMoneySum =
   * exeUtil.doParseDouble(stringMoney)+exeUtil.doParseDouble(""+hashtableKey.get(
   * stringKey)) ; hashtableKey.put(stringKey, ""+doubleMoneySum) ; } return
   * hashtableKey; } // intType double:全公司 B:遠建 public double
   * getAmtCheckMoney3(int intMonthEnd, String stringType, String stringDepartNo,
   * String stringCostID, Hashtable hashtableKey, FargloryUtil exeUtil) throws
   * Throwable { return getAmtDoc7M032(intMonthEnd, stringType, stringDepartNo,
   * stringCostID, hashtableKey, exeUtil) ; }
   */
  public Hashtable getNewDeptCdCheckMoney2(int intYearAC, String stringCDate, String stringComNoQ, String stringBarCodeExcept, String stringFlow, Vector vectorDepartNo,
      Vector vectorComNo, Hashtable hashtableMidCostID, Hashtable hashtableDeptCdToCostID, FargloryUtil exeUtil) throws Throwable {
    String stringSql = "";
    String stringSqlMajor = "";
    String stringSqlAnd = "";
    String stringSqlComNo = "";
    String stringSqlGroup = "";
    String stringTemp = "";
    String[][] retData = null;
    Vector vectorCostID = new Vector();
    Hashtable hashtableKey = new Hashtable();
    //
    for (int intNo = 0; intNo < vectorComNo.size(); intNo++) {
      stringTemp = ("" + vectorComNo.get(intNo)).trim();
      if (!"".equals(stringSqlComNo))
        stringSqlComNo += ", ";
      stringSqlComNo += "'" + stringTemp + "'";
    }
    if (vectorDepartNo.size() == 0)
      return hashtableKey;
    //
    String stringDepartNo = "";
    String stringDepartNoDoc = "";
    String stringSqlDeptCdDoc = "";
    String stringSqlOutDeptCd = "";
    String stringSqlInDeptCd = "";
    String stringSqlCostID = "";
    String stringDeptCd3 = "";
    boolean booleanA17 = false;
    for (int intNo = 0; intNo < vectorDepartNo.size(); intNo++) {
      stringTemp = ("" + vectorDepartNo.get(intNo)).trim();
      // 部門(舊)
      stringDepartNoDoc = getDeptCdDoc(stringTemp, "", "");
      if (!"".equals(stringDepartNoDoc))
        stringDepartNoDoc = stringTemp;
      if (!"".equals(stringSqlDeptCdDoc))
        stringSqlDeptCdDoc += ", ";
      stringSqlDeptCdDoc += " '" + stringDepartNoDoc + "' ";
      // 部門(新)
      // if(!"".equals(stringSqlDeptCd)) stringSqlDeptCd += ", " ;
      // stringSqlDeptCd += " '"+stringTemp+"' " ;
      //
      stringDeptCd3 = exeUtil.doSubstring(stringTemp, 0, 3);
      if ("".equals(stringTemp) || "null".equals(stringTemp))
        continue;
      //
      if (",A140,A170,".indexOf(stringTemp) != -1) {
        // 資訊費用 不分 內外業
        if (!"".equals(stringSqlCostID))
          stringSqlCostID += " OR ";
        stringSqlCostID += " M12.CostID LIKE  'M%'";
      } else if ("A17,".indexOf(stringDeptCd3) == -1 && "0".equals(exeUtil.doSubstring(stringTemp, 3, 4))) {
        // 外業
        if (!"".equals(stringSqlOutDeptCd))
          stringSqlOutDeptCd += ", ";
        stringSqlOutDeptCd += " '" + stringDeptCd3 + "' ";
      } else {
        // 人總全部屬於內業
        // 內業
        if (!"".equals(stringSqlInDeptCd))
          stringSqlInDeptCd += " OR ";
        stringSqlInDeptCd += " M12.DepartNo  LIKE  '" + stringDeptCd3 + "%' ";
      }
      // 請款代碼
      /*
       * vectorCostID = (Vector) hashtableDeptCdToCostID.get(stringTemp) ;
       * if(vectorCostID == null) continue ; for(int intNoL=0 ;
       * intNoL<vectorCostID.size() ; intNoL++) { stringTemp =
       * (""+vectorCostID.get(intNoL)).trim() ;
       * if(vectorCostIDAll.indexOf(stringTemp)!=-1) continue ;
       * if("".equals(stringTemp) || "null".equals(stringTemp)) continue ;
       * if(!"".equals(stringSqlCostID)) stringSqlCostID += " OR " ; stringSqlCostID
       * += " SUBSTRING(CostID,1,"+intSize+") = '"+stringTemp+"' " ;
       * vectorCostIDAll.add(stringTemp) ; }
       */
    }
    if (!"".equals(stringSqlOutDeptCd)) {
      stringSqlOutDeptCd = " AND (M12.InOut IN(SELECT AcctNoType " + " FROM Doc7M0551 " + " WHERE  InOut  = 'O') AND " + " M12.DepartNo IN (" + stringSqlOutDeptCd + ")) ";
    }
    if (!"".equals(stringSqlInDeptCd)) {
      stringSqlInDeptCd = " AND (M12.InOut IN(SELECT  AcctNoType " + " FROM  Doc7M0551 " + "WHERE  InOut  = 'I') AND " + " (" + stringSqlInDeptCd + ")) ";
    }
    if (!"".equals(stringSqlCostID)) {
      stringSqlCostID = " AND (" + stringSqlCostID + ") ";
    }
    // 不作預算檢查
    Vector vectorDeptCdCostID = new Vector();
    String[][] retDoc7M054 = null;
    stringSqlAnd = " AND  UseDateStart  <=  '" + stringCDate + "' " + " AND  UseDateEnd  >=  '" + stringCDate + "' " + " AND  BudgetControl = 'N' " + " AND  DepartNo  IN  ("
        + stringSqlDeptCdDoc + ")";
    retDoc7M054 = getDoc7M054("", "", "", stringSqlAnd);
    for (int intNo = 0; intNo < retDoc7M054.length; intNo++) {
      stringDepartNoDoc = retDoc7M054[intNo][1].trim();
      stringDepartNo = getDeptCd("", stringDepartNoDoc, " AND LEN(DEPT_CD) = 4 ");
      if ("".equals(stringDepartNo))
        stringDepartNo = stringDepartNoDoc;
      stringTemp = stringDepartNo + "%-%" + retDoc7M054[intNo][0].trim();
      //
      vectorDeptCdCostID.add(stringTemp);
    }
    // 請購-採發金額
    System.out.println("請購-採發金額------------------------------");
    stringSqlMajor = "SELECT  M10.ComNo,  M12.DepartNo,  SUBSTRING(CONVERT(char(10),NeedDate,111),6,2),  CostID,  SUM(RealMoney-NoUseRealMoney) "
        + " FROM  Doc5M014 M12,  Doc5M011 M10 " + " WHERE  M12.BarCode  =  M10.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'X' "
        + " AND  ((M10.Unipurchase='Y'  AND  M10.UNDERGO_WRITE  =  'H') OR " + " (M10.UNDERGO_WRITE  =  'Y')) " + " AND  M10.BarCode  NOT  IN  (SELECT  BarCode "
        + " FROM  Doc5M0141 " + " WHERE  YM  BETWEEN   '" + intYearAC + "/01/01' AND '" + intYearAC + "/12/31')  ";
    if (intYearAC > 1900)
      stringSqlMajor += " AND  M10.NeedDate  BETWEEN   '" + intYearAC + "/01/01' AND '" + intYearAC + "/12/31'  ";
    if (!"".equals(stringBarCodeExcept))
      stringSqlMajor += " AND  M10.BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringComNoQ)) {
      if (vectorComNo.indexOf(stringComNoQ) != -1) {
        stringSqlMajor += " AND  M10.ComNo  =  '" + stringComNoQ + "' ";
      } else {
        stringSqlMajor += " AND  M10.ComNo  NOT IN(" + stringSqlComNo + ") ";
      }
    }
    stringSqlGroup += " GROUP BY M12.InOut,  M10.ComNo,  M12.DepartNo,  SUBSTRING(CONVERT(char(10),NeedDate,111),6,2), CostID ";
    if (!"".equals(stringSqlOutDeptCd)) {
      stringSql = stringSqlMajor + stringSqlOutDeptCd + stringSqlGroup;
      retData = dbDoc.queryFromPool(stringSql);
      doSumCheckMoney("0", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
    }
    if (!"".equals(stringSqlInDeptCd)) {
      stringSql = stringSqlMajor + stringSqlInDeptCd + stringSqlGroup;
      retData = dbDoc.queryFromPool(stringSql);
      doSumCheckMoney("A", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
    }
    if (!"".equals(stringSqlCostID)) {
      stringSql = stringSqlMajor + stringSqlCostID + stringSqlGroup;
      retData = dbDoc.queryFromPool(stringSql);
      doSumCheckMoney("A", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
    }
    // 請購-請購金額
    System.out.println("請購-採發金額------------------------------");
    if (stringFlow.indexOf("採購") == -1) {
      stringSqlMajor = "SELECT  M10.ComNo,  M12.DepartNo,  SUBSTRING(CONVERT(char(10),NeedDate,111),6,2),  CostID,  SUM(BudgetMoney),  M12.InOut "
          + " FROM  Doc5M014 M12,  Doc5M011 M10 " + " WHERE  M12.BarCode  =  M10.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'X' "
          + " AND  NOT  ((M10.Unipurchase='Y'  AND M10.UNDERGO_WRITE  =  'H') OR  " + " (M10.UNDERGO_WRITE  =  'Y'))" + " AND  M10.BarCode  NOT  IN  (SELECT  BarCode "
          + " FROM  Doc5M0141 " + " WHERE  YM  BETWEEN   '" + intYearAC + "/01/01' AND '" + intYearAC + "/12/31')  ";
      if (intYearAC > 1900)
        stringSqlMajor += " AND  M10.NeedDate  BETWEEN   '" + intYearAC + "/01/01' AND '" + intYearAC + "/12/31'  ";
      if (!"".equals(stringBarCodeExcept))
        stringSqlMajor += " AND  M10.BarCode  <>  '" + stringBarCodeExcept + "' ";
      if (!"".equals(stringComNoQ)) {
        if (vectorComNo.indexOf(stringComNoQ) != -1) {
          stringSqlMajor += " AND  M10.ComNo  =  '" + stringComNoQ + "' ";
        } else {
          stringSqlMajor += " AND  M10.ComNo  NOT IN(" + stringSqlComNo + ") ";
        }
      }
      stringSqlGroup = " GROUP BY M12.InOut,  M10.ComNo,  M12.DepartNo,  SUBSTRING(CONVERT(char(10),NeedDate,111),6,2), CostID ";
      //
      if (!"".equals(stringSqlOutDeptCd)) {
        stringSql = stringSqlMajor + stringSqlOutDeptCd + stringSqlGroup;
        retData = dbDoc.queryFromPool(stringSql);
        doSumCheckMoney("0", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
      }
      if (!"".equals(stringSqlInDeptCd)) {
        stringSql = stringSqlMajor + stringSqlInDeptCd + stringSqlGroup;
        retData = dbDoc.queryFromPool(stringSql);
        doSumCheckMoney("A", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
      }
      if (!"".equals(stringSqlCostID)) {
        stringSql = stringSqlMajor + stringSqlCostID + stringSqlGroup;
        retData = dbDoc.queryFromPool(stringSql);
        doSumCheckMoney("A", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
      }
      System.out.println("請購-請購金額------------------------------");
    }
    // 逐月攤提
    System.out.println("請購-逐月攤提------------------------------");
    stringSqlMajor = "SELECT  M10.ComNo,  M12.DepartNo,  SUBSTRING(CONVERT(char(10),YM,111),6,2),  CostID,  SUM(RealMoney),  M12.InOut " + " FROM  Doc5M0141 M12,  Doc5M011 M10 "
        + " WHERE  M12.BarCode  =  M10.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'X' ";
    if (intYearAC > 1900)
      stringSqlMajor += " AND  M12.YM  BETWEEN   '" + intYearAC + "/01/01' AND '" + intYearAC + "/12/31'  ";
    if (!"".equals(stringBarCodeExcept))
      stringSqlMajor += " AND  M10.BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringComNoQ)) {
      if (vectorComNo.indexOf(stringComNoQ) != -1) {
        stringSqlMajor += " AND  M10.ComNo  =  '" + stringComNoQ + "' ";
      } else {
        stringSqlMajor += " AND  M10.ComNo  NOT IN(" + stringSqlComNo + ") ";
      }
    }
    stringSqlGroup = " GROUP BY M12.InOut,  M10.ComNo,  M12.DepartNo,  SUBSTRING(CONVERT(char(10),YM,111),6,2), CostID ";
    //
    if (!"".equals(stringSqlOutDeptCd)) {
      stringSql = stringSqlMajor + stringSqlOutDeptCd + stringSqlGroup;
      retData = dbDoc.queryFromPool(stringSql);
      doSumCheckMoney("0", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
    }
    if (!"".equals(stringSqlInDeptCd)) {
      stringSql = stringSqlMajor + stringSqlInDeptCd + stringSqlGroup;
      retData = dbDoc.queryFromPool(stringSql);
      doSumCheckMoney("A", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
    }
    if (!"".equals(stringSqlCostID)) {
      stringSql = stringSqlMajor + stringSqlCostID + stringSqlGroup;
      retData = dbDoc.queryFromPool(stringSql);
      doSumCheckMoney("A", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
    }
    //
    System.out.println("請款------------------------------");
    stringSqlMajor = "SELECT  M10.ComNo, M12.DepartNo,  SUBSTRING(CONVERT(char(10),CDate,111),6,2),  CostID,  SUM(RealTotalMoney) " + " FROM  Doc5M022 M12,  Doc5M020 M10 "
        + " WHERE  M12.BarCode      =  M10.BarCode " + " AND  PurchaseNoExist  =  'N' " + " AND  UNDERGO_WRITE  <>  'E'  " + " AND  M10.DocNoType  <>  'C' "
        + " AND  M12.BarCode  NOT  IN (SELECT  BarCode  FROM  Doc5M0226) "; // M12.CostID <> 'F297001' " ;
    if (intYearAC > 1900)
      stringSqlMajor += " AND  M10.CDate  BETWEEN   '" + intYearAC + "/01/01' AND '" + intYearAC + "/12/31'  ";
    if (!"".equals(stringBarCodeExcept))
      stringSqlMajor += " AND  M10.BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringComNoQ)) {
      if (vectorComNo.indexOf(stringComNoQ) != -1) {
        stringSqlMajor += " AND  M10.ComNo  =  '" + stringComNoQ + "' ";
      } else {
        stringSqlMajor += " AND  M10.ComNo  NOT IN(" + stringSqlComNo + ") ";
      }
    }
    stringSqlGroup = " GROUP BY M10.ComNo,  M12.DepartNo,  SUBSTRING(CONVERT(char(10),CDate,111),6,2), CostID ";
    if (!"".equals(stringSqlOutDeptCd)) {
      stringSql = stringSqlMajor + stringSqlOutDeptCd + stringSqlGroup;
      retData = dbDoc.queryFromPool(stringSql);
      doSumCheckMoney("0", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
    }
    if (!"".equals(stringSqlInDeptCd)) {
      stringSql = stringSqlMajor + stringSqlInDeptCd + stringSqlGroup;
      retData = dbDoc.queryFromPool(stringSql);
      doSumCheckMoney("A", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
    }
    if (!"".equals(stringSqlCostID)) {
      stringSql = stringSqlMajor + stringSqlCostID + stringSqlGroup;
      retData = dbDoc.queryFromPool(stringSql);
      doSumCheckMoney("A", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
    }
    // 支出證明單
    /*
     * System.out.println("支出證明單------------------------------"); stringSqlMajor =
     * "SELECT  M10.ComNo, M12.DepartNo,  SUBSTRING(CONVERT(char(10),CDate,111),6,2),  CostID,  SUM(RealTotalMoney) "
     * + " FROM  Doc5M052 M12,  Doc5M050 M10 " +
     * " WHERE  M12.BarCode      =  M10.BarCode " +
     * " AND  M10. UNDERGO_WRITE  <>  'E'  " ; if(intYearAC>1900) stringSqlMajor +=
     * " AND  M10.CDate  BETWEEN   '"+intYearAC+"/01/01' AND '"
     * +intYearAC+"/12/31'  " ; if(!"".equals(stringBarCodeExcept)) stringSqlMajor
     * += " AND  M10.BarCode  <>  '" + stringBarCodeExcept + "' " ;
     * if(!"".equals(stringComNoQ)) { if(vectorComNo.indexOf(stringComNoQ) != -1) {
     * stringSqlMajor += " AND  M10.ComNo  =  '"+stringComNoQ+"' " ; } else {
     * stringSqlMajor += " AND  M10.ComNo  NOT IN("+stringSqlComNo+") " ; } }
     * stringSqlGroup =
     * " GROUP BY M10.ComNo,  M12.DepartNo,  SUBSTRING(CONVERT(char(10),CDate,111),6,2), CostID "
     * ; if(!"".equals(stringSqlOutDeptCd)) { stringSql = stringSqlMajor +
     * stringSqlOutDeptCd + stringSqlGroup ; retData =
     * dbDoc.queryFromPool(stringSql) ; doSumCheckMoney("0", retData, hashtableKey,
     * hashtableMidCostID, vectorDeptCdCostID, exeUtil) ; }
     * if(!"".equals(stringSqlInDeptCd)) { stringSql = stringSqlMajor +
     * stringSqlInDeptCd + stringSqlGroup ; retData = dbDoc.queryFromPool(stringSql)
     * ; doSumCheckMoney("A", retData, hashtableKey, hashtableMidCostID,
     * vectorDeptCdCostID, exeUtil) ; } if(!"".equals(stringSqlCostID)) { stringSql
     * = stringSqlMajor + stringSqlCostID + stringSqlGroup ; retData =
     * dbDoc.queryFromPool(stringSql) ; doSumCheckMoney("A", retData, hashtableKey,
     * hashtableMidCostID, vectorDeptCdCostID, exeUtil) ; }
     */
    System.out.println("借款------------------------------");
    // 借款
    stringSqlMajor = " SELECT  M10.ComNo, M12.DepartNo,  SUBSTRING(CONVERT(char(10),CDate,111),6,2),  CostID,  SUM(RealTotalMoney) " + " FROM  Doc5M032 M12,  Doc5M030 M10 "
        + " WHERE  M12.BarCode  =  M10.BarCode " + " AND  PurchaseNoExist  =  'N' " + " AND  UNDERGO_WRITE  <>  'E'  ";
    if (intYearAC > 1900)
      stringSqlMajor += " AND  M10.CDate  BETWEEN   '" + intYearAC + "/01/01' AND '" + intYearAC + "/12/31'  ";
    if (!"".equals(stringBarCodeExcept))
      stringSqlMajor += " AND  M10.BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringComNoQ)) {
      if (vectorComNo.indexOf(stringComNoQ) != -1) {
        stringSqlMajor += " AND  M10.ComNo  =  '" + stringComNoQ + "' ";
      } else {
        stringSqlMajor += " AND  M10.ComNo  NOT IN(" + stringSqlComNo + ") ";
      }
    }
    stringSqlGroup = " GROUP BY M10.ComNo, M12.DepartNo,  SUBSTRING(CONVERT(char(10),CDate,111),6,2), CostID ";
    if (!"".equals(stringSqlOutDeptCd)) {
      stringSql = stringSqlMajor + stringSqlOutDeptCd + stringSqlGroup;
      retData = dbDoc.queryFromPool(stringSql);
      doSumCheckMoney("0", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
    }
    if (!"".equals(stringSqlInDeptCd)) {
      stringSql = stringSqlMajor + stringSqlInDeptCd + stringSqlGroup;
      retData = dbDoc.queryFromPool(stringSql);
      doSumCheckMoney("A", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
    }
    if (!"".equals(stringSqlCostID)) {
      stringSql = stringSqlMajor + stringSqlCostID + stringSqlGroup;
      retData = dbDoc.queryFromPool(stringSql);
      doSumCheckMoney("A", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
    }
    System.out.println("借款沖銷-追加-----------------------------");
    stringSqlMajor = " SELECT  M10.ComNo, M12.DepartNo,  SUBSTRING(CONVERT(char(10),CDate,111),6,2),  M12.CostID,  SUM(PurchaseMoney) " + " FROM  Doc5M0273 M12,  Doc5M020 M10 "
        + " WHERE  M12.BarCode  =  M10.BarCode " + " AND  M12.DocType  =  'C' " + " AND  M10.UNDERGO_WRITE  <>  'E'  ";
    if (intYearAC > 1900)
      stringSqlMajor += " AND  M10.CDate  BETWEEN   '" + intYearAC + "/01/01' AND '" + intYearAC + "/12/31'  ";
    if (!"".equals(stringBarCodeExcept))
      stringSqlMajor += " AND  M10.BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringComNoQ)) {
      if (vectorComNo.indexOf(stringComNoQ) != -1) {
        stringSqlMajor += " AND  M10.ComNo  =  '" + stringComNoQ + "' ";
      } else {
        stringSqlMajor += " AND  M10.ComNo  NOT IN(" + stringSqlComNo + ") ";
      }
    }
    stringSqlGroup = " GROUP BY M10.ComNo, M12.DepartNo,  SUBSTRING(CONVERT(char(10),CDate,111),6,2), M12.CostID ";
    if (!"".equals(stringSqlOutDeptCd)) {
      stringSql = stringSqlMajor + stringSqlOutDeptCd + stringSqlGroup;
      retData = dbDoc.queryFromPool(stringSql);
      doSumCheckMoney("0", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
    }
    if (!"".equals(stringSqlInDeptCd)) {
      stringSql = stringSqlMajor + stringSqlInDeptCd + stringSqlGroup;
      retData = dbDoc.queryFromPool(stringSql);
      doSumCheckMoney("A", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
    }
    if (!"".equals(stringSqlCostID)) {
      stringSql = stringSqlMajor + stringSqlCostID + stringSqlGroup;
      retData = dbDoc.queryFromPool(stringSql);
      doSumCheckMoney("A", retData, hashtableKey, hashtableMidCostID, vectorDeptCdCostID, exeUtil);
    }
    System.out.println("借款沖銷------------------------------");
    return hashtableKey;
  }

  public void doSumCheckMoney(String stringTail, String[][] retData, Hashtable hashtableKey, Hashtable hashtableMidCostID, Vector vectorDeptCdCostID, FargloryUtil exeUtil)
      throws Throwable {
    String stringKey = "";
    String stringComNo = "";
    String stringDepartNo = "";
    String stringDepartNoL = "";
    String stringDeptCd3 = "";
    String stringCostID = "";
    String stringMONTH = "";
    String stringMoney = "";
    String stringCostIDType = "";
    double doubleMoney = 0;
    for (int intNo = 0; intNo < retData.length; intNo++) {
      stringComNo = retData[intNo][0].trim();
      stringDepartNo = retData[intNo][1].trim();
      stringMONTH = retData[intNo][2].trim();
      stringCostID = retData[intNo][3].trim();
      stringCostIDType = getCostIDType(stringCostID);
      stringMoney = retData[intNo][4].trim();
      //
      if (stringDepartNo.startsWith("A18")) {
        // 財務室
        stringDepartNoL = stringDepartNo;
      } else {
        // 權限
        if (stringDepartNo.startsWith("A17")) {
          // 人總室
          stringDepartNoL = exeUtil.doSubstring(stringDepartNo, 0, 3) + "A";
        } else {
          stringDepartNoL = exeUtil.doSubstring(stringDepartNo, 0, 3) + stringTail;
        }
        // 預算
        if (stringCostIDType.startsWith("M")) {
          stringDepartNo = "A140";
        } else if (stringCostIDType.startsWith("H")) {
          stringDepartNo = "A170";
        } else {
          stringDepartNo = exeUtil.doSubstring(stringDepartNo, 0, 3) + stringTail;
        }
        if ("A170".equals(stringDepartNo) && !stringCostIDType.startsWith("H"))
          stringDepartNo = "";
      }
      // 不作預算控管
      if ("".equals(stringDepartNo))
        continue;
      if (vectorDeptCdCostID.indexOf(stringDepartNoL + "%-%" + stringCostID) != -1)
        continue;
      //
      doubleMoney = exeUtil.doParseDouble(stringMoney);
      // 部門-費差科目-月
      if ("A0101".equals(stringCostIDType) && !"".equals(stringCostIDType)) {
        stringKey = stringDepartNo + "-" + stringCostIDType + "-" + exeUtil.doParseInteger(stringMONTH);
        stringMoney = "" + (doubleMoney + exeUtil.doParseDouble("" + hashtableKey.get(stringKey)));
        hashtableKey.put(stringKey, stringMoney);
      }
      // 部門-0-月
      stringKey = stringDepartNo + "-0-" + exeUtil.doParseInteger(stringMONTH);
      stringMoney = "" + (doubleMoney + exeUtil.doParseDouble("" + hashtableKey.get(stringKey)));
      System.out.println("stringKey(" + stringKey + ")stringMoney(" + stringMoney + ")-----------------------");
      hashtableKey.put(stringKey, stringMoney);
    }
  }

  // 表格 Doc5M0501
  public String[][] getDoc5M0501(String stringItemName, String stringCostID, String stringGroupType, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringID = "";
    String[][] retDoc5M0501 = null;
    // 0 ID
    stringSql = " SELECT  ItemName,  CostID,  GroupType,  Descript " + " FROM  Doc5M0501" + " WHERE  1=1 ";
    if (!"".equals(stringItemName))
      stringSql += " AND  ItemName  =  '" + stringItemName + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringGroupType))
      stringSql += " AND  GroupType  =  '" + stringGroupType + "' ";
    stringSql += stringSqlAnd + " ORDER BY  RecordNo ";
    retDoc5M0501 = dbDoc.queryFromPool(stringSql);
    return retDoc5M0501;
  }

  // 表格 Doc6M010
  public String getIDForDoc6M010(String stringBarCode) throws Throwable {
    String stringSql = "";
    String stringID = "";
    String[][] retDoc6M010 = null;
    // 0 ID
    stringSql = " SELECT  M10.ID " + " FROM  Doc6M010 M10" + " WHERE  M10.BarCode  =  '" + stringBarCode + "' ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    //
    if (retDoc6M010.length > 0)
      stringID = retDoc6M010[0][0].trim();
    return stringID;
  }

  public String doUpdateForDoc6M010(String stringFieldName, String stringFieldValue, String stringBarCode) throws Throwable {
    String stringSql = "";
    //
    stringSql = " UPDATE  Doc6M010  SET " + stringFieldName + "  =  '" + stringFieldValue + "'  WHERE  BarCode  =  '" + stringBarCode + "' ";
    return stringSql;
  }

  // 借款沖銷
  public String[][] getFurtureBarCodeForDoc6M010(String stringRocYear, String stringDepartNo) throws Throwable {
    return getFurtureBarCodeForDoc6M010(stringRocYear, stringDepartNo, "Z6");
  }

  public String[][] getFurtureBarCodeForDoc6M010(String stringRocYear, String stringDepartNo, String stringComNo) throws Throwable {
    String stringSql = "";
    String stringSqlAnd = "";
    String stringDepartNoL = "";
    String stringACDateS = "";
    String stringACDateE = "";
    String stringKindNo = "24";
    String stringSpecBudgetVoucher = ",017PR,033FG,"; // +get("SPEC_BUDGET_VOUCHER") ;
    String[] arraySpecBudgetVoucher = convert.StringToken(stringSpecBudgetVoucher, ",");
    String[][] retDoc6M010 = null;
    //
    for (int intNo = 0; intNo < arraySpecBudgetVoucher.length; intNo++) {
      stringDepartNoL = arraySpecBudgetVoucher[intNo].trim();
      if ("".equals(stringDepartNoL))
        continue;
      //
      if (!"".equals(stringSqlAnd))
        stringSqlAnd += ",";
      //
      stringSqlAnd += " '" + stringDepartNoL + "' ";
    }
    //
    //
    stringACDateS = stringRocYear + "0101";
    stringACDateS = convert.roc2ac(stringACDateS);
    stringACDateS = datetime.dateAdd(stringACDateS, "y", -1);
    stringACDateS = convert.FormatedDate(stringACDateS, "/");
    stringACDateE = stringRocYear + "1231";
    stringACDateE = convert.roc2ac(stringACDateE);
    stringACDateE = convert.FormatedDate(stringACDateE, "/");
    // 0 BarCode 1 Descript 2 DocNo 3 DocNo1 4 DocNo2
    // 5 DocNo3 6 ID 7 UNDERGO_WRITE 8 RetainMoney 9 ComNo
    // 10 PayType 11 PurchaseNo
    stringSql = " SELECT  M10.BarCode,  M10.Descript,  M10.DocNo,           M10.DocNo1,       M10.DocNo2, "
        + " M10. DocNo3,  M10.ID,        M10.UNDERGO_WRITE,   M10.RetainMoney,  M10.ComNo,  " + " M10.PayType,  M10.PurchaseNo " + " FROM  Doc6M010 M10"
        + " WHERE  M10.BarCode  NOT  IN  (SELECT  BarCode " + " FROM  Doc2M014 " + " WHERE  STATUS_CD  =  'Z') "
        + " AND  M10.ID  NOT  IN  (SELECT  ID_Def  FROM  Doc2M080  WHERE  Remark  LIKE  '%借款沖銷%') " + " AND  M10.KindNo  =  '" + stringKindNo + "' "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.DocNoType  NOT IN ('B','C') " + " AND  M10.CDate  BETWEEN  '"
        + stringRocYear + "/01/01'  AND  '" + stringRocYear + "/12/31' ";
    if (!"".equals(stringDepartNo)) {
      stringSql += " AND  M10.DepartNo  =  '" + stringDepartNo + "' ";
    } else {
      if (!"".equals(stringSqlAnd)) {
        stringSql += " AND  M10.DepartNo  NOT IN (" + stringSqlAnd + ") ";
      }
    }
    stringSql += "ORDER BY  M10.BarCode ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    //
    return retDoc6M010;
  }

  // 借款已轉傳票未沖銷
  public String[][] getFurtureBarCodeForBorrowDoc6M010(String stringRocYear, String stringDepartNo) throws Throwable {
    return getFurtureBarCodeForBorrowDoc6M010(stringRocYear, stringDepartNo, "Z6");
  }

  public String[][] getFurtureBarCodeForBorrowDoc6M010(String stringRocYear, String stringDepartNo, String stringComNo) throws Throwable {
    String stringSql = "";
    String stringSqlAnd = "";
    String stringDepartNoL = "";
    String stringACDateS = "";
    String stringACDateE = "";
    String stringKindNo = "26";
    String stringSpecBudgetVoucher = ",017PR,033FG,"; // +get("SPEC_BUDGET_VOUCHER") ;
    String[] arraySpecBudgetVoucher = convert.StringToken(stringSpecBudgetVoucher, ",");
    String[][] retDoc6M010 = null;
    //
    for (int intNo = 0; intNo < arraySpecBudgetVoucher.length; intNo++) {
      stringDepartNoL = arraySpecBudgetVoucher[intNo].trim();
      if ("".equals(stringDepartNoL))
        continue;
      //
      if (!"".equals(stringSqlAnd))
        stringSqlAnd += ",";
      //
      stringSqlAnd += " '" + stringDepartNoL + "' ";
    }
    //
    stringACDateS = stringRocYear + "0101";
    stringACDateS = convert.roc2ac(stringACDateS);
    stringACDateS = datetime.dateAdd(stringACDateS, "y", -1);
    stringACDateS = convert.FormatedDate(stringACDateS, "/");
    stringACDateE = stringRocYear + "1231";
    stringACDateE = convert.roc2ac(stringACDateE);
    stringACDateE = convert.FormatedDate(stringACDateE, "/");
    // 0 BarCode 1 Descript 2 DocNo 3 DocNo1 4 DocNo2
    // 5 DocNo3 6 ID 7 UNDERGO_WRITE 8 RetainMoney 9 ComNo
    // 10 PayType 11 BorrowMoney 12 DepartNo 13 FactoryNo
    stringSql = " SELECT  M10.BarCode,   M10.Descript,     M10.DocNo,           M10.DocNo1,       M10.DocNo2, "
        + " M10. DocNo3,   M10.ID,           M10.UNDERGO_WRITE,   M10.RetainMoney,  M10.ComNo,  " + " M10.PayType,   M10.BorrowMoney,  M10.DepartNo,        M10.FactoryNo  "
        + " FROM  Doc6M010 M10" + " WHERE  M10.BarCode  IN           (SELECT  BarCode " + " FROM  Doc2M014 " + " WHERE  STATUS_CD  =  'Z') "
        + " AND  M10.ID  NOT  IN  (SELECT  ID_Def    FROM  Doc2M080  WHERE  Remark  LIKE  '%借款未沖銷%') " + " AND  M10.DocNo      NOT  IN  (SELECT  M101.BorrowNo "
        + " FROM  Doc6M0101  M101,  Doc6M010  M10 " + " WHERE  M10.CDate  BETWEEN  '" + stringRocYear + "/01/01'  AND  '" + stringRocYear + "/12/31' "
        + " AND  M101.BarCode  =  M10.BarCode) " + " AND  M10.KindNo  =  '" + stringKindNo + "' " + " AND  M10.ComNo   =  '" + stringComNo + "' "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.DocNoType  NOT IN ('B','C') " +
        // " AND ISNULL(M10.EndStatus,'') <> 'Y' " +
        " AND  M10.CDate  BETWEEN  '" + stringRocYear + "/01/01'  AND  '" + stringRocYear + "/12/31' ";
    if (!"".equals(stringDepartNo)) {
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    } else {
      if (!"".equals(stringSqlAnd)) {
        stringSql += " AND  M10.DepartNo  NOT IN (" + stringSqlAnd + ") ";
      }
    }
    stringSql += "ORDER BY  M10.BarCode ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    //
    return retDoc6M010;
  }

  // 借款未轉傳票
  public String[][] getFurtureBarCode2ForBorrowDoc6M010(String stringRocYear, String stringDepartNo) throws Throwable {
    return getFurtureBarCode2ForBorrowDoc6M010(stringRocYear, stringDepartNo, "Z6");
  }

  public String[][] getFurtureBarCode2ForBorrowDoc6M010(String stringRocYear, String stringDepartNo, String stingComNo) throws Throwable {
    String stringSql = "";
    String stringSqlAnd = "";
    String stringACDateS = "";
    String stringACDateE = "";
    String stringKindNo = "26";
    String stringDepartNoL = "";
    String stringSpecBudgetVoucher = ",017PR,033FG,"; // +get("SPEC_BUDGET_VOUCHER") ;
    String[] arraySpecBudgetVoucher = convert.StringToken(stringSpecBudgetVoucher, ",");
    String[][] retDoc6M010 = null;
    //
    for (int intNo = 0; intNo < arraySpecBudgetVoucher.length; intNo++) {
      stringDepartNoL = arraySpecBudgetVoucher[intNo].trim();
      if ("".equals(stringDepartNoL))
        continue;
      //
      if (!"".equals(stringSqlAnd))
        stringSqlAnd += ",";
      //
      stringSqlAnd += " '" + stringDepartNoL + "' ";
    }
    //
    stringACDateS = stringRocYear + "0101";
    stringACDateS = convert.roc2ac(stringACDateS);
    stringACDateS = datetime.dateAdd(stringACDateS, "y", -1);
    stringACDateS = convert.FormatedDate(stringACDateS, "/");
    stringACDateE = stringRocYear + "1231";
    stringACDateE = convert.roc2ac(stringACDateE);
    stringACDateE = convert.FormatedDate(stringACDateE, "/");
    // 0 BarCode 1 Descript 2 DocNo 3 DocNo1 4 DocNo2
    // 5 DocNo3 6 ID 7 UNDERGO_WRITE 8 RetainMoney 9 ComNo
    // 10 PayType 11 BorrowMoney 12 DepartNo 13 FactoryNo
    stringSql = " SELECT  M10.BarCode,  M10.Descript,     M10.DocNo,           M10.DocNo1,       M10.DocNo2, "
        + " M10. DocNo3,  M10.ID,           M10.UNDERGO_WRITE,   M10.RetainMoney,  M10.ComNo,  " + " M10.PayType,  M10.BorrowMoney,  M10.DepartNo,        M10.FactoryNo  "
        + " FROM  Doc6M010 M10" + " WHERE  M10.BarCode  NOT  IN  (SELECT  BarCode " + " FROM  Doc2M014 " + " WHERE  STATUS_CD  =  'Z') "
        + " AND  M10.ID NOT  IN  (SELECT  ID_Def    FROM  Doc2M080  WHERE  Remark  LIKE  '%借款%'    AND  Remark  NOT LIKE  '%借款未沖銷%'  AND  Remark  NOT LIKE  '%借款沖銷%') "
        + " AND  M10.KindNo  =  '" + stringKindNo + "' " + " AND  M10.ComNo   =  '" + stingComNo + "' " + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.CDate  BETWEEN  '"
        + stringRocYear + "/01/01'  AND  '" + stringRocYear + "/12/31' ";
    if (!"".equals(stringDepartNo)) {
      stringSql += " AND  M10.DepartNo  =  '" + stringDepartNo + "' ";
    } else {
      if (!"".equals(stringSqlAnd)) {
        stringSql += " AND  M10.DepartNo  NOT IN (" + stringSqlAnd + ") ";
      }
    }
    stringSql += "ORDER BY  M10.BarCode ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    //
    return retDoc6M010;
  }

  // 請購單是否存在於 Doc6M010，存在回傳 true，否則回傳 false
  // 廢止
  public boolean isExistDoc6M010(String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3) throws Throwable {
    return isExistDoc6M010(stringComNo, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "");
  }

  public boolean isExistDoc6M010(String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4) throws Throwable {
    return isExistDoc6M010Union("Doc6M010", stringComNo, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, stringPurchaseNo4);
  }

  public boolean isExistDoc6M010Union(String stringTable, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringPurchaseNo4) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M010 = null;
    boolean booleanStatus = false;
    //
    stringSql = "SELECT  BarCode " + " FROM  " + stringTable + " " + " WHERE  1  =  1 " + " AND  ISNULL(PurchaseNo1,'')  =  '" + stringPurchaseNo1 + "' "
        + " AND  ISNULL(PurchaseNo2,'')  =  '" + stringPurchaseNo2 + "' " + " AND  ISNULL(PurchaseNo3,'')  =  '" + stringPurchaseNo3 + "' " + " AND  ComNo  =  '" + stringComNo
        + "' ";
    if (!"".equals(stringPurchaseNo4))
      stringSql += " AND  ISNULL(PurchaseNo4,'')  =  '" + stringPurchaseNo4 + "' ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M010.length > 0)
      booleanStatus = true;
    for (int intNo = 0; intNo < retDoc6M010.length; intNo++) {
      System.out.println((intNo + 1) + "已使用(" + stringTable + ")--------------" + retDoc6M010[intNo][0]);
    }
    return booleanStatus;
  }

  public boolean isExistSignDoc6M010(String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4, String stringSign,
      String stringEDateTime) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M010 = null;
    boolean booleanStatus = false;
    //
    stringSql = "SELECT  BarCode " + " FROM  Doc6M010 " + " WHERE  1  =  1 " + " AND  PurchaseNo1  =  '" + stringPurchaseNo1 + "' " + " AND  PurchaseNo2  =  '" + stringPurchaseNo2
        + "' " + " AND  PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  PurchaseNo4  =  '" + stringPurchaseNo4 + "' " + " AND  ComNo  =  '" + stringComNo + "' "
        + " AND  EDateTime  " + stringSign + "  '" + stringEDateTime + "' ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M010.length > 0)
      booleanStatus = true;
    for (int intNo = 0; intNo < retDoc6M010.length; intNo++) {
      System.out.println((intNo + 1) + "已存在前期資料，不允刪除(Doc6M010)--------------" + retDoc6M010[intNo][0]);
    }
    return booleanStatus;
  }

  public String[][] getUndergoWriterDoc6M010(String stringBarCode, String stringFactoryNo) throws Throwable {
    return getUndergoWriterDoc6M010(stringBarCode, "", stringFactoryNo);
  }

  public String[][] getUndergoWriterDoc6M010(String stringBarCode, String stringComNo, String stringFactoryNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M010 = null;
    boolean booleanFirstTime = false;
    //
    stringSql = " SELECT  UNDERGO_WRITE,  BarCode " + " FROM  Doc6M010 " + " WHERE  BarCode  <>  '" + stringBarCode + "' " + " AND  (BarCode  IN  (SELECT  BarCode  "
        + " FROM  Doc6M011 " + " WHERE  FactoryNo  =  '" + stringFactoryNo + "') " + " OR  BarCode  IN  (SELECT  BarCode  " + " FROM  Doc6M013 " + " WHERE  FactoryNo  =  '"
        + stringFactoryNo + "') " + " OR  FactoryNo  =  '" + stringFactoryNo + "' ) ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    return retDoc6M010;
  }

  public String getMaxIDForDoc6M010() throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return getMaxIDUnionDoc("Doc6M010", exeUtil);
  }

  // KindNo = 24 請款申請書
  // KindNo = 26 借款申請書
  public String getBarCodeForDoc6M010(String stringComNo, String stringKindNo, String stringDocNo1, String stringDocNo2, String stringDocNo3) throws Throwable {
    String stringBarCode = "";
    String stringSql = "";
    String[][] retDoc6M010 = null;
    //
    stringSql = "SELECT  BarCode " + " FROM  Doc6M010 " + " WHERE  KindNo  =  '" + stringKindNo + "' " + " AND  ComNo  =  '" + stringComNo + "' " + " AND  DocNo1  =  '"
        + stringDocNo1 + "' " + " AND  DocNo2  =  '" + stringDocNo2 + "' " + " AND  DocNo3  =  '" + stringDocNo3 + "' ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M010.length > 0) {
      stringBarCode = retDoc6M010[0][0].trim();
    }
    return stringBarCode;
  }

  // 廢止
  public String getBarCodeForDoc6M010(String stringComNo, String stringDocNo1, String stringDocNo2, String stringDocNo3) throws Throwable {
    return getBarCodeForDoc6M010(stringComNo, "26", stringDocNo1, stringDocNo2, stringDocNo3);
  }

  // 廢止
  public String[][] getPurchaseNoBarCodeForDoc6M010(String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3) throws Throwable {
    String stringKindNo = "24";
    return getDoc6M010ForPurchaseNo(stringComNo, stringKindNo, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", "");
  }

  // 廢止
  public String[][] getPurchaseNoBarCodeForDoc6M010(String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3, String stringPurchaseNo4)
      throws Throwable {
    String stringKindNo = "24";
    return getDoc6M010ForPurchaseNo(stringComNo, stringKindNo, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, stringPurchaseNo4, "");
  }

  // KindNo 請款 24 借款 26
  public String[][] getDoc6M010ForPurchaseNo(String stringComNo, String stringKindNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringPurchaseNo4, String stringSqlAnd) throws Throwable {
    return getDoc6M010ForPurchaseNoUnion(stringComNo, stringKindNo, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, stringPurchaseNo4, stringSqlAnd, "Doc6M010");
  }

  public String[][] getDoc6M010ForPurchaseNoUnion(String stringComNo, String stringKindNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringPurchaseNo4, String stringSqlAnd, String stringTable) throws Throwable {
    String stringBarCode = "";
    String stringSql = "";
    String[][] retDoc6M010 = null;
    // 0 BarCode 1 PurchaseNo4 2 FactoryNo
    stringSql = "SELECT  BarCode,  PurchaseNo4,  FactoryNo " + " FROM  " + stringTable + " " + " WHERE  KindNo  =  '" + stringKindNo + "' " + " AND  ComNo  =  '" + stringComNo
        + "' " + " AND  ISNULL(PurchaseNo1,'')  =  '" + stringPurchaseNo1 + "' " + " AND  ISNULL(PurchaseNo2,'')  =  '" + stringPurchaseNo2 + "' "
        + " AND  ISNULL(PurchaseNo3,'')  =  '" + stringPurchaseNo3 + "' ";
    if (!"".equals(stringPurchaseNo4))
      stringSql += " AND  ISNULL(PurchaseNo4,'')  =  '" + stringPurchaseNo4 + "' ";
    stringSql += stringSqlAnd;
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    return retDoc6M010;
  }

  public String[][] getBarCodeKillBorrow(String stringBorrowNo1, String stringBorrowNo2, String stringBorrowNo3, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M010 = null;
    //
    stringSql = "SELECT  BarCode " + " FROM  Doc6M0101 " + " WHERE  BorrowNo1  =  '" + stringBorrowNo1 + "' " + " AND  BorrowNo2  =  '" + stringBorrowNo2 + "' "
        + " AND  BorrowNo3  =  '" + stringBorrowNo3 + "' " + " AND  BarCode  <>  '" + stringBarCode + "' " + " ORDER BY  BarCode ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    return retDoc6M010;
  }

  public double getExistBorrowMoney(String stringBorrowNo1, String stringBorrowNo2, String stringBorrowNo3, String stringBarCode) throws Throwable {
    return getExistBorrowMoney("Z6", stringBorrowNo1, stringBorrowNo2, stringBorrowNo3, stringBarCode, "");
  }

  public double getExistBorrowMoney(String stringBorrowNo1, String stringBorrowNo2, String stringBorrowNo3, String stringBarCode, String stringSqlAnd) throws Throwable {
    return getExistBorrowMoney("Z6", stringBorrowNo1, stringBorrowNo2, stringBorrowNo3, stringBarCode, stringSqlAnd);
  }

  public double getExistBorrowMoney(String stringComNo, String stringBorrowNo1, String stringBorrowNo2, String stringBorrowNo3, String stringBarCode, String stringSqlAnd)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc6M010 = null;
    //
    stringSql = "SELECT  SUM(M101.BorrowMoney) " + " FROM  Doc6M0101 M101,  Doc6M010 M10" + " WHERE  M101.BarCode =  M10.BarCode " + " AND  M10.ComNo  =  '" + stringComNo + "' "
        + " AND  M101.BorrowNo1  =  '" + stringBorrowNo1 + "' " + " AND  M101.BorrowNo2  =  '" + stringBorrowNo2 + "' " + " AND  M101.BorrowNo3  =  '" + stringBorrowNo3 + "' "
        + " AND  M10.BarCode  <>  '" + stringBarCode + "' " + stringSqlAnd;
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    return doParseDouble(retDoc6M010[0][0]);
  }

  public String[][] getBorrowFromDoc6M010(String stringComNo, String stringDocNo1, String stringDocNo2) throws Throwable {
    String stringSql = "";
    String stringKindNo = "26";
    String[][] retDoc6M010 = null;
    // 0 DocNo1 1 DocNo2 2 DocNo3
    stringSql = "SELECT  DocNo1,  DocNo2,  DocNo3,  BarCode " + " FROM  Doc6M010 " + " WHERE  KindNo  =  '" + stringKindNo + "' " + " AND  UNDERGO_WRITE  <>  'E' "
        + " AND  EndStatus  =  'N' " + " AND  RTRIM(DocNo)  NOT  IN  (SELECT  RTRIM(borrowNo)" + " FROM  Doc6M0101) ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringDocNo1))
      stringSql += " AND  DocNo1  =  '" + stringDocNo1 + "' ";
    if (!"".equals(stringDocNo2))
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    return retDoc6M010;
  }

  public String[][] getBorrow2FromDoc6M010(String stringComNo, String stringDocNo1, String stringDocNo2) throws Throwable {
    String stringSql = "";
    String stringKindNo = "26";
    String[][] retDoc6M010 = null;
    // 0 DocNo1 1 DocNo2 2 DocNo3 3 BarCode 4 BorrowMoney
    // 5 BorrowMinusMoney
    stringSql = "SELECT   DocNo1,  DocNo2,  DocNo3,  BarCode,  BorrowMoney,  BorrowMinusMoney " + " FROM    Doc6M010 " + " WHERE  KindNo  =  '" + stringKindNo + "' "
        + " AND  EndStatus  =  'N' " + " AND  UNDERGO_WRITE  <>  'E' " + " AND  RTRIM(DocNo)  IN  (SELECT  RTRIM(borrowNo)" + " FROM  Doc6M0101) ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringDocNo1))
      stringSql += " AND  DocNo1  =  '" + stringDocNo1 + "' ";
    if (!"".equals(stringDocNo2))
      stringSql += " AND  DocNo2  =  '" + stringDocNo2 + "' ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    return retDoc6M010;
  }

  // 由請款的借款沖銷之條碼編號，取得借款時的條碼編號
  public String[][] getBarCodeForDoc6M010(String stringBarCode) throws Throwable {
    String stringSql = "";
    String stringBarCide11 = "";
    String stringKindNo = "26";
    String[][] retDoc6M010 = null;
    // 0 BarCode 1 DocNo1 2 DocNo2 3 DocNo3
    stringSql = "SELECT  DISTINCT  M10.BarCode,  M10.DocNo1,  M10.DocNo2,  M10.DocNo3 " + " FROM  Doc6M010 M10 " + " WHERE  M10.KindNo  =  '" + stringKindNo + "' "
        + " AND  M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.DocNo  IN  (SELECT  BorrowNo " + " FROM  Doc6M0101 " + " WHERE  BarCode  =  '" + stringBarCode + "') "
        + " AND  M10.ComNo  IN  (SELECT  ComNo " + " FROM  Doc6M010 " + " WHERE  BarCode  =  '" + stringBarCode + "') ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    return retDoc6M010;
  }

  public String[][] getBarCodeDoc6M010(String stringCompanyCdQ, String stringDescriptQ, String stringBarCodeQ, String stringDocNoQ, String stringFactoryNoQ, String stringDepartCdQ,
      String stringEndStatus) throws Throwable {
    String stringSql = "";
    String stringKindNo = "26";
    String[][] retDoc6M010 = null;
    //
    stringSql = "SELECT  BarCode,  M10.DocNo1,  M10.DocNo2,  M10.DocNo3 " + " FROM  Doc6M010 M10   " + " WHERE  KindNo  =  '" + stringKindNo + "' "
        + " AND M10.UNDERGO_WRITE  <>  'E' " + " AND  M10.BarCode  IN (SELECT  BarCode " + " FROM  Doc2M014 " + " WHERE   STATUS_CD  =  'Z'  ";
    // 公司
    if (!"".equals(stringCompanyCdQ)) {
      stringSql += " AND COMPANY_CD  =  '" + stringCompanyCdQ + "' ";
    }
    stringSql += ")";
    if (!"".equals(stringCompanyCdQ)) {
      stringSql += " AND M10.ComNo  =  '" + stringCompanyCdQ + "' ";
    }
    // 狀態
    if (!"".equals(stringEndStatus)) {
      stringSql += " AND M10.EndStatus  =  '" + stringEndStatus + "' ";
    }
    // 公文內容
    if (!"".equals(stringDescriptQ)) {
      stringSql += " AND M10.Descript  LIKE  '%" + stringDescriptQ + "%' ";
    }
    // 條碼編號
    if (!"".equals(stringBarCodeQ)) {
      String stringSqlAnd = "";
      String stringBarCodeL = "";
      String[] arrayBarCode = convert.StringToken(stringBarCodeQ, ",");
      for (int intNo = 0; intNo < arrayBarCode.length; intNo++) {
        stringBarCodeL = arrayBarCode[intNo].trim();
        //
        if ("".equals(stringBarCodeL))
          continue;
        if (!"".equals(stringSqlAnd))
          stringSqlAnd += ", ";
        stringSqlAnd += " '" + stringBarCodeL + "' ";
      }
      if (!"".equals(stringSqlAnd)) {
        stringSql += " AND M10.BarCode  IN(" + stringSqlAnd + ") ";
      }
    }
    // 公文編碼
    if (!"".equals(stringDocNoQ)) {
      stringSql += " AND M10.DocNo  LIKE  '%" + stringDocNoQ + "%' ";
    }
    // 統一編號
    if (!"".equals(stringFactoryNoQ)) {
      stringSql += " AND  (M10.BarCode  IN (SELECT  BarCode " + " FROM  Doc6M011 " + " WHERE   FactoryNo  =  '" + stringFactoryNoQ + "') "
          + " OR  M10.BarCode  IN (SELECT  BarCode " + " FROM  Doc6M013 " + " WHERE   FactoryNo  =  '" + stringFactoryNoQ + "') " + " OR  (M10.FactoryNo  =  '" + stringFactoryNoQ
          + "')) ";
    }
    // 部門
    if (!"".equals(stringDepartCdQ)) {
      stringSql += " AND M10.DepartNo  =  '" + stringDepartCdQ + "' ";
    }
    stringSql += " ORDER BY  M10.ComNo,  M10.DocNo1,  M10.DocNo2,  M10.DocNo3 ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    return retDoc6M010;
  }

  public String[][] getDoc6M010(String stringBarCode) throws Throwable {
    return getDoc6M010Union("Doc6M010", stringBarCode);
  }

  public String[][] getDoc6M010Union(String stringTable, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M010 = null;
    // 0 ComNo 1 Descript 2 NeedDate 3 BarCode 4 DocNo
    // 5 UNDERGO_WRITE 6 PurchaseNo1 7 PurchaseNo2 8 PurchaseNo3 9 DocNo1
    // 10 DocNo2 11 DocNo3 12 DepartNo 13 RetainMoney 14 PayCondition1
    // 15 PayCondition2 16 DestineExpenseDate 17 OriEmployeeNo 18 PrintCount 19
    // PurchaseNoExist
    // 20 OptometryNo1 21 OptometryNo2 22 OptometryNo3 23 BorrowNo1 24 BorrowNo2
    // 25 BorrowNo3 26 CDate 27 RetainMoney 28 EDateTime 29 CTime
    // 30 PayType 31 DestineExpenseDate 32 BorrowMoney 33 FactoryNo 34
    // BorrowMinusMoney
    // 35 AccountCount 36 PurchaseNo4 37 DocNoType 38 ID 39 KindNo
    stringSql = "SELECT  ComNo,               Descript,            NeedDate,       BarCode,       DocNo, "
        + " UNDERGO_WRITE,       PurchaseNo1,         PurchaseNo2,    PurchaseNo3,   DocNo1, "
        + " DocNo2,              DocNo3,              DepartNo,       RetainMoney,   PayCondition1, "
        + " PayCondition2,       DestineExpenseDate,  OriEmployeeNo,  PrintCount,    PurchaseNoExist, "
        + " OptometryNo1,        OptometryNo2,        OptometryNo3,   '',            '', " + " '',                  CDate,               RetainMoney,    EDateTime,     CTime, "
        + " PayType,             DestineExpenseDate,  BorrowMoney,    FactoryNo,     BorrowMinusMoney,  "
        + " AccountCount,        PurchaseNo4,         DocNoType,      ID,            KindNo " + " FROM  " + stringTable + " " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    return retDoc6M010;
  }

  public String getExistRealMoneyForDoc6M010(String stringBarCode, String stringComNo, String stringCDate, String stringPurchaseNo1, String stringPurchaseNo2,
      String stringPurchaseNo3) throws Throwable {
    return getExistRealMoneyForDoc6M010Union(stringBarCode, stringComNo, stringCDate, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "24");
  }

  public String getExistRealMoneyForDoc6M010Union(String stringBarCode, String stringComNo, String stringCDate, String stringPurchaseNo1, String stringPurchaseNo2,
      String stringPurchaseNo3, String stringKindNo) throws Throwable {
    String stringSumRealMoney = "0";
    String stringSql = "";
    String[][] retDoc6M012 = null;
    // 請款
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + "FROM  Doc6M010 M10,  Doc6M012 M12 " + " WHERE  M10.BarCode  =  M12.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M10.PurchaseNoExist  =  'Y' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.PurchaseNo1  =  '" + stringPurchaseNo1 + "' "
        + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3 + "' " + " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    if (!"".equals(stringCDate))
      stringSql += " AND  M10.CDate  <  '" + stringCDate + "' ";
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length != 0) {
      stringSumRealMoney = retDoc6M012[0][0].trim();
      stringSumRealMoney = "" + doParseDouble(stringSumRealMoney);
      stringSumRealMoney = convert.FourToFive(stringSumRealMoney, 0);
    }
    // 請款-新增
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + "FROM  Doc6M010 M10,  Doc6M0121 M12 " + " WHERE  M10.BarCode  =  M12.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M10.PurchaseNoExist  =  'YY' " + " AND  M12.DocType          =  'B' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.PurchaseNo1  =  '"
        + stringPurchaseNo1 + "' " + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3 + "' "
        + " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    if (!"".equals(stringCDate))
      stringSql += " AND  M10.CDate  <  '" + stringCDate + "' ";
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length != 0) {
      stringSumRealMoney = "" + (doParseDouble(retDoc6M012[0][0].trim()) + doParseDouble(stringSumRealMoney));
      stringSumRealMoney = convert.FourToFive(stringSumRealMoney, 0);
    }
    //
    return stringSumRealMoney;
  }

  public String getFactoryNoForDoc6M011(String stringBarCode) throws Throwable {
    String stringSql = "";
    String stringFactoryNo = "";
    String stringKindNo = "26";
    String[][] retDoc6M011 = null;
    //
    stringSql = "SELECT  DISTINCT  M11.FactoryNo " + " FROM  Doc6M011 M11,  Doc6M010 M10 " + " WHERE  M10.BarCode  =  M11.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M10.KindNo  =  '" + stringKindNo + "' " + " AND  M10.DocNo  IN  (SELECT  BorrowNo " + " FROM  Doc6M0101 " + " WHERE  BarCode  =  '" + stringBarCode + "') ";
    retDoc6M011 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M011.length > 0)
      stringFactoryNo = retDoc6M011[0][0].trim();
    return stringFactoryNo;
  }

  public String getFactoryNoForDoc6M013(String stringBarCode) throws Throwable {
    String stringSql = "";
    String stringFactoryNo = "";
    String stringKindNo = "26";
    String[][] retDoc6M013 = null;
    //
    stringSql = "SELECT  DISTINCT  M13.FactoryNo " + " FROM  Doc6M013 M13,  Doc6M010 M10 " + " WHERE  M10.BarCode  =  M13.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M10.KindNo  =  '" + stringKindNo + "' " + " AND  M10.DocNo  IN  (SELECT  BorrowNo " + " FROM  Doc6M0101 " + " WHERE  BarCode  =  '" + stringBarCode + "') ";
    retDoc6M013 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M013.length > 0)
      stringFactoryNo = retDoc6M013[0][0].trim();
    return stringFactoryNo;
  }

  public void doAddPrintCountForDoc6M010(String stringPrintCount, String stringBarCode) throws Throwable {
    String stringSql = "";
    //
    stringSql = "UPDATE  Doc6M010  SET  PrintCount  =  " + stringPrintCount + " " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    dbDoc.execFromPool(stringSql);
  }

  // 借款申請書-簽核總理之表格資料
  public String[][] getTableForDoc6M010(String stringBarCodeQ, String stringDescriptQ, String stringStatusQ, String stringFactoryNoQ, String stringCompanyCdQ,
      String stringDepartCdQ, String stringDocNoQ, String stringInvoiceNoQ, String stringVoucherYmd, String stringVoucherFlowNo, String stringUserIDQ) throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return getTableForDoc6M010(stringBarCodeQ, stringDescriptQ, stringStatusQ, stringFactoryNoQ, stringCompanyCdQ, stringDepartCdQ, stringDocNoQ, stringInvoiceNoQ,
        stringVoucherYmd, stringVoucherFlowNo, stringUserIDQ, exeUtil);
  }

  public String[][] getTableForDoc6M010(String stringBarCodeQ, String stringDescriptQ, String stringStatusQ, String stringFactoryNoQ, String stringCompanyCdQ,
      String stringDepartCdQ, String stringDocNoQ, String stringInvoiceNoQ, String stringVoucherYmd, String stringVoucherFlowNo, String stringUserIDQ, FargloryUtil exeUtil)
      throws Throwable {
    String stringSql = "";
    String stringToday = getToday("YYYY/mm/dd");
    String stringKindNo = "26";
    String[][] retDoc6M010 = null;
    // 0 BarCode 1 ComNo 2 DepartNo 3 DocNo1
    // 4 DocNo2 5 DocNo3 6 Descript 7 FactoryNo
    // 8 BorrowMoney
    stringSql = "SELECT  DISTINCT  M10.BarCode,     M10.ComNo,   M10.DepartNo,  M10.DocNo1, " + " M10.DocNo2,      M10.DocNo3,  M10.Descript,     M10.FactoryNo,  "
        + "M10.BorrowMoney " + " FROM  Doc6M010 M10   " + " WHERE  KindNo  =  '" + stringKindNo + "' ";
    // 傳票
    if (!"".equals(stringVoucherYmd)) {
      stringSql += " AND  BarCode  IN  (SELECT  BarCode " + "  FROM  Doc2M014 " + " WHERE  VOUCHER_YMD  =  '" + stringVoucherYmd + "'";
      if (!"".equals(stringVoucherFlowNo)) {
        stringSql += " AND  VOUCHER_FLOW_NO  =  " + stringVoucherFlowNo + " ";
      }
      if (!"".equals(stringCompanyCdQ)) {
        stringSql += " AND COMPANY_CD  =  '" + stringCompanyCdQ + "' ";
      }
      stringSql += ") ";
    }
    // 發票號碼
    if (!"".equals(stringInvoiceNoQ)) {
      stringSql += " AND  M10.BarCode  IN  (SELECT  BarCode  FROM  Doc6M011  WHERE InvoiceNo  =  '" + stringInvoiceNoQ + "')";
    }
    // 條碼編號
    if (!"".equals(stringBarCodeQ)) {
      String stringSqlL = "";
      String stringBarCodeL = "";
      String[] arrayBarCode = convert.StringToken(stringBarCodeQ, ",");
      for (int intNo = 0; intNo < arrayBarCode.length; intNo++) {
        stringBarCodeL = arrayBarCode[intNo].trim();
        //
        if ("".equals(stringBarCodeL))
          continue;
        //
        if (!"".equals(stringSqlL))
          stringSqlL += ", ";
        stringSqlL += " '" + stringBarCodeL + "' ";
      }
      if (!"".equals(stringSqlL))
        stringSql += " AND M10.BarCode IN (" + stringSqlL + ") ";
    }
    // 公文內容
    if (!"".equals(stringDescriptQ)) {
      stringSql += " AND M10.Descript  LIKE  '%" + stringDescriptQ + "%' ";
    }
    // 公文編碼
    if (!"".equals(stringDocNoQ)) {
      stringSql += " AND M10.DocNo  LIKE  '%" + stringDocNoQ + "%' ";
    }
    // 公司
    if (!"".equals(stringCompanyCdQ)) {
      stringSql += " AND M10.ComNo  =  '" + stringCompanyCdQ + "' ";
    }
    // 部門
    if (!"".equals(stringDepartCdQ)) {
      stringSql += " AND M10.DepartNo  =  '" + stringDepartCdQ + "' ";
    }
    // 人員權限
    if (!"".equals(stringUserIDQ) && !"B3018".equals(stringUserIDQ) && stringUserIDQ.length() != 6) {
      stringSql += " AND M10.ComNo IN (SELECT  ComNo " + " FROM  Doc2M046 " + " WHERE  EmployeeNo  =  '" + stringUserIDQ + "' "
          + " AND  (UseDateStart = '9999/99/99'  OR UseDateStart <= '" + stringToday + "') " + " AND  UseDateEnd   >= '" + stringToday + "' ) ";
    }
    // 狀態
    if (!"ALL".equals(stringStatusQ)) {
      if ("A".equals(stringStatusQ)) {
        // (業管-簽核)
        stringSql += " AND  M10.UNDERGO_WRITE  =  'B'  ";
      } else if ("E".equals(stringStatusQ)) {
        // 作廢
        stringSql += " AND  M10.UNDERGO_WRITE  =  'E'  ";
      } else if ("X".equals(stringStatusQ)) {
        // (財務-退件)
        stringSql += " AND  M10.UNDERGO_WRITE  =  'X'  ";
      } else {
        // 已審核、已轉傳票
        stringSql += " AND  M10.BarCode  IN (SELECT  BarCode " + " FROM  Doc2M014 " + " WHERE  STATUS_CD  =  '" + stringStatusQ + "'  " + "  AND  COMPANY_CD  =  '"
            + stringCompanyCdQ + "') ";
      }
    }
    // 統一編號
    if (!"".equals(stringFactoryNoQ)) {
      stringSql += " AND  (M10.BarCode  IN (SELECT  BarCode " + " FROM  Doc6M011 " + " WHERE   FactoryNo  =  '" + stringFactoryNoQ + "') "
          + " OR  M10.BarCode  IN (SELECT  BarCode " + " FROM  Doc6M013 " + " WHERE   FactoryNo  =  '" + stringFactoryNoQ + "')) ";
    }
    stringSql += " ORDER BY  M10.BarCode,  M10.DocNo1,  M10.DocNo2,  M10.DocNo3,  M10.ComNo,  M10.DepartNo ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    // 再處理
    if (retDoc6M010.length == 0)
      return new String[0][0];
    //
    String stringBarCode = "";
    String stringComNo = "";
    String stringDepartNo = "";
    String stringDocNo1 = "";
    String stringDocNo2 = "";
    String stringDocNo3 = "";
    String stringDescript = "";
    String stringStatus = "";
    String stringFactoryNo = "";
    String[] retTableData = null;
    String[][] retDoc6M011 = null;
    String[][] retDoc6M013 = null;
    String[][] retDoc2M014 = null;
    double doubleMoneySum = 0;
    Vector vectorBarCode = new Vector();
    Vector vectorData = new Vector();
    // 0 BarCode 1 ComNo 2 DepartNo 3 DocNo1 4 DocNo2 5 DocNo3 6 Descript
    for (int intNo = 0; intNo < retDoc6M010.length; intNo++) {
      retTableData = new String[7];
      stringBarCode = retDoc6M010[intNo][0].trim();
      stringComNo = retDoc6M010[intNo][1].trim();
      stringDepartNo = retDoc6M010[intNo][2].trim();
      stringDocNo1 = retDoc6M010[intNo][3].trim();
      stringDocNo2 = retDoc6M010[intNo][4].trim();
      stringDocNo3 = retDoc6M010[intNo][5].trim();
      stringDescript = retDoc6M010[intNo][6].trim();
      stringStatus = "";
      stringFactoryNo = retDoc6M010[intNo][7].trim();
      doubleMoneySum = exeUtil.doParseDouble(retDoc6M010[intNo][8].trim());
      // 狀態
      retDoc2M014 = getDoc2M014(stringBarCode);
      if (retDoc2M014.length > 0)
        stringStatus = retDoc2M014[0][17].trim();
      // 對象
      if ("".equals(stringFactoryNo)) {
        retDoc6M011 = getDoc6M011(stringBarCode);
        if (retDoc6M011.length > 0) {
          stringFactoryNo = retDoc6M011[0][0].trim();
        } else {
          retDoc6M013 = getDoc6M013(stringBarCode);
          if (retDoc6M013.length > 0) {
            stringFactoryNo = retDoc6M013[0][0].trim();
          }
        }
      }
      //
      if (vectorBarCode.indexOf(stringBarCode) != -1)
        continue;
      vectorBarCode.add(stringBarCode);
      //
      if (doubleMoneySum <= 0) {
        doubleMoneySum = getInvoiceTotalMoneySum(stringBarCode);
        if (doubleMoneySum <= 0) {
          doubleMoneySum = getReceiptTotalMoneySum(stringBarCode);
        }
      }
      //
      if ("".equals(stringStatus))
        stringStatus = "X";
      // 流水號
      retTableData[0] = "" + (intNo + 1);
      // 公文編號
      retTableData[1] = stringDocNo1 + "-" + stringDocNo2 + "-" + stringDocNo3;
      // 條碼編號
      retTableData[2] = stringBarCode;
      // 統一編號
      retTableData[3] = stringFactoryNo;
      // 公文內容
      retTableData[4] = stringDescript;
      // 金額
      retTableData[5] = convert.FourToFive("" + doubleMoneySum, 0);
      // 狀態
      retTableData[6] = stringStatus;
      vectorData.add(retTableData);
    }
    return (String[][]) vectorData.toArray(new String[0][0]);
  }

  public String[][] getTable2ForDoc6M010_24(String stringBarCodeQ, String stringDescriptQ, String stringStatusQ, String stringFactoryNoQ, String stringDocNoQ,
      String stringCompanyCdQ, String stringDepartCdQ, String stringInvoiceNoQ, String stringVoucherYmd, String stringVoucherFlowNo, String stringPurchaseNoQ, String stringUserIDQ)
      throws Throwable {
    String stringSql = "";
    String stringKindNo = "24";
    String stringToday = datetime.getToday("YYYY/mm/dd");
    String[][] retDoc6M010 = null;
    // 0 BarCode 1 ComNo 2 DepartNo 3 DocNo1 4 DocNo2
    // 5 DocNo3 6 Descript 7 FactoryNo
    stringSql = "SELECT  DISTINCT  M10.BarCode,      M10.ComNo,       M10.DepartNo,      M10.DocNo1,        M10.DocNo2, " + " M10.DocNo3,       M10.Descript,    M10.FactoryNo   "
        + " FROM  Doc6M010 M10,  Doc6M0101  M101   " + " WHERE  M10.KindNo  =  '" + stringKindNo + "' " + " AND  M10.BarCode  =  M101.BarCode ";
    // 傳票
    if (!"".equals(stringVoucherYmd)) {
      stringSql += " AND  M10.BarCode  IN  (SELECT  BarCode " + "  FROM  Doc2M014 " + " WHERE  VOUCHER_YMD  =  '" + stringVoucherYmd + "'";
      if (!"".equals(stringVoucherFlowNo)) {
        stringSql += " AND  VOUCHER_FLOW_NO  =  " + stringVoucherFlowNo + " ";
      }
      if (!"".equals(stringDepartCdQ)) {
        stringSql += " AND  COMPANY_CD  =  '" + stringDepartCdQ + "' ";
      }
      stringSql += ") ";
    }
    // 請購單號
    if (!"".equals(stringPurchaseNoQ)) {
      stringSql += " AND  PurchaseNo  LIKE  '%" + stringPurchaseNoQ + "%' ";
    }
    // 發票號碼
    if (!"".equals(stringInvoiceNoQ)) {
      stringSql += " AND  M10.BarCode  IN  (SELECT  BarCode  FROM  Doc6M011  WHERE InvoiceNo  =  '" + stringInvoiceNoQ + "')";
    }
    // 條碼編號
    if (!"".equals(stringBarCodeQ)) {
      String stringSqlL = "";
      String stringBarCodeL = "";
      String[] arrayBarCode = convert.StringToken(stringBarCodeQ, ",");
      for (int intNo = 0; intNo < arrayBarCode.length; intNo++) {
        stringBarCodeL = arrayBarCode[intNo].trim();
        //
        if ("".equals(stringBarCodeL))
          continue;
        //
        if (!"".equals(stringSqlL))
          stringSqlL += ", ";
        stringSqlL += " '" + stringBarCodeL + "' ";
      }
      if (!"".equals(stringSqlL))
        stringSql += " AND M10.BarCode  IN  (" + stringSqlL + ") ";
    }
    // 公文內容
    if (!"".equals(stringDescriptQ)) {
      stringSql += " AND M10.Descript  LIKE  '%" + stringDescriptQ + "%' ";
    }
    // 公司
    if (!"".equals(stringDepartCdQ)) {
      stringSql += " AND M10.DepartNo  =  '" + stringDepartCdQ + "' ";
    }
    // 人員權限
    if (!"".equals(stringUserIDQ) && !"B3018".equals(stringUserIDQ)) {
      stringSql += " AND M10.ComNo IN (SELECT  ComNo " + " FROM  Doc2M046 " + " WHERE  EmployeeNo  =  '" + stringUserIDQ + "' "
          + " AND  (UseDateStart = '9999/99/99'  OR UseDateStart <= '" + stringToday + "') " + " AND  UseDateEnd   >= '" + stringToday + "' ) ";
    }
    // 部門
    if (!"".equals(stringCompanyCdQ)) {
      stringSql += " AND M10.ComNo  =  '" + stringCompanyCdQ + "' ";
    }
    // 公文編碼
    if (!"".equals(stringDocNoQ)) {
      stringSql += " AND  M10.DocNo  LIKE  '%" + stringDocNoQ + "%' ";
    }
    // 狀態
    if (!"ALL".equals(stringStatusQ)) {
      if ("F".equals(stringStatusQ)) {
        // 經辦
        stringSql += " AND  M10.UNDERGO_WRITE  =  'A'  ";
      } else if ("A".equals(stringStatusQ)) {
        // (業管-簽核)
        stringSql += " AND  M10.UNDERGO_WRITE  =  'B'  ";
      } else if ("E".equals(stringStatusQ)) {
        // (作廢)
        stringSql += " AND  M10.UNDERGO_WRITE  =  'E'  ";
      } else if ("X".equals(stringStatusQ)) {
        // (財務-退件)
        stringSql += " AND  M10.UNDERGO_WRITE  =  'X'  ";
      } else {
        // 已審核、已轉傳票
        stringSql += " AND  M10.BarCode  IN (SELECT  BarCode " + " FROM  Doc2M014 " + " WHERE   STATUS_CD  =  '" + stringStatusQ + "'  ";
        if (!"".equals(stringDepartCdQ)) {
          stringSql += " AND  COMPANY_CD  =  '" + stringDepartCdQ + "' ";
        }
        stringSql += ") ";
      }
    }
    // 統一編號
    if (!"".equals(stringFactoryNoQ)) {
      stringKindNo = "26";
      //
      stringSql += " AND  (M101.BorrowNo  IN (SELECT  M10.DocNo " + " FROM  Doc6M011 M11,  Doc6M010  M10 " + " WHERE  M10.BarCode  =  M11.BarCode " + " AND  M10.KindNo  =  '"
          + stringKindNo + "' " + " AND  M11.FactoryNo  =  '" + stringFactoryNoQ + "') " + " OR  M101.BorrowNo  IN (SELECT  M10.DocNo " + " FROM  Doc6M010 M10,  Doc6M013  M13 "
          + " WHERE  M10.BarCode  =  M13.BarCode " + " AND  M10.KindNo  =  '" + stringKindNo + "' " + " AND  M13.FactoryNo  =  '" + stringFactoryNoQ + "')) ";
    }
    stringSql += " ORDER BY  M10.BarCode,  M10.DocNo1,  M10.DocNo2,  M10.DocNo3,  M10.ComNo,  M10.DepartNo ";
    retDoc6M010 = dbDoc.queryFromPool(stringSql);
    // 再處理
    if (retDoc6M010.length == 0)
      return new String[0][0];
    //
    String stringBarCode = "";
    String stringComNo = "";
    String stringDepartNo = "";
    String stringDocNo1 = "";
    String stringDocNo2 = "";
    String stringDocNo3 = "";
    String stringDescript = "";
    String stringStatus = "";
    String stringFactoryNo = "";
    String stringPayType = "";
    String stringVoucherYMD = "";
    String[] retTableData = null;
    String[][] retDoc6M011 = null;
    String[][] retDoc6M013 = null;
    String[][] retDoc2M014 = null;
    String[][] retFED1012 = null;
    double doubleMoneySum = 0;
    Vector vectorBarCode = new Vector();
    Vector vectorData = new Vector();
    // 0 BarCode 1 ComNo 2 DepartNo 3 DocNo1 4 DocNo2 5 DocNo3 6 Descript
    for (int intNo = 0; intNo < retDoc6M010.length; intNo++) {
      retTableData = new String[7];
      stringBarCode = retDoc6M010[intNo][0].trim();
      stringComNo = retDoc6M010[intNo][1].trim();
      stringDepartNo = retDoc6M010[intNo][2].trim();
      stringDocNo1 = retDoc6M010[intNo][3].trim();
      stringDocNo2 = retDoc6M010[intNo][4].trim();
      stringDocNo3 = retDoc6M010[intNo][5].trim();
      stringDescript = retDoc6M010[intNo][6].trim();
      stringStatus = "";
      // 狀態
      retDoc2M014 = getDoc2M014(stringBarCode);
      if (retDoc2M014.length > 0) {
        stringStatus = retDoc2M014[0][17].trim();
        if ("Z".equals(stringStatus)) {
          stringVoucherYMD = convert.ac2roc(retDoc2M014[0][4].trim().replaceAll("/", ""));
          retFED1012 = getFED1012(stringVoucherYMD, retDoc2M014[0][5].trim(), retDoc2M014[0][7].trim(), retDoc2M014[0][8].trim());
          if (retFED1012.length > 0) {
            stringStatus = stringVoucherYMD + "-" + convert.add0(retDoc2M014[0][5].trim(), "4");
          } else {
            stringStatus = "U";
          }
        }
      }
      if ("".equals(stringStatus))
        stringStatus = "X";
      // 對象
      stringFactoryNo = getFactoryNoForDoc6M011(stringBarCode);
      if ("".equals(stringFactoryNo))
        stringFactoryNo = getFactoryNoForDoc6M013(stringBarCode);
      if ("".equals(stringFactoryNo))
        stringFactoryNo = retDoc6M010[intNo][7].trim();
      //
      if (vectorBarCode.indexOf(stringBarCode) != -1)
        continue;
      vectorBarCode.add(stringBarCode);
      //
      doubleMoneySum = getInvoiceTotalMoneySumForDoc6M012(stringBarCode);
      //
      // 流水號
      retTableData[0] = "" + (intNo + 1);
      // 公文編號
      retTableData[1] = stringDocNo1 + "-" + stringDocNo2 + "-" + stringDocNo3;
      // 條碼編號
      retTableData[2] = stringBarCode;
      // 統一編號
      retTableData[3] = stringFactoryNo;
      // 公文內容
      retTableData[4] = stringDescript;
      // 金額
      retTableData[5] = convert.FourToFive("" + doubleMoneySum, 0);
      // 狀態
      retTableData[6] = stringStatus;
      vectorData.add(retTableData);
    }
    return (String[][]) vectorData.toArray(new String[0][0]);
  }

  public void doUpdateStatusForDoc6M010(String stringBarCode, String stringUndergoWrite) throws Throwable {
    doUpdateUnion("Doc6M010", "UNDERGO_WRITE", stringUndergoWrite, stringBarCode);
  }

  public void doUpdateDoc6M010(String stringBarCode, String stringDescript, String stringPayCondition1, String stringPayCondition2) throws Throwable {
    String stringSql = "";
    stringSql = "UPDATE  Doc6M010  SET   PayCondition1  =  '" + stringPayCondition1 + "', " + "  PayCondition2  =  '" + stringPayCondition2 + "' " + " WHERE  BarCode  =  '"
        + stringBarCode + "' ";
    dbDoc.execFromPool(stringSql);
  }

  // 表格 Doc6M0101
  public double getBorrowMoneySumDoc6M0101(String stringBarCode, String stringBorrowNo1, String stringBorrowNo2, String stringBorrowNo3) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M0101 = null;
    double doubleBorrowMoney = 0;
    // 5 BorrowMoney
    stringSql = "SELECT  SUM(BorrowMoney)  " + " FROM  Doc6M0101 " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  BorrowNo1  =  '" + stringBorrowNo1 + "' "
        + " AND  BorrowNo2  =  '" + stringBorrowNo2 + "' " + " AND  BorrowNo3  =  '" + stringBorrowNo3 + "' ";
    retDoc6M0101 = dbDoc.queryFromPool(stringSql);
    doubleBorrowMoney = doParseDouble(retDoc6M0101[0][0].trim());
    return doubleBorrowMoney;
  }

  public double getBorrowNoTaxMoneySumDoc6M0101(String stringBarCode, String stringBorrowNo1, String stringBorrowNo2, String stringBorrowNo3) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M0101 = null;
    double doubleBorrowMoney = 0;
    // 5 BorrowMoney
    stringSql = "SELECT  SUM(BorrowNoTaxMoney)  " + " FROM  Doc6M0101 " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  BorrowNo1  =  '" + stringBorrowNo1 + "' "
        + " AND  BorrowNo2  =  '" + stringBorrowNo2 + "' " + " AND  BorrowNo3  =  '" + stringBorrowNo3 + "' ";
    retDoc6M0101 = dbDoc.queryFromPool(stringSql);
    doubleBorrowMoney = doParseDouble(retDoc6M0101[0][0].trim());
    return doubleBorrowMoney;
  }

  public String[][] getDoc6M0101(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M0101 = null;
    // 0 RecordNo 1 BorrowNo 2 BorrowNo1 3 BorrowNo2 4 BorrowNo3
    // 5 BorrowMoney
    stringSql = "SELECT  RecordNo,                     BorrowNo,                       BorrowNo1,            BorrowNo2,          BorrowNo3, " + " BorrowMoney  "
        + " FROM  Doc6M0101 " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc6M0101 = dbDoc.queryFromPool(stringSql);
    return retDoc6M0101;
  }

  // 表格 Doc6M011
  public String doInsertDoc6M011(String stringID, String stringBarCode, String stringRecordNo, String stringFactoryNo, String stringInvoiceKind, String stringInvoiceDate,
      String stringInvoiceNo, String stringInvoiceMoney, String stringInvoiceTax, String stringInvoiceTotalMoney, String stringInvoiceTaxType, String strignDeductKind)
      throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  INTO  Doc6M011 (ID,              BarCode,      RecordNo,      FactoryNo,   InvoiceKind, "
        + " InvoiceDate,     InvoiceNo,    InvoiceMoney,  InvoiceTax,  InvoiceTotalMoney, " + " InvoiceTaxType,  DeductKind) " + " VALUES( " + stringID + " , " + " '"
        + stringBarCode + "', " + "  " + stringRecordNo + " , " + " '" + stringFactoryNo + "', " + " '" + stringInvoiceKind + "', " + " '" + stringInvoiceDate + "', " + " '"
        + stringInvoiceNo + "', " + "  " + stringInvoiceMoney + " , " + "  " + stringInvoiceTax + " , " + "  " + stringInvoiceTotalMoney + " , " + " '" + stringInvoiceTaxType
        + "', " + " '" + strignDeductKind + "') ";
    return stringSql;
  }

  public String doDeleteDoc6M011(String stringBarCode) throws Throwable {
    String stringSql = "";
    //
    stringSql = "DELETE  FROM  Doc6M011" + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public double getInvoiceTotalMoneySum(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M011 = null;
    double doubleInvoiceTotalMoney = 0;
    //
    stringSql = "SELECT  SUM(InvoiceTotalMoney) " + " FROM  Doc6M011 " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc6M011 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M011.length != 0) {
      doubleInvoiceTotalMoney = doParseDouble(retDoc6M011[0][0].trim());
    }
    return doubleInvoiceTotalMoney;
  }

  public double getInvoiceTotalMoneySumForDoc6M012(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M012 = null;
    double doubleInvoiceTotalMoney = 0;
    //
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + " FROM  Doc6M012 M12,  Doc6M010 M10 " + " WHERE  M10.BarCode  =  M12.BarCode " + " AND  M10.BarCode  =  '" + stringBarCode
        + "' ";
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length != 0) {
      doubleInvoiceTotalMoney = doParseDouble(retDoc6M012[0][0].trim());
    }
    return doubleInvoiceTotalMoney;
  }

  public double getInvoiceMoneySumForDoc6M010(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M011 = null;
    double doubleInvoiceMoney = 0;
    //
    stringSql = "SELECT  SUM(InvoiceMoney) " + " FROM  Doc6M011 " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc6M011 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M011.length != 0) {
      doubleInvoiceMoney = doParseDouble(retDoc6M011[0][0].trim());
    }
    return doubleInvoiceMoney;
  }

  public Vector getInvoiceNoDoc6M011(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M011 = null;
    Vector vectorInvoiceNo = new Vector();
    //
    stringSql = "SELECT  InvoiceNo  FROM  Doc6M011  WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc6M011 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc6M011.length; intNo++) {
      vectorInvoiceNo.add(retDoc6M011[intNo][0].trim());
    }
    return vectorInvoiceNo;
  }

  public String[][] getDoc6M011(String stringBarCode) throws Throwable {
    return getDoc2M011Union("Doc6M011", stringBarCode);
  }

  public String getUpdateDoc6M011Sql(String stringBarCode, String stringRecordNo, String stringInvoiceKind, String stringInvoiceDate, String stringInvoiceNo,
      String stringInvoiceMoney, String stringInvoiceTax, String stringInvoiceTotalMoney, String stringTaxType) throws Throwable {
    String stringSql = "";
    String[][] retDoc2M011 = null;
    stringSql = "UPDATE  Doc6M011 " + "  SET  InvoiceKind  =  '" + stringInvoiceKind + "', ";
    if (!"".equals(stringInvoiceDate))
      stringSql += " InvoiceDate  =  '" + stringInvoiceDate + "', ";
    if (!"".equals(stringInvoiceNo))
      stringSql += " InvoiceNo  =  '" + stringInvoiceNo + "', ";
    if (!"".equals(stringInvoiceMoney))
      stringSql += " InvoiceMoney  =  " + stringInvoiceMoney + ", ";
    if (!"".equals(stringInvoiceTax))
      stringSql += " InvoiceTax  =  " + stringInvoiceTax + ", ";
    if (!"".equals(stringInvoiceTotalMoney))
      stringSql += " InvoiceTotalMoney  =  " + stringInvoiceTotalMoney + ", ";
    stringSql += " InvoiceTaxType  =  '" + stringTaxType + "' " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  RecordNo  =  " + stringRecordNo;
    return stringSql;
  }

  // 表格 Doc6M012
  public boolean isExistDoc6M012(String stringCostID, String stringCostID1) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M012 = null;
    //
    stringSql = "SELECT  InOut " + " FROM  Doc6M012 " + " WHERE  CostID    =  '" + stringCostID + "' " + " AND  CostID1  =  '" + stringCostID1 + "' ";
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M012.length > 0)
      return true;
    return false;
  }

  public double getRealTotalMoneySumForDoc6M012(String stringBarCodeExcept, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1,
      String stringCostID, String stringCostID1, String stringPurchaseNoExist, String stringSqlAnd) throws Throwable {
    return getRealTotalMoneySumForDoc6M012ComNoUnion(stringBarCodeExcept, stringInOut, stringDepartNo, stringProjectID, stringProjectID1, stringCostID, stringCostID1,
        stringPurchaseNoExist, stringSqlAnd, "Z6");
  }

  public double getRealTotalMoneySumForDoc6M012ComNo(String stringBarCodeExcept, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1,
      String stringCostID, String stringCostID1, String stringPurchaseNoExist, String stringSqlAnd, String stringComNo) throws Throwable {
    return getRealTotalMoneySumForDoc6M012ComNoUnion(stringBarCodeExcept, stringInOut, stringDepartNo, stringProjectID, stringProjectID1, stringCostID, stringCostID1,
        stringPurchaseNoExist, stringSqlAnd, "Z6");
  }

  public double getRealTotalMoneySumForDoc6M012ComNoUnion(String stringBarCodeExcept, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1,
      String stringCostID, String stringCostID1, String stringPurchaseNoExist, String stringSqlAnd, String stringComNo) throws Throwable {
    double doubleRealTotalMoneySum = 0;
    String stringSql = "";
    String[][] retDoc6M012 = null;
    //
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  Doc6M012 " + " WHERE  BarCode  IN  (SELECT  BarCode " + " FROM  Doc6M010 " + " WHERE  UNDERGO_WRITE  <>  'E'";
    if ("".equals(stringPurchaseNoExist)) {
      stringSql += " AND  PurchaseNoExist  IN  ('Y',  'N') ";
    } else {
      stringSql += " AND  PurchaseNoExist  =  '" + stringPurchaseNoExist + "' ";
    }
    stringSql += " AND  ComNo  =  '" + stringComNo + "' )";
    if (!"".equals(stringBarCodeExcept))
      stringSql += " AND  BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    stringSql += stringSqlAnd;
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum = doParseDouble(retDoc6M012[0][0].trim());
    //
    String stringDocTypeSql = "";
    if ("".equals(stringPurchaseNoExist)) {
      stringDocTypeSql = " 'B',  'C' ";
    } else if ("Y".equals(stringPurchaseNoExist)) {
      stringDocTypeSql = " 'B' ";
    } else if ("N".equals(stringPurchaseNoExist)) {
      stringDocTypeSql = " 'C' ";
    } else {
      return doubleRealTotalMoneySum;
    }
    // 新增
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  Doc6M0121 " + " WHERE  DocType  IN(" + stringDocTypeSql + ") " + " AND  BarCode  IN  (SELECT  BarCode "
        + " FROM  Doc6M010 " + " WHERE  UNDERGO_WRITE  <>  'E'";
    stringSql += " AND  ComNo  =  '" + stringComNo + "' )";
    if (!"".equals(stringBarCodeExcept))
      stringSql += " AND  BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    stringSql += stringSqlAnd;
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum += doParseDouble(retDoc6M012[0][0].trim());
    return doubleRealTotalMoneySum;
  }

  public double getRealTotalMoneySumForDoc6M012(String stringBarCodeExcept, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1,
      String stringPurchaseNoExist, String[][] retDoc7M011) throws Throwable {
    return getRealTotalMoneySumForDoc6M012Union(stringBarCodeExcept, stringInOut, stringDepartNo, stringProjectID, stringProjectID1, stringPurchaseNoExist, "24", retDoc7M011);
  }

  public double getRealTotalMoneySumForDoc6M012Union(String stringBarCodeExcept, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1,
      String stringPurchaseNoExist, String stringKindNo, String[][] retDoc7M011) throws Throwable {
    double doubleRealTotalMoneySum = 0;
    String stringSql = "";
    String stringSqlTemp = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String[][] retDoc6M012 = null;
    //
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  Doc6M012 " + " WHERE BarCode  IN        (SELECT  BarCode " + " FROM  Doc6M010 " + " WHERE  UNDERGO_WRITE  <>  'E'  ";
    if ("".equals(stringPurchaseNoExist)) {
      stringSql += " AND  PurchaseNoExist  IN  ('Y',  'N') ";
    } else {
      stringSql += " AND  PurchaseNoExist  =  '" + stringPurchaseNoExist + "' ";
    }
    stringSql += ")";
    if (!"".equals(stringBarCodeExcept))
      stringSql += " AND  BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum = doParseDouble(retDoc6M012[0][0].trim());
    //
    String stringDocTypeSql = "";
    if ("".equals(stringPurchaseNoExist)) {
      stringDocTypeSql = " 'C',  'B' ";
    } else if ("Y".equals(stringPurchaseNoExist)) {
      stringDocTypeSql = " 'B' ";
    } else if ("N".equals(stringPurchaseNoExist)) {
      stringDocTypeSql = " 'C' ";
    } else {
      return doubleRealTotalMoneySum;
    }
    // 新增
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  Doc6M0121 " + " WHERE  DocType  IN(" + stringDocTypeSql + ") " + " AND  BarCode  IN       (SELECT  BarCode "
        + " FROM  Doc6M010 " + " WHERE  UNDERGO_WRITE  <>  'E'  ";
    stringSql += ")";
    if (!"".equals(stringBarCodeExcept))
      stringSql += " AND  BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum += doParseDouble(retDoc6M012[0][0].trim());
    return doubleRealTotalMoneySum;
  }

  public double getRealTotalMoneySumForDoc6M012Except(String stringBarCodeExcept, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1,
      String stringPurchaseNoExist, String[][] retDoc7M011) throws Throwable {
    return getRealTotalMoneySumForDoc6M012ExceptUnion(stringBarCodeExcept, stringInOut, stringDepartNo, stringProjectID, stringProjectID1, "24", stringPurchaseNoExist,
        retDoc7M011);
  }

  public double getRealTotalMoneySumForDoc6M012ExceptUnion(String stringBarCodeExcept, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1,
      String stringKindNo, String stringPurchaseNoExist, String[][] retDoc7M011) throws Throwable {
    double doubleRealTotalMoneySum = 0;
    String stringSql = "";
    String stringSqlTemp = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String[][] retDoc6M012 = null;
    //
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  Doc6M012 " + " WHERE  BarCode  IN          (SELECT  BarCode " + " FROM  Doc6M010 " + " WHERE  UNDERGO_WRITE  <>  'E' ";
    if ("".equals(stringPurchaseNoExist)) {
      stringSql += " AND  PurchaseNoExist  IN('Y',  'N') ";
    } else {
      stringSql += " AND  PurchaseNoExist  =  '" + stringPurchaseNoExist + "' ";
    }
    stringSql += " )";

    if (!"".equals(stringBarCodeExcept))
      stringSql += " AND  BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum = doParseDouble(retDoc6M012[0][0].trim());
    // 新增
    String stringDocTypeSql = "";
    if ("".equals(stringPurchaseNoExist)) {
      stringDocTypeSql = " 'C',  'B' ";
    } else if ("Y".equals(stringPurchaseNoExist)) {
      stringDocTypeSql = " 'B' ";
    } else if ("N".equals(stringPurchaseNoExist)) {
      stringDocTypeSql = " 'C' ";
    } else {
      return doubleRealTotalMoneySum;
    }
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  Doc6M0121 " + " WHERE  DocType  IN(" + stringDocTypeSql + ") " + " AND  BarCode  IN          (SELECT  BarCode "
        + " FROM  Doc6M010 " + " WHERE  UNDERGO_WRITE  <>  'E' ";
    stringSql += " )";

    if (!"".equals(stringBarCodeExcept))
      stringSql += " AND  BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum = doParseDouble(retDoc6M012[0][0].trim());
    return doubleRealTotalMoneySum;
  }

  public double getRealTotalMoneySumSpecForDoc6M012(String stringBarCodeExcept, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1,
      String stringPurchaseNoExist, String stringSqlAnd, String[][] retDoc7M011) throws Throwable {
    return getRealTotalMoneySumSpecForDoc6M012Union(stringBarCodeExcept, stringInOut, stringDepartNo, stringProjectID, stringProjectID1, "24", stringPurchaseNoExist, stringSqlAnd,
        retDoc7M011);
  }

  public double getRealTotalMoneySumSpecForDoc6M012Union(String stringBarCodeExcept, String stringInOut, String stringDepartNo, String stringProjectID, String stringProjectID1,
      String stringKindNo, String stringPurchaseNoExist, String stringSqlAnd, String[][] retDoc7M011) throws Throwable {
    double doubleRealTotalMoneySum = 0;
    String stringSql = "";
    String stringSqlTemp = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String[][] retDoc6M012 = null;
    //
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  Doc6M012 " + " WHERE  BarCode  IN           (SELECT  BarCode " + " FROM  Doc6M010 " + " WHERE  UNDERGO_WRITE  <>  'E' ";
    if ("".equals(stringPurchaseNoExist)) {
      stringSql += " AND  PurchaseNoExist  IN('Y',  'N') ";
    } else {
      stringSql += " AND  PurchaseNoExist  =  '" + stringPurchaseNoExist + "' ";
    }
    stringSql += " )";
    if (!"".equals(stringBarCodeExcept))
      stringSql += " AND  BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    stringSql += stringSqlAnd;
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum = doParseDouble(retDoc6M012[0][0].trim());
    // 新增
    String stringDocTypeSql = "";
    if ("".equals(stringPurchaseNoExist)) {
      stringDocTypeSql = " 'C',  'B' ";
    } else if ("Y".equals(stringPurchaseNoExist)) {
      stringDocTypeSql = " 'B' ";
    } else if ("N".equals(stringPurchaseNoExist)) {
      stringDocTypeSql = " 'C' ";
    } else {
      return doubleRealTotalMoneySum;
    }
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  Doc6M0121 " + " WHERE  DocType  IN(" + stringDocTypeSql + ") " + " AND  BarCode  IN           (SELECT  BarCode "
        + " FROM  Doc6M010 " + " WHERE  UNDERGO_WRITE  <>  'E' ";
    stringSql += " )";
    if (!"".equals(stringBarCodeExcept))
      stringSql += " AND  BarCode  <>  '" + stringBarCodeExcept + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSqlTemp = "";
    for (int intNo = 0; intNo < retDoc7M011.length; intNo++) {
      stringCostID = retDoc7M011[intNo][1].trim();
      stringCostID1 = retDoc7M011[intNo][2].trim();
      //
      if (!"".equals(stringSqlTemp))
        stringSqlTemp += " OR ";
      stringSqlTemp += " (CostID  =  '" + stringCostID + "' AND  CostID1  =  '" + stringCostID1 + "') ";
    }
    if (!"".equals(stringSqlTemp)) {
      stringSql += " AND  (" + stringSqlTemp + ") ";
    }
    stringSql += stringSqlAnd;
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum += doParseDouble(retDoc6M012[0][0].trim());
    return doubleRealTotalMoneySum;
  }

  public String[][] getDoc6M012(String stringBarCode) throws Throwable {
    return getDoc2M012Union("Doc6M012", stringBarCode);
  }

  public String[][] getDoc6M012(String stringBarCode, String stringInOut, String stringDepartNo, String stringProjectID1, String stringCostID, String stringCostID1)
      throws Throwable {
    return getDoc6M012Union(stringBarCode, stringInOut, stringDepartNo, stringProjectID1, stringCostID, stringCostID1, "24");
  }

  public String[][] getDoc6M012Union(String stringBarCode, String stringInOut, String stringDepartNo, String stringProjectID1, String stringCostID, String stringCostID1,
      String stringKindNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M012 = null;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 RealMoney 7 RealTotalMoney 8 RecordNo
    stringSql = "SELECT  InOut,    DepartNo,   ProjectID,       ProjectID1,  CostID, " + " CostID1,  RealMoney,  RealTotalMoney,  RecordNo " + " FROM  Doc6M012 M12,  Doc6M010 M10 "
        + " WHERE  M12.BarCode  =  M10.BarCode " + " AND  M10.KindNo  =  '" + stringKindNo + "' ";
    if (!"".equals(stringBarCode))
      stringSql += " AND  M12.BarCode  =  '" + stringBarCode + "' ";
    if (!"".equals(stringInOut))
      stringSql += " AND  M12.InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  M12.DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  M12.ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  M12.CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  M12.CostID1  =  '" + stringCostID1 + "' ";
    stringSql += " ORDER BY  RecordNo ";
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    return retDoc6M012;
  }

  public double getRealMoneySum(String stringBarCode) throws Throwable {
    return doParseDouble(getRealMoneySumForDoc2M012Union("Doc6M012", stringBarCode));
  }

  public double getRealTotalMoneySum(String stringBarCode) throws Throwable {
    return getRealTotalMoneySumUnion("Doc6M012", stringBarCode);
  }

  public double getRealTotalMoneySumUnion(String stringTable, String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M012 = null;
    double doubleRealTotalMoneySum = 0;
    //
    stringSql = "SELECT  SUM(RealTotalMoney) " + " FROM  " + stringTable + " " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc6M012 = dbDoc.queryFromPool(stringSql);
    doubleRealTotalMoneySum = doParseDouble(retDoc6M012[0][0].trim());
    return doubleRealTotalMoneySum;
  }

  public double getRealTotalMoneySumForPurchase(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3)
      throws Throwable {
    return getRealTotalMoneySumForPurchaseUnion(stringBarCode, stringComNo, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", "24", "");
  }

  public double getRealTotalMoneySumSqlAndForPurchase(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringSqlAnd) throws Throwable {
    return getRealTotalMoneySumForPurchaseUnion(stringBarCode, stringComNo, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, "", "24", stringSqlAnd);
  }

  public double getRealTotalMoneySumForPurchase(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringPurchaseNo4) throws Throwable {
    return getRealTotalMoneySumForPurchaseUnion(stringBarCode, stringComNo, stringPurchaseNo1, stringPurchaseNo2, stringPurchaseNo3, stringPurchaseNo4, "24", "");
  }

  public double getRealTotalMoneySumForPurchaseUnion(String stringBarCode, String stringComNo, String stringPurchaseNo1, String stringPurchaseNo2, String stringPurchaseNo3,
      String stringPurchaseNo4, String stringKindNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M012 = null;
    double doubleRealTotalMoneySum = 0;
    //
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + " FROM  Doc6M012 M12,  Doc6M010  M10 " + " WHERE  M12.BarCode  =  M10.BarCode " + " AND  M10.UNDERGO_WRITE  <>  'E' "
        + " AND  M10.PurchaseNoExist  =  'Y' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.PurchaseNo1  =  '" + stringPurchaseNo1 + "' "
        + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3 + "' ";
    if (!"".equals(stringPurchaseNo4)) {
      stringSql += " AND  M10.PurchaseNo4  =  '" + stringPurchaseNo4 + "' ";
    }
    if (!"".equals(stringBarCode)) {
      stringSql += " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    }
    retDoc6M012 = dbDoc.queryFromPool(stringSql + stringSqlAnd);
    doubleRealTotalMoneySum = doParseDouble(retDoc6M012[0][0].trim());
    // 新增
    stringSql = "SELECT  SUM(M12.RealTotalMoney) " + " FROM  Doc6M0121 M12,  Doc6M010  M10 " + " WHERE  M12.BarCode  =  M10.BarCode " + " AND  M10.UNDERGO_WRITE   <>  'E' "
        + " AND  M10.PurchaseNoExist  =  'Y' " + " AND  M12.DocType          =  'B' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.PurchaseNo1  =  '"
        + stringPurchaseNo1 + "' " + " AND  M10.PurchaseNo2  =  '" + stringPurchaseNo2 + "' " + " AND  M10.PurchaseNo3  =  '" + stringPurchaseNo3 + "' ";
    if (!"".equals(stringBarCode)) {
      stringSql += " AND  M10.BarCode  <>  '" + stringBarCode + "' ";
    }
    retDoc6M012 = dbDoc.queryFromPool(stringSql + stringSqlAnd);
    doubleRealTotalMoneySum = doParseDouble(retDoc6M012[0][0].trim());
    return doubleRealTotalMoneySum;
  }

  // 表格 Doc6M013
  public String doInsertDoc6M013(String stringID, String stringBarCode, String stringRecordNo, String stringFactoryNo, String stringReceiptKind, String stringReceiptDate,
      String stringReceiptMoney, String stringReceiptTax, String stringReceiptTotalMoney, String stringReceiptTaxType, String strignAcctNo, String stringBorrowNo,
      String stringVaild) throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  INTO  Doc6M013 (ID,            BarCode,       RecordNo,    FactoryNo,          ReceiptKind, "
        + " ReceiptDate,   ReceiptMoney,  ReceiptTax,  ReceiptTotalMoney,  ReceiptTaxType, " + " ACCT_NO,       BorrowNo,      Vaild) " + " VALUES( " + stringID + " , " + " '"
        + stringBarCode + "', " + "  " + stringRecordNo + " , " + " '" + stringFactoryNo + "', " + " '" + stringReceiptKind + "', " + " '" + stringReceiptDate + "', " + "  "
        + stringReceiptMoney + " , " + "  " + stringReceiptTax + " , " + "  " + stringReceiptTotalMoney + " , " + " '" + stringReceiptTaxType + "', " + " '" + strignAcctNo + "', "
        + " '" + stringBorrowNo + "', " + " '" + stringVaild + "') ";
    return stringSql;
  }

  public String doDeleteDoc6M013(String stringBarCode) throws Throwable {
    String stringSql = "";
    //
    stringSql = "DELETE  FROM  Doc6M013" + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String getUpdateDoc6M013Sql(String stringReceiptTax, String stringReceiptDate, String stringReceiptTotalMoney, String stringReceiptMoney, String stringReceiptTaxType,
      String stringBarCode, String stringRecordNo) throws Throwable {
    String stringSql = "";
    //
    stringSql = "UPDATE  Doc6M013  SET   ReceiptTax  =  " + stringReceiptTax + ", " + " ReceiptTotalMoney  =  " + stringReceiptTotalMoney + ", " + " ReceiptMoney  =  "
        + stringReceiptMoney + ", " + " ReceiptDate  =  '" + stringReceiptDate + "', " + " ReceiptTaxType  =  '" + stringReceiptTaxType + "' " + " WHERE  BarCode  =  '"
        + stringBarCode + "' " + " AND  RecordNo  =  '" + stringRecordNo + "' ";
    return stringSql;
  }

  public double getReceiptTotalMoneySum(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M013 = null;
    double doubleReceiptTotalMoney = 0;
    //
    stringSql = "SELECT  SUM(ReceiptTotalMoney) " + " FROM  Doc6M013 " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc6M013 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M013.length != 0) {
      doubleReceiptTotalMoney = doParseDouble(retDoc6M013[0][0].trim());
    }
    return doubleReceiptTotalMoney;
  }

  public double getReceiptMoneySumForDoc6M013(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M013 = null;
    double doubleReceiptMoney = 0;
    //
    stringSql = "SELECT  SUM(ISNULL(ReceiptMoney,  0)- ISNULL(SupplementMoney,0)) " + " FROM  Doc6M013 " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc6M013 = dbDoc.queryFromPool(stringSql);
    if (retDoc6M013.length != 0) {
      doubleReceiptMoney = doParseDouble(retDoc6M013[0][0].trim());
    }
    return doubleReceiptMoney;
  }

  public double getReceiptTaxSumForDoc6M013(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M013 = null;
    double doubleReceiptMoney = 0;
    //
    stringSql = "SELECT  SUM(ReceiptTax) " + " FROM  Doc6M013 " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc6M013 = dbDoc.queryFromPool(stringSql);
    doubleReceiptMoney = doParseDouble(retDoc6M013[0][0].trim());
    return doubleReceiptMoney;
  }

  public double getReceiptTaxSumForDoc6M013(String stringBarCode, String stringBorrowNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M013 = null;
    double doubleReceiptMoney = 0;
    //
    stringSql = "SELECT  SUM(ReceiptTax) " + " FROM  Doc6M013 " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  BorrowNo  =  '" + stringBorrowNo + "' ";
    retDoc6M013 = dbDoc.queryFromPool(stringSql);
    doubleReceiptMoney = doParseDouble(retDoc6M013[0][0].trim());
    return doubleReceiptMoney;
  }

  public String[][] getDoc6M013(String[][] retBarCode) throws Throwable {
    String stringBarCode = "";
    String[][] retDoc6M013 = null;
    Vector vectorDoc6M013 = new Vector();
    for (int intNo = 0; intNo < retBarCode.length; intNo++) {
      stringBarCode = retBarCode[intNo][0].trim();
      retDoc6M013 = getDoc6M013(stringBarCode);
      for (int intDoc6M013 = 0; intDoc6M013 < retDoc6M013.length; intDoc6M013++) {
        vectorDoc6M013.add(retDoc6M013[intDoc6M013]);
      }
    }
    retDoc6M013 = (String[][]) vectorDoc6M013.toArray(new String[0][0]);
    return retDoc6M013;
  }

  public String[][] getDoc6M013(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M013 = null;
    // 0 FactoryNo 1 ReceiptKind 2 ReceiptDate 3 ReceiptMoney 4 ReceiptTax
    // 5 ReceiptTotalMoney 6 ReceiptTaxType 7 RecordNo 8 ACCT_NO 9 SupplementMoney
    // 10 BorrowNo
    stringSql = "SELECT  FactoryNo,          ReceiptKind,     ReceiptDate,   ReceiptMoney,  ReceiptTax, "
        + " ReceiptTotalMoney,  ReceiptTaxType,  RecordNo,      ACCT_NO,       SupplementMoney, " + " BorrowNo " + " FROM  Doc6M013 " + " WHERE  BarCode  =  '" + stringBarCode
        + "' " + " ORDER BY  RecordNo ";
    retDoc6M013 = dbDoc.queryFromPool(stringSql);
    return retDoc6M013;
  }

  public String[][] getDoc6M013(String stringBarCode, String stringRecordNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M013 = null;
    // 0 FactoryNo 1 ReceiptKind 2 ReceiptDate 3 ReceiptMoney 4 ReceiptTax
    // 5 ReceiptTotalMoney 6 ReceiptTaxType
    stringSql = "SELECT  FactoryNo,                   ReceiptKind,  ReceiptDate,  ReceiptMoney,  ReceiptTax, " + " ReceiptTotalMoney,   ReceiptTaxType " + " FROM  Doc6M013 "
        + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  RecordNo =  '" + stringRecordNo + "' ";
    retDoc6M013 = dbDoc.queryFromPool(stringSql);
    return retDoc6M013;
  }

  // 表格 Doc6M014
  // 判斷是否重複申請
  public String[][] getDoc6M014S(String stringProjectID1, String stringPosition, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M014 = null;
    boolean booleanExist = false;
    // 0 BarCode 1 ProjectID1 2 Position 3 InvoiceTotalMoney
    stringSql = " SELECT  M14.BarCode,  M14.ProjectID1,  M14.Position,  M14.InvoiceTotalMoney " + " FROM  Doc6M014 M14,  Doc6M010 M10 " + " WHERE  M14.BarCode  =  M10.BarCode "
        + " AND  M10.UNDERGO_WRITE  <>  'E'";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  M14.ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringPosition))
      stringSql += " AND  M14.Position  =  '" + stringPosition + "' ";
    if ("".equals(stringSqlAnd)) {
      stringSql += " ORDER BY  M14.BarCode ";
    } else {
      stringSql += stringSqlAnd;
    }
    retDoc6M014 = dbDoc.queryFromPool(stringSql);
    return retDoc6M014;
  }

  // 表格 Doc6M015
  public String[][] getDoc6M015(String stringBarCode) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M015 = null;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID
    // 5 CostID1 6 DiscountMoney 7 RecordNo 8 DiscountNoTaxMoney
    stringSql = "SELECT  InOut,    DepartNo,       ProjectID,  ProjectID1,                     CostID, " + "  CostID1,  DiscountMoney,  RecordNo,   DiscountNoTaxMoney "
        + " FROM  Doc6M015 " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " ORDER BY  RecordNo ";
    retDoc6M015 = dbDoc.queryFromPool(stringSql);
    return retDoc6M015;
  }

  public String[][] getDoc6M015(String stringBarCode, String stringRecordNo) throws Throwable {
    String stringSql = "";
    String[][] retDoc6M015 = null;
    // 0 InOut 1 DepartNo 2 ProjectID 3 ProjectID1 4 CostID 5 CostID1 6
    // DiscountMoney
    stringSql = "SELECT  InOut,  DepartNo,  ProjectID,  ProjectID1,  CostID,  CostID1,  DiscountMoney " + " FROM  Doc6M015 " + " WHERE  BarCode  =  '" + stringBarCode + "' "
        + " AND  RecordNo  =  " + stringRecordNo + " ";
    retDoc6M015 = dbDoc.queryFromPool(stringSql);
    return retDoc6M015;
  }

  public double getDiscountTotalMoneySumForDoc6M015(String stringBarCode) throws Throwable {
    //
    String stringSql = "";
    String[][] retDoc6M015 = null;
    double doubleDiscountTotalMoneySum = 0;
    //
    stringSql = "SELECT  SUM(DiscountMoney) " + " FROM  Doc6M015 " + " WHERE  BarCode  =  '" + stringBarCode + "' ";
    retDoc6M015 = dbDoc.queryFromPool(stringSql);
    doubleDiscountTotalMoneySum = doParseDouble(retDoc6M015[0][0].trim());
    return doubleDiscountTotalMoneySum;
  }

  // 表格 Doc7M010
  public String getBudgetName(String stringBudgetID) throws Throwable {
    String stringSql = "";
    String stringBudgetName = "";
    String[][] retDoc7M010 = null;
    //
    stringSql = "SELECT  BudgetName " + " FROM  Doc7M010 " + " WHERE  BudgetID  =  '" + stringBudgetID + "' ";
    retDoc7M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc7M010.length > 0)
      stringBudgetName = retDoc7M010[0][0].trim();
    return stringBudgetName;
  }

  // A 行政管理 (A績效獎金、B行政管理)
  // B廣告企劃成本 (C業務預算執行、D企劃預算執行)
  public String[][] getDoc7M010(String stringFirst, String stringSecond) throws Throwable {
    String stringSql = "";
    String[][] retDoc7M010 = null;
    //
    stringSql = "SELECT  DISTINCT  BudgetID " + " FROM  Doc7M010 " + " WHERE  1  =  1 ";
    if (!"".equals(stringFirst))
      stringSql += " AND  SUBSTRING(BudgetID,  1,  1)  =  '" + stringFirst + "'  ";
    if (!"".equals(stringSecond))
      stringSql += " AND  SUBSTRING(BudgetID,  2,  2)  =  '" + stringSecond + "'  ";
    stringSql += " ORDER BY  BudgetID ";
    retDoc7M010 = dbDoc.queryFromPool(stringSql);
    return retDoc7M010;
  }

  // 表格 Doc7M011 合併於 Doc2M020
  public String[][] getDoc7M011(String stringFunctionType) throws Throwable {
    return getDoc7M011("Z6", stringFunctionType);
  }

  public String[][] getDoc7M011(String stringComNo, String stringFunctionType) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M011 = null;
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSql = "SELECT  BudgetID,  CostID,  CostID1,  Description " + " FROM  Doc2M020 " + " WHERE  BudgetID  <>  '' " + " AND  NOT(BudgetID  IS  NULL) "
        + " AND  UseStatus  =  'Y' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringFunctionType))
      stringSql += " AND  BudgetID  LIKE  '" + stringFunctionType + "%' ";
    stringSql += " ORDER BY BudgetID,  CostID,  CostID1 ";
    retDoc7M011 = dbDoc.queryFromPool(stringSql);
    return retDoc7M011;
  }

  public String[][] getDoc7M011All(String stringFunctionType) throws Throwable {
    return getDoc7M011All("Z6", stringFunctionType);
  }

  public String[][] getDoc7M011All(String stringComNo, String stringFunctionType) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M011 = null;
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSql = "SELECT  DISTINCT  BudgetID,  CostID,  CostID1,  Description " + " FROM  Doc2M020 " + " WHERE  1  =  1 " + " AND  BudgetID  <>  '' "
        + " AND  NOT(BudgetID  IS  NULL) ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringFunctionType))
      stringSql += " AND  BudgetID  LIKE  '" + stringFunctionType + "%' ";
    stringSql += " ORDER BY BudgetID,  CostID,  CostID1 ";
    retDoc7M011 = dbDoc.queryFromPool(stringSql);
    return retDoc7M011;
  }

  public String[][] getDoc7M011(String stringBudgetID, String stringCostID, String stringCostID1) throws Throwable {
    return getDoc7M011("Z6", stringBudgetID, stringCostID, stringCostID1);
  }

  public String[][] getDoc7M011(String stringComNo, String stringBudgetID, String stringCostID, String stringCostID1) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M011 = null;
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSql = "SELECT  DISTINCT  BudgetID,  CostID,  CostID1,  Description " + " FROM  Doc2M020 " + " WHERE  1  =  1 " + " AND  BudgetID  <>  '' "
        + " AND  NOT(BudgetID  IS  NULL) " + " AND  UseStatus  =  'Y' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringBudgetID))
      stringSql += " AND  BudgetID  =  '" + stringBudgetID + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    stringSql += " ORDER BY BudgetID,  CostID,  CostID1 ";
    retDoc7M011 = dbDoc.queryFromPool(stringSql);
    return retDoc7M011;
  }

  public String[][] getDoc7M011All(String stringBudgetID, String stringCostID, String stringCostID1) throws Throwable {
    return getDoc7M011All("Z6", stringBudgetID, stringCostID, stringCostID1);
  }

  public String[][] getDoc7M011All(String stringComNo, String stringBudgetID, String stringCostID, String stringCostID1) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M011 = null;
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    stringSql = "SELECT  BudgetID,  CostID,  CostID1,  Description " + " FROM  Doc2M020 " + " WHERE  1  =  1 " + " AND  BudgetID  <>  '' " + " AND  NOT(BudgetID  IS  NULL) ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringBudgetID))
      stringSql += " AND  BudgetID  =  '" + stringBudgetID + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    stringSql += " ORDER BY BudgetID,  CostID,  CostID1 ";
    retDoc7M011 = dbDoc.queryFromPool(stringSql);
    return retDoc7M011;
  }

  // 表格 Doc7M017(實績費用率-頭)
  /*
   * public boolean isExistDoc7M017(String stringProjectID, String
   * stringFunctionType) throws Throwable { String stringSql = "" ; String[][]
   * retDoc7M017 = null ; // stringSql = "SELECT  ProjectID " + " FROM  Doc7M017 "
   * + " WHERE  1  =  1 " ; if(!"".equals(stringProjectID)) stringSql +=
   * " AND  ProjectID  =  '" + stringProjectID + "' " ;
   * if(!"".equals(stringFunctionType)) stringSql += " AND  FunctionType  =  '" +
   * stringFunctionType + "' " ; retDoc7M017 = dbDoc.queryFromPool(stringSql) ;
   * if(retDoc7M017.length == 0) return false ; return true ; }
   */
  // 表格 Doc7M019
  public String[][] getDoc7M019(String stringProjectID, String stringEmployeeNo, String stringFunctionType, String stringType) throws Throwable {
    String stringSql = "";
    String stringDepartName = "";
    String[][] retDoc7M019 = null;
    /* 0 ProjectID 1 EmployeeNo 2 FunctionType */
    stringSql = " SELECT  ProjectID,  EmployeeNo,  FunctionType " + " FROM  Doc7M019 " + " WHERE  FunctionType <> 'C' ";
    if (!"".equals(stringProjectID))
      stringSql += " AND  ProjectID  =  '" + stringProjectID + "' ";
    if (!"".equals(stringEmployeeNo))
      stringSql += " AND  EmployeeNo  =  '" + stringEmployeeNo + "' ";
    if (!"".equals(stringFunctionType))
      stringSql += " AND  FunctionType  =  '" + stringFunctionType + "' ";
    if (!"".equals(stringType))
      stringSql += " AND  Type  =  '" + stringType + "' ";
    retDoc7M019 = dbDoc.queryFromPool(stringSql);
    return retDoc7M019;
  }

  // 表格 Doc7M020(案預算控管-主 案總預算資訊)
  public String[][] getDoc7M020(String stringProjectID1, String stringFunctionType, String stringDateStart, String stringBuildYMD, String stringStatus) throws Throwable {
    return getDoc7M020ForComNo("Z6", stringProjectID1, stringFunctionType, stringDateStart, stringBuildYMD, stringStatus);
  }

  public String[][] getDoc7M020ForComNo(String stringComNo, String stringProjectID1, String stringFunctionType, String stringDateStart, String stringBuildYMD, String stringStatus)
      throws Throwable {
    String stringSql = "";
    String stringDepartName = "";
    String[][] retDoc7M020 = null;
    // 0 CostRate 1 TotalSaleMoney 2 BudgetMoney 3 CreepSaleDate 4 OpenSaleDate
    // 5 StrongSaleDate 6 EndSaleDate 7 STATUS 8 UNDERGO_WRITE 9 BuildYMD
    // 10 DateStart 11 ComNo
    stringSql = " SELECT  CostRate,        TotalSaleMoney,  BudgetMoney,  CreepSaleDate,  OpenSaleDate, "
        + " StrongSaleDate,  EndSaleDate,     STATUS,       UNDERGO_WRITE,  BuildYMD, " + " DateStart,       ComNo " + " FROM  Doc7M020 " + " WHERE  1  =  1 ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringFunctionType))
      stringSql += " AND  FunctionType  =  '" + stringFunctionType + "' ";
    if (!"".equals(stringDateStart))
      stringSql += " AND  DateStart  =  '" + stringDateStart + "' ";
    if (!"".equals(stringBuildYMD))
      stringSql += " AND  BuildYMD  =  '" + stringBuildYMD + "' ";
    if (!"".equals(stringStatus))
      stringSql += " AND  STATUS  =  '" + stringStatus + "' ";
    retDoc7M020 = dbDoc.queryFromPool(stringSql);
    return retDoc7M020;
  }

  public String[][] getDoc7M020(String stringProjectID1, String stringFunctionType, String stringDateStart, String stringDateStartSign, String stringBuildYMD, String stringStatus)
      throws Throwable {
    return getDoc7M020ForComNo("Z6", stringProjectID1, stringFunctionType, stringDateStart, stringDateStartSign, stringBuildYMD, stringStatus);
  }

  public String[][] getDoc7M020ForComNo(String stringComNo, String stringProjectID1, String stringFunctionType, String stringDateStart, String stringDateStartSign,
      String stringBuildYMD, String stringStatus) throws Throwable {
    String stringSql = "";
    String stringDepartName = "";
    String[][] retDoc7M020 = null;
    // 0 CostRate 1 TotalSaleMoney 2 BudgetMoney 3 CreepSaleDate 4 OpenSaleDate
    // 5 StrongSaleDate 6 EndSaleDate 7 STATUS 8 UNDERGO_WRITE 9 BuildYMD
    // 10 DateStart 11 ComNo
    stringSql = " SELECT  CostRate,        TotalSaleMoney,  BudgetMoney,  CreepSaleDate,  OpenSaleDate, "
        + " StrongSaleDate,  EndSaleDate,     STATUS,       UNDERGO_WRITE,  BuildYMD, " + " DateStart,       ComNo " + " FROM  Doc7M020 " + " WHERE  1  =  1 ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringFunctionType))
      stringSql += " AND  FunctionType  =  '" + stringFunctionType + "' ";
    if (!"".equals(stringDateStart) && !"".equals(stringDateStartSign))
      stringSql += " AND  DateStart  " + stringDateStartSign + "  '" + stringDateStart + "' ";
    if (!"".equals(stringBuildYMD))
      stringSql += " AND  BuildYMD  =  '" + stringBuildYMD + "' ";
    if (!"".equals(stringStatus))
      stringSql += " AND  STATUS  =  '" + stringStatus + "' ";
    retDoc7M020 = dbDoc.queryFromPool(stringSql);
    return retDoc7M020;
  }

  public String[][] getDoc7M020(String stringProjectID1, String stringFunctionType, String stringDateStart, String stringDateStartSign, String stringBuildYMD, String stringStatus,
      String stringSqlAnd) throws Throwable {
    return getDoc7M020ForComNo("Z6", stringProjectID1, stringFunctionType, stringDateStart, stringDateStartSign, stringBuildYMD, stringStatus, stringSqlAnd);
  }

  public String[][] getDoc7M020ForComNo(String stringComNo, String stringProjectID1, String stringFunctionType, String stringDateStart, String stringDateStartSign,
      String stringBuildYMD, String stringStatus, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringDepartName = "";
    String[][] retDoc7M020 = null;
    // 0 CostRate 1 TotalSaleMoney 2 BudgetMoney 3 CreepSaleDate 4 OpenSaleDate
    // 5 StrongSaleDate 6 EndSaleDate 7 STATUS 8 UNDERGO_WRITE 9 BuildYMD
    stringSql = " SELECT  CostRate,        TotalSaleMoney,  BudgetMoney,  CreepSaleDate,  OpenSaleDate, "
        + " StrongSaleDate,  EndSaleDate,     STATUS,       UNDERGO_WRITE,  BuildYMD, " + " DateStart " + " FROM  Doc7M020 " + " WHERE  1  =  1 ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringFunctionType))
      stringSql += " AND  FunctionType  =  '" + stringFunctionType + "' ";
    if (!"".equals(stringDateStart) && !"".equals(stringDateStartSign))
      stringSql += " AND  DateStart  " + stringDateStartSign + "  '" + stringDateStart + "' ";
    if (!"".equals(stringBuildYMD))
      stringSql += " AND  BuildYMD  =  '" + stringBuildYMD + "' ";
    if (!"".equals(stringStatus))
      stringSql += " AND  STATUS  =  '" + stringStatus + "' ";
    stringSql += stringSqlAnd;
    retDoc7M020 = dbDoc.queryFromPool(stringSql);
    return retDoc7M020;
  }

  public String doUpdateDoc7M020(String stringStatus, String stringProjectID1Limit, String stringFunctionTypeLimit, String stringStatusLimit, boolean booleanDB) throws Throwable {
    return doUpdateDoc7M020(stringStatus, "Z6", stringProjectID1Limit, stringFunctionTypeLimit, stringStatusLimit, booleanDB);
  }

  public String doUpdateDoc7M020(String stringStatus, String stringComNo, String stringProjectID1Limit, String stringFunctionTypeLimit, String stringStatusLimit, boolean booleanDB)
      throws Throwable {
    String stringSql = "";
    //
    stringSql = "UPDATE  Doc7M020 " + " SET  STATUS  =  '" + stringStatus + "' " + " WHERE  ProjectID1  =  '" + stringProjectID1Limit + "' " + " AND  FunctionType  =  '"
        + stringFunctionTypeLimit + "' " + " AND  ComNo  =  '" + stringComNo + "' " + " AND  STATUS  =  '" + stringStatusLimit + "' ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String doInsertDoc7M020(String stringProjectID1, String stringFunctionType, String stringBuildYMD, String stringDateStart, String stringCostRate,
      String stringTotalSaleMoney, String stringBudgetMoney, String stringCreepSaleDate, String stringOpenSaleDate, String stringStrongSaleDate, String stringEndSaleDate,
      String stringStatus, String stringUndergoWrite, String stringFlowType, boolean booleanFlag) throws Throwable {
    return doInsertDoc7M020(stringProjectID1, stringFunctionType, stringBuildYMD, stringDateStart, stringCostRate, stringTotalSaleMoney, stringBudgetMoney, stringCreepSaleDate,
        stringOpenSaleDate, stringStrongSaleDate, stringEndSaleDate, stringStatus, stringUndergoWrite, stringFlowType, "Z6", booleanFlag);
  }

  public String doInsertDoc7M020(String stringProjectID1, String stringFunctionType, String stringBuildYMD, String stringDateStart, String stringCostRate,
      String stringTotalSaleMoney, String stringBudgetMoney, String stringCreepSaleDate, String stringOpenSaleDate, String stringStrongSaleDate, String stringEndSaleDate,
      String stringStatus, String stringUndergoWrite, String stringFlowType, String stringComNo, boolean booleanFlag) throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  INTO  Doc7M020(ProjectID1,      FunctionType,   BuildYMD,       DateStart,     CostRate, "
        + " TotalSaleMoney,  BudgetMoney,    CreepSaleDate,  OpenSaleDate,  StrongSaleDate, " + " EndSaleDate,     STATUS,         UNDERGO_WRITE,  FLOW_TYPE,     ComNo) "
        + " VALUES('" + stringProjectID1 + "', " + " '" + stringFunctionType + "', " + " '" + stringBuildYMD + "', " + " '" + stringDateStart + "', " + "  " + stringCostRate
        + ",  " + "  " + stringTotalSaleMoney + ",  " + "  " + stringBudgetMoney + ",  " + " '" + stringCreepSaleDate + "', " + " '" + stringOpenSaleDate + "', " + " '"
        + stringStrongSaleDate + "', " + " '" + stringEndSaleDate + "', " + " '" + stringStatus + "', " + " '" + stringUndergoWrite + "', " + " '" + stringFlowType + "', " + " '"
        + stringComNo + "') ";
    if (booleanFlag)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  // 表格 Doc7M021(案預算控管-副 預算、階段資訊)
  public double getSumBudgetMoneyDoc7M021(String stringFieldName, String stringProjectID1, String stringFunctionType) throws Throwable {
    return getSumBudgetMoneyDoc7M021(stringFieldName, "Z6", stringProjectID1, stringFunctionType);
  }

  public double getSumBudgetMoneyDoc7M021(String stringFieldName, String stringComNo, String stringProjectID1, String stringFunctionType) throws Throwable {
    String stringSql = "";
    String[][] retDoc7M021 = null;
    //
    stringSql = " SELECT  SUM(" + stringFieldName + ") " + " FROM  Doc7M021 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  ProjectID1  =  '" + stringProjectID1 + "' "
        + " AND  FunctionType  =  '" + stringFunctionType + "' " + " AND  BuildYMD  IN  (SELECT  BuildYMD " + " FROM Doc7M020 " + " WHERE  ProjectID1  =  '" + stringProjectID1
        + "' " + " AND  FunctionType  =  '" + stringFunctionType + "' " + " AND  ComNo  =  '" + stringComNo + "' " + " AND  STATUS  =  'U' ) ";
    retDoc7M021 = dbDoc.queryFromPool(stringSql);
    return doParseDouble(retDoc7M021[0][0]);
  }

  public String[][] getDoc7M021(String stringProjectID1, String stringFunctionType, String stringBuildYMD, String stringBudgetID) throws Throwable {
    return getDoc7M021("Z6", stringProjectID1, stringFunctionType, stringBuildYMD, stringBudgetID);
  }

  public String[][] getDoc7M021(String stringComNo, String stringProjectID1, String stringFunctionType, String stringBuildYMD, String stringBudgetID) throws Throwable {
    String stringSql = "";
    String[][] retDoc7M021 = null;
    // 0 BudgetID 1 BudgetMoney 2 CreepSaleMoney 3 OpenSaleMoney 4 StrongSaleMoney
    // 5 EndSaleMoney 6 CostRate
    stringSql = " SELECT  BudgetID,       BudgetMoney,  CreepSaleMoney,  OpenSaleMoney,  StrongSaleMoney, " + " EndSaleMoney,  CostRate " + " FROM  Doc7M021 " + " WHERE  1  =  1 ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringFunctionType))
      stringSql += " AND  FunctionType  =  '" + stringFunctionType + "' ";
    if (!"".equals(stringBuildYMD))
      stringSql += " AND  BuildYMD  =  '" + stringBuildYMD + "' ";
    if (!"".equals(stringBudgetID))
      stringSql += " AND  BudgetID  =  '" + stringBudgetID + "' ";
    retDoc7M021 = dbDoc.queryFromPool(stringSql);
    return retDoc7M021;
  }

  public String doInsertDoc7M021(String stringProjectID1, String stringFunctionType, String stringBuildYMD, String stringBudgetID, String stringCostRate, String stringBudgetMoney,
      String stringCreepSaleMoney, String stringOpenSaleMoney, String stringStrongSaleMoney, String stringEndSaleMoney, boolean booleanFlag) throws Throwable {
    return doInsertDoc7M021(stringProjectID1, stringFunctionType, stringBuildYMD, stringBudgetID, stringCostRate, stringBudgetMoney, stringCreepSaleMoney, stringOpenSaleMoney,
        stringStrongSaleMoney, stringEndSaleMoney, "Z6", booleanFlag);
  }

  public String doInsertDoc7M021(String stringProjectID1, String stringFunctionType, String stringBuildYMD, String stringBudgetID, String stringCostRate, String stringBudgetMoney,
      String stringCreepSaleMoney, String stringOpenSaleMoney, String stringStrongSaleMoney, String stringEndSaleMoney, String stringComNo, boolean booleanFlag) throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  INTO  Doc7M021(ProjectID1,      FunctionType,    BuildYMD,       BudgetID,         CostRate, "
        + " BudgetMoney,     CreepSaleMoney,  OpenSaleMoney,  StrongSaleMoney,  EndSaleMoney, " + " ComNo) " + " VALUES('" + stringProjectID1 + "', " + " '" + stringFunctionType
        + "', " + " '" + stringBuildYMD + "', " + " '" + stringBudgetID + "', " + "  " + stringCostRate + ",  " + //
        "  " + stringBudgetMoney + ",  " + "  " + stringCreepSaleMoney + ", " + "  " + stringOpenSaleMoney + ", " + "  " + stringStrongSaleMoney + ", " + "  " + stringEndSaleMoney
        + ", " + " '" + stringComNo + "') ";
    if (booleanFlag)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  // 表格 Doc7M022(案預算控管-副 簽核意見)
  public String[][] getDoc7M022(String stringProjectID1, String stringFunctionType, String stringBuildYMD, String stringUnderGoWrite) throws Throwable {
    return getDoc7M022("Z6", stringProjectID1, stringFunctionType, stringBuildYMD, stringUnderGoWrite);
  }

  public String[][] getDoc7M022(String stringComNo, String stringProjectID1, String stringFunctionType, String stringBuildYMD, String stringUnderGoWrite) throws Throwable {
    String stringSql = "";
    String[][] retDoc7M022 = null;
    // 0 STATUS 1 DESCRIPTION
    stringSql = " SELECT  STATUS,  DESCRIPTION,  LAST_USER,  LAST_YMD " + " FROM  Doc7M022 " + " WHERE  1  =  1 ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringFunctionType))
      stringSql += " AND  FunctionType  =  '" + stringFunctionType + "' ";
    if (!"".equals(stringBuildYMD))
      stringSql += " AND  BuildYMD  =  '" + stringBuildYMD + "' ";
    if (!"".equals(stringUnderGoWrite))
      stringSql += " AND  UNDERGO_WRITE  =  '" + stringUnderGoWrite + "' ";
    retDoc7M022 = dbDoc.queryFromPool(stringSql);
    return retDoc7M022;
  }

  public String doInsertDoc7M022(String stringProjectID1, String stringFunctionType, String stringBuildYMD, String stringUnderGoWrite, String stringEDateTime,
      String stringDescription, String stringStatus, String stringUser, String stringLastYMD, boolean booleanDB) throws Throwable {
    return doInsertDoc7M022(stringProjectID1, stringFunctionType, stringBuildYMD, stringUnderGoWrite, stringEDateTime, stringDescription, stringStatus, stringUser, stringLastYMD,
        "Z6", booleanDB);
  }

  public String doInsertDoc7M022(String stringProjectID1, String stringFunctionType, String stringBuildYMD, String stringUnderGoWrite, String stringEDateTime,
      String stringDescription, String stringStatus, String stringUser, String stringLastYMD, String stringComNo, boolean booleanDB) throws Throwable {
    String stringSql = "";
    //
    stringSql = " INSERT  INTO  Doc7M022(ProjectID1,   FunctionType,  BuildYMD,    UNDERGO_WRITE,  EDateTime, "
        + " DESCRIPTION,  STATUS,         LAST_USER,  LAST_YMD,       ComNo) " + " VALUES('" + stringProjectID1 + "', " + " '" + stringFunctionType + "', " + " '" + stringBuildYMD
        + "', " + " '" + stringUnderGoWrite + "', " + " '" + stringEDateTime + "', " + " N'" + stringDescription + "', " + //
        " '" + stringStatus + "', " + " '" + stringUser + "', " + " '" + stringLastYMD + "', " + " '" + stringComNo + "') ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  public String doDeleteDoc7M022(String stringProjectID1, String stringFunctionType, String stringBuildYMD, String stringUnderGoWrite, boolean booleanDB) throws Throwable {
    return doDeleteDoc7M022("Z6", stringProjectID1, stringFunctionType, stringBuildYMD, stringUnderGoWrite, booleanDB);
  }

  public String doDeleteDoc7M022(String stringComNo, String stringProjectID1, String stringFunctionType, String stringBuildYMD, String stringUnderGoWrite, boolean booleanDB)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc7M022 = null;
    stringSql = " DELETE FROM  Doc7M022 " + " WHERE  1  =  1 ";
    if (!"".equals(stringComNo)) {
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    } else {
      return "ERROR";
    }
    if (!"".equals(stringProjectID1)) {
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    } else {
      return "ERROR";
    }
    if (!"".equals(stringFunctionType)) {
      stringSql += " AND  FunctionType  =  '" + stringFunctionType + "' ";
    } else {
      return "ERROR";
    }
    if (!"".equals(stringBuildYMD)) {
      stringSql += " AND  BuildYMD  =  '" + stringBuildYMD + "' ";
    } else {
      return "ERROR";
    }
    if (!"".equals(stringUnderGoWrite))
      stringSql += " AND  UNDERGO_WRITE  =  '" + stringUnderGoWrite + "' ";
    if (booleanDB)
      dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  // 表格 Doc7M0265
  public String getNotVaildDoc7M0265(String stringDateVaild) throws Throwable {
    return getNotVaildDoc7M0265("Z6", stringDateVaild);
  }

  public String getNotVaildDoc7M0265(String stringComNo, String stringDateVaild) throws Throwable {
    String stringProjectID1 = "";
    String stringSqlAnd = " AND  ((DateStart  !=  '9999/99/99'  AND  DateStart  >  '" + stringDateVaild + "') OR " + " (DateEnd    !=  '9999/99/99'  AND  DateEnd    <  '"
        + stringDateVaild + "')) ";
    String[][] retDoc7M0265 = getDoc7M0265(stringComNo, "", "", "", stringSqlAnd);
    stringSqlAnd = "";
    for (int intNo = 0; intNo < retDoc7M0265.length; intNo++) {
      stringProjectID1 = retDoc7M0265[intNo][1].trim();
      //
      if (!"".equals(stringSqlAnd))
        stringSqlAnd += ", ";
      stringSqlAnd += " '" + stringProjectID1 + "' ";
    }
    if (!"".equals(stringSqlAnd))
      stringSqlAnd = " AND  ProjectID1  NOT  IN (" + stringSqlAnd + ") ";
    return stringSqlAnd;
  }

  public String[][] getDoc7M0265(String stringComNo, String stringProjectIDMajor, String stringProjectID1, String stringDateVaild, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc7M0265 = null;
    // 0 ProjectIDMajor 1 ProjectID1 2 AreaNum 3 DateStart 4 DateEnd
    // 5 Remark 6 EnableStatus
    stringSql = " SELECT  ProjectIDMajor,  ProjectID1,  AreaNum,  DateStart,  DateEnd, " + " Remark,          EnableStatus  " + " FROM  Doc7M0265 " + " WHERE  1=1 ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringProjectIDMajor))
      stringSql += " AND  ProjectIDMajor  =  '" + stringProjectIDMajor + "' ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringDateVaild)) {
      stringSql += " AND  (DateStart  =  '9999/99/99'  OR  DateStart  <=  '" + stringDateVaild + "') " + " AND  (DateEnd    =  '9999/99/99'  OR  DateEnd    >=  '" + stringDateVaild
          + "') ";
    }
    if (!"".equals(stringSqlAnd)) {
      stringSql += stringSqlAnd;
    } else {
      stringSql += " ORDER BY ProjectIDMajor, ProjectID1,  DateStart,  DateEnd ";
    }
    retDoc7M0265 = dbDoc.queryFromPool(stringSql);
    return retDoc7M0265;
  }

  // 表格 Doc7M032
  // 表格 Doc7M033
  public String[][] getDoc7M033(String stringDepartNo, String stringYYYY, String stringComNo, String stringFunctionType, String stringStatus, String stringSqlAnd)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc7M033 = null;
    // 0 DepartNo 1 ComNo 2 FunctionType 3 BuildYMD 4 STATUS
    // 5 YYYY 6 MONTH 7 CostID 8 BudgetMoney
    stringSql = " SELECT  DepartNo,  ComNo,  FunctionType,  BuildYMD,  STATUS, " + " YYYY,      MONTH,  CostID,        BudgetMoney " + " FROM  Doc7M033 " + " WHERE  1=1 ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringYYYY))
      stringSql += " AND  YYYY  =  '" + stringYYYY + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  FunctionType  =  '" + stringFunctionType + "' ";
    if (!"".equals(stringStatus))
      stringSql += " AND  STATUS  =  '" + stringStatus + "' ";
    if (!"".equals(stringSqlAnd)) {
      stringSql += stringSqlAnd;
    } else {
      stringSql += " ORDER BY DepartNo, ComNo,  FunctionType,  BuildYMD,  CostID,  YYYY,  MONTH ";
    }
    retDoc7M033 = dbDoc.queryFromPool(stringSql);
    return retDoc7M033;
  }

  public Vector getMidCostIDDoc7M033(String stringDepartNo, String stringYYYY, Hashtable hashtableMidCostID, FargloryUtil exeUtil) throws Throwable {
    /*
     * String stringCostID = "" ; String stringMidCostID = "" ; String[][]
     * retDoc7M033 = null ; Vector vectorCostID = new Vector() ; // retDoc7M033 =
     * getDoc7M033(stringDepartNo, stringYYYY, "", "", "", "") ; for(int intNo=0 ;
     * intNo<retDoc7M033.length ; intNo++) { stringCostID =
     * retDoc7M033[intNo][7].trim() ; stringMidCostID = getMidCostID(stringDepartNo,
     * stringCostID, hashtableMidCostID, exeUtil) ; //
     * if(vectorCostID.indexOf(stringMidCostID)==-1)
     * vectorCostID.add(stringMidCostID) ; }
     */
    return new Vector();
  }

  // 取得特殊預算控管-中分類
  public Hashtable getMidCostIDDoc7M033(String stringFunctionType, String stringYearAC, String stringSTATUS, String stringSqlAnd, FargloryUtil exeUtil) throws Throwable {
    /*
     * String stringSql = "" ; String[][] retDoc7M033 = null ; Vector vectorComNo =
     * new Vector() ; // stringSql = " SELECT  DISTINCT  DepartNo,  CostID " +
     * " FROM  Doc7M033 " + " WHERE  STATUS  =  'U' " + " AND  CostID  LIKE  '%00' "
     * + " AND  LEN(ISNULL(CostID,''))  =  5 " +
     * " AND  ComNo  NOT IN (SELECT  ComNo " + " FROM  Doc7M0331 " +
     * " WHERE  FunctionType  =  'B' " +
     * " AND ( VaildYearS  =  '9999' OR VaildYearS >= '"+stringYearAC+"') " +
     * " AND ( VaildYearE  =  '9999' OR VaildYearE <= '"+stringYearAC+"'))" ;
     * if(!"".equals(stringFunctionType)) stringSql += " AND  FunctionType  =  '" +
     * stringFunctionType + "' " ; if(!"".equals(stringYearAC)) stringSql +=
     * " AND  YYYY  =  '" + stringYearAC + "' " ; if(!"".equals(stringSTATUS))
     * stringSql += " AND  STATUS  =  '" + stringSTATUS + "' " ; stringSql +=
     * stringSqlAnd ; retDoc7M033 = dbDoc.queryFromPool(stringSql) ; // String
     * stringCostID = "" ; String stringDepartNo = "" ; Vector vectorMidCostID = new
     * Vector() ;
     */
    Hashtable hashtableMidCostID = new Hashtable();
    /*
     * for(int intNo=0 ; intNo<retDoc7M033.length ; intNo++) { stringDepartNo =
     * retDoc7M033[intNo][0].trim() ; stringCostID = retDoc7M033[intNo][1].trim() ;
     * // vectorMidCostID = (Vector)hashtableMidCostID.get(stringDepartNo) ;
     * if(vectorMidCostID == null) { vectorMidCostID = new Vector() ;
     * hashtableMidCostID.put(stringDepartNo, vectorMidCostID) ; }
     * vectorMidCostID.add(exeUtil.doSubstring(stringCostID, 0,3)) ; }
     */
    return hashtableMidCostID;

  }

  // 請款代碼分類
  public String getMidCostID(String stringDepartNo, String stringCostID, Hashtable hashtableMidCostID, FargloryUtil exeUtil) throws Throwable {
    Vector vectorMidCostID = (Vector) hashtableMidCostID.get(stringDepartNo);
    return getMidCostID(stringCostID, vectorMidCostID, exeUtil);
  }

  public String getMidCostID(String stringCostID, Vector vectorMidCostID, FargloryUtil exeUtil) throws Throwable {
    String stringSmallCostID = exeUtil.doSubstring(stringCostID, 0, 5);
    // String stringMidCostID = exeUtil.doSubstring(stringCostID, 0,3) ;
    // 特殊小分類
    // if("A199901".equals(stringCostID)) {
    // stringSmallCostID = "A1105" ;
    // }
    // 特殊中分類控管
    /*
     * if(vectorMidCostID != null) { if(vectorMidCostID.indexOf(stringMidCostID) !=
     * -1) { return stringMidCostID + "00" ; } }
     */
    // 特殊情況分類 AAAA1(A12+A13)
    // if("A0108,A0101".indexOf(stringSmallCostID)!=-1) stringSmallCostID = "AAAA2"
    // ;
    // if("A1911,A1107".indexOf(stringSmallCostID)!=-1) stringSmallCostID = "AAAA3"
    // ;
    // if("A1106,A1108".indexOf(stringSmallCostID)!=-1) stringSmallCostID = "AAAA4"
    // ;
    // if( "A1409,".indexOf(stringSmallCostID)!=-1) stringSmallCostID = "AAAA5" ;
    // if( "A15,".indexOf(stringMidCostID) !=-1) stringSmallCostID = "AAAA5" ;
    // if("A0304,A1105".indexOf(stringSmallCostID)!=-1) stringSmallCostID = "AAAA6"
    // ;
    // if( "A12,A13,".indexOf(stringMidCostID) !=-1) stringSmallCostID = "AAAA1" ;
    return stringSmallCostID;
  }

  // 取得特殊預算控管
  public Hashtable getDoc7M033Hashtable(String stringComNo, String stringYearAC, String stringStatus, Vector vectorDepartNo, Hashtable hashtableMidCostID,
      Hashtable hashtableDeptCdToCostID, String stringSqlAnd, Vector vectorComNo, FargloryUtil exeUtil) throws Throwable {
    String stringSql = "";
    String stringSqlCostID = "";
    String stringSqlDeptartNo = "";
    String stringTemp = "";
    String stringTempL = "";
    String[][] retDoc7M033 = null;
    Vector vectorCostID = new Vector();
    Vector vectorCostIDAll = new Vector();
    Hashtable hashtableKey = new Hashtable();
    Object objectTemp = null;
    //
    if (vectorDepartNo.size() == 0)
      return hashtableKey;
    //
    for (int intNo = 0; intNo < vectorDepartNo.size(); intNo++) {
      // 部門
      stringTemp = ("" + vectorDepartNo.get(intNo)).trim();
      if ("".equals(stringTemp) || "null".equals(stringTemp))
        continue;
      //
      if (!"".equals(stringSqlDeptartNo))
        stringSqlDeptartNo += ", ";
      if (stringTemp.startsWith("A17")) {
        stringSqlDeptartNo += " 'A170','A17A' ";
      } else {
        stringSqlDeptartNo += " '" + stringTemp + "' ";
      }

      // 請款代碼
      /*
       * objectTemp = hashtableDeptCdToCostID.get(stringTemp) ; if(objectTemp == null)
       * continue ; vectorCostID = (Vector) objectTemp ; for(int intNoL=0 ;
       * intNoL<vectorCostID.size() ; intNoL++) { stringTemp =
       * (""+vectorCostID.get(intNoL)).trim() ;
       * if(vectorCostIDAll.indexOf(stringTemp)!=-1) continue ;
       * if("".equals(stringTemp) || "null".equals(stringTemp)) continue ;
       * if(!"".equals(stringSqlCostID)) stringSqlCostID += " OR " ; stringSqlCostID
       * += " CostID  LIKE '"+stringTemp+"%' " ; vectorCostIDAll.add(stringTemp) ; }
       */
    }
    String stringComNoSql = "";
    String stringComNoL = "";
    for (int intNo = 0; intNo < vectorComNo.size(); intNo++) {
      stringComNoL = ("" + vectorComNo.get(intNo)).trim();
      //
      if (!"".equals(stringComNoSql))
        stringComNoSql += ", ";
      stringComNoSql += "'" + stringComNoL + "'";
    }
    if (!"".equals(stringComNoSql))
      stringComNoSql = " AND ComNo NOT IN (" + stringComNoSql + ")  ";
    // 0 DepartNo 1 CostID 2 MONTH 3 BudgetMoney 4 ComNo
    stringSql = "SELECT  DepartNo,  CostID,  MONTH,  BudgetMoney,  ComNo " + " FROM  Doc7M033 " + " WHERE  CostID  <>  'A0101' " + // 人事費用暫不列入系統
        " AND  ComNo  NOT IN (SELECT  ComNo " + " FROM  Doc7M0331 " + " WHERE  FunctionType  =  'B' " + " AND ( VaildYearS  =  '9999' OR VaildYearS >= '" + stringYearAC + "') "
        + " AND ( VaildYearE  =  '9999' OR VaildYearE <= '" + stringYearAC + "'))";
    if (!"".equals(stringYearAC))
      stringSql += " AND  YYYY      =  '" + stringYearAC + "' ";
    if (!"".equals(stringSqlDeptartNo))
      stringSql += " AND  DepartNo  IN  (" + stringSqlDeptartNo + ") ";
    if (!"".equals(stringStatus))
      stringSql += " AND  STATUS  =  '" + stringStatus + "' ";
    if (!"".equals(stringComNo)) {
      if (vectorComNo.indexOf(stringComNo) != -1) {
        stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
      } else {
        stringSql += stringComNoSql;
      }
    }
    stringSql += stringSqlAnd;
    retDoc7M033 = dbDoc.queryFromPool(stringSql);
    //
    String stringKey = "";
    String stringDepartNo = "";
    String stringCostID = "";
    String stringMidCostID = "";
    String stringMONTH = "";
    String stringMoney = "";
    String stringCostIDType = "";
    double doubleMoneySum = 0;
    double doubleMoney = 0;
    for (int intNo = 0; intNo < retDoc7M033.length; intNo++) {
      stringDepartNo = retDoc7M033[intNo][0].trim();
      stringCostID = retDoc7M033[intNo][1].trim();
      stringMONTH = retDoc7M033[intNo][2].trim();
      stringMoney = retDoc7M033[intNo][3].trim();
      stringComNoL = retDoc7M033[intNo][4].trim();
      // stringMidCostID = getMidCostID(stringDepartNo, stringCostID,
      // hashtableMidCostID, exeUtil) ;
      //
      if (stringCostID.length() == 7) {
        stringCostIDType = exeUtil.getNameUnion("CostIDType", "Doc7M053", " AND  CostID  =  '" + stringCostID + "' ", new Hashtable(), dbDoc);
        if (!"".equals(stringCostIDType))
          stringCostID = stringCostIDType;
        stringCostID = exeUtil.doSubstring(stringCostID, 0, 5);
      }
      // if(stringDepartNo.startsWith("A17")) stringDepartNo = "A17A" ;
      //
      doubleMoney = exeUtil.doParseDouble(stringMoney);
      // 部門-請款代碼-月
      stringKey = stringDepartNo + "-" + stringCostID + "-" + stringMONTH;
      doubleMoneySum = doubleMoney + exeUtil.doParseDouble("" + hashtableKey.get(stringKey));
      hashtableKey.put(stringKey, "" + doubleMoneySum);
      // 部門-0-月
      stringKey = stringDepartNo + "-0-" + stringMONTH;
      doubleMoneySum = doubleMoney + exeUtil.doParseDouble("" + hashtableKey.get(stringKey));
      hashtableKey.put(stringKey, "" + doubleMoneySum);
    }
    return hashtableKey;
  }

  // intType A:非遠建 B:遠建
  public double getAmtDoc7M033(int intMonthEnd, String stringDepartNo, String stringCostID, Hashtable hashtableKey, FargloryUtil exeUtil) throws Throwable {
    String stringKey = "";
    double doubleAmt = 0;
    double doubleTemp = 0;
    //
    Vector vectorCostID = new Vector();
    vectorCostID.add(stringCostID);
    // 取值
    for (int intNo = 1; intNo <= intMonthEnd; intNo++) {
      for (int intCost = 0; intCost < vectorCostID.size(); intCost++) {
        stringCostID = ("" + vectorCostID.get(intCost)).trim();
        stringKey = stringDepartNo + "-" + stringCostID + "-" + intNo;
        doubleTemp = exeUtil.doParseDouble("" + hashtableKey.get(stringKey));
        doubleAmt += doubleTemp;
      }

    }
    return doubleAmt;
  }

  // 取得今年須控管公司
  // vectorComNo = exeFun.getYearComNosDoc7M033("I", ""+intYear, "U", "") ;
  // 表格 Doc7M0331
  public Vector getYearComNosDoc7M0331(String stringYYYY, String stringSqlAnd) throws Throwable {
    return getYearComNosDoc7M0331(stringYYYY, "A", stringSqlAnd);
  }

  public Vector getYearComNosDoc7M0331(String stringYYYY, String stringFunctionType, String stringSqlAnd) throws Throwable {
    String[][] retDoc7M0331 = getDoc7M0331("", stringYYYY, stringFunctionType, stringSqlAnd);
    Vector vectorComNo = new Vector();
    //
    for (int intNo = 0; intNo < retDoc7M0331.length; intNo++) {
      if (vectorComNo.indexOf(retDoc7M0331[intNo][0].trim()) == -1)
        vectorComNo.add(retDoc7M0331[intNo][0].trim());
    }
    return vectorComNo;
  }

  public String[][] getDoc7M0331(String stringComNo, String stringYYYY, String stringFunctionType, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String[][] retDoc7M0331 = null;
    // 0 ComNo 1 VaildYearS 2 VaildYearE 3 FunctionType
    stringSql = " SELECT  ComNo,  VaildYearS,  VaildYearE,  FunctionType " + " FROM  Doc7M0331 " + " WHERE  1=1 ";
    if (!"".equals(stringFunctionType))
      stringSql += " AND  FunctionType  =  '" + stringFunctionType + "'";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "'";
    if (!"".equals(stringYYYY)) {
      stringSql += " AND ( VaildYearS  =  '9999' OR VaildYearS >= '" + stringYYYY + "') " + " AND ( VaildYearE  =  '9999' OR VaildYearE <= '" + stringYYYY + "') ";
    }
    stringSql += stringSqlAnd;
    retDoc7M0331 = dbDoc.queryFromPool(stringSql);
    return retDoc7M0331;
  }

  // 表格 Doc7M040
  public String[] getSubjectDepartNo(String stringDepartNoSubjectDoc, String stringDepartNo1Doc, String stringDepartNo2Doc, FargloryUtil exeUtil) throws Throwable {
    String stringTemp = "";
    String[] retDepartNo = { stringDepartNo1Doc, stringDepartNoSubjectDoc };
    //
    if (!"".equals(stringDepartNo2Doc)) {
      // 外業時
      // 清空 內業部門代碼
      retDepartNo[0] = "";
      // 判斷是否
      stringTemp = getDeptCdDoc("", "", " AND DEPT_CD_Doc LIKE '%0' " + " AND DEPT_CD_Doc LIKE '" + exeUtil.doSubstring(stringDepartNoSubjectDoc, 0, 3) + "%'");
      if (!"".equals(stringTemp)) {
        retDepartNo[1] = stringTemp;
      }
    } else {
      // 內業
      retDepartNo[0] = stringDepartNoSubjectDoc;
      retDepartNo[1] = stringDepartNo1Doc;
    }
    //
    return retDepartNo;
  }

  public String[] getSubjectDepartNoNew(String stringDepartNoSubject, String stringDepartNo1, String stringDepartNo2, FargloryUtil exeUtil) throws Throwable {
    String stringTemp = "";
    String stringSqlAnd = "";
    String[] retDepartNo = { stringDepartNoSubject, stringDepartNo1 };
    //
    System.out.println("0000getSubjectDepartNoNew(" + stringDepartNoSubject + ")stringDepartNo1(" + stringDepartNo1 + ")---------------S");
    if (stringDepartNoSubject.startsWith("A18")) {
      if (!stringDepartNoSubject.equals(stringDepartNo1)) {
        stringDepartNo1 = stringDepartNoSubject;
      }
      System.out.println("11111getSubjectDepartNoNew(" + stringDepartNoSubject + ")stringDepartNo1(" + stringDepartNo1 + ")---------------S");
    } else {
      if (!stringDepartNoSubject.startsWith(exeUtil.doSubstring(stringDepartNo1, 0, 3)) || !stringDepartNoSubject.endsWith("A")) {
        if (!stringDepartNoSubject.startsWith(exeUtil.doSubstring(stringDepartNo1, 0, 3)))
          stringDepartNo1 = stringDepartNoSubject;
        // 代理人
        if (!stringDepartNo1.startsWith("022") && !stringDepartNo1.startsWith("A18")) {
          stringSqlAnd = " AND DEPT_CD LIKE '%A' ";
        }
        if (exeUtil.doParseDouble(stringDepartNo1) > 0) {
          // 舊部門代碼
          stringTemp = getDeptCd("", "", stringSqlAnd + " AND DEPT_CD_Doc LIKE '" + exeUtil.doSubstring(stringDepartNo1, 0, 3) + "%'");
          if (stringDepartNo1.startsWith("022")) {
            stringDepartNo1 = getDeptCd("", "", stringSqlAnd + " AND DEPT_CD_Doc =  '" + stringDepartNo1 + "' ");
          }
        } else {
          // 新部門代碼
          stringTemp = getDeptCd("", "", stringSqlAnd + " AND DEPT_CD LIKE '" + exeUtil.doSubstring(stringDepartNo1, 0, 3) + "%'");
        }
        System.out.println("getSubjectDepartNoNew---------------" + stringTemp);
        if (!"".equals(stringTemp)) {
          stringDepartNoSubject = stringTemp;
        }
      }
    }
    System.out.println("2222getSubjectDepartNoNew(" + stringDepartNoSubject + ")stringDepartNo1(" + stringDepartNo1 + ")---------------E");
    // 1 主部室 2 輸入內業部室
    if (!"".equals(stringDepartNo2)) {
      // 外業時
      retDepartNo[1] = ""; // 外業時，輸入 內業部室代碼 為空白(外案)
      // 判斷是否
      stringTemp = getDeptCd("", "", " AND DEPT_CD LIKE '%0' " + " AND DEPT_CD LIKE '" + exeUtil.doSubstring(stringDepartNoSubject, 0, 3) + "%'");
      if (!"".equals(stringTemp)) {
        retDepartNo[0] = stringTemp;
      }
    } else {
      if (stringDepartNoSubject.startsWith("A18"))
        stringDepartNoSubject = stringDepartNo1;
      // 內業
      retDepartNo[0] = stringDepartNoSubject;
      retDepartNo[1] = stringDepartNo1;
    }
    //
    return retDepartNo;
  }

  public String[][] getDoc7M040(String stringDepartNo, String stringGroupType, String stringDepartType, String stringSqlAnd) throws Throwable {
    return getDoc7M040(stringDepartNo, stringGroupType, stringDepartType, stringSqlAnd, "NotQuery");
  }

  public String[][] getDoc7M040(String stringDepartNo, String stringGroupType, String stringDepartType, String stringSqlAnd, String stringType) throws Throwable {
    Farglory.util.FargloryUtil exeUtil = new Farglory.util.FargloryUtil();
    String stringDepartNo1 = stringDepartNo;
    String stringDepartNo2 = "";
    for (int intNo = 0; intNo < stringDepartNo.length(); intNo++) {
      if (!Character.isDigit(stringDepartNo.charAt(intNo))) {
        stringDepartNo1 = stringDepartNo.substring(0, intNo);
        stringDepartNo2 = stringDepartNo.substring(intNo);
        break;
      }
    }
    return getDoc7M040(stringDepartNo1, stringDepartNo2, stringGroupType, stringDepartType, stringSqlAnd, stringType);
  }

  public String[][] getDoc7M040(String stringDepartNo1, String stringDepartNo2, String stringGroupType, String stringDepartType, String stringSqlAnd, String stringType)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc7M040 = new String[1][4];
    //
    if ("NotQuery".equals(stringType)) {
      if (stringDepartNo1.startsWith("038") && "".equals(stringDepartNo2)) {
        retDoc7M040[0][0] = "0381";
        return retDoc7M040;
      } // 不動產內業
      else if (stringDepartNo1.startsWith("038")) {
        retDoc7M040[0][0] = "0380";
        return retDoc7M040;
      } // 不動產-物業管理
      else if (stringDepartNo1.startsWith("035") && "".equals(stringDepartNo2)) {
        retDoc7M040[0][0] = "0351";
        return retDoc7M040;
      } // 營業部
      else if (stringDepartNo1.startsWith("035")) {
        retDoc7M040[0][0] = "0350";
        return retDoc7M040;
      } // 營業部-交屋
      else if (stringDepartNo1.startsWith("031") && "".equals(stringDepartNo2)) {
        retDoc7M040[0][0] = "0311";
        return retDoc7M040;
      } // 開發部
      else if (stringDepartNo1.startsWith("031")) {
        retDoc7M040[0][0] = "0310";
        return retDoc7M040;
      } // 開發部-開發
      else if (stringDepartNo1.equals("03443") && "".equals(stringDepartNo2)) {
        retDoc7M040[0][0] = "03443";
        return retDoc7M040;
      } // 營造-工服
      else if (stringDepartNo1.equals("2341") && "".equals(stringDepartNo2)) {
        retDoc7M040[0][0] = "2341";
        return retDoc7M040;
      } // 營造體系外案
      else if (stringDepartNo1.equals("03365") && "".equals(stringDepartNo2)) {
        retDoc7M040[0][0] = "03365";
        return retDoc7M040;
      } // 資料庫行銷科

      if (stringDepartNo1.equals("0302")) {
        retDoc7M040[0][0] = "0302";
        return retDoc7M040;
      } // 建設管理處

      stringDepartNo1 = "";
    }
    // 0 DepartNo 1 GroupType 2 DepartType 3 MoneyBaseType
    stringSql = " SELECT  DepartNo , GroupType , DepartType , MoneyBaseType " + " FROM  Doc7M040 " + " WHERE  1=1 ";
    // if("NotCheck".equals(stringType)) stringSql += " AND DepartNo NOT IN ('0230',
    // '0380','0350') " ;
    if (!"".equals(stringDepartNo1))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo1 + "' ";
    if (!"".equals(stringGroupType))
      stringSql += " AND  GroupType  =  '" + stringGroupType + "' ";
    if (!"".equals(stringDepartType))
      stringSql += " AND  DepartType  =  '" + stringDepartType + "' ";
    stringSql += stringSqlAnd;
    retDoc7M040 = dbDoc.queryFromPool(stringSql);
    return retDoc7M040;
  }

  //
  public Hashtable getDepartNoDoc7M040(String stringDepartNo, String stringGroupType, String stringDepartType, String stringSqlAnd, FargloryUtil exeUtil) throws Throwable {
    String stringSql = "";
    String stringDepartNo3 = "";
    String[][] retDoc7M040 = null;
    Hashtable hashtableDeptCd = new Hashtable();
    // 0 DepartNo
    stringSql = " SELECT  DepartNo " + " FROM  Doc7M040 " + " WHERE  DepartNo  NOT IN('0230','0380','0350','0302','0336','03365','0339','0349') ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringGroupType))
      stringSql += " AND  GroupType  =  '" + stringGroupType + "' ";
    if (!"".equals(stringDepartType))
      stringSql += " AND  DepartType  =  '" + stringDepartType + "' ";
    stringSql += stringSqlAnd;
    retDoc7M040 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc7M040.length; intNo++) {
      stringDepartNo = retDoc7M040[intNo][0].trim();
      stringDepartNo3 = exeUtil.doSubstring(stringDepartNo, 0, 3);
      hashtableDeptCd.put(stringDepartNo3, stringDepartNo);
    }
    return hashtableDeptCd;
  }

  public String getSubjectDepartNoDoc7M040(String stringDepartNo, Hashtable hashtableDeptCd, FargloryUtil exeUtil) throws Throwable {
    String stringDepartNo1 = stringDepartNo;
    String stringDepartNo2 = "";
    for (int intNo = 0; intNo < stringDepartNo.length(); intNo++) {
      if (!Character.isDigit(stringDepartNo.charAt(intNo))) {
        stringDepartNo1 = stringDepartNo.substring(0, intNo);
        stringDepartNo2 = stringDepartNo.substring(intNo);
        break;
      }
    }
    return getSubjectDepartNoDoc7M040(stringDepartNo1, stringDepartNo2, hashtableDeptCd, exeUtil);
  }

  public String getSubjectDepartNoDoc7M040(String stringDepartNo1, String stringDepartNo2, Hashtable hashtableDeptCd, FargloryUtil exeUtil) throws Throwable {
    String stringSubjectDepartNo = "";
    //
    if (stringDepartNo1.startsWith("038") && "".equals(stringDepartNo2))
      return "0381"; // 不動產內業
    else if (stringDepartNo1.startsWith("038"))
      return "0380"; // 不動產物業管理
    else if (stringDepartNo1.startsWith("035") && "".equals(stringDepartNo2))
      return "0351"; // 營業部
    else if (stringDepartNo1.startsWith("035"))
      return "0350"; // 交屋費用
    else if (stringDepartNo1.startsWith("031") && "".equals(stringDepartNo2))
      return "0311"; // 開發部
    else if (stringDepartNo1.startsWith("031"))
      return "0310"; // 開發部-開發費用
    else if (stringDepartNo1.equals("03443") && "".equals(stringDepartNo2))
      return "03443"; // 營造-工服
    else if (stringDepartNo1.equals("2341") && "".equals(stringDepartNo2))
      return "2341"; // 營造體系外案
    else if (stringDepartNo1.equals("03365") && "".equals(stringDepartNo2))
      return "03365"; // 資料庫行銷科
    else if (stringDepartNo1.startsWith("033") && "".equals(stringDepartNo2))
      return "0331"; // 行銷體系
    if (stringDepartNo1.equals("0302"))
      return "0302"; // 建設管理處
    if (stringDepartNo1.equals("0339"))
      return "0339";
    //
    stringSubjectDepartNo = "" + hashtableDeptCd.get(exeUtil.doSubstring(stringDepartNo1, 0, 3));
    if ("null".equals(stringSubjectDepartNo))
      stringSubjectDepartNo = "";
    return stringSubjectDepartNo;
  }

  public String getSubjectNewDepartNo(String stringNewDepartNo, String stringProjectID, FargloryUtil exeUtil) throws Throwable {
    return getSubjectNewDepartNo(stringNewDepartNo, stringProjectID, "A", exeUtil);
  }

  // stringType A: 權限 B:預算
  public String getSubjectNewDepartNo(String stringNewDepartNo, String stringProjectID, String stringType, FargloryUtil exeUtil) throws Throwable {
    String stringDeptCd3 = exeUtil.doSubstring(stringNewDepartNo, 0, 3);
    String[][] retDoc2M010DeptCd = null;
    // 內業
    if ("".equals(stringProjectID)) {
      String stringDeptCdL = stringDeptCd3 + "A";
      if ("A".equals(stringType) && (stringDeptCd3.startsWith("A18") || stringDeptCd3.startsWith("022")))
        stringDeptCdL = stringNewDepartNo;
      return stringDeptCdL;
    }
    // 外業
    stringDeptCd3 = stringNewDepartNo.substring(0, 3);
    if ("B34,B35,".indexOf(stringDeptCd3) != -1) {
      return stringDeptCd3 + "0";
    }
    retDoc2M010DeptCd = getDoc2M010DeptCd(stringDeptCd3 + "0", "", "");
    if (retDoc2M010DeptCd.length == 0) {
      return "";
    }
    return stringDeptCd3 + "0";

  }

  // 表格 Doc7M050
  public String getCostName(String stringCostID, FargloryUtil exeUtil) throws Throwable {
    // 細分類
    if (stringCostID.length() == 7)
      return getCost4Name(stringCostID);
    // 中分類
    String stringCostID00 = exeUtil.doSubstring(stringCostID, 3, 5);
    if ("00".equals(stringCostID00)) {
      return getCost2Name(exeUtil.doSubstring(stringCostID, 0, 3));
    }
    // 小分類
    return getCost3Name(stringCostID);
  }

  public String getCost1Name(String stringCostID1) throws Throwable {
    String stringSql = "";
    String stringCostName = "";
    String[][] retDoc7M050 = null;
    //
    if ("".equals(stringCostID1))
      return stringCostName;
    //
    stringSql = "SELECT  DESCRIPTION " + " FROM  Doc7M050 " + " WHERE  CostID1  =  '" + stringCostID1 + "' ";
    retDoc7M050 = dbDoc.queryFromPool(stringSql);
    if (retDoc7M050.length > 0)
      stringCostName = retDoc7M050[0][0].trim();
    return stringCostName;
  }

  // 表格 Doc7M051
  public String getCost2Name(String stringCostID) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M051 = null;
    //
    stringSql = "SELECT  DESCRIPTION " + " FROM  Doc7M051 " + " WHERE  RTRIM(CostID1)+RTRIM(CostID2)  =  '" + stringCostID + "' ";
    retDoc7M051 = dbDoc.queryFromPool(stringSql);
    if (retDoc7M051.length > 0)
      stringDescription = retDoc7M051[0][0].trim();
    return stringDescription;
  }

  public String getCost2Name(String stringCostID1, String stringCostID2) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M051 = null;
    //
    if ("".equals(stringCostID1))
      return stringDescription;
    if ("".equals(stringCostID2))
      return stringDescription;
    //
    stringSql = "SELECT  DESCRIPTION " + " FROM  Doc7M051 " + " WHERE  CostID1  =  '" + stringCostID1 + "' " + " AND  CostID2  =  '" + stringCostID2 + "' ";
    retDoc7M051 = dbDoc.queryFromPool(stringSql);
    if (retDoc7M051.length > 0)
      stringDescription = retDoc7M051[0][0].trim();
    return stringDescription;
  }

  // 表格 Doc7M052
  public String getCost3Name(String stringCostID1, String stringCostID2, String stringCostID3) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M052 = null;
    //
    if ("".equals(stringCostID1))
      return stringDescription;
    if ("".equals(stringCostID2))
      return stringDescription;
    if ("".equals(stringCostID3))
      return stringDescription;
    //
    stringSql = "SELECT  DESCRIPTION " + " FROM  Doc7M052 " + " WHERE  CostID1  =  '" + stringCostID1 + "' " + " AND  CostID2  =  '" + stringCostID2 + "' " + " AND  CostID3  =  '"
        + stringCostID3 + "' ";
    retDoc7M052 = dbDoc.queryFromPool(stringSql);
    if (retDoc7M052.length > 0)
      stringDescription = retDoc7M052[0][0].trim();
    return stringDescription;
  }

  public String getCost3Name(String stringCostID) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M052 = null;
    //
    if ("".equals(stringCostID))
      return stringDescription;
    //
    stringSql = "SELECT  DESCRIPTION " + " FROM  Doc7M052 " + " WHERE  RTRIM(CostID1)+RTRIM(CostID2)+RTRIM(CostID3)  =  '" + stringCostID + "' ";
    retDoc7M052 = dbDoc.queryFromPool(stringSql);
    if (retDoc7M052.length > 0)
      stringDescription = retDoc7M052[0][0].trim();
    return stringDescription;
  }

  public Vector getCostIDDoc7M052(String stringCostID) throws Throwable {
    String stringSql = "";
    String[][] retDoc7M052 = null;
    Vector vectorCostID = new Vector();
    //
    if ("".equals(stringCostID))
      return vectorCostID;
    //
    stringSql = "SELECT  RTRIM(CostID1)+RTRIM(CostID2)+RTRIM(CostID3) " + " FROM  Doc7M052 " + " WHERE  RTRIM(CostID1)+RTRIM(CostID2)  =  '" + stringCostID + "' ";
    retDoc7M052 = dbDoc.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retDoc7M052.length; intNo++) {
      vectorCostID.add(retDoc7M052[intNo][0].trim());
    }
    return vectorCostID;
  }

  // 表格 Doc7M0521
  public String getCostTypeName(String stringCostID) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M0521 = null;
    //
    if ("".equals(stringCostID))
      return stringDescription;
    //
    stringSql = "SELECT  DESCRIPTION " + " FROM  Doc7M0521 " + " WHERE  CostID  =  '" + stringCostID + "' ";
    retDoc7M0521 = dbDoc.queryFromPool(stringSql);
    if (retDoc7M0521.length > 0)
      stringDescription = retDoc7M0521[0][0].trim();
    return stringDescription;
  }

  // 表格 Doc7M053
  public String getCostIDType(String stringCostID) throws Throwable {
    String stringSql = "";
    String stringCostIDType = "";
    String[][] retDoc7M053 = null;
    //
    if ("".equals(stringCostID))
      return stringCostIDType;

    //
    stringSql = "SELECT  CostIDType " + " FROM  Doc7M053 " + " WHERE  CostID  =  '" + stringCostID + "' ";
    retDoc7M053 = dbDoc.queryFromPool(stringSql);
    if (retDoc7M053.length > 0)
      stringCostIDType = retDoc7M053[0][0].trim();
    return stringCostIDType;
  }

  public String getCost4Name(String stringCostID1, String stringCostID2, String stringCostID3, String stringCostID4) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M053 = null;
    //
    if ("".equals(stringCostID1))
      return stringDescription;
    if ("".equals(stringCostID2))
      return stringDescription;
    if ("".equals(stringCostID3))
      return stringDescription;
    if ("".equals(stringCostID4))
      return stringDescription;
    //
    stringSql = "SELECT  DESCRIPTION " + " FROM  Doc7M053 " + " WHERE  CostID1  =  '" + stringCostID1 + "' " + " AND  CostID2  =  '" + stringCostID2 + "' " + " AND  CostID3  =  '"
        + stringCostID3 + "' " + " AND  CostID4  =  '" + stringCostID4 + "' ";
    retDoc7M053 = dbDoc.queryFromPool(stringSql);
    if (retDoc7M053.length > 0)
      stringDescription = retDoc7M053[0][0].trim();
    return stringDescription;
  }

  public String getCost4Name(String stringCostID) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M053 = null;
    //
    if ("".equals(stringCostID))
      return stringDescription;
    //
    stringSql = "SELECT  DESCRIPTION " + " FROM  Doc7M053 " + " WHERE  CostID  =  '" + stringCostID + "' ";
    retDoc7M053 = dbDoc.queryFromPool(stringSql);
    if (retDoc7M053.length > 0)
      stringDescription = retDoc7M053[0][0].trim();
    return stringDescription;
  }

  public String[][] getDoc7M053(String stringCostID, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M053 = null;
    // 0 CostID 1 CostID1 2 CostID2 3 CostID3 4 CostID4 5 DESCRIPTION
    stringSql = "SELECT  CostID,  CostID1,  CostID2,  CostID3,  CostID4, DESCRIPTION " + " FROM  Doc7M053 " + " WHERE  1=1 ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    ;
    stringSql += stringSqlAnd;
    retDoc7M053 = dbDoc.queryFromPool(stringSql);
    return retDoc7M053;
  }

  public String[][] getDoc7M053(String stringSqlAnd) throws Throwable {
    return getDoc7M053("", "", "", "", "", stringSqlAnd);
  }

  public String[][] getDoc7M053(String stringCostID, String stringCostID1, String stringCostID2, String stringCostID3, String stringCostID4) throws Throwable {
    return getDoc7M053(stringCostID, stringCostID1, stringCostID2, stringCostID3, stringCostID4, "");
  }

  public String[][] getDoc7M053(String stringCostID, String stringCostID1, String stringCostID2, String stringCostID3, String stringCostID4, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M053 = null;
    // 0 CostID1 1 CostID2 2 CostID3 3 CostID4 4 CostID 5 DESCRIPTION
    stringSql = "SELECT  CostID1,  CostID2,  CostID3,  CostID4,  CostID,  DESCRIPTION " + " FROM  Doc7M053 " + " WHERE  1=1 ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID   =  '" + stringCostID + "' ";
    if (!"".equals(stringCostID1))
      stringSql += " AND  CostID1  =  '" + stringCostID1 + "' ";
    if (!"".equals(stringCostID2))
      stringSql += " AND  CostID2  =  '" + stringCostID2 + "' ";
    if (!"".equals(stringCostID3))
      stringSql += " AND  CostID3  =  '" + stringCostID3 + "' ";
    if (!"".equals(stringCostID4))
      stringSql += " AND  CostID4  =  '" + stringCostID4 + "' ";
    stringSql += stringSqlAnd + " ORDER BY  CostID ";
    retDoc7M053 = dbDoc.queryFromPool(stringSql);
    return retDoc7M053;
  }

  // 判斷是否已使用了，true 表示已使用，false 表示未使用
  public boolean isUseCostIDCheck(String stringCostID) throws Throwable {
    return isUseCostIDCheck(stringCostID, "");
  }

  public boolean isUseCostIDExcept(String stringCostID) throws Throwable {
    return isUseCostIDCheck(stringCostID, "Doc7M054");
  }

  public boolean isUseCostIDCheck(String stringCostID, String stringTable) throws Throwable {
    String stringSql = "";
    String stringTableL = "";
    String[] arrayTable = { "Doc7M054", "Doc5M012", "Doc5M014", "Doc5M022", "Doc5M032" };
    String[][] retDoc = null;
    // 費用科目會計科目對照表 Doc7M054
    // 一般物料之請購申請書 Doc5M012、Doc5M014
    // 一般物料之請款申請書 Doc5M022、Doc5M032
    for (int intNo = 0; intNo < arrayTable.length; intNo++) {
      stringTableL = arrayTable[intNo].trim();
      if (stringTableL.equals(stringTable))
        continue;
      if (!"".equals(stringSql))
        stringSql += " UNION ";
      stringSql += "SELECT  CostID  FROM  " + stringTableL + "  WHERE  CostID = '" + stringCostID + "' ";
    }
    retDoc = dbDoc.queryFromPool(stringSql);
    if (retDoc.length > 0)
      return true;
    return false;
  }

  // 表格 Doc7M054
  public String[][] getDoc7M054(String stringCostID, String stringDepartNo, String stringUseStatus, String stringSqlAnd) throws Throwable {
    return getDoc7M054(stringCostID, stringDepartNo, stringUseStatus, "", stringSqlAnd);
  }

  public String[][] getDoc7M054(String stringCostID, String stringDepartNo, String stringUseStatus, String stringDepartNoNew, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M054 = null;
    // 0 CostID 1 DepartNo 2 UseStatus 3 BudgetCheck 4 Unipurchase
    // 5 Purchase 6 ShareType 7 InvoiceType 8 DESCRIPTION 9 ShareME
    // 10 DepartNoNew
    stringSql = "SELECT  CostID,    DepartNo,   UseStatus,    BudgetCheck, Unipurchase, " + " Purchase,  ShareType,  InvoiceType,  DESCRIPTION, ShareME, " + " DepartNoNew "
        + " FROM  Doc7M054 " + " WHERE  1=1 ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringDepartNoNew))
      stringSql += " AND  DepartNo  =  '" + stringDepartNoNew + "' ";
    if (!"".equals(stringUseStatus))
      stringSql += " AND  UseStatus  =  '" + stringUseStatus + "' ";
    stringSql += stringSqlAnd + " ORDER BY  CostID ";
    retDoc7M054 = dbDoc.queryFromPool(stringSql);
    return retDoc7M054;
  }

  public boolean isBudgetCheck(String stringCostID, String stringDepartNo, String stringDepartNoSubject, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M054 = null;
    boolean booleanBudgetCheck = true;
    String stringDepartNo1Doc = "";
    Hashtable hashtableDeptCdDoc = new Hashtable();
    //
    if (!Character.isDigit(stringDepartNo.charAt(0))) {
      stringDepartNo1Doc = getDeptCdDoc(stringDepartNo, "", "", hashtableDeptCdDoc);
      if (!"".equals(stringDepartNo1Doc))
        stringDepartNo = stringDepartNo1Doc;
    }
    if (!Character.isDigit(stringDepartNoSubject.charAt(0))) {
      stringDepartNo1Doc = getDeptCdDoc(stringDepartNoSubject, "", "", hashtableDeptCdDoc);
      if (!"".equals(stringDepartNo1Doc))
        stringDepartNoSubject = stringDepartNo1Doc;
    }
    //
    stringSql = "SELECT  BudgetCheck " + " FROM  Doc7M054 " + " WHERE  UseStatus  =  'Y' " + " AND  CostID  =  '" + stringCostID + "' " + " AND  CostID  IN  (SELECT  CostID "
        + " FROM  Doc7M054 " + " WHERE  DepartNo  IN  ('ALL',  '" + stringDepartNo + "',  '" + stringDepartNoSubject + "')) ";
    stringSql += stringSqlAnd;
    retDoc7M054 = dbDoc.queryFromPool(stringSql);
    if (retDoc7M054.length > 0 && "N".equals(retDoc7M054[0][0].trim()))
      booleanBudgetCheck = false;
    return booleanBudgetCheck;
  }

  // 表格 Doc7M055
  public Hashtable getCostToAcctNoDoc7M055(String stringCostID, String stringSqlAnd) throws Throwable {
    Hashtable hasthableAcctNo = new Hashtable();
    String[][] retDoc7M055 = getDoc7M055(stringCostID, stringSqlAnd);
    // 0 CostID 1 ACCT_IN1 2 ACCT_OUT1 3 ACCT_OUT11
    // 4 ACCT_IN2 5 ACCT_OUT2 6 ACCT_OUT22
    // 7 ACCT_IN3 8 ACCT_OUT3 9 ACCT_OUT33
    // 10 ACCT_IN4 11 ACCT_OUT4 12 ACCT_OUT44
    // 13 ACCT_IN5 14 ACCT_OUT5 15 ACCT_OUT5
    // 16 ITEM_CD 17 USED_CD
    String stringTemp = "";
    String stringAcctNo = "";
    for (int intNo = 0; intNo < retDoc7M055.length; intNo++) {
      stringAcctNo = "";
      stringCostID = retDoc7M055[intNo][0].trim();
      for (int intNoL = 1; intNoL <= 15; intNoL++) {
        stringTemp = retDoc7M055[intNo][intNoL].trim();
        if ("".equals(stringTemp))
          continue;
        if (stringAcctNo.indexOf(stringTemp) != -1)
          continue;
        stringAcctNo += stringTemp + ",";
      }
      hasthableAcctNo.put(stringCostID, stringAcctNo);
    }
    //
    return hasthableAcctNo;
  }

  public String[][] getDoc7M055(String stringComNo, String stringCostID, String stringInOut) throws Throwable {
    String stringComNoType = "";
    String[][] retDoc7M055 = null;
    String[][] retDoc7M057 = null;
    String[][] retData = new String[1][5];
    //
    // 特殊請款代碼 會計科目對照表 Doc7M057
    retDoc7M057 = getDoc7M057(stringComNo, stringCostID);
    if (retDoc7M057.length > 0) {
      if ("I".equals(stringInOut) && !"".equals(retDoc7M057[0][0].trim()))
        return retDoc7M057;
      if ("O".equals(stringInOut) && !"".equals(retDoc7M057[0][1].trim()))
        return retDoc7M057;
      if ("B".equals(stringInOut) && !"".equals(retDoc7M057[0][4].trim()))
        return retDoc7M057;
    }
    //
    for (int intNo = 0; intNo < retData[0].length; intNo++)
      retData[0][intNo] = "";
    // 0 CostID 1 ACCT_IN1 2 ACCT_OUT1 3 ACCT_OUT11
    // 4 ACCT_IN2 5 ACCT_OUT2 6 ACCT_OUT22
    // 7 ACCT_IN3 8 ACCT_OUT3 9 ACCT_OUT33
    // 10 ACCT_IN4 11 ACCT_OUT4 12 ACCT_OUT44
    // 13 ACCT_IN5 14 ACCT_OUT5 15 ACCT_OUT5
    // 16 ITEM_CD 17 USED_CD
    stringComNoType = getComNoType(stringComNo);
    if ("".equals(stringComNoType))
      return retData;
    retDoc7M055 = getDoc7M055(stringCostID);
    if (retDoc7M055.length == 0)
      return retData;
    // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD 4 ACCT_OUT(分攤)
    retData[0][2] = retDoc7M055[0][16].trim();
    retData[0][3] = retDoc7M055[0][17].trim();
    switch (stringComNoType.charAt(0)) {
    case 'A':
      retData[0][0] = retDoc7M055[0][1].trim();
      retData[0][1] = retDoc7M055[0][2].trim();
      retData[0][4] = retDoc7M055[0][3].trim();
      System.out.println("getDoc7M055------------------------------5");
      break;
    case 'B':
      retData[0][0] = retDoc7M055[0][4].trim();
      retData[0][1] = retDoc7M055[0][5].trim();
      retData[0][4] = retDoc7M055[0][6].trim();
      System.out.println("getDoc7M055------------------------------6");
      break;
    case 'C':
      retData[0][0] = retDoc7M055[0][7].trim();
      retData[0][1] = retDoc7M055[0][8].trim();
      retData[0][4] = retDoc7M055[0][9].trim();
      System.out.println("getDoc7M055------------------------------7");
      break;
    case 'D':
      retData[0][0] = retDoc7M055[0][10].trim();
      retData[0][1] = retDoc7M055[0][11].trim();
      retData[0][4] = retDoc7M055[0][12].trim();
      System.out.println("getDoc7M055------------------------------8");
      break;
    case 'E':
      retData[0][0] = retDoc7M055[0][13].trim();
      retData[0][1] = retDoc7M055[0][14].trim();
      retData[0][4] = retDoc7M055[0][15].trim();
      System.out.println("getDoc7M055------------------------------9");
      break;
    }
    return retData;
  }

  public String[][] getDoc7M055(String stringCostID) throws Throwable {
    return getDoc7M055(stringCostID, "");
  }

  public String[][] getDoc7M055(String stringCostID, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M055 = null;
    // 0 CostID 1 ACCT_IN1 2 ACCT_OUT1 3 ACCT_OUT11
    // 4 ACCT_IN2 5 ACCT_OUT2 6 ACCT_OUT22
    // 7 ACCT_IN3 8 ACCT_OUT3 9 ACCT_OUT33
    // 10 ACCT_IN4 11 ACCT_OUT4 12 ACCT_OUT44
    // 13 ACCT_IN5 14 ACCT_OUT5 15 ACCT_OUT5
    // 16 ITEM_CD 17 USED_CD
    stringSql = "SELECT  CostID,    ACCT_IN1,   ACCT_OUT1,  ACCT_OUT11, " + " ACCT_IN2,  ACCT_OUT2,  ACCT_OUT22, " + " ACCT_IN3,  ACCT_OUT3,  ACCT_OUT33, "
        + " ACCT_IN4,  ACCT_OUT4,  ACCT_OUT44, " + " ACCT_IN5,  ACCT_OUT5,  ACCT_OUT55, " + " ITEM_CD,   USED_CD  " + " FROM  Doc7M055 " + " WHERE  1=1 ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringSqlAnd))
      stringSql += stringSqlAnd;
    stringSql += " ORDER BY  CostID ";
    retDoc7M055 = dbDoc.queryFromPool(stringSql);
    return retDoc7M055;
  }

  // 表格 Doc7M0551
  public String getInOutDoc7M0551H(String stringAcctNoType, Hashtable hashtableInOut) throws Throwable {
    if (hashtableInOut == null)
      hashtableInOut = new Hashtable();
    //
    String stringInOut = ("" + hashtableInOut.get(stringAcctNoType)).trim();
    //
    if (!"".equals(stringInOut) && !"null".equals(stringInOut))
      return stringInOut;
    if ("".equals(stringAcctNoType))
      return "";
    //
    stringInOut = getInOutDoc7M0551(stringAcctNoType);
    hashtableInOut.put(stringAcctNoType, stringInOut);
    return stringInOut;
  }

  public String getInOutDoc7M0551(String stringAcctNoType) throws Throwable {
    String stringSql = "";
    String stringInOut = "";
    String[][] retDoc7M0551 = null;
    //
    stringSql = "SELECT  InOut  " + " FROM  Doc7M0551 " + " WHERE  1=1 ";
    if (!"".equals(stringAcctNoType))
      stringSql += " AND  AcctNoType  =  '" + stringAcctNoType + "' ";
    retDoc7M0551 = dbDoc.queryFromPool(stringSql);
    if (retDoc7M0551.length > 0)
      stringInOut = retDoc7M0551[0][0].trim();
    return stringInOut;
  }

  public String getDescriptDoc7M0551(String stringAcctNoType) throws Throwable {
    String stringSql = "";
    String stringDescript = stringAcctNoType;
    String[][] retDoc7M0551 = null;
    //
    stringSql = "SELECT  Descript  " + " FROM  Doc7M0551 " + " WHERE  1=1 ";
    if (!"".equals(stringAcctNoType))
      stringSql += " AND  AcctNoType  =  '" + stringAcctNoType + "' ";
    retDoc7M0551 = dbDoc.queryFromPool(stringSql);
    if (retDoc7M0551.length > 0)
      stringDescript = retDoc7M0551[0][0].trim();
    return stringDescript;
  }

  public String[][] getDoc7M0551(String stringInOut, String stringDepartNo, String stringCostID, String stringComNoType, String stringAcctNoType, String stringSqlAnd)
      throws Throwable {
    String stringSql = "";
    String[][] retDoc7M0553 = null;
    //
    stringSql = "SELECT  M51.AcctNoType " + " FROM  Doc7M0551 M51,  Doc7M0553 M53 " + " WHERE  M51.AcctNoType  =  M53.AcctNoType ";
    if (!"".equals(stringInOut))
      stringSql += " AND  M51.InOut  =  '" + stringInOut + "' ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  M53.DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  M53.CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringComNoType))
      stringSql += " AND  M53.ComNoType  =  '" + stringComNoType + "' ";
    if (!"".equals(stringAcctNoType))
      stringSql += " AND  M53.AcctNoType  =  '" + stringAcctNoType + "' ";
    if (!"".equals(stringSqlAnd)) {
      stringSql += stringSqlAnd;
    } else {
      stringSql += " ORDER BY  OrderNo ";
    }
    retDoc7M0553 = dbDoc.queryFromPool(stringSql);
    return retDoc7M0553;
  }

  // 表格 Doc7M0552
  public String[][] getDoc7M0552(String stringCostID, String stringComNoType, String stringAcctNoType, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringInOut = "";
    String[][] retDoc7M0552 = null;
    //
    stringSql = "SELECT  CostID , ComNoType , AcctNoType,  ACCTNO " + " FROM  Doc7M0552 " + " WHERE  1=1 ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringComNoType))
      stringSql += " AND  ComNoType  =  '" + stringComNoType + "' ";
    if (!"".equals(stringAcctNoType))
      stringSql += " AND  AcctNoType  =  '" + stringAcctNoType + "' ";
    if (!"".equals(stringSqlAnd)) {
      stringSql += stringSqlAnd;
    } else {
      stringSql += " ORDER BY  CostID,  ComNoType,  AcctNoType ";
    }
    retDoc7M0552 = dbDoc.queryFromPool(stringSql);
    return retDoc7M0552;
  }

  // 表格 Doc7M0553
  public String[][] getDoc7M0553(String stringDepartNo, String stringCostID, String stringComNoType, String stringAcctNoType, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringInOut = "";
    String[][] retDoc7M0553 = null;
    //
    stringSql = "SELECT  DepartNo , CostID , ComNoType , AcctNoType " + " FROM  Doc7M0553 " + " WHERE  1=1 ";
    if (!"".equals(stringDepartNo))
      stringSql += " AND  DepartNo  =  '" + stringDepartNo + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    if (!"".equals(stringComNoType))
      stringSql += " AND  ComNoType  =  '" + stringComNoType + "' ";
    if (!"".equals(stringAcctNoType))
      stringSql += " AND  AcctNoType  =  '" + stringAcctNoType + "' ";
    if (!"".equals(stringSqlAnd)) {
      stringSql += stringSqlAnd;
    } else {
      stringSql += " ORDER BY  DepartNo,  CostID,  ComNoType,  AcctNoType ";
    }
    retDoc7M0553 = dbDoc.queryFromPool(stringSql);
    return retDoc7M0553;
  }

  // 表格 Doc7M056
  public String getComNoType(String stringComNo) throws Throwable {
    return getComNoType(stringComNo, "", "", "");
  }

  public String getComNoType(String stringComNo, String stringFirmNo, String stringComNoType, String stringSqlAnd) throws Throwable {
    String[][] retDoc7M056 = getDoc7M056(stringComNo, stringFirmNo, stringComNoType, stringSqlAnd);
    if (retDoc7M056.length > 0)
      return retDoc7M056[0][2].trim();
    return "";
  }

  public String getComName(String stringComNo, String stringFirmNo, String stringComNoType, String stringSqlAnd) throws Throwable {
    String[][] retDoc7M056 = getDoc7M056(stringComNo, stringFirmNo, stringComNoType, stringSqlAnd);
    if (retDoc7M056.length > 0)
      return retDoc7M056[0][3].trim();
    return "";
  }

  public String getFirmNo(String stringComNo, String stringFirmNo, String stringComNoType, String stringSqlAnd) throws Throwable {
    String[][] retDoc7M056 = getDoc7M056(stringComNo, stringFirmNo, stringComNoType, stringSqlAnd);
    if (retDoc7M056.length > 0)
      return retDoc7M056[0][1].trim();
    return "";
  }

  public String getUseType(String stringComNo, String stringSqlAnd) throws Throwable {
    String[][] retDoc7M056 = getDoc7M056(stringComNo, "", "", stringSqlAnd);
    if (retDoc7M056.length > 0)
      return retDoc7M056[0][4].trim();
    return "";
  }

  public String[][] getDoc7M056(String stringComNo, String stringFirmNo, String stringComNoType, String stringSqlAnd) throws Throwable {
    return getDoc7M056(stringComNo, stringFirmNo, stringComNoType, "", stringSqlAnd);
  }

  public String[][] getDoc7M056(String stringComNo, String stringFirmNo, String stringComNoType, String stringUseType, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringSqlAndL = "";
    String[][] retDoc7M056 = null;
    // 0 ComNo 1 FIRM_NO 2 ComNoType 3 ComName 4 UseType
    stringSql = "SELECT  ComNo,  FIRM_NO,  ComNoType,  ComName,  UseType  " + " FROM  Doc7M056 ";
    if (!"".equals(stringComNo)) {
      stringSqlAndL += "".equals(stringSqlAndL) ? " WHERE " : " AND ";
      stringSqlAndL += " ComNo  =  '" + stringComNo + "' ";
    }
    if (!"".equals(stringFirmNo)) {
      stringSqlAndL += "".equals(stringSqlAndL) ? " WHERE " : " AND ";
      stringSqlAndL += "  FIRM_NO  =  '" + stringFirmNo + "' ";
    }
    if (!"".equals(stringComNoType)) {
      stringSqlAndL += "".equals(stringSqlAndL) ? " WHERE " : " AND ";
      stringSqlAndL += " ComNoType  =  '" + stringComNoType + "' ";
    }
    if (!"".equals(stringUseType)) {
      stringSqlAndL += "".equals(stringSqlAndL) ? " WHERE " : " AND ";
      stringSqlAndL += " UseType  =  '" + stringUseType + "' ";
    }
    stringSql += stringSqlAndL + stringSqlAnd;
    retDoc7M056 = dbDoc.queryFromPool(stringSql);
    return retDoc7M056;
  }

  // 表格 Doc7M057
  public String[][] getDoc7M057(String stringComNo, String stringCostID) throws Throwable {
    String stringSql = "";
    String stringDescription = "";
    String[][] retDoc7M057 = new String[0][0];
    // 0 ACCT_IN 1 ACCT_OUT 2 ITEM_CD 3 USED_CD 4 ACCT_OUT(分攤)
    stringSql = "SELECT  ACCT_IN,    ACCT_OUT,   ITEM_CD,  USED_CD,   ACCT_OUT2 " + " FROM  Doc7M057 " + " WHERE  1=1 ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    retDoc7M057 = dbDoc.queryFromPool(stringSql);
    return retDoc7M057;
  }

  public String getAcctNoDoc7M057(String stringComNo, String stringCostID, String stringAcctNoType) throws Throwable {
    String stringSql = "";
    String stringSelectSql = "";
    String stringAcctNo = "";
    String[][] retDoc7M057 = new String[0][0];
    //
    if ("".equals(stringAcctNoType))
      return stringAcctNo;
    //
    switch (stringAcctNoType.charAt(0)) {
    case 'A':
      stringSelectSql = " '' ";
      break; // 土地開發
    case 'C':
      stringSelectSql = " '' ";
      break; // 土地取得
    case 'O':
      stringSelectSql = "ACCT_OUT";
      break; // 開案興建
    case 'D':
      stringSelectSql = "ACCT_OUT3";
      break; // 完工結案
    case 'E':
      stringSelectSql = "ACCT_OUT4";
      break; // 租賃資產
    case 'B':
      stringSelectSql = "ACCT_OUT2";
      break; // 餘屋
    case 'I':
      stringSelectSql = "ACCT_IN";
      break; // 內部管理
    }
    // ACCT
    stringSql = "SELECT  " + stringSelectSql + " " + " FROM  Doc7M057 " + " WHERE  1=1 ";
    if (!"".equals(stringComNo))
      stringSql += " AND  ComNo  =  '" + stringComNo + "' ";
    if (!"".equals(stringCostID))
      stringSql += " AND  CostID  =  '" + stringCostID + "' ";
    retDoc7M057 = dbDoc.queryFromPool(stringSql);
    if (retDoc7M057.length > 0)
      stringAcctNo = retDoc7M057[0][0].trim();
    return stringAcctNo;
  }

  // 表格 DocFlow
  public String getDocFlow(String stringComNo, String stringKindNo, String stringUniPurchase, String stringAmt, String[] arrayCostID, FargloryUtil exeUtil) throws Throwable {
    String stringSql = "";
    String stringFlow = "";
    String[] arrayFlowName = null;
    String[][] retFlowName = { { "科案主管", "部室主管", "單位體系主管", "總管理處-人總室", "總管理處-財務室", "總管理處-採購室", "其它", "總管理處", "董事長" }, // 內業
        { "科案主管", "部室主管", "總經理", "總管理處", "董事長", "董事會" } };// 遠建
    String[][] retDocFlow = null;
    /* ComNo ALL:本業(00、02、10、11、12) 01 遠建 */
    Vector vectorComNo = new Vector();
    String stringComNoQuery = ("01".equals(stringComNo)) ? "01" : "ALL";
    String stringBigKindNo = "";
    String stringMedKindNo = "";
    vectorComNo.add("00"); // 遠東建設事業股份有限公司
    vectorComNo.add("02"); // 遠翔建設事業股份有限公司
    vectorComNo.add("10"); // 東源營造工程股份有限公司
    // vectorComNo.add("11") ; // 威力營造股份有限公司
    vectorComNo.add("12"); // 遠雄營造股份有限公司
    if ("15".equals(stringKindNo)) {
      stringBigKindNo = "A";
      stringMedKindNo = "工程類";
    }
    if ("17".equals(stringKindNo)) {
      stringBigKindNo = "A";
      stringMedKindNo = "一般類";
    }
    if ("23".equals(stringKindNo)) {
      stringBigKindNo = "B";
      stringMedKindNo = "工程類";
    }
    if ("24".equals(stringKindNo)) {
      stringBigKindNo = "B";
      stringMedKindNo = "一般類";
    }
    if ("26".equals(stringKindNo)) {
      stringBigKindNo = "C";
      stringMedKindNo = "一般類";
    }
    if ("22".equals(stringKindNo)) {
      stringBigKindNo = "D";
      stringMedKindNo = "無";
    }
    if ("25".equals(stringKindNo)) {
      stringBigKindNo = "E";
      stringMedKindNo = "無";
    }
    if ("".equals(stringBigKindNo)) {
      if ("B3018".equals(getUser()))
        return "1";
      return "";
    }
    /* BigKindNo A:請購單 B:請款單 C:借款單 D:驗收單 E 支出證明單 */
    Vector vectorGovernment = new Vector();
    vectorGovernment.add("200"); // 稅捐
    vectorGovernment.add("A170112"); // 地價稅
    vectorGovernment.add("A170113"); // 房屋稅
    vectorGovernment.add("A170121"); // 印花稅
    vectorGovernment.add("A170501"); // 規費
    vectorGovernment.add("A311111"); // 物管費用-稅捐-房屋稅
    vectorGovernment.add("A311112"); // 物管費用-稅捐-地價稅

    // vectorGovernment.add("231") ; // 電話費*
    // vectorGovernment.add("232") ; // 郵資*
    // vectorGovernment.add("233") ; // 匯費*
    vectorGovernment.add("261"); // 水費
    vectorGovernment.add("A110201"); // 水費-有繳費期限
    vectorGovernment.add("A210101"); // 公共水費(有繳費期限)
    vectorGovernment.add("A210102"); // 水費(有繳費期限)
    vectorGovernment.add("A311122"); // 物管費用-水費-有繳費期限
    vectorGovernment.add("A321123"); // 套房管理-水費-有繳費期限
    vectorGovernment.add("A330211"); // 水費(有繳費期限)
    vectorGovernment.add("262"); // 電費
    vectorGovernment.add("A110301"); // 電費(有繳費期限)
    vectorGovernment.add("A210111"); // 公共電費(有繳費期限)
    vectorGovernment.add("A210112"); // 電費(有繳費期限)
    vectorGovernment.add("A311124"); // 物管費用-電費-有繳費期限
    vectorGovernment.add("A321125"); // 套房管理-電費-有繳費期限
    vectorGovernment.add("A330212"); // 電費(有繳費期限)
    vectorGovernment.add("A010501"); // 新制退休金-公司提繳
    vectorGovernment.add("A010502"); // 新制退休金-員工自提
    vectorGovernment.add("A010503"); // 舊制退休金
    vectorGovernment.add("151"); // 勞保費
    vectorGovernment.add("A010401"); // 勞保費-公司負擔
    vectorGovernment.add("A010402"); // 勞保費-員工負擔
    vectorGovernment.add("A010403"); // 勞保費-工資墊償基金
    vectorGovernment.add("A010404"); // 勞保費-外勞自付額
    vectorGovernment.add("A010405"); // 勞保費-代墊費用
    vectorGovernment.add("152"); // 健保費
    vectorGovernment.add("A010411"); // 健保費-公司負擔
    vectorGovernment.add("A010412"); // 健保費-員工負擔
    vectorGovernment.add("A010413"); // 健保費-外勞自付額
    vectorGovernment.add("A010414"); // 健保費-代墊費用
    // vectorGovernment.add("153") ; // 團保費*
    switch (stringBigKindNo.charAt(0)) {
    case 'A':
      // 請購單 (工程類、一般類、統購 、電腦維修、關係企業)
      if ("ALL".equals(stringComNoQuery) && vectorComNo.indexOf(stringComNo) == -1) {
        stringMedKindNo = "關係企業";
      } else if ("Y".equals(stringUniPurchase)) {
        stringMedKindNo = "統購";
      } else {
        // 電腦維修
        Vector vectorCostID = new Vector();
        // vectorCostID.add("220") ; // 維修，無法判斷是何種維修
        // vectorCostID.add("396") ; // 電腦軟體成本
        // vectorCostID.add("721") ; // 接待中心之電腦設備租金支出
        // vectorCostID.add("862") ; // 網站建置或維運
        for (int intNo = 0; intNo < arrayCostID.length; intNo++) {
          if (vectorCostID.indexOf(arrayCostID[intNo].trim()) != -1) {
            stringMedKindNo = "電腦維修";
            break;
          }
        }
      }
      break;
    case 'B':
      // 請款 (工程類、一般類、政府機關、銀行 、零用金 、投標費)
      Vector vectorCostID = new Vector();
      String stringCostID = "";
      for (int intNo = 0; intNo < arrayCostID.length; intNo++) {
        stringCostID = arrayCostID[intNo].trim();
        // 銀行
        vectorCostID.add("A170701"); // 銀行利息費用
        vectorCostID.add("A170703"); // 利率交換利息
        vectorCostID.add("F295001"); // 銀行轉帳
        if (vectorCostID.indexOf(arrayCostID[intNo].trim()) != -1) {
          stringMedKindNo = "銀行";
          break;
        }
        // 投標費
        // 零用金
        if ((stringCostID.length() > 2 && "31".equals(stringCostID.substring(0, 2))) || "F297001,".indexOf(stringCostID) != -1) {
          stringMedKindNo = "零用金";
          break;
        }
        if (vectorGovernment.indexOf(stringCostID) != -1 || stringCostID.startsWith("F28")) {
          stringMedKindNo = "政府機關";
          break;
        }
      }
      break;
    case 'C':
      // 借款單 (一般類、政府機關)
      for (int intNo = 0; intNo < arrayCostID.length; intNo++) {
        // 銀行 目前無上線
        if (vectorGovernment.indexOf(arrayCostID[intNo].trim()) != -1) {
          stringMedKindNo = "政府機關";
          break;
        }
      }
      break;
    case 'D':
      // 驗收單
      break;
    case 'E':
      // 支出證明單
      break;
    }
    //
    stringSql = "SELECT  Flow1,  Flow2,  Flow3,  Flow4,  Flow5 , \n" + " Flow6,  Flow7,  Flow8,  Flow9 , Remark \n" + " FROM  DocFlow \n" + " WHERE  1=1 \n";
    if (!"".equals(stringComNoQuery))
      stringSql += " AND  ComNo        =  '" + stringComNoQuery + "' \n";
    if (!"".equals(stringBigKindNo))
      stringSql += " AND  BigKindNo  =  '" + stringBigKindNo + "' \n";
    if (!"".equals(stringMedKindNo))
      stringSql += " AND  MedKindNo  =  '" + stringMedKindNo + "' \n";
    if (!"".equals(stringAmt)) {
      stringSql += " AND  (PriceStart  <= " + stringAmt + "  OR  PriceStart  =  0) \n" + " AND  (PriceEnd   >=  " + stringAmt + "  OR  PriceEnd  =  0) \n";
    }
    retDocFlow = dbDoc.queryFromPool(stringSql);
    if (retDocFlow.length == 0) {
      if ("B3018".equals(getUser()))
        return "2";
      return "";
    }
    arrayFlowName = ("ALL".equals(stringComNoQuery)) ? retFlowName[0] : retFlowName[1];
    //
    String stringRemark = retDocFlow[0][9].trim();
    String stringTemp = "";
    String stringCheckName = "";
    String stringFlowName = "";
    String[] arrayTemp = convert.StringToken(stringRemark, "\n");
    stringRemark = "";
    String[] arrayTemp2 = null;
    Vector vectorFlowName = new Vector();
    for (int intNo = 0; intNo < arrayTemp.length; intNo++) {
      stringTemp = arrayTemp[intNo].trim();
      arrayTemp2 = convert.StringToken(stringTemp, "：");
      if (arrayTemp2.length != 2)
        continue;
      //
      stringTemp = arrayTemp2[0].trim();
      if ("註".equals(stringTemp)) {
        stringRemark += arrayTemp2[1].trim();
      }
      if ("審核".equals(stringTemp)) {
        if (!"無".equals(arrayTemp2[1].trim()))
          vectorFlowName.add(arrayTemp2[1].trim());
      }
      if ("決行".equals(stringTemp)) {
        stringCheckName = arrayTemp2[1].trim();
      }
    }
    int intPos = 0;
    stringFlow = "";
    for (int intNo = 0; intNo < retDocFlow[0].length; intNo++) {
      stringTemp = retDocFlow[0][intNo].trim();
      //
      if (!"審".equals(stringTemp) && !"決".equals(stringTemp))
        continue;
      //
      stringFlowName = arrayFlowName[intNo].trim();
      if (!"".equals(stringFlow))
        stringFlow += " → ";
      if ("審".equals(stringTemp)) {
        if (intPos < vectorFlowName.size()) {
          stringTemp = ("" + vectorFlowName.get(intPos)).trim();
          if (!"".equals(stringTemp) && !"null".equals(stringTemp)) {
            if (stringTemp.indexOf("替") == -1) {
              stringFlow += stringFlowName + "(" + stringTemp + ")";
            } else {
              stringFlow += stringTemp.substring(0, stringTemp.length() - 3);
            }
          } else {
            stringFlow += stringFlowName;
          }
        } else {
          stringFlow += stringFlowName;
        }
        intPos++;
      } else {
        if (!"".equals(stringCheckName)) {
          if (stringCheckName.indexOf("替") == -1) {
            stringFlow += stringFlowName + "(" + stringCheckName + ")";
          } else {
            stringFlow += stringCheckName.substring(0, stringCheckName.length() - 3);
          }
        } else {
          stringFlow += stringFlowName;
        }
        stringFlow += "(決行)";
      }
    }
    if (!"".equals(stringRemark))
      stringFlow += !"".equals(stringFlow) ? "　　" : "" + stringRemark;
    return stringFlow;
  }

  // 表格 dbo.USERS_RIGHT
  public String[][] getUsersRight(String stringId, String stringFuncName, String stringRgt) throws Throwable {
    String stringSql = "";
    String[][] retUsersRight = null;
    // 0 id 1 FUNC_NAME 2 RGT
    stringSql = " SELECT  id,  FUNC_NAME,  RGT " + " FROM  USERS_RIGHT " + " WHERE  1  =  1 ";
    if (!"".equals(stringId))
      stringSql += " AND  id  =  '" + stringId + "' ";
    if (!"".equals(stringFuncName))
      stringSql += " AND  FUNC_NAME  LIKE  '%" + stringFuncName + "' ";
    if (!"".equals(stringRgt))
      stringSql += " AND  RGT  =  '" + stringRgt + "' ";
    retUsersRight = dbDoc.queryFromPool(stringSql);
    return retUsersRight;
  }

  // 表格 FED1023
  // 公司名稱
  public String getCompanyNameDoc(String stringCompanyCd) throws Throwable {
    String stringSql = "";
    String stringCompanyName = "";
    String[][] retFED1023 = null;
    //
    stringSql = " SELECT  COMPANY_NAME " + " FROM  FED1023 " + " WHERE  COMPANY_CD  =  '" + stringCompanyCd + "' ";
    retFED1023 = dbDoc.queryFromPool(stringSql);
    if (retFED1023.length != 0) {
      stringCompanyName = retFED1023[0][0].trim();
    }
    return stringCompanyName;
  }

  // 表格 FE3D01
  // 部門名稱
  public String getDepartName(String stringDepartNo) throws Throwable {
    String stringSql = "";
    String stringDepartName = "";
    String[][] retFE3D01 = null;
    //
    if ("0531".equals(stringDepartNo))
      return "行銷體系";
    //
    stringSql = " SELECT  DEPT_NAME " + " FROM  FE3D01 " + " WHERE  DEPT_CD  =  '" + stringDepartNo + "' ";
    retFE3D01 = dbDoc.queryFromPool(stringSql);
    if (retFE3D01.length != 0) {
      stringDepartName = retFE3D01[0][0].trim();
    }
    return stringDepartName;
  }

  public void doInsertFE3D01B(String stringDepartNo1, String stringProjectID, FargloryUtil exeUtil) throws Throwable {
    String stringDepartType = "A";
    String stringDeptCdDoc = "";
    String stringDeptName = "";
    String stringStopUse = "N";
    String[][] retDoc2M010DeptCd = null;
    //
    retDoc2M010DeptCd = getDoc2M010DeptCd(stringDepartNo1, "", "");
    if (retDoc2M010DeptCd.length >= 0) {
      stringDeptCdDoc = retDoc2M010DeptCd[0][1].trim();
      stringDeptCdDoc = exeUtil.doSubstring(stringDeptCdDoc, 0, 3);
      stringDeptName = retDoc2M010DeptCd[0][2].trim();
    }
    if (!"".equals(stringProjectID))
      stringDeptName += stringProjectID + "案";
    //
    doInsertFE3D01(stringDepartType, stringDepartNo1 + stringProjectID, stringDeptCdDoc, stringDeptName, stringStopUse);
    //
    String stringPostDate = datetime.getToday("YYYY/mm/dd");
    String stringNo = getMaxRecordNo(stringPostDate, exeUtil);
    String stringNews = "新增部門 " + stringDepartNo1 + " " + stringProjectID + "  ";
    String stringPostMan = "請購請款系統";
    // doInsertDoc1About(stringPostDate, stringNo, stringNews, stringPostMan) ;
  }

  public String doInsertFE3D01(String stringDepartType, String stringDeptCd, String stringDeptCdDoc, String stringDeptName, String stringStopUse) throws Throwable {
    String stringSql = "";
    String stringDeptClass = "";
    String[][] retFE3D01 = null;
    //
    stringSql = " INSERT  INTO  FE3D01 (DepartType,             DEPT_CD,                DEPT_NAME,          StopUse,               DeptClass) " + " VALUES ('" + stringDepartType
        + "', '" + stringDeptCd + "',  '" + stringDeptName + "',  '" + stringStopUse + "',  '" + stringDeptCdDoc + "' )  ";
    dbDoc.execFromPool(stringSql);
    return stringSql;
  }

  // 資料庫 FE3D
  public String[][] getTableDataFE3D(String stringSql) throws Throwable {
    String[][] retTableData = new String[0][0];
    if (!"".equals(stringSql))
      retTableData = dbFE3D.queryFromPool(stringSql);
    return retTableData;
  }

  public String getNameUnionFE3D(String stringFieldName, String stringTableName, String stringSqlAnd, Hashtable hashtableAnd, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.getNameUnion(stringFieldName, stringTableName, stringSqlAnd, hashtableAnd, dbFE3D);
  }

  public Vector getQueryDataHashtableFE3D(String stringTableName, Hashtable hashtableAnd, String stringSqlAnd, Vector vectorColumnName, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.getQueryDataHashtable(stringTableName, hashtableAnd, stringSqlAnd, vectorColumnName, dbFE3D);
  }

  public String doInsertDBFE3D(String stringTableName, Hashtable hashtableData, boolean booleanDB, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.doInsertDB(stringTableName, hashtableData, booleanDB, dbFE3D);
  }

  public String doUpdateDBFE3D(String stringTableName, String stringSqlAnd, Hashtable hashtableData, Hashtable hashtableAnd, boolean booleanDB, FargloryUtil exeUtil)
      throws Throwable {
    return exeUtil.doUpdateDB(stringTableName, stringSqlAnd, hashtableData, hashtableAnd, booleanDB, dbFE3D);
  }

  public String doDeleteDBFE3D(String stringTableName, Hashtable hashtableAnd, String stringSqlAnd, boolean booleanDB, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.doDeleteDB(stringTableName, hashtableAnd, stringSqlAnd, booleanDB, dbFE3D);
  }

  // 表格 VFEE
  public String getCheckVFEE(String stringFirmNo, String stringComNo, String stringDate, String stringDate2, FargloryUtil exeUtil) throws Throwable {
    String stringDeptCdSum = getVFEE(stringFirmNo, stringComNo, stringDate, exeUtil);
    if (!"".equals(stringDeptCdSum))
      return stringDeptCdSum;
    stringDeptCdSum = getVFEE(stringFirmNo, stringComNo, stringDate2, exeUtil);
    return stringDeptCdSum;
  }

  public String getVFEE(String stringComNo, String stringDate, FargloryUtil exeUtil) throws Throwable {
    return getVFEE("", stringComNo, stringDate, exeUtil);
  }

  public String getVFEE(String stringFirmNo, String stringComNo, String stringDate, FargloryUtil exeUtil) throws Throwable {
    String stringSql = "";
    String stringSqlAnd = "";
    String stringDeptCd = "";
    String stringDeptCdSum = "";
    String stringYM = "";
    // String[][] retVFEE = null ;
    Vector vectorVFEE = null;
    //
    System.out.println("Doc2M010 getVFEE(" + stringComNo + ")----------------------------------S");
    if (",01,12,".indexOf("," + stringComNo + ",") == -1)
      return "";
    System.out.println("Doc2M010 getVFEE----------------------------------1");
    //
    stringDate = exeUtil.getDateConvertFullRoc(stringDate).replaceAll("/", "");
    if (exeUtil.doParseDouble(datetime.getDate(stringDate)) < 5)
      stringDate = datetime.dateAdd(stringDate, "m", -1);
    stringDate = datetime.dateAdd(stringDate, "m", -1);
    stringYM = datetime.getYear(stringDate) + datetime.getMonth(stringDate);
    //
    // stringSql = " SELECT ACCT_EXPENSE_CD, PCOUNT " +
    // " FROM VFEE " +
    // " WHERE 1=1 " ;
    stringSqlAnd = " AND  COMPANY_CD =  '" + stringComNo + "' " + " AND  SALARY_YM  =  '" + stringYM + "' " + " ORDER BY  ACCT_EXPENSE_CD ";
    // retVFEE = dbFE3D.queryFromPool(stringSql) ;
    System.out.println("Doc2M010 getVFEE----------------------------------2");
    vectorVFEE = getQueryDataHashtableFE3D("VFEE", new Hashtable(), stringSqlAnd, new Vector(), exeUtil);
    for (int intNo = 0; intNo < vectorVFEE.size(); intNo++) {
      // stringDeptCd = retVFEE[intNo][0].trim() ; if("".equals(stringDeptCd))
      // continue ;
      stringDeptCd = exeUtil.getVectorFieldValue(vectorVFEE, intNo, "ACCT_EXPENSE_CD");
      if (stringDeptCd.length() > 3)
        stringDeptCd = stringDeptCd.substring(0, 3);
      // if((!stringDeptCd.startsWith("A18") && !stringDeptCd.startsWith("022")) &&
      // stringDeptCd.length() > 3) stringDeptCd = stringDeptCd.substring(0,3) ;
      stringDeptCdSum += stringDeptCd + ",";
    }
    int intDay = datetime.getDate(exeUtil.doParseInteger(stringDate));
    System.out.println("Doc2M010 getVFEE(" + vectorVFEE.size() + ")----------------------------------3");
    if (vectorVFEE.size() == 0 && !"".equals(stringFirmNo)) { // eHR 修正 2017-08-15
      // if(vectorVFEE.size()==0 && intDay<=3 && !"".equals(stringFirmNo)) {
      stringDeptCdSum = getDeptCDForFirmNoSql(stringFirmNo, "");
    }
    System.out.println("Doc2M010 getVFEE----------------------------------E");
    return stringDeptCdSum;
  }

  // 表格 FE3D05
  // 人員名稱
  public String getEmpName(String stringEmpNo) throws Throwable {
    String stringSql = "";
    String stringEmpName = "";
    String[][] retFE3D05 = null;
    //
    stringSql = " SELECT  EMP_NAME " + " FROM  FE3D05 " + " WHERE  EMP_NO  =  '" + stringEmpNo + "' ";
    retFE3D05 = dbFE3D.queryFromPool(stringSql);
    if (retFE3D05.length != 0) {
      stringEmpName = retFE3D05[0][0].trim();
    }
    return stringEmpName;
  }

  public String getEmpNo(String stringEmpName) throws Throwable {
    String stringSql = "";
    String stringEmpNo = "";
    String[][] retFE3D05 = null;
    //
    stringSql = " SELECT  EMP_NO " + " FROM  FE3D05 " + " WHERE  EMP_NAME  =  '" + stringEmpName + "' ";
    retFE3D05 = dbFE3D.queryFromPool(stringSql);
    if (retFE3D05.length != 0) {
      stringEmpNo = retFE3D05[0][0].trim();
    }
    return stringEmpNo;
  }

  public String getDeptCdForEmpNo(String stringEmployeeNo) throws Throwable {
    String stringDeptCd = "";
    String stringSql = "";
    String[][] retFE3D05 = null;
    //
    stringSql = " SELECT  DEPT_CD  FROM  FE3D05  WHERE  EMP_NO  =  '" + stringEmployeeNo + "' ";
    retFE3D05 = dbFE3D.queryFromPool(stringSql);
    //
    if (retFE3D05.length > 0)
      stringDeptCd = retFE3D05[0][0].trim();
    return stringDeptCd;
  }

  public String[][] getFE3D05(String stringEmpNo) throws Throwable {
    String stringSql = "";
    String[][] retFE3D05 = null;
    // 0 DEPT_CD 1 EMP_NO 2 EMP_NAME 3 TRX_CD 4 TRX_DATE
    stringSql = " SELECT  DEPT_CD,  EMP_NO,  EMP_NAME,  TRX_CD,  TRX_DATE " + " FROM  FE3D05 " + " WHERE  EMP_NO  =  '" + stringEmpNo + "' ";
    retFE3D05 = dbFE3D.queryFromPool(stringSql);
    return retFE3D05;
  }

  // 正式時，將改用 getVFEE()
  public String getDeptCDForFirmNoSql(String stringFIRM_NO, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringDeptCd = "";
    String[][] retFE3D05 = getDeptCDForFirmNo(stringFIRM_NO, stringSqlAnd);
    for (int intNo = 0; intNo < retFE3D05.length; intNo++) {
      stringDeptCd = retFE3D05[intNo][0].trim();
      //
      if (stringDeptCd.length() > 3 && !stringDeptCd.startsWith("A18") && !stringDeptCd.startsWith("022"))
        stringDeptCd = stringDeptCd.substring(0, 3);
      //
      if (stringSql.indexOf(stringDeptCd) != -1)
        continue;
      if (!"".equals(stringSql))
        stringSql += ", ";
      stringSql += " '" + stringDeptCd + "' ";
    }
    if (!"04673318".equals(stringFIRM_NO)) {
      if (!"".equals(stringSql))
        stringSql += ", ";
      stringSql += " '001' ";
    }
    return stringSql;
  }

  public String getDeptCDForFirmNoSql2(String stringFIRM_NO, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringSql3 = "";
    String stringSql4 = "";
    String stringDeptCd = "";
    String[][] retFE3D05 = getDeptCDForFirmNo(stringFIRM_NO, stringSqlAnd);
    for (int intNo = 0; intNo < retFE3D05.length; intNo++) {
      stringDeptCd = retFE3D05[intNo][0].trim();
      //
      if (stringDeptCd.length() > 3 && !stringDeptCd.startsWith("A18") && !stringDeptCd.startsWith("022")) {
        stringDeptCd = stringDeptCd.substring(0, 3);
      }
      //
      if (stringSql.indexOf(stringDeptCd) != -1)
        continue;
      if (!"".equals(stringSql))
        stringSql += ", ";
      stringSql += " '" + stringDeptCd + "' ";
      //
      if (stringDeptCd.length() == 4) {
        if (stringSql4.indexOf(stringDeptCd) != -1)
          continue;
        if (!"".equals(stringSql4))
          stringSql4 += ", ";
        stringSql4 += " '" + stringDeptCd + "' ";
      } else {
        if (stringSql3.indexOf(stringDeptCd) != -1)
          continue;
        if (!"".equals(stringSql3))
          stringSql3 += ", ";
        stringSql3 += " '" + stringDeptCd + "' ";
      }
    }
    if (!"04673318".equals(stringFIRM_NO)) {
      if (!"".equals(stringSql3))
        stringSql3 += ", ";
      stringSql3 += " '001' ";
    }
    stringSql = "";
    if (!"".equals(stringSql3)) {
      stringSql += " SUBSTRING(DEPT_CD_Doc,1,3) IN (" + stringSql3 + ") ";
    }
    if (!"".equals(stringSql4)) {
      if (!"".equals(stringSql))
        stringSql += " OR ";
      stringSql += " DEPT_CD_Doc IN (" + stringSql4 + ") ";
    }
    if (!"".equals(stringSql))
      stringSql = " AND (" + stringSql + ") \n AND  LEN(ISNULL(DEPT_CD, '')) = 4";
    return stringSql;
  }

  public String[][] getDeptCDForFirmNo(String stringFIRM_NO, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringEmpNo = "";
    String[][] retFE3D05 = null;
    // 原
    stringSql = " SELECT  DEPT_CD " + " FROM  FE3D05 T05,  FE3D72 T72 " + " WHERE  T05.EMP_NO  =  T72.EMP_NO " + "AND  (T05.TRX_CD  =  '1'   OR  T05.TRX_CD  =  '4') "
        + " AND  T72.INSUR_KIND  =  '1' " + " AND  T72.FIRM_NO  =  '" + stringFIRM_NO + "' " + stringSqlAnd;
    retFE3D05 = dbFE3D.queryFromPool(stringSql);
    return retFE3D05;
  }

  public Hashtable getMenuProjectEmployeeHashtable(String stringUserID) throws Throwable {
    // 0 DEPT_CD 1 EMP_NO 2 EMP_NAME
    String stringEmpNo = "";
    String stringEmpName = "";
    String stringDeptCd = "";
    String[][] retFE3DData = getMenuProjectEmployee(stringUserID);
    Hashtable hashtableFE3DData = new Hashtable();
    for (int intNo = 0; intNo < retFE3DData.length; intNo++) {
      stringEmpNo = retFE3DData[intNo][1];
      hashtableFE3DData.put(stringEmpNo, retFE3DData[intNo]);
    }
    return hashtableFE3DData;
  }

  // 表格 FE3D70
  public String[][] getFE3D70(String stringComNo) throws Throwable {
    return getFE3D70(stringComNo, "", "");
  }

  public String[][] getFE3D70(String stringComNo, String stringFirmNo, String stringSqlAnd) throws Throwable {
    talk dbFE3D = getTalk("" + get("put_FE3D"));
    String stringSql = "";
    String[][] retFE3D70 = null;
    // 0 FIRM_NO 1 INSUR_COMP_NAME
    stringSql = " SELECT  FIRM_NO,  INSUR_COMP_NAME,  COMPANY_CD " + " FROM  FE3D70 " + " WHERE  ISNULL(COMPANY_CD,'') <> '' ";
    if (!"".equals(stringComNo))
      stringSql += " AND  COMPANY_CD  =  '" + stringComNo + "' ";
    if (!"".equals(stringFirmNo))
      stringSql += " AND  FIRM_NO  =  '" + stringFirmNo + "' ";
    stringSql += stringSqlAnd;
    retFE3D70 = dbFE3D.queryFromPool(stringSql);
    return retFE3D70;
  }

  // 表格 FE3D72
  public String getComNoForEmpNo(String stringUser) throws Throwable {
    String stringSql = "";
    String stringComNo = "";
    String stringFirmNo = "";
    String[][] retFE3D70 = null;
    String[][] retFE3D72 = null;
    // 原
    stringSql = " SELECT  F70.COMPANY_CD " + " FROM  FE3D72 F72,  FE3D70 F70 ,  FE3D05 F05  " + " WHERE  F05.EMP_NO  =  F72.EMP_NO " + " AND  F05.EMP_NO  =  '" + stringUser + "' "
        + " AND  F72.FIRM_NO  =  F70.FIRM_NO " + " AND  (F05.TRX_CD  =  '1'   OR  F05.TRX_CD  =  '4') " + " AND  F72.INSUR_KIND  =  '1' ";
    retFE3D72 = dbFE3D.queryFromPool(stringSql);
    if (retFE3D72.length > 0)
      stringComNo = retFE3D72[0][0].trim();
    return stringComNo;
  }

  // 由 spMenuProjectEmployee.sql 改寫
  public String[][] getMenuProjectEmployee(String stringUserID) throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return getMenuProjectEmployee(stringUserID, exeUtil);
  }

  public String[][] getMenuProjectEmployee(String stringUserID, FargloryUtil exeUtil) throws Throwable {
    String stringToday = exeUtil.getDateConvertFullRoc(getToday("yymmdd")).replaceAll("/", "");
    String stringDeptCd = "";
    String stringSql = "";
    String[][] retFE3DData = null;
    String[][] retFE3D103 = null;
    boolean booleanFlow = true;
    //
    if ("B1085".equals(stringUserID)) {
      stringSql = "SELECT   DEPT_CD,  EMP_NO,  EMP_NAME " + "  FROM   FE3D05  " + " WHERE  (TRX_CD  <>  '2'  AND  TRX_CD <> '3' )" + " AND  SUBSTRING(EMP_NO,1,1)  =  'B'  "
          + " ORDER BY  DEPT_CD,  EMP_NO ";
      retFE3DData = dbFE3D.queryFromPool(stringSql);
    }
    if (retFE3DData == null) {
      stringSql = "SELECT  DEPT_CD  " + " FROM  FE3D103  " + " WHERE  EMP_NO  =  '" + stringUserID + "' " + " AND  TRX_DATE_S  <=  '" + stringToday + "' "
          + " AND  TRX_DATE_E  >=  '" + stringToday + "' ";
      retFE3D103 = dbFE3D.queryFromPool(stringSql);
      booleanFlow = retFE3D103.length != 0;
      if (booleanFlow) {
        stringDeptCd = retFE3D103[0][0];
        booleanFlow = booleanFlow && !"0".equals(stringDeptCd.substring(3, 4));
        booleanFlow = booleanFlow && !"1".equals(stringDeptCd.substring(3, 4));
        booleanFlow = booleanFlow && !"2".equals(stringDeptCd.substring(3, 4));
        booleanFlow = booleanFlow && !"3".equals(stringDeptCd.substring(3, 4));
        booleanFlow = booleanFlow && !"4".equals(stringDeptCd.substring(3, 4));
        booleanFlow = booleanFlow && !"5".equals(stringDeptCd.substring(3, 4));
        booleanFlow = booleanFlow && !"6".equals(stringDeptCd.substring(3, 4));
        booleanFlow = booleanFlow && !"7".equals(stringDeptCd.substring(3, 4));
        booleanFlow = booleanFlow && !"8".equals(stringDeptCd.substring(3, 4));
        booleanFlow = booleanFlow && !"9".equals(stringDeptCd.substring(3, 4));
      }
      if (booleanFlow) {
        stringSql = "SELECT  FE3D103.DEPT_CD,  FE3D05.EMP_NO,  FE3D05.EMP_NAME  " + " FROM  FE3D103  ,  FE3D05  " + " WHERE  FE3D103.EMP_NO  =  FE3D05.EMP_NO "
            + " AND  FE3D103.EMP_NO  <>  '" + stringUserID + "' " + " AND  FE3D103.DEPT_CD  =  '" + stringDeptCd + "'" + " AND  FE3D103.TRX_DATE_S  <=  '" + stringToday + "' "
            + " AND  FE3D103.TRX_DATE_E  >=  '" + stringToday + "' " + " AND  (FE3D05.TRX_CD  <>  '2'  AND  FE3D05.TRX_CD  <>  '3' )"
            + " ORDER BY  FE3D103.DEPT_CD,  FE3D05.EMP_NO  ";
      } else {
        stringSql = "SELECT  FE3D103.DEPT_CD,  FE3D05.EMP_NO,  FE3D05.EMP_NAME  " + " FROM  FE3D103,  FE3D05 " + " WHERE  FE3D103.EMP_NO  =  FE3D05.EMP_NO "
            + " AND  FE3D103.EMP_NO  <>  '" + stringUserID + "' " + " AND  FE3D103.DEPT_CD  LIKE  '%33%' " + " AND  FE3D103.TRX_DATE_S  <=  '" + stringToday + "' "
            + " AND  FE3D103.TRX_DATE_E  >=  '" + stringToday + "' " + " AND  (FE3D05.TRX_CD  <>  '2'  AND  FE3D05.TRX_CD  <>  '3' ) "
            + " ORDER BY  FE3D103.DEPT_CD,  FE3D05.EMP_NO  ";
      }
      retFE3DData = dbFE3D.queryFromPool(stringSql);
      // System.out.println("1111---------------" + retFE3DData.length) ;
    }
    return retFE3DData;
  }

  // 表格 FE3D103
  public String[][] getFE3D103(String stringEmpNo, String stringDeptCd, String stringDate) throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return getFE3D103(stringEmpNo, stringDeptCd, stringDate, exeUtil);
  }

  public String[][] getFE3D103(String stringEmpNo, String stringDeptCd, String stringDate, FargloryUtil exeUtil) throws Throwable {
    String stringSql = "";
    String[][] retFE3D103 = null;
    stringDate = exeUtil.getDateConvertFullRoc(stringDate).replaceAll("/", "");
    //
    stringSql = " SELECT  DEPT_CD,  EMP_NO " + " FROM  FE3D103 " + " WHERE  EMP_NO  <>  '' ";
    if (!"".equals(stringEmpNo))
      stringSql += " AND  EMP_NO  =  '" + stringEmpNo + "' ";
    if (!"".equals(stringDeptCd))
      stringSql += " AND  DEPT_CD  =  '" + stringDeptCd + "' ";
    if (!"".equals(stringDate)) {
      stringSql += " AND  TRX_DATE_S  <=  '" + stringDate + "' " + " AND  TRX_DATE_E  >=  '" + stringDate + "' ";
    }
    retFE3D103 = dbFE3D.queryFromPool(stringSql);
    return retFE3D103;
  }

  // 資料庫 FED1
  public String getVoucherEmpNo(String stringUser, String stringComNo) throws Throwable {
    return (new Farglory.util.FargloryUtil()).getVoucherEmpNo(stringUser, stringComNo.trim());
  }

  public void doExecVectorSqlForFED1(Vector vectorSql) throws Throwable {
    if (vectorSql.size() > 0)
      dbFED1.execFromPool((String[]) vectorSql.toArray(new String[0]));
  }

  public String[][] getTableDataFED1(String stringSql) throws Throwable {
    String[][] retTableData = new String[0][0];
    if (!"".equals(stringSql))
      retTableData = dbFED1.queryFromPool(stringSql);
    return retTableData;
  }

  public String getNameUnionFED1(String stringFieldName, String stringTableName, String stringSqlAnd, Hashtable hashtableAnd, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.getNameUnion(stringFieldName, stringTableName, stringSqlAnd, hashtableAnd, dbFED1);
  }

  public Vector getQueryDataHashtableFED1(String stringTableName, Hashtable hashtableAnd, String stringSqlAnd, Vector vectorColumnName, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.getQueryDataHashtable(stringTableName, hashtableAnd, stringSqlAnd, vectorColumnName, dbFED1);
  }

  public String doInsertDBFED1(String stringTableName, Hashtable hashtableData, boolean booleanDB, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.doInsertDB(stringTableName, hashtableData, booleanDB, dbFED1);
  }

  public String doUpdateDBFED1(String stringTableName, String stringSqlAnd, Hashtable hashtableData, Hashtable hashtableAnd, boolean booleanDB, FargloryUtil exeUtil)
      throws Throwable {
    return exeUtil.doUpdateDB(stringTableName, stringSqlAnd, hashtableData, hashtableAnd, booleanDB, dbFED1);
  }

  public String doDeleteDBFED1(String stringTableName, Hashtable hashtableAnd, String stringSqlAnd, boolean booleanDB, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.doDeleteDB(stringTableName, hashtableAnd, stringSqlAnd, booleanDB, dbFED1);
  }

  // 表格 FED1001
  // 取得項目代號名稱
  public String getItemName(String stringItemCd) throws Throwable {
    String stringItemName = "";
    String stringSql = "";
    String[][] retFED1001 = null;
    //
    stringSql = "SELECT  ITEM_CHINESE_NAME " + " FROM  FED1001 " + " WHERE  ITEM_CD  =  '" + stringItemCd + "' ";
    retFED1001 = dbFED1.queryFromPool(stringSql);
    if (retFED1001.length != 0) {
      stringItemName = retFED1001[0][0].trim();
    }
    return stringItemName;
  }

  // 表格 FED1002
  // 取得使用代號名稱
  public String getUseName(String stringItemCd, String stringUsedCd) throws Throwable {
    return getUseName(stringItemCd, stringUsedCd, dbFED1);
  }

  public String getUseName(String stringItemCd, String stringUsedCd, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----getUseName");
    }
    return getUseName(stringItemCd, stringUsedCd, dbFED1L);
  }

  public String getUseName(String stringItemCd, String stringUsedCd, talk dbFED1L) throws Throwable {
    String stringUsedName = "";
    String stringSql = "";
    String[][] retFED1002 = null;
    //
    stringSql = "SELECT USED_CD_DESCRIPTION " + " FROM  FED1002 " + " WHERE  ITEM_CD  =  '" + stringItemCd + "' " + " AND  USED_CD  =  '" + stringUsedCd + "' ";
    retFED1002 = dbFED1L.queryFromPool(stringSql);
    if (retFED1002.length != 0) {
      stringUsedName = retFED1002[0][0].trim();
    }
    return stringUsedName;
  }

  public String getUseCd(String stringItemCd, String stringUsedCdDescription) throws Throwable {
    return getUseCd(stringItemCd, stringUsedCdDescription, dbFED1);
  }

  public String getUseCd(String stringItemCd, String stringUsedCdDescription, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----getUseCd");
    }
    return getUseCd(stringItemCd, stringUsedCdDescription, dbFED1L);
  }

  public String getUseCd(String stringItemCd, String stringUsedCdDescription, talk dbFED1L) throws Throwable {
    String stringUsedName = "";
    String stringSql = "";
    String[][] retFED1002 = null;
    //
    stringSql = "SELECT  USED_CD " + " FROM  FED1002 " + " WHERE  ITEM_CD  =  '" + stringItemCd + "' " + " AND  USED_CD_DESCRIPTION   =  '" + stringUsedCdDescription + "' ";
    retFED1002 = dbFED1L.queryFromPool(stringSql);
    if (retFED1002.length != 0) {
      stringUsedName = retFED1002[0][0].trim();
    }
    return stringUsedName;
  }

  public String[][] getFED1002(String stringItemCd) throws Throwable {
    return getFED1002(stringItemCd, dbFED1);
  }

  public String[][] getFED1002(String stringItemCd, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----getFED1002");
    }
    return getFED1002(stringItemCd, dbFED1);
  }

  public String[][] getFED1002(String stringItemCd, talk dbFED1L) throws Throwable {
    String stringSql = "";
    String[][] retFED1002 = null;
    //
    stringSql = "SELECT  USED_CD " + " FROM  FED1002 " + " WHERE  ITEM_CD  =  '" + stringItemCd + "' ";
    retFED1002 = dbFED1L.queryFromPool(stringSql);
    return retFED1002;
  }

  // 表格 FED1003
  // 取得會計科目名稱
  public String getAccountName(String stringAccountNo) throws Throwable {
    return getAccountName(stringAccountNo, dbFED1);
  }

  // 基金會
  public String getAccountNameA(String stringAccountNo) throws Throwable {
    return getAccountName(stringAccountNo, dbFED1A);
  }

  public String getAccountName(String stringAccountNo, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----getAccountName");
    }
    return getAccountName(stringAccountNo, dbFED1L);
  }

  public String getAccountName(String stringAccountNo, talk dbFED1L) throws Throwable {
    if ("".equals(stringAccountNo))
      return "";
    //
    String stringAccountName = "";
    String stringSql = "";
    String[][] retFED1003 = null;
    //
    stringSql = "SELECT  ACCT_CHINESE_NAME " + " FROM  FED1003 " + " WHERE  ACCT_NO  =  '" + stringAccountNo + "' ";
    retFED1003 = dbFED1L.queryFromPool(stringSql);
    if (retFED1003.length != 0) {
      stringAccountName = retFED1003[0][0].trim();
    }
    return stringAccountName;
  }

  public String[][] getFED1003(String stringAccountNo) throws Throwable {
    return getFED1003(stringAccountNo, dbFED1);
  }

  public String[][] getFED1003(String stringAccountNo, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----getAccountName");
    }
    return getFED1003(stringAccountNo, dbFED1L);
  }

  public String[][] getFED1003(String stringAccountNo, talk dbFED1L) throws Throwable {
    String stringSql = "";
    String stringMonTeary = "";
    String[][] retFED1003 = null;
    // 0 DB_CR_CD 1 ENTER_BOOK_CD 2 WRITE_OFF_CD 3 MATERIAL_CD 4 OBJECT_CD
    // 5 DEPT_CD 6 MONTEARY_CD 7 ACCT_CHINESE_NAME
    stringSql = "SELECT  DB_CR_CD,  ENTER_BOOK_CD,  WRITE_OFF_CD,        MATERIAL_CD,  OBJECT_CD, " + " DEPT_CD,   MONTEARY_CD,    ACCT_CHINESE_NAME " + " FROM  FED1003 "
        + " WHERE  ACCT_NO  =  '" + stringAccountNo + "' ";
    retFED1003 = dbFED1L.queryFromPool(stringSql);
    return retFED1003;
  }

  // 表格 FED1004
  public String[][] getFED1004(String stringAccountNo) throws Throwable {
    return getFED1004(stringAccountNo, dbFED1);
  }

  public String[][] getFED1004(String stringAccountNo, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----getFED1004");
    }
    return getFED1004(stringAccountNo, dbFED1L);
  }

  public String[][] getFED1004(String stringAccountNo, talk dbFED1L) throws Throwable {
    String stringSql = "";
    String[][] retFED1004 = null;
    //
    stringSql = "SELECT  ITEM_CD " + " FROM  FED1004 " + " WHERE  ACCT_NO  =  '" + stringAccountNo + "' " + " ORDER BY ITEM_CD ";
    retFED1004 = dbFED1L.queryFromPool(stringSql);
    return retFED1004;
  }

  // 表格 FED1005
  public String getFED1005LastYMD(String stringLastYMD, FargloryUtil exeUtil) throws Throwable {
    stringLastYMD = stringLastYMD.replaceAll("/", "");
    if (exeUtil.doParseDouble(stringLastYMD.substring(0, 2)) <= 10 && exeUtil.doParseDouble(stringLastYMD) > 0) {
      return exeUtil.getDateConvertFullRoc("1" + stringLastYMD);
    }
    return exeUtil.getDateConvertFullRoc(stringLastYMD);
  }

  // 廠商名稱
  public String getFactoryName(String stringFactoryNo) throws Throwable {
    return getFactoryName(stringFactoryNo, dbFED1);
  }

  public String getFactoryName(String stringFactoryNo, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----getFactoryName");
    }
    return getFactoryName(stringFactoryNo, dbFED1);
  }

  public String getFactoryName(String stringFactoryNo, talk dbFED1L) throws Throwable {
    String stringSql = "";
    String stringFactoryName = "";
    String[][] retFED1005 = null;
    //
    stringSql = " SELECT  OBJECT_SHORT_NAME " + " FROM  FED1005 " + " WHERE  OBJECT_CD  =  '" + stringFactoryNo + "' ";
    // " AND (OBJECT_KIND = '3' OR OBJECT_KIND = '2') " ;
    retFED1005 = dbFED1L.queryFromPool(stringSql);
    if (retFED1005.length != 0) {
      stringFactoryName = retFED1005[0][0].trim();
    }
    return stringFactoryName;
  }

  public String[][] getFED1005(String stringFactoryNo) throws Throwable {
    return getFED1005(stringFactoryNo, dbFED1);
  }

  public String[][] getFED1005(String stringFactoryNo, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----getFED1005");
    }
    return getFED1005(stringFactoryNo, dbFED1L);
  }

  public String[][] getFED1005(String stringFactoryNo, talk dbFED1L) throws Throwable {
    String stringSql = "";
    String stringFactoryName = "";
    String[][] retFED1005 = null;
    // 0 LAST_YMD 1 LAST_USER 2 OBJECT_CD 3 OBJECT_SHORT_NAME 4 OBJECT_FULL_NAME
    // 5 CHAIRMAN 6 CONTACT_MAN 7 COMPANY_TEL_NO 8 COMPANY_FAX_NO 9 INVOICE_ADDR
    // 10 MAIL_ADDR 11 OBJECT_TYPE 12 OBJECT_KIND 13 EMAIL 14 OBJECT_ID
    // 15 VOUCHER_KIND 16 BANK_CD1 17 BANK_NO1
    stringSql = " SELECT  LAST_YMD,          LAST_USER,      OBJECT_CD,       OBJECT_SHORT_NAME,  OBJECT_FULL_NAME, "
        + " CHAIRMAN,          CONTACT_MAN,    COMPANY_TEL_NO,  COMPANY_FAX_NO,     INVOICE_ADDR,  "
        + " MAIL_ADDR,         OBJECT_TYPE,    OBJECT_KIND,     EMAIL,              OBJECT_ID, " + " VOUCHER_KIND,      BANK_CD1,       BANK_NO1 " + " FROM  FED1005 "
        + " WHERE  OBJECT_CD  =  '" + stringFactoryNo + "' ";
    // " AND (OBJECT_KIND = '3' OR OBJECT_KIND = '2') " ;
    retFED1005 = dbFED1L.queryFromPool(stringSql);
    return retFED1005;
  }

  public String[][] getFED1005(String stringFactoryNo, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringFactoryName = "";
    String[][] retFED1005 = null;
    // 0 LAST_YMD 1 LAST_USER 2 OBJECT_CD 3 OBJECT_SHORT_NAME 4 OBJECT_FULL_NAME
    // 5 CHAIRMAN 6 CONTACT_MAN 7 COMPANY_TEL_NO 8 COMPANY_FAX_NO 9 INVOICE_ADDR
    // 10 MAIL_ADDR 11 OBJECT_TYPE 12 OBJECT_KIND 13 EMAIL 14 OBJECT_ID
    // 15 VOUCHER_KIND 16 BANK_CD1 17 BANK_NO1
    stringSql = " SELECT  LAST_YMD,          LAST_USER,     OBJECT_CD,       OBJECT_SHORT_NAME,  OBJECT_FULL_NAME, "
        + " CHAIRMAN,          CONTACT_MAN,   COMPANY_TEL_NO,  COMPANY_FAX_NO,     INVOICE_ADDR,  "
        + " MAIL_ADDR,         OBJECT_TYPE,   OBJECT_KIND,     EMAIL,              OBJECT_ID, " + " VOUCHER_KIND,      BANK_CD1,      BANK_NO1 " + " FROM  FED1005 "
        + " WHERE  1=1 ";
    if (!"".equals(stringFactoryNo))
      stringSql += " AND  OBJECT_CD  =  '" + stringFactoryNo + "' ";
    stringSql += stringSqlAnd;
    retFED1005 = dbFED1.queryFromPool(stringSql);
    return retFED1005;
  }

  public String[][] getFED1005LimitName(String stringFactoryName) throws Throwable {
    String stringSql = "";
    String[][] retFED1005 = null;
    //
    stringSql = " SELECT  OBJECT_CD,  OBJECT_SHORT_NAME " + " FROM  FED1005 " + " WHERE  OBJECT_SHORT_NAME  LIKE  '%" + stringFactoryName + "%' ";
    retFED1005 = dbFED1.queryFromPool(stringSql);
    return retFED1005;
  }

  // 0 OBJECT_CD 1 OBJECT_SHORT_NAME 2 OBJECT_FULL_NAME 3 CHAIRMAN 4 CONTACT_MAN
  // 5 COMPANY_TEL_NO2 6 COMPANY_FAX_NO2 7 INVOICE_ADDR 8 MAIL_ADDR 9 OBJECT_TYPE
  // 10 LAST_USER 11 LAST_YMD 12 OBJECT_KIND 13 OBJECT_ID 14 EMAIL
  public String doInsertFED1005(String[] arrayFieldValue) throws Throwable {
    return doInsertFED1005(arrayFieldValue, dbFED1);
  }

  public String doInsertFED1005(String[] arrayFieldValue, talk dbFED1L) throws Throwable {
    String stringSql = "";
    //
    for (int intNo = 0; intNo < arrayFieldValue.length; intNo++) {
      arrayFieldValue[intNo] = convert.ToSql(arrayFieldValue[intNo]);
    }
    //
    stringSql = "INSERT  INTO  FED1005 (OBJECT_CD,      OBJECT_SHORT_NAME,  OBJECT_FULL_NAME,  CHAIRMAN,     CONTACT_MAN, "
        + " COMPANY_TEL_NO, COMPANY_FAX_NO,     INVOICE_ADDR,      MAIL_ADDR,    OBJECT_TYPE, " + " LAST_USER,      LAST_YMD,           OBJECT_KIND,       OBJECT_ID,    EMAIL,"
        + " VOUCHER_KIND,   BANK_CD1,           BANK_NO1,          CONTACT_TEL_NO)" + " VALUES( '" + arrayFieldValue[0] + "', " + " '" + arrayFieldValue[1] + "', " + " '"
        + arrayFieldValue[2] + "', " + " '" + arrayFieldValue[3] + "', " + " '" + arrayFieldValue[4] + "', " + " '" + arrayFieldValue[5] + "', " + " '" + arrayFieldValue[6] + "', "
        + " '" + arrayFieldValue[7] + "', " + " '" + arrayFieldValue[8] + "', " + " '" + arrayFieldValue[9] + "', " + " '" + arrayFieldValue[10] + "', " + " '"
        + arrayFieldValue[11] + "', " + " '" + arrayFieldValue[12] + "', " + " '" + arrayFieldValue[13] + "', " + " '" + arrayFieldValue[14] + "', " + " '" + arrayFieldValue[15]
        + "', " + " '" + arrayFieldValue[16] + "', " + " '" + arrayFieldValue[17] + "', " + " '" + arrayFieldValue[18] + "') ";
    dbFED1L.execFromPool(stringSql);
    return stringSql;
  }

  // 0 OBJECT_CD 1 OBJECT_SHORT_NAME 2 OBJECT_FULL_NAME 3 CHAIRMAN 4 CONTACT_MAN
  // 5 COMPANY_TEL_NO2 6 COMPANY_FAX_NO2 7 INVOICE_ADDR 8 MAIL_ADDR 9 OBJECT_TYPE
  // 10 LAST_USER 11 LAST_YMD 12 OBJECT_KIND 13 OBJECT_ID 14 EMAIL
  public String doUpdateFED1005(String[] arrayFieldValue) throws Throwable {
    return doUpdateFED1005(arrayFieldValue, dbFED1);
  }

  public String doUpdateFED1005(String[] arrayFieldValue, talk dbFED1L) throws Throwable {
    String stringSql = "";
    //
    for (int intNo = 0; intNo < arrayFieldValue.length; intNo++) {
      arrayFieldValue[intNo] = convert.ToSql(arrayFieldValue[intNo]);
    }
    //
    stringSql = "UPDATE  FED1005  SET  OBJECT_SHORT_NAME  =  '" + arrayFieldValue[1] + "', " + " OBJECT_FULL_NAME   =  '" + arrayFieldValue[2] + "', " + " CHAIRMAN   =  '"
        + arrayFieldValue[3] + "', " + " CONTACT_MAN   =  '" + arrayFieldValue[4] + "', " + " COMPANY_TEL_NO   =  '" + arrayFieldValue[5] + "', " + " COMPANY_FAX_NO   =  '"
        + arrayFieldValue[6] + "', " + " INVOICE_ADDR   =  '" + arrayFieldValue[7] + "', " + " MAIL_ADDR   =  '" + arrayFieldValue[8] + "', " + " OBJECT_TYPE   =  '"
        + arrayFieldValue[9] + "', " + " LAST_USER   =  '" + arrayFieldValue[10] + "', " + " LAST_YMD   =  '" + arrayFieldValue[11] + "', " + " OBJECT_KIND   =  '"
        + arrayFieldValue[12] + "', " + " OBJECT_ID   =  '" + arrayFieldValue[13] + "', " + " EMAIL   =  '" + arrayFieldValue[14] + "', " + " VOUCHER_KIND   =  '"
        + arrayFieldValue[15] + "', " + " BANK_CD1   =  '" + arrayFieldValue[16] + "', " + " BANK_NO1   =  '" + arrayFieldValue[17] + "', " + " CONTACT_TEL_NO   =  '"
        + arrayFieldValue[18] + "' " + " WHERE  OBJECT_CD  =  '" + arrayFieldValue[0] + "' ";
    dbFED1L.execFromPool(stringSql);
    return stringSql;
  }

  public String doDeleteFED1005(String stringObjectCd) throws Throwable {
    String stringSql = "";
    //
    stringSql = "DELETE  FED1005  WHERE  OBJECT_CD  =  '" + stringObjectCd + "' ";
    dbFED1.execFromPool(stringSql);
    return stringSql;
  }

  public void doInsertFED1005A(String stringObjectcd) throws Throwable {
    String stringSql = "";
    String[][] retFED1005A = null;
    //
    stringSql = "SELECT  OBJECT_CD " + " FROM  FED1005A " + " WHERE  OBJECT_CD  =  '" + stringObjectcd + "' ";
    retFED1005A = dbFED1.queryFromPool(stringSql);
    if (retFED1005A.length == 0) {
      stringSql = "INSERT  INTO  FED1005A (OBJECT_KIND,  OBJECT_ID,  OBJECT_CD,  OBJECT_PASSWD) " + " VALUES ( '3', " + " '" + stringObjectcd + "', " + " '" + stringObjectcd
          + "', " + " '1111' )";
      dbFED1.execFromPool(stringSql);
    }
  }

  // 表格 FED1006
  public String getDepartNameFED1006(String stringDepartNo) throws Throwable {
    return getDepartNameFED1006(stringDepartNo, dbFED1);
  }

  public String getDepartNameFED1006(String stringDepartNo, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----getDepartNameFED1006");
    }
    return getDepartNameFED1006(stringDepartNo, dbFED1);
  }

  public String getDepartNameFED1006(String stringDepartNo, talk dbFED1L) throws Throwable {
    String stringSql = "";
    String stringDepartName = "";
    String[][] FED1006 = null;
    //
    stringSql = " SELECT  DEPT_CHINESE_NAME " + " FROM  FED1006 " + " WHERE  DEPT_CD  =  '" + stringDepartNo + "' ";
    FED1006 = dbFED1L.queryFromPool(stringSql);
    if (FED1006.length != 0) {
      stringDepartName = FED1006[0][0].trim();
    }
    return stringDepartName;
  }

  // 表格 FED1011
  // 新增、取得、刪除 傳票流水號
  public String getVoucherFlowNo(String stringStatus, String stringNoteType, String stringKey, String stringFlowNoO) throws Throwable {
    return getVoucherFlowNo(stringStatus, stringNoteType, stringKey, stringFlowNoO, false);
  }

  public String getVoucherFlowNo(String stringStatus, String stringNoteType, String stringKey, String stringFlowNoO, boolean booleanComNoType) throws Throwable {
    String stringFlowNo = "";
    if (booleanComNoType) {
      doErrorEmail("基金會----新增、取得、刪除 傳票流水號  getVoucherFlowNo");
    }
    if ("R".equals(stringStatus)) {
      // 取得傳票流水號 Z 是最大值 U 是正在使用
      String stringStatusCd = "";
      String[][] retFED1011 = null;
      // 0 KEY_CD 1 FLOW_NO 2 STATUS_CD
      retFED1011 = getFED1011(stringNoteType, stringKey, booleanComNoType);
      if (retFED1011.length != 0) {
        stringFlowNo = retFED1011[0][1].trim();
        stringStatusCd = retFED1011[0][2].trim();
        if ("Z".equals(stringStatusCd)) {
          // System.out.println("doUpdateFED1011ForAddFlowNo---------------------") ;
          doUpdateFED1011ForAddFlowNo(stringFlowNo, stringNoteType, stringKey, booleanComNoType);
          // System.out.println("doInsertFED1011---------------------") ;
          doInsertFED1011(stringNoteType, stringKey, stringFlowNo, "U", booleanComNoType);
        } else {
          // System.out.println("doUpdateFED1011ForStatusU---------------------") ;
          doUpdateFED1011ForStatusU(stringNoteType, stringKey, stringFlowNo, booleanComNoType);
        }
      } else {
        stringFlowNo = "0";
        // System.out.println("doInsertFED1011---------------------") ;
        doInsertFED1011(stringNoteType, stringKey, "2", "Z", booleanComNoType);
        // System.out.println("doInsertFED1011---------------------") ;
        doInsertFED1011(stringNoteType, stringKey, "1", "U", booleanComNoType);
        stringFlowNo = "1";
      }
    } else if ("I".equals(stringStatus)) {
      stringFlowNo = "0";
      doInsertFED1011(stringNoteType, stringKey, stringFlowNoO, " ", booleanComNoType);
    } else if ("D".equals(stringStatus)) {
      // 完成傳票流程時，刪除 U
      stringFlowNo = "0";
      // System.out.println("doDeleteFED1011---------------------") ;
      doDeleteFED1011(stringNoteType, stringKey, stringFlowNoO, booleanComNoType);
    } else if ("B".equals(stringStatus)) {
      // 狀態清為 空白
      doUpdateFED1011NoneForStatusU(stringNoteType, stringKey, stringFlowNoO, booleanComNoType);
    }

    return stringFlowNo;
  }

  public String[][] getFED1011(String stringNoteType, String stringKey, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----getFED1011");
    }
    return getFED1011(stringNoteType, stringKey, dbFED1L);
  }

  public String[][] getFED1011(String stringNoteType, String stringKey, talk dbFED1L) throws Throwable {
    String stringSql = "";
    String[][] retFED1011 = null;
    // 0 KEY_CD 1 FLOW_NO 2 STATUS_CD
    stringSql = "SELECT  KEY_CD,  FLOW_NO,  STATUS_CD " + " FROM  FED1011 " + " WHERE  NOTE_TYPE  =  '" + stringNoteType + "' " + " AND  (KEY_CD  =  '" + stringKey + "' "
        + " OR  KEY_CD  =  ' " + stringKey + "' " + " OR  KEY_CD  =  '  " + stringKey + "') " + " AND  (STATUS_CD  =  ' '  OR  STATUS_CD  =  'Z') "
        + " ORDER BY  STATUS_CD,  FLOW_NO ";
    retFED1011 = dbFED1L.queryFromPool(stringSql);
    return retFED1011;
  }

  public void doUpdateFED1011ForAddFlowNo(String stringFlowNo, String stringNoteType, String stringKey, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----doUpdateFED1011ForAddFlowNo");
    }
    doUpdateFED1011ForAddFlowNo(stringFlowNo, stringNoteType, stringKey, dbFED1L);
  }

  public void doUpdateFED1011ForAddFlowNo(String stringFlowNo, String stringNoteType, String stringKey, talk dbFED1L) throws Throwable {
    String stringSql = "";
    //
    stringSql = "UPDATE  FED1011  SET  FLOW_NO  =  " + (Integer.parseInt(stringFlowNo) + 1) + " WHERE  STATUS_CD  =  'Z' " + " AND  NOTE_TYPE  =  '" + stringNoteType + "' "
        + " AND  (KEY_CD  =  '" + stringKey + "' " + " OR  KEY_CD  =  ' " + stringKey + "' " + " OR  KEY_CD  =  '  " + stringKey + "') ";
    dbFED1L.execFromPool(stringSql);
  }

  public void doInsertFED1011(String stringNoteType, String stringKey, String stringFlowNo, String stringStatus, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----doInsertFED1011");
    }
    doInsertFED1011(stringNoteType, stringKey, stringFlowNo, stringStatus, dbFED1L);
  }

  public void doInsertFED1011(String stringNoteType, String stringKey, String stringFlowNo, String stringStatus, talk dbFED1L) throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  FED1011  (NOTE_TYPE, KEY_CD, FLOW_NO, STATUS_CD)" + " VALUES( '" + stringNoteType + "', " + " '" + stringKey + "', " + " " + stringFlowNo + ", " + " '"
        + stringStatus + "') ";
    dbFED1L.execFromPool(stringSql);
  }

  public void doUpdateFED1011ForStatusU(String stringNoteType, String stringKey, String stringFlowNo, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----doUpdateFED1011ForStatusU");
    }
    doUpdateFED1011ForStatusU(stringNoteType, stringKey, stringFlowNo, dbFED1L);
  }

  public void doUpdateFED1011ForStatusU(String stringNoteType, String stringKey, String stringFlowNo, talk dbFED1L) throws Throwable {
    String stringSql = "";
    //
    stringSql = "UPDATE  FED1011  SET  STATUS_CD  =  'U' " + " WHERE  STATUS_CD  =  ' ' " + " AND  NOTE_TYPE  =  '" + stringNoteType + "' " + " AND  (KEY_CD  =  '" + stringKey
        + "' " + " OR  KEY_CD  =  ' " + stringKey + "' " + " OR  KEY_CD  =  '  " + stringKey + "') " + " AND  FLOW_NO  =  " + stringFlowNo;
    dbFED1L.execFromPool(stringSql);
  }

  public void doUpdateFED1011NoneForStatusU(String stringNoteType, String stringKey, String stringFlowNo, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----doUpdateFED1011ForStatusU");
    }
    doUpdateFED1011NoneForStatusU(stringNoteType, stringKey, stringFlowNo, dbFED1L);
  }

  public void doUpdateFED1011NoneForStatusU(String stringNoteType, String stringKey, String stringFlowNo, talk dbFED1L) throws Throwable {
    String stringSql = "";
    //
    stringSql = "UPDATE  FED1011  SET  STATUS_CD  =  ' ' " + " WHERE  STATUS_CD  =  'U' " + " AND  NOTE_TYPE  =  '" + stringNoteType + "' " + " AND  (KEY_CD  =  '" + stringKey
        + "' " + " OR  KEY_CD  =  ' " + stringKey + "' " + " OR  KEY_CD  =  '  " + stringKey + "') " + " AND  FLOW_NO  =  " + stringFlowNo;
    dbFED1L.execFromPool(stringSql);
  }

  public void doDeleteFED1011(String stringNoteType, String stringKey, String stringFlowNo, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----getFED1011");
    }
    doDeleteFED1011(stringNoteType, stringKey, stringFlowNo, dbFED1L);
  }

  public void doDeleteFED1011(String stringNoteType, String stringKey, String stringFlowNo, talk dbFED1L) throws Throwable {
    String stringSql = "";
    //
    stringSql = "DELETE  FED1011 " + " WHERE  STATUS_CD  =  'U' " + " AND  NOTE_TYPE  =  '" + stringNoteType + "' " + " AND  (KEY_CD  =  '" + stringKey + "' "
        + " OR  KEY_CD  =  ' " + stringKey + "' " + " OR  KEY_CD  =  '  " + stringKey + "') " + " AND  FLOW_NO  =  " + stringFlowNo;
    dbFED1L.execFromPool(stringSql);
  }

  // 表格 FED1012
  public String[][] getFED1012(String stringVoucherYMD, String stringVoucherFlowNo, String stringVoucherSeqNo, String stringCompanyCd, String stringKind) throws Throwable {
    return getFED1012(stringVoucherYMD, stringVoucherFlowNo, stringVoucherSeqNo, stringCompanyCd, stringKind, dbFED1);
  }

  public String[][] getFED1012(String stringVoucherYMD, String stringVoucherFlowNo, String stringVoucherSeqNo, String stringCompanyCd, String stringKind, boolean booleanComNoType)
      throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----getFED1012");
    }
    return getFED1012(stringVoucherYMD, stringVoucherFlowNo, stringVoucherSeqNo, stringCompanyCd, stringKind, dbFED1L);
  }

  public String[][] getFED1012(String stringVoucherYMD, String stringVoucherFlowNo, String stringVoucherSeqNo, String stringCompanyCd, String stringKind, talk dbFED1L)
      throws Throwable {
    String stringSql = "";
    String[][] retFED1012 = null;
    // 0 DB_CR_CD 1 ACCT_NO 2 DEPT_CD 3 OBJECT_CD 4 AMT
    // 5 EXCHANG_AMT 6 MONTEARY 7 STATUS_CD 8 DESCRIPTION_1 9 DESCRIPTION_2
    // 10 DESCRIPTION_3 11 DESCRIPTION_4 12 DESCRIPTION_5 13 DESCRIPTION 14
    // LAST_USER
    // 15 LAST_YMD
    stringSql = "SELECT  DB_CR_CD,       ACCT_NO,        DEPT_CD,        OBJECT_CD,       AMT, "
        + " EXCHANG_AMT,    MONTEARY,       STATUS_CD,      DESCRIPTION_1,   DESCRIPTION_2, " + " DESCRIPTION_3,  DESCRIPTION_4,  DESCRIPTION_5,  DESCRIPTION,     LAST_USER, "
        + " LAST_YMD " + " FROM  FED1012 " + " WHERE  VOUCHER_YMD  =  " + stringVoucherYMD + " " + " AND  VOUCHER_FLOW_NO  =  " + stringVoucherFlowNo + " "
        + " AND  VOUCHER_SEQ_NO  =  " + stringVoucherSeqNo + " " + " AND  COMPANY_CD  =  '" + stringCompanyCd + "' " + " AND  KIND  =  '" + stringKind + "' ";
    retFED1012 = dbFED1L.queryFromPool(stringSql);
    return retFED1012;
  }

  public String[][] getRetainFED1012(String stringVoucherYMD, String stringVoucherFlowNo, String stringCompanyCd, String stringKind) throws Throwable {
    String stringSql = "";
    String[][] retFED1012 = null;
    // 0 DB_CR_CD 1 ACCT_NO 2 DEPT_CD 3 OBJECT_CD 4 AMT
    // 5 EXCHANG_AMT 6 MONTEARY 7 STATUS_CD 8 DESCRIPTION_1 9 DESCRIPTION_2
    // 10 DESCRIPTION_3 11 DESCRIPTION_4 12 DESCRIPTION_5 13 DESCRIPTION 14
    // LAST_USER
    // 15 LAST_YMD
    stringSql = "SELECT  COMPANY_CD,     DB_CR_CD,        ACCT_NO,        DEPT_CD,        OBJECT_CD,        "
        + " AMT,            DESCRIPTION_1,   DESCRIPTION_2,  DESCRIPTION_3,  DESCRIPTION_4, " + " DESCRIPTION_5,  DESCRIPTION,  '' " + " FROM  FED1012 "
        + " WHERE  VOUCHER_YMD  =  " + stringVoucherYMD + " " + " AND  VOUCHER_FLOW_NO  =  " + stringVoucherFlowNo + " " + " AND  COMPANY_CD  =  '" + stringCompanyCd + "' "
        + " AND  KIND  =  '" + stringKind + "' " + " ORDER BY  VOUCHER_SEQ_NO ";
    retFED1012 = dbFED1.queryFromPool(stringSql);
    return retFED1012;
  }

  public String[][] getFED1012(String stringVoucherYMD, String stringVoucherFlowNo, String stringCompanyCd, String stringKind) throws Throwable {
    return getFED1012(stringVoucherYMD, stringVoucherFlowNo, stringCompanyCd, stringKind, dbFED1);
  }

  public String[][] getFED1012(String stringVoucherYMD, String stringVoucherFlowNo, String stringCompanyCd, String stringKind, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----getFED1012---2");
    }
    return getFED1012(stringVoucherYMD, stringVoucherFlowNo, stringCompanyCd, stringKind, dbFED1L);
  }

  public String[][] getFED1012(String stringVoucherYMD, String stringVoucherFlowNo, String stringCompanyCd, String stringKind, talk dbFED1L) throws Throwable {
    String stringSql = "";
    String[][] retFED1012 = null;
    // 0 空白(BarCode) 1 (空白)DocNo 2 (空白)RowType 3 RecordNo 4 VOUCHER_YMD
    // 5 VOUCHER_FLOW_NO 6 VOUCHER_SEQ_NO 7 COMPANY_CD 8 KIND 9 DB_CR_CD
    // 10 ACCT_NO 11 DEPT_CD 12 OBJECT_CD 13 AMT 14 EXCHANG_AMT
    // 15 MONTEARY 16 ClaimerMoney 17 STATUS_CD 18 DESCRIPTION_1 19 DESCRIPTION_2
    // 20 DESCRIPTION_3 21 DESCRIPTION_4 22 DESCRIPTION_5 23 DESCRIPTION 24
    // LAST_USER
    // 25 LAST_YMD 26 空白
    stringSql = "SELECT  '',               '',              '',            '',             VOUCHER_YMD, "
        + " VOUCHER_FLOW_NO,  VOUCHER_SEQ_NO,  COMPANY_CD,    KIND,           DB_CR_CD, " + " ACCT_NO,          DEPT_CD,         OBJECT_CD,     AMT,            EXCHANG_AMT, "
        + " MONTEARY,         '',              STATUS_CD,     DESCRIPTION_1,  DESCRIPTION_2, " + " DESCRIPTION_3,    DESCRIPTION_4,   DESCRIPTION_5, DESCRIPTION,    LAST_USER, "
        + " LAST_YMD ,        '' " + " FROM  FED1012 " + " WHERE  VOUCHER_YMD  =  " + stringVoucherYMD + " " + " AND  VOUCHER_FLOW_NO  =  " + stringVoucherFlowNo + " "
        + " AND  COMPANY_CD  =  '" + stringCompanyCd + "' " + " AND  KIND  =  '" + stringKind + "' " + "ORDER BY  VOUCHER_SEQ_NO,  DB_CR_CD";
    retFED1012 = dbFED1L.queryFromPool(stringSql);
    return retFED1012;
  }

  public String[][] getFED1012ForFED1013(String stringVoucherYMD, String stringVoucherFlowNo, String stringCompanyCd, String stringKind, String stringAcctNo) throws Throwable {
    String stringSql = "";
    String[][] retFED1012 = null;
    // 0 空白(BarCode) 1 (空白)DocNo 2 (空白)RowType 3 RecordNo 4 VOUCHER_YMD
    // 5 VOUCHER_FLOW_NO 6 VOUCHER_SEQ_NO 7 COMPANY_CD 8 KIND 9 DB_CR_CD
    // 10 ACCT_NO 11 DEPT_CD 12 OBJECT_CD 13 AMT 14 EXCHANG_AMT
    // 15 MONTEARY 16 ClaimerMoney 17 STATUS_CD 18 DESCRIPTION_1 19 DESCRIPTION_2
    // 20 DESCRIPTION_3 21 DESCRIPTION_4 22 DESCRIPTION_5 23 DESCRIPTION 24
    // LAST_USER
    // 25 LAST_YMD 26 空白
    stringSql = "SELECT  '',                                        '',                                '',                              '',                                J.VOUCHER_YMD, "
        + " J.VOUCHER_FLOW_NO,  J.VOUCHER_SEQ_NO,  J.COMPANY_CD,     J.KIND,            J.DB_CR_CD, "
        + " J.ACCT_NO,          J.DEPT_CD,         J.OBJECT_CD,      J.AMT,             J.EXCHANG_AMT, "
        + " J.MONTEARY,         '',                J.STATUS_CD,      J.DESCRIPTION_1,   J.DESCRIPTION_2, "
        + " J.DESCRIPTION_3,    J.DESCRIPTION_4,   J.DESCRIPTION_5,  J.DESCRIPTION,     J.LAST_USER, " + " J.LAST_YMD ,        '' " + " FROM  FED1013  I,  FED1012  J "
        + " WHERE  I.VOUCHER_YMD      =  J.VOUCHER_YMD " + " AND  I.VOUCHER_FLOW_NO  =  J.VOUCHER_FLOW_NO " + " AND  I.VOUCHER_SEQ_NO   =  J.VOUCHER_SEQ_NO "
        + " AND  I.COMPANY_CD       =  J.COMPANY_CD " + " AND  I.KIND             =  J.KIND " + " AND  J.VOUCHER_YMD  =  " + stringVoucherYMD + " " + " AND  J.VOUCHER_FLOW_NO  =  "
        + stringVoucherFlowNo + " " + " AND  J.COMPANY_CD  =  '" + stringCompanyCd + "' " + " AND  J.KIND  =  '" + stringKind + "' " + " AND  J.ACCT_NO  =  '" + stringAcctNo + "' "
        + "ORDER BY  J.VOUCHER_SEQ_NO,  J.DB_CR_CD ";
    retFED1012 = dbFED1.queryFromPool(stringSql);
    return retFED1012;
  }

  public String getInsertFED1012Sql(String stringVoucherYMD, String stringVoucherFlowNo, String stringVoucherSeqNo, String stringCompanyCd, String stringKind, String stringDBCrCd,
      String stringAcctNo, String stringDeptCd, String stringObjectCd, String stringAmt, String stringExchangAmt, String stringMonteary, String stringStatus,
      String stringDescription1, String stringDescription2, String stringDescription3, String stringDescription4, String stringDescription5, String stringDescription)
      throws Throwable {
    String stringUser = getUser().toUpperCase();
    return getInsertFED1012Sql(stringVoucherYMD, stringVoucherFlowNo, stringVoucherSeqNo, stringCompanyCd, stringKind, stringDBCrCd, stringAcctNo, stringDeptCd, stringObjectCd,
        stringAmt, stringExchangAmt, stringMonteary, stringStatus, stringDescription1, stringDescription2, stringDescription3, stringDescription4, stringDescription5,
        stringDescription, stringUser);
  }

  public String getInsertFED1012Sql(String stringVoucherYMD, String stringVoucherFlowNo, String stringVoucherSeqNo, String stringCompanyCd, String stringKind, String stringDBCrCd,
      String stringAcctNo, String stringDeptCd, String stringObjectCd, String stringAmt, String stringExchangAmt, String stringMonteary, String stringStatus,
      String stringDescription1, String stringDescription2, String stringDescription3, String stringDescription4, String stringDescription5, String stringDescription,
      String stringUser) throws Throwable {
    String stringSql = "";
    String stringToday = getToday("yymmdd");
    //
    if ((new Farglory.util.FargloryUtil()).doParseDouble(stringUser) <= 0) {
      if (stringUser.length() > 1)
        stringUser = stringUser.substring(1, stringUser.length());
    }
    if (stringToday.length() > 6)
      stringToday = stringToday.substring(stringToday.length() - 6, stringToday.length());
    //
    stringSql = "INSERT  FED1012 ( VOUCHER_YMD,               VOUCHER_FLOW_NO,  VOUCHER_SEQ_NO,  COMPANY_CD,    KIND, "
        + " DB_CR_CD,                  ACCT_NO,          DEPT_CD,         OBJECT_CD,     AMT, "
        + " EXCHANG_AMT,               MONTEARY,         STATUS_CD,       DESCRIPTION_1, DESCRIPTION_2, "
        + " DESCRIPTION_3,             DESCRIPTION_4,    DESCRIPTION_5,   DESCRIPTION,   LAST_USER, " + " LAST_YMD ) " + " VALUES(  " + stringVoucherYMD + ", " + " "
        + stringVoucherFlowNo + ", " + " " + stringVoucherSeqNo + ", " + " '" + stringCompanyCd + "', " + " '" + stringKind + "', " + " '" + stringDBCrCd + "', " + " '"
        + stringAcctNo + "', " + " '" + stringDeptCd + "', " + " '" + stringObjectCd + "', " + " $" + stringAmt + ", " + " " + stringExchangAmt + ", " + " $" + stringMonteary
        + ", " + " '" + " " + "', " + " '" + stringDescription1 + "', " + " '" + stringDescription2 + "', " + " '" + stringDescription3 + "', " + " '" + stringDescription4 + "', "
        + " '" + stringDescription5 + "', " + " '" + stringDescription + "', " + " '" + stringUser + "', " + " '" + stringToday + "')";
    return stringSql;
  }

  // 表格 FED1013
  public String getInsertFED1013Sql(String stringVoucherYMD, String stringVoucherFlowNo, String stringVoucherSeqNo, String stringCompanyCd, String stringKind, String stringAcctNo,
      String stringObjectCd, String stringStatusCd, String stringLastWriteOffTotAmt, String stringThisWriteOffTotAmt, String stringUnpostWriteOffTotAmt, String stringWriteOffYM)
      throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  FED1013  (VOUCHER_YMD,             VOUCHER_FLOW_NO,           VOUCHER_SEQ_NO,  " + " COMPANY_CD,              KIND,                      ACCT_NO, "
        + " OBJECT_CD,               STATUS_CD,                 LAST_WRITE_OFF_TOT_AMT, " + " THIS_WRITE_OFF_TOT_AMT,  UNPOST_WRITE_OFF_TOT_AMT,  WRITE_OFF_YM)" + " VALUES(   "
        + stringVoucherYMD + ", " + " " + stringVoucherFlowNo + ", " + " " + stringVoucherSeqNo + ", " + " '" + stringCompanyCd + "', " + " '" + stringKind + "', " + " '"
        + stringAcctNo + "', " + " '" + stringObjectCd + "', " + " '" + stringStatusCd + "', " + " " + stringLastWriteOffTotAmt + ", " + " " + stringThisWriteOffTotAmt + ", " + " "
        + stringUnpostWriteOffTotAmt + ", " + " " + stringWriteOffYM + ") ";
    // dbFED1.execFromPool(stringSql) ;
    return stringSql;
  }

  public String getUpdateFED1013Sql(String stringAMT, String stringVoucherYMD, String stringVoucherFlowNo, String stringVoucherSeqNo, String stringCompanyCd, String stringKind)
      throws Throwable {
    String stringSql = "";
    //
    stringSql = "UPDATE  FED1013 " + " SET  UNPOST_WRITE_OFF_TOT_AMT  =  UNPOST_WRITE_OFF_TOT_AMT  +  $" + stringAMT + " WHERE  VOUCHER_YMD  =  " + doParseInteger(stringVoucherYMD)
        + " " + " AND  VOUCHER_FLOW_NO  =  " + doParseInteger(stringVoucherFlowNo) + " " + " AND  VOUCHER_SEQ_NO  =  " + doParseInteger(stringVoucherSeqNo) + " "
        + " AND  COMPANY_CD  =  '" + stringCompanyCd + "' " + " AND  KIND  =  '" + stringKind + "' ";
    // dbFED1.execFromPool(stringSql) ;
    return stringSql;
  }

  public String[][] getUnpostWriteOffTotAmtForFED1013(String stringVoucherYMD, String stringVoucherFlowNo, String stringVoucherSeqNo, String stringCompanyCd, String stringKind)
      throws Throwable {
    String stringSql = "";
    String[][] retFED1013 = null;
    //
    stringSql = "SELECT  UNPOST_WRITE_OFF_TOT_AMT+LAST_WRITE_OFF_TOT_AMT+THIS_WRITE_OFF_TOT_AMT  " + " FROM  FED1013 " + " WHERE  VOUCHER_YMD  =  "
        + doParseInteger(stringVoucherYMD) + " " + " AND  VOUCHER_FLOW_NO  =  " + doParseInteger(stringVoucherFlowNo) + " " + " AND  VOUCHER_SEQ_NO  =  "
        + doParseInteger(stringVoucherSeqNo) + " " + " AND  COMPANY_CD  =  '" + stringCompanyCd + "' " + " AND  KIND  =  '" + stringKind + "' ";
    retFED1013 = dbFED1.queryFromPool(stringSql);
    return retFED1013;
  }

  public String[][] getCanWriteAmtForFED1013(String stringCompanyCd, String stringSqlAnd) throws Throwable {
    return getCanWriteAmtForFED1013(stringCompanyCd, stringSqlAnd, dbFED1);
  }

  public String[][] getCanWriteAmtForFED1013(String stringCompanyCd, String stringSqlAnd, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----getCanWriteAmtForFED1013");
    }
    return getCanWriteAmtForFED1013(stringCompanyCd, stringSqlAnd, dbFED1L);
  }

  public String[][] getCanWriteAmtForFED1013(String stringCompanyCd, String stringSqlAnd, talk dbFED1L) throws Throwable {
    String stringSql = "";
    String[][] retFED1013 = null;
    //
    if ("".equals(stringCompanyCd) || "".equals(stringSqlAnd))
      return new String[0][0];
    //
    // 0 VOUCHER_YMD 1 VOUCHER_FLOW_NO 2 VOUCHER_SEQ_NO 3 AMT 4 DEPT_CD 5 ACCT_NO
    stringSql = "SELECT  I.VOUCHER_YMD,  I.VOUCHER_FLOW_NO,  I.VOUCHER_SEQ_NO,  J.AMT-(I.LAST_WRITE_OFF_TOT_AMT + I.THIS_WRITE_OFF_TOT_AMT + I.UNPOST_WRITE_OFF_TOT_AMT),  "
        + " J.DEPT_CD,  J.ACCT_NO " + " FROM  FED1013  I,  FED1012  J " + " WHERE  I.COMPANY_CD       =  '" + stringCompanyCd + "' " +
        // " AND I.STATUS_CD = '' " +
        " AND  I.VOUCHER_YMD      =  J.VOUCHER_YMD " + " AND  I.VOUCHER_FLOW_NO  =  J.VOUCHER_FLOW_NO " + " AND  I.VOUCHER_SEQ_NO   =  J.VOUCHER_SEQ_NO "
        + " AND  I.COMPANY_CD       =  J.COMPANY_CD " + " AND  I.KIND  =  J.KIND " + stringSqlAnd;
    retFED1013 = dbFED1L.queryFromPool(stringSql);
    return retFED1013;
  }

  // 表格 FED1014
  public String[][] getFED1014(String stringVoucherYMD, String stringVoucherFlowNo, String stringVoucherSeqNo, String stringCompanyCd, String stringKind) throws Throwable {
    String stringSql = "";
    String[][] retFED1014 = null;
    // 0 WRITE_OFF_VOUCHER_YMD 1 WRITE_OFF_VOUCHER_FLOW_NO 2 WRITE_OFF_SEQ_NO
    stringSql = "SELECT  WRITE_OFF_VOUCHER_YMD,  WRITE_OFF_VOUCHER_FLOW_NO,  WRITE_OFF_SEQ_NO " + " FROM  FED1014 " + " WHERE  VOUCHER_YMD  =  " + stringVoucherYMD + " "
        + " AND  VOUCHER_FLOW_NO  =  " + stringVoucherFlowNo + " " +
        // " AND VOUCHER_SEQ_NO = " + stringVoucherSeqNo + " " +
        " AND  COMPANY_CD  =  '" + stringCompanyCd + "' " + " AND  KIND  =  '" + stringKind + "' ";
    retFED1014 = dbFED1.queryFromPool(stringSql);
    return retFED1014;
  }

  // 表格 FED1014
  public String getInsertFED1014Sql(String stringVoucherYMD, String stringVoucherFlowNo, String stringVoucherSeqNo, String stringCompanyCd, String stringKind,
      String stringWriteOffVoucherYMD, String stringWriteOffVoucherFlow, String stringWriteOffSeqNo, String stringWriteOffAMT, String stringStatusCd) throws Throwable {
    String stringUser = getUser().toUpperCase();
    return getInsertFED1014Sql(stringVoucherYMD, stringVoucherFlowNo, stringVoucherSeqNo, stringCompanyCd, stringKind, stringWriteOffVoucherYMD, stringWriteOffVoucherFlow,
        stringWriteOffSeqNo, stringWriteOffAMT, stringStatusCd, stringUser);
  }

  public String getInsertFED1014Sql(String stringVoucherYMD, String stringVoucherFlowNo, String stringVoucherSeqNo, String stringCompanyCd, String stringKind,
      String stringWriteOffVoucherYMD, String stringWriteOffVoucherFlow, String stringWriteOffSeqNo, String stringWriteOffAMT, String stringStatusCd, String stringUser)
      throws Throwable {
    String stringSql = "";
    String stringToday = getToday("yymmdd");
    stringToday = stringToday.substring(stringToday.length() - 6, stringToday.length());
    if ((new Farglory.util.FargloryUtil()).doParseDouble(stringUser) <= 0) {
      if (stringUser.length() > 1)
        stringUser = stringUser.substring(1, stringUser.length());
    }
    //
    stringSql = "INSERT  FED1014  (VOUCHER_YMD,                VOUCHER_FLOW_NO,    VOUCHER_SEQ_NO, " + " COMPANY_CD,                 KIND,               WRITE_OFF_VOUCHER_YMD, "
        + " WRITE_OFF_VOUCHER_FLOW_NO,  WRITE_OFF_SEQ_NO,   WRITE_OFF_AMT, " + " STATUS_CD,                  LAST_USER,          LAST_YMD)" + " VALUES(  "
        + doParseInteger(stringVoucherYMD) + ", " + " " + doParseInteger(stringVoucherFlowNo) + ", " + " " + doParseInteger(stringVoucherSeqNo) + ", " + " '" + stringCompanyCd
        + "', " + " '" + stringKind + "', " + " " + stringWriteOffVoucherYMD + ", " + " " + stringWriteOffVoucherFlow + ", " + " " + stringWriteOffSeqNo + ", " + " $"
        + stringWriteOffAMT + ", " + " '" + stringStatusCd + "', " + " '" + stringUser + "', " + " '" + stringToday + "')";
    // dbFED1.execFromPool(stringSql) ;
    return stringSql;
  }

  // 表格 FED1019
  // 月結檢核：
  public boolean isFED1019Exist(String stringVoucherYMD, String stringCompanyCD) throws Throwable {
    return isFED1019Exist(stringVoucherYMD, stringCompanyCD, dbFED1);
  }

  public boolean isFED1019Exist(String stringVoucherYMD, String stringCompanyCD, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----isFED1019Exist");
    }
    return isFED1019Exist(stringVoucherYMD, stringCompanyCD, dbFED1);
  }

  public boolean isFED1019Exist(String stringVoucherYMD, String stringCompanyCD, talk dbFED1L) throws Throwable {
    String stringSql = "";
    String stringRocDate = convert.replace(stringVoucherYMD, "/", "");
    String stringYearly = datetime.getYear(stringRocDate);
    String stringMonthly = datetime.getMonth(stringRocDate);
    String[][] retFED1019 = null;
    //
    stringSql = "SELECT  COMPANY_CD " + " FROM  FED1019 " + " WHERE  YEARLY  =  '" + stringYearly + "' " + " AND  MONTHLY  =  " + stringMonthly + " AND  COMPANY_CD  =  '"
        + stringCompanyCD + "' " + " AND  CLOSE_CD  =  'Y' ";
    retFED1019 = dbFED1L.queryFromPool(stringSql);
    if (retFED1019.length != 0) {
      return false;
    }
    return true;
  }

  // 表格 FED1023
  // 公司名稱
  public String getCompanyName(String stringCompanyCd) throws Throwable {
    String stringSql = "";
    String stringCompanyName = "";
    String[][] retFED1023 = null;
    //
    stringSql = " SELECT  COMPANY_NAME " + " FROM  FED1023 " + " WHERE  COMPANY_CD  =  '" + stringCompanyCd + "' ";
    retFED1023 = dbFED1.queryFromPool(stringSql);
    if (retFED1023.length != 0) {
      stringCompanyName = retFED1023[0][0].trim();
    }
    return stringCompanyName;
  }

  // 表格 FE3D70
  public String getFirmNoForComNo(String stringComNo) throws Throwable {
    String stringSql = "";
    String stringFirmNo = "";
    String[][] retFE1023 = null;
    //
    stringSql = " SELECT  OBJECT_ID " + " FROM  FED1023 " + " WHERE  1=1 " + " AND  COMPANY_CD  =  '" + stringComNo + "' ";
    retFE1023 = dbFED1.queryFromPool(stringSql);
    if (retFE1023.length > 0)
      stringFirmNo = retFE1023[0][0].trim();
    return stringFirmNo;
  }

  // 表格 FED1030
  // 判斷帳戶是否存在，存在 true，否則 false
  public boolean isBanKNoExist(String stringBankCd, String stringBankNo, String CompanyCd) throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return isBanKNoExist(stringBankCd, stringBankNo, CompanyCd, exeUtil);
  }

  public boolean isBanKNoExist(String stringBankCd, String stringBankNo, String CompanyCd, FargloryUtil exeUtil) throws Throwable {
    String stringSql = "";
    String strToday = datetime.getToday("yymmdd");
    String[][] retFED1030 = null;
    //
    if ("".equals(CompanyCd))
      return false;
    if ("".equals(stringBankNo))
      return false;
    //
    stringSql = "SELECT  BANK_CD " + " FROM  FED1030 " + " WHERE  1=1 " + " AND  BANK_NO  =  '" + stringBankNo + "' " + " AND  COMPANY_CD  =  '" + CompanyCd + "' "
        + " AND  (ISNULL(STOP_DATE,'')=''  OR  STOP_DATE  >= '" + strToday + "') ";
    if (!"".equals(stringBankCd))
      stringSql += " AND  BANK_CD  =  '" + stringBankCd + "' ";
    retFED1030 = dbFED1.queryFromPool(stringSql);
    if (retFED1030.length == 0) {
      return false;
    }
    return true;
  }

  public String getBankCdForFED1030(String stringBankNo, String stringCompanyCd) throws Throwable {
    return getBankCdForFED1030(stringBankNo, stringCompanyCd, dbFED1);
  }

  public String getBankCdForFED1030(String stringBankNo, String stringCompanyCd, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----getBankCdForFED1030");
    }
    return getBankCdForFED1030(stringBankNo, stringCompanyCd, dbFED1L);
  }

  public String getBankCdForFED1030(String stringBankNo, String stringCompanyCd, talk dbFED1L) throws Throwable {
    FargloryUtil exeUtil = new FargloryUtil();
    return getBankCdForFED1030(stringBankNo, stringCompanyCd, exeUtil, dbFED1L);
  }

  public String getBankCdForFED1030(String stringBankNo, String stringCompanyCd, FargloryUtil exeUtil, talk dbFED1L) throws Throwable {
    String stringSql = "";
    String stringBankCd = "";
    String strToday = datetime.getToday("yymmdd");
    String[][] retFED1030 = null;
    //
    stringSql = "SELECT  BANK_CD " + " FROM  FED1030 " + " WHERE  BANK_NO  =  '" + stringBankNo + "' " + " AND  COMPANY_CD  =  '" + stringCompanyCd + "' "
        + " AND  (ISNULL(STOP_DATE,'')=''  OR  STOP_DATE  >= '" + strToday + "') ";
    retFED1030 = dbFED1L.queryFromPool(stringSql);
    if (retFED1030.length != 0) {
      stringBankCd = retFED1030[0][0].trim();
    }
    return stringBankCd;
  }

  // 表格 FED1043
  // 日結檢核
  public boolean isFED1043Exist(String stringVoucherYMD, String stringCompanyCD) throws Throwable {
    return isFED1043Exist(stringVoucherYMD, stringCompanyCD, dbFED1);
  }

  public boolean isFED1043Exist(String stringVoucherYMD, String stringCompanyCD, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----isFED1043Exist");
    }
    return isFED1043Exist(stringVoucherYMD, stringCompanyCD, dbFED1);
  }

  public boolean isFED1043Exist(String stringVoucherYMD, String stringCompanyCD, talk dbFED1L) throws Throwable {
    String stringSql = "";
    String[][] retFED1043 = null;
    //
    stringSql = " SELECT  * " + " FROM  FED1043 " + " WHERE  VOUCHER_YMD  =  " + stringVoucherYMD + " AND  COMPANY_CD  =  '" + stringCompanyCD + "' " + " AND  CLOSE_CD  =  'Y' ";
    retFED1043 = dbFED1L.queryFromPool(stringSql);
    if (retFED1043.length != 0) {
      return false;
    }
    return true;
  }

  // 表格 FED1047(問題廠商檔)
  public boolean isExistForFED1047(String stringFactoryNo) throws Throwable {
    return isExistForFED1047(stringFactoryNo, dbFED1);
  }

  public boolean isExistForFED1047(String stringFactoryNo, boolean booleanType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----isExistForFED1047");
    }
    return isExistForFED1047(stringFactoryNo, dbFED1L);
  }

  public boolean isExistForFED1047(String stringFactoryNo, talk dbFED1L) throws Throwable {
    String stringSql = "";
    String[][] retFED1047 = null;
    //
    stringSql = " SELECT  OBJECT_CD " + " FROM  FED1047 " + " WHERE  OBJECT_CD  =  '" + stringFactoryNo + "' ";
    retFED1047 = dbFED1L.queryFromPool(stringSql);
    if (retFED1047.length != 0) {
      return true;
    }
    return false;
  }

  // 表格 FED1073(暫不匯款檔)
  public boolean isExistForFED1073(String stringFactoryNo) throws Throwable {
    return isExistForFED1073(stringFactoryNo, dbFED1);
  }

  public boolean isExistForFED1073(String stringFactoryNo, boolean booleanComNoType) throws Throwable {
    talk dbFED1L = dbFED1;
    if (booleanComNoType) {
      // 基金會
      dbFED1L = dbFED1;
      doErrorEmail("基金會----isExistForFED1073");
    }
    return isExistForFED1073(stringFactoryNo, dbFED1L);
  }

  public boolean isExistForFED1073(String stringFactoryNo, talk dbFED1L) throws Throwable {
    String stringSql = "";
    String[][] retFED1073 = null;
    //
    stringSql = " SELECT  OBJECT_CD " + " FROM  FED1073 " + " WHERE  OBJECT_CD  =  '" + stringFactoryNo + "' ";
    retFED1073 = dbFED1L.queryFromPool(stringSql);
    if (retFED1073.length != 0) {
      return true;
    }
    return false;
  }

  // 表格 FED1070
  public String[][] getBankCD(String stringBankName, String stringSqlAnd) throws Throwable {
    String stringSql = "";
    String stringBankCd = "";
    String[][] retFED1070 = null;
    //
    stringSql = "SELECT  BANK_CD  " + " FROM  FED1070 " + " WHERE  1=1 ";
    if (!"".equals(stringBankName))
      stringSql += " AND  BANK_NAME  LIKE  '%" + stringBankName + "%' ";
    if ("".equals(stringSqlAnd)) {
      stringSql += stringSqlAnd;
    } else {
      stringSql += " ORDER BY BANK_CD ";
    }
    retFED1070 = dbFED1.queryFromPool(stringSql);
    return retFED1070;
  }

  public String getBankName(String stringBankCd) throws Throwable {
    String stringSql = "";
    String stringBankName = "";
    String[][] retFED1070 = null;
    //
    if ("".equals(stringBankCd))
      return stringBankName;
    //
    stringSql = "SELECT  BANK_NAME  " + " FROM  FED1070 " + " WHERE  BANK_CD  =  '" + stringBankCd + "' ";
    retFED1070 = dbFED1.queryFromPool(stringSql);
    if (retFED1070.length > 0)
      stringBankName = retFED1070[0][0].trim();
    return stringBankName;
  }

  // 資料庫 Sale
  public String[][] getTableDataSale(String stringSql) throws Throwable {
    String[][] retTableData = new String[0][0];
    if (!"".equals(stringSql))
      retTableData = dbSale.queryFromPool(stringSql);
    return retTableData;
  }

  public String getNameUnionSale(String stringFieldName, String stringTableName, String stringSqlAnd, Hashtable hashtableAnd, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.getNameUnion(stringFieldName, stringTableName, stringSqlAnd, hashtableAnd, dbSale);
  }

  public Vector getQueryDataHashtableSale(String stringTableName, Hashtable hashtableAnd, String stringSqlAnd, Vector vectorColumnName, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.getQueryDataHashtable(stringTableName, hashtableAnd, stringSqlAnd, vectorColumnName, dbSale);
  }

  public String doInsertDBSale(String stringTableName, Hashtable hashtableData, boolean booleanDB, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.doInsertDB(stringTableName, hashtableData, booleanDB, dbSale);
  }

  public String doUpdateDBSale(String stringTableName, String stringSqlAnd, Hashtable hashtableData, Hashtable hashtableAnd, boolean booleanDB, FargloryUtil exeUtil)
      throws Throwable {
    return exeUtil.doUpdateDB(stringTableName, stringSqlAnd, hashtableData, hashtableAnd, booleanDB, dbSale);
  }

  public String doDeleteDBSale(String stringTableName, Hashtable hashtableAnd, String stringSqlAnd, boolean booleanDB, FargloryUtil exeUtil) throws Throwable {
    return exeUtil.doDeleteDB(stringTableName, hashtableAnd, stringSqlAnd, booleanDB, dbSale);
  }

  // 表格 A_Group
  // 案別存在，不存在 false，存在 true。
  public boolean isExistProjectID1Check(String stringProjectID1) throws Throwable {
    String stringSql = "";
    String[][] retAGroup = null;
    //
    stringSql = "SELECT  ProjectID " + " FROM  A_Group " + " WHERE  ProjectID1  =  '" + stringProjectID1 + "' ";
    retAGroup = dbSale.queryFromPool(stringSql);
    if (retAGroup.length == 0)
      return false;
    return true;
  }

  // 案別存在，不存在 false，存在 true。
  public boolean isExistProjectIDCheck(String stringProjectID, String stringProjectID1) throws Throwable {
    String stringSql = "";
    String[][] retAGroup = null;
    //
    stringSql = "SELECT  ProjectID " + " FROM  A_Group " + " WHERE  ProjectID  =  '" + stringProjectID + "' " + " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    retAGroup = dbSale.queryFromPool(stringSql);
    if (retAGroup.length == 0)
      return false;
    return true;
  }

  public String getProjectIDForAGroup(String stringProjectID1) throws Throwable {
    String stringSql = "";
    String stringProjectID = "";
    String[][] retAGroup = null;
    //
    stringSql = "SELECT  ProjectID " + " FROM  A_Group " + " WHERE  ProjectID1  =  '" + stringProjectID1 + "' " + " ORDER BY  ProjectID ";
    retAGroup = dbSale.queryFromPool(stringSql);
    if (retAGroup.length != 0) {
      stringProjectID = retAGroup[0][0].trim();
    }
    return stringProjectID;
  }

  public String[][] getAGroup(String stringProjectID) throws Throwable {
    String stringSql = "";
    String[][] retAGroup = null;
    //
    stringSql = "SELECT  ProjectID1 " + " FROM  A_Group " + " WHERE  ProjectID  =  '" + stringProjectID + "' " + " ORDER BY  ProjectID1 ";
    retAGroup = dbSale.queryFromPool(stringSql);
    return retAGroup;
  }

  // 表格 A_Project
  public String getProjectName(String stringProjectID) throws Throwable {
    String stringSql = "";
    String stringProjectName = "";
    String[][] retAProject = null;
    //
    stringSql = " SELECT  ProjectName " + " FROM  A_Project " + " WHERE  ProjectID  =  '" + stringProjectID + "' ";
    retAProject = dbSale.queryFromPool(stringSql);
    if (retAProject.length != 0) {
      stringProjectName = retAProject[0][0].trim();
    }
    return stringProjectName;
  }

  public double getTotMoneyUnion(String stringComNo, String stringProjectID, String stringFunctionType, FargloryUtil exeUtil) throws Throwable {
    return getTotMoneyUnion(stringComNo, stringProjectID, stringFunctionType, false, exeUtil);
  }

  public double getTotMoneyUnion(String stringComNo, String stringProjectID, String stringFunctionType, boolean booleanNew, FargloryUtil exeUtil) throws Throwable {
    Hashtable hashtableAnd = new Hashtable();
    String stringTotalSaleMoney = "";
    String stringSql = "";
    String[][] retDoc7M0204 = null;
    double doubleTotalSaleMoney = 0;
    // 1. 判斷該案別-公司是否存在 案別-公司-總銷金額設定(Doc7M0204)
    // 1. 存在
    stringSql = " SELECT  SUM(TotalSaleMoney  -  SaleMoney) " + " FROM  Doc7M0204 " + " WHERE  ComNo  =  '" + stringComNo + "' " + " AND  ProjectID1  =  '" + stringProjectID
        + "' ";
    retDoc7M0204 = dbDoc.queryFromPool(stringSql);
    doubleTotalSaleMoney += exeUtil.doParseDouble(retDoc7M0204[0][0].trim());
    stringSql = " SELECT  SUM(SaleMoney) " + " FROM  Doc7M0204 " + " WHERE  SaleComNo  =  '" + stringComNo + "' " + " AND  ProjectID1  =  '" + stringProjectID + "' ";
    retDoc7M0204 = dbDoc.queryFromPool(stringSql);
    doubleTotalSaleMoney += exeUtil.doParseDouble(retDoc7M0204[0][0].trim());
    //
    if (doubleTotalSaleMoney > 0)
      return doubleTotalSaleMoney;
    if (booleanNew)
      return doubleTotalSaleMoney;
    // 1. 不存在
    // 2. 判斷該案別是否存在 案別-公司-總銷金額設定(Doc7M0204)
    // 2. 存在
    hashtableAnd.put("ProjectID1", stringProjectID);
    stringTotalSaleMoney = exeUtil.getNameUnion("TotalSaleMoney", "Doc7M0204", "", hashtableAnd, dbDoc);
    doubleTotalSaleMoney = exeUtil.doParseDouble(stringTotalSaleMoney);
    if (doubleTotalSaleMoney > 0)
      return 0;
    // 2. 不存在
    stringTotalSaleMoney = getTotMoney(stringProjectID);
    doubleTotalSaleMoney = exeUtil.doParseDouble(stringTotalSaleMoney) * 10000;
    return doubleTotalSaleMoney;
  }

  public String getTotMoney(String stringProjectID) throws Throwable {
    String stringSql = "";
    String stringTotMoney = "0";
    String[][] retAProject = null;
    //
    stringSql = " SELECT  TotMoney " + " FROM  A_Project " + " WHERE  ProjectID  =  '" + stringProjectID + "' ";
    retAProject = dbSale.queryFromPool(stringSql);
    if (retAProject.length > 0)
      stringTotMoney = retAProject[0][0].trim();
    return stringTotMoney;
  }

  public Hashtable getAProject() throws Throwable {
    String stringSql = "";
    String stringProject = "";
    String stringDepart = "";
    String[][] retAProject = null;
    Hashtable hashtableProjectID = new Hashtable();
    //
    stringSql = " SELECT  ProjectID,  Depart " + " FROM  A_Project ";
    retAProject = dbSale.queryFromPool(stringSql);
    for (int intNo = 0; intNo < retAProject.length; intNo++) {
      stringProject = retAProject[intNo][0].trim();
      stringDepart = retAProject[intNo][1].trim();
      hashtableProjectID.put(stringProject, stringDepart);
    }
    return hashtableProjectID;
  }

  // 請購無內業 I，請管有全部 空字串
  public String[][] getProjectID(String stringType) throws Throwable {
    String stringSql = "";
    String[][] retUsersRight = null;
    // 載入使用者原本之權限
    if (!"".equals(stringType)) {
      stringSql = "SELECT  'N',   'I',  '0333' AS ProjectID  UNION " + "SELECT  'N',   'I',  '0339' AS ProjectID  UNION " + "SELECT  'N',   'I',  '0338' AS ProjectID  UNION "
          + "SELECT  'N',   'I',  '0331' AS ProjectID  UNION " + "SELECT  'N',   'I',  '0336' AS ProjectID  UNION " + "SELECT  'N',   'I',  '023' AS ProjectID   UNION "
          + "SELECT  'N',   'I',  '022' AS ProjectID   UNION " + "SELECT  'N',   'I',  '033FG' AS ProjectID   UNION " + "SELECT  'N',   'I',  '033CRM' AS ProjectID   UNION "
          + "SELECT  'N',   'I',  '033VIP' AS ProjectID   UNION ";
    }
    stringSql += "SELECT  'N'," + " 'O', " + " ProjectID " + " FROM A_Project " + " WHERE ProjectID IN ( SELECT DISTINCT ProjectID1 " + " FROM A_GROUP" + ")"
        + " AND  ProjectID  <>  'A' " + " ORDER BY ProjectID ";
    retUsersRight = dbSale.queryFromPool(stringSql);
    return retUsersRight;
  }

  // 表格 A_Sale
  // [案別][棟樓別]存在，不存在 false，存在 true。
  public boolean isExistProjectID1PositionCheck(String stringProjectID1, String stringPosition) throws Throwable {
    String stringSql = "";
    String[][] retASale = null;
    //
    stringSql = "SELECT  ID1 " + " FROM  A_Sale " + " WHERE  ProjectID1  =  '" + stringProjectID1 + "' " + " AND  (Position  =  '" + stringPosition + "'  OR "
        + " PositionRent  =  '" + stringPosition + "'  OR " + " Car  =  '" + stringPosition + "'  OR " + " CarRent  =  '" + stringPosition + "')";
    retASale = dbSale.queryFromPool(stringSql);
    if (retASale.length == 0)
      return false;
    return true;
  }

  public double getActualSaleMoney(String stringProjectID1, String stringOrderDate) throws Throwable {
    String stringSql = "";
    String stringDealMoneySUM = "0";
    String[][] retASale = null;
    //
    stringSql = " SELECT  SUM(DealMoney) " + " FROM  A_Sale " + " WHERE  ProjectID1  =  '" + stringProjectID1 + "' " + " AND  OrderDate  <=  '" + stringOrderDate + "' ";
    retASale = dbSale.queryFromPool(stringSql);
    if (retASale.length > 0)
      stringDealMoneySUM = retASale[0][0].trim();
    return doParseDouble(stringDealMoneySUM);
  }

  // 表格 內業 Z_CiReaMM
  public String getMaxIDForCiReaMM() throws Throwable {
    String stringSql = "";
    String stringID1 = "1";
    String[][] retCiReaMM = null;
    double doubleID1 = 0;
    //
    stringSql = "SELECT  MAX(ID1) + 1 FROM  Z_CiReaMM ";
    retCiReaMM = dbSale.queryFromPool(stringSql);
    if (retCiReaMM.length != 0)
      doubleID1 = doParseDouble(retCiReaMM[0][0].trim());
    if (doubleID1 != 0)
      stringID1 = convert.FourToFive("" + doubleID1, 0);
    return stringID1;
  }

  public String doInsertCiReaMM(String stringID1, String stringYYMM, String stringDepart, String stringCostID, String stringRealMoney, String stringBarCode) throws Throwable {
    return doInsertCiReaMM(stringID1, stringYYMM, stringDepart, stringCostID, stringRealMoney, stringBarCode, "");
  }

  public String doInsertCiReaMM(String stringID1, String stringYYMM, String stringDepart, String stringCostID, String stringRealMoney, String stringBarCode, String stringDepart1)
      throws Throwable {
    String stringSql = "";
    //
    stringSql = "INSERT  Z_CiReaMM (YYMM,  Depart,  CostID,  RealMoney,  BarCode,  Depart1) " + " VALUES( '" + stringYYMM + "', " + " " + stringDepart + ", " + " '" + stringCostID
        + "', " + " " + stringRealMoney + ", " + " '" + stringBarCode + "', " + " '" + stringDepart1 + "') ";

    dbSale.execFromPool(stringSql);
    return stringSql;
  }

  public String doDeleteCiReaMM(String stringBarCode) throws Throwable {
    //
    String stringSql = " DELETE  Z_CiReaMM " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  ISNULL(Transfer,'')  NOT LIKE  '請款-案別分攤修正%' ";
    dbSale.execFromPool(stringSql);
    return stringSql;
  }

  // 表格 Z_CoReaMM
  public String getMaxIDForCoReaMM() throws Throwable {
    String stringSql = "";
    String stringID1 = "1";
    String[][] retCoReaMM = null;
    double doubleID1 = 0;
    //
    stringSql = " SELECT  MAX(ID1) + 1 FROM  Z_CoReaMM ";
    retCoReaMM = dbSale.queryFromPool(stringSql);
    if (retCoReaMM.length != 0)
      doubleID1 = doParseDouble(retCoReaMM[0][0].trim());
    if (doubleID1 != 0)
      stringID1 = convert.FourToFive("" + doubleID1, 0);
    return stringID1;
  }

  public String doInsertCoReaMM(String stringID1, String stringYYMM, String stringProjectID, String stringProjectID1, String stringDataDay, String stringCostID,
      String stringCostName, String stringRealMoney, String stringRemark, String stringBarCode, String stringComNo, String stringCostID1, String stringCostName1) throws Throwable {
    return doInsertCoReaMM(stringID1, stringYYMM, stringProjectID, stringProjectID1, stringDataDay, stringCostID, stringCostName, stringRealMoney, stringRemark, stringBarCode,
        stringComNo, stringCostID1, stringCostName1, "");
  }

  public String doInsertCoReaMM(String stringID1, String stringYYMM, String stringProjectID, String stringProjectID1, String stringDataDay, String stringCostID,
      String stringCostName, String stringRealMoney, String stringRemark, String stringBarCode, String stringComNo, String stringCostID1, String stringCostName1,
      String stringAgencyProjectID1) throws Throwable {
    String stringSql = "";
    //
    if ("Z6".equals(stringComNo))
      stringComNo = "06";
    if ("ZA".equals(stringComNo))
      stringComNo = "Z7";
    if ("20".equals(stringComNo))
      stringComNo = "2O";
    if ("75".equals(stringComNo))
      stringComNo = "74";
    if ("AA".equals(stringComNo))
      stringComNo = "20";
    if ("CS".equals(stringComNo))
      stringComNo = "20";
    stringSql = "INSERT  Z_CoReaMM (YYMM,     Depart,      ProjectID,     ProjectID1, " + " DataDay,  CostID,      CostName,      RealMoney,  Remark, "
        + " BarCode,  ComNo,       CostID1,       CostName1,  AgencyProjectID1) " + " VALUES( '" + stringYYMM + "', " + " 0 , " + " '" + stringProjectID + "', " + " '"
        + stringProjectID1 + "', " + " '" + stringDataDay + "', " + " '" + stringCostID + "', " + " '" + stringCostName + "', " + "  " + stringRealMoney + ", " + " '"
        + stringRemark + "', " + " '" + stringBarCode + "', " + " '" + stringComNo + "', " + " '" + stringCostID1 + "', " + " '" + stringCostName1 + "', " + " '"
        + stringAgencyProjectID1 + "') ";
    dbSale.execFromPool(stringSql);
    return stringSql;
  }

  public String doDeleteCoReaMM(String stringBarCode) throws Throwable {
    //
    String stringSql = " DELETE  Z_CoReaMM " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " AND  ISNULL(Transfer,'')  NOT LIKE  '請款-案別分攤修正%' ";
    dbSale.execFromPool(stringSql);
    return stringSql;
  }

  public double getRealMoneyBudgetIDHand(String stringProjectID1, String stringBudgetID) throws Throwable {
    return getRealMoneyBudgetIDHand("Z6", stringProjectID1, stringBudgetID);
  }

  public double getRealMoneyBudgetIDHand(String stringComNo, String stringProjectID1, String stringBudgetID) throws Throwable {
    String stringSql = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String stringSqlAndBudget = "";
    Vector vectorCostID = new Vector();
    String[][] retCostIDForBudget = getDoc7M011(stringComNo, stringBudgetID, "", "");
    //
    if (retCostIDForBudget.length == 0)
      return 0;
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    for (int intNo = 0; intNo < retCostIDForBudget.length; intNo++) {
      stringCostID = retCostIDForBudget[intNo][1].trim();
      // stringCostID1 = retCostIDForBudget[intNo][2].trim() ;
      //
      if (vectorCostID.indexOf(stringCostID) != -1)
        continue;
      //
      if (!"".equals(stringSqlAndBudget))
        stringSqlAndBudget += ",";
      stringSqlAndBudget += " '" + stringCostID + stringCostID1 + "' ";
      vectorCostID.add(stringCostID);
    }
    // 預算
    stringSql += "SELECT  SUM(RealMoney)*10000 " + " FROM  Z_CoReaMM " + " WHERE  1=1 " +
    // " AND RTRIM(CostID)+RTRIM(CostID1) <> '00' " +
        " AND  (ISNULL(BarCode,  '')  =  ''  OR  ISNULL(Transfer,'')  = '公文追蹤') ";
    // " AND ISNULL(ComNo, '') IN ('', '06') " ;
    if (!"".equals(stringSqlAndBudget))
      stringSql += " AND  RTRIM(CostID)  IN  (" + stringSqlAndBudget + ") ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    String[][] retTableData = dbSale.queryFromPool(stringSql);
    // System.out.println("手動getRealMoneyBudgetIDHand----["+retTableData[0][0]+"]")
    // ;
    return doParseDouble(retTableData[0][0]);
  }

  public double getRealMoneyProjectIDHand(String stringProjectID1, String stringFunctionType) throws Throwable {
    return getRealMoneyProjectIDHand(stringProjectID1, stringFunctionType, "");
  }

  public double getRealMoneyProjectIDHand(String stringProjectID1, String stringFunctionType, String stringStageDateEnd) throws Throwable {
    return getRealMoneyProjectIDHand("Z6", stringProjectID1, stringFunctionType, stringStageDateEnd);
  }

  public double getRealMoneyProjectIDHand(String stringComNo, String stringProjectID1, String stringFunctionType, String stringStageDateEnd) throws Throwable {
    String stringSql = "";
    String stringCostID = "";
    String stringCostID1 = "";
    String stringSqlAndProject = "";
    Vector vectorCostID = new Vector();
    String[][] retCostIDForProject = getDoc7M011(stringFunctionType);
    // 0 BudgetID 1 CostID 2 CostID1 3 Description
    for (int intNo = 0; intNo < retCostIDForProject.length; intNo++) {
      stringCostID = retCostIDForProject[intNo][1].trim();
      // stringCostID1 = retCostIDForProject[intNo][2].trim() ;
      //
      if (vectorCostID.indexOf(stringCostID) != -1)
        continue;
      //
      if (!"".equals(stringSqlAndProject))
        stringSqlAndProject += ",";
      stringSqlAndProject += " '" + stringCostID + stringCostID1 + "' ";
      vectorCostID.add(stringCostID);
    }
    // 手動(總案)
    stringSql += "SELECT  SUM(RealMoney)*10000 " + " FROM  Z_CoReaMM " + " WHERE  1=1 " +
    // " WHERE RTRIM(CostID)+RTRIM(CostID1) <> '001' " +
        " AND  (ISNULL(BarCode,  '')  =  ''  OR  ISNULL(Transfer,'')  = '公文追蹤') " +

        " AND  RTRIM(CostID) IN  (" + stringSqlAndProject + ") ";
    if (!"".equals(stringProjectID1))
      stringSql += " AND  ProjectID1  =  '" + stringProjectID1 + "' ";
    if (!"".equals(stringStageDateEnd))
      stringSql += " AND  YYMM  <=  '" + stringStageDateEnd + "' ";
    if (!"".equals(stringComNo)) {
      if ("06".equals(stringComNo)) {
        stringSql += " AND  ISNULL(ComNo,  '')  IN  ('',  '06') ";
      } else {
        stringSql += " AND  ISNULL(ComNo,  '')  =  '" + stringComNo + "' ";
      }
    }
    String[][] retTableData = dbSale.queryFromPool(stringSql);
    System.out.println("手動getRealMoneyProjectIDHand----[" + retTableData[0][0] + "]");
    return doParseDouble(retTableData[0][0]);
  }

  // 表格 Z_Cost
  public String getCostName(String stringCostID) throws Throwable {
    String stringSql = "";
    String stringCostName = "";
    String[][] retZCost = null;
    //
    stringSql = " SELECT  CostName " + " FROM  Z_Cost " + " WHERE  CostID  =  '" + stringCostID + "' ";
    retZCost = dbSale.queryFromPool(stringSql);
    if (retZCost.length != 0)
      stringCostName = retZCost[0][0].trim();
    return stringCostName;
  }

  // 請款代碼與內外業一致檢核
  public boolean isInOutToCostID(String stringInOut, String stringCostID) throws Throwable {
    String stringSql = "";
    String[][] retZCost = null;
    //
    stringSql = " SELECT  CostName " + " FROM  Z_Cost " + " WHERE  CostID  =  '" + stringCostID + "' ";
    if ("I".equals(stringInOut))
      stringSql += " AND  InS  =  'Y' ";
    else
      stringSql += " AND  OutS  =  'Y' ";
    retZCost = dbSale.queryFromPool(stringSql);
    if (retZCost.length == 0)
      return false;
    return true;
  }

  // 資料庫 Purchase
  /*
   * public Vector getQueryDataHashtablePurchase(String stringTableName, Hashtable
   * hashtableAnd, String stringSqlAnd, Vector vectorColumnName, FargloryUtil
   * exeUtil) throws Throwable { return
   * exeUtil.getQueryDataHashtable(stringTableName, hashtableAnd, stringSqlAnd,
   * vectorColumnName, dbPurchase) ; } public String doInsertDBPurchase(String
   * stringTableName, Hashtable hashtableData, boolean booleanDB, FargloryUtil
   * exeUtil) throws Throwable { return exeUtil.doInsertDB(stringTableName,
   * hashtableData, booleanDB, dbPurchase) ; } public String
   * doUpdateDBPurchase(String stringTableName, String stringSqlAnd, Hashtable
   * hashtableData, Hashtable hashtableAnd, boolean booleanDB, FargloryUtil
   * exeUtil) throws Throwable { return exeUtil.doUpdateDB(stringTableName,
   * stringSqlAnd, hashtableData, hashtableAnd, booleanDB, dbPurchase) ; } public
   * String doDeleteDBPurchase(String stringTableName, Hashtable hashtableAnd,
   * String stringSqlAnd, boolean booleanDB, FargloryUtil exeUtil) throws
   * Throwable { return exeUtil.doDeleteDB(stringTableName, hashtableAnd,
   * stringSqlAnd, booleanDB, dbPurchase) ; } // 表格 Purc1M020 public String[][]
   * getPurc1M020(String stringBigGroupNo) throws Throwable { String stringSql =
   * "" ; String[][] retPurc1M020 = null ; // 0 BigGroupNo 1 BigGroupName
   * stringSql = " SELECT  BigGroupNo,  BigGroupName " + " FROM  Purc1M020 " +
   * " WHERE  1  =  1 " ; if(!"".equals(stringBigGroupNo)) stringSql +=
   * " AND  BigGroupNo  =  '" + stringBigGroupNo + "' " ; retPurc1M020 =
   * dbPurchase.queryFromPool(stringSql) ; return retPurc1M020 ; } // 表格 Purc1M021
   * public String[][] getPurc1M021(String stringBigGroupNo, String
   * stringMediumGroupNo) throws Throwable { String stringSql = "" ; String
   * stringCostName = "" ; String[][] retPurc1M021 = null ; // 0 BigGroupNo 1
   * MediumGroupNo 2 MediumGroupName stringSql =
   * " SELECT  BigGroupNo,  MediumGroupNo,  MediumGroupName " +
   * " FROM  Purc1M021 " + " WHERE  1  =  1 " ; if(!"".equals(stringBigGroupNo))
   * stringSql += " AND  BigGroupNo  =  '" + stringBigGroupNo + "' " ;
   * if(!"".equals(stringMediumGroupNo)) stringSql += " AND  MediumGroupNo  =  '"
   * + stringMediumGroupNo + "' " ; retPurc1M021 =
   * dbPurchase.queryFromPool(stringSql) ; return retPurc1M021 ; } // 表格 Purc1M022
   * public String[][] getPurc1M022(String stringBigGroupNo, String
   * stringMediumGroupNo, String stringSmallGroupNo) throws Throwable { String
   * stringSql = "" ; String stringCostName = "" ; String[][] retPurc1M022 = null
   * ; // 0 BigGroupNo 1 MediumGroupNo 2 SmallGroupNo 3 SmallGroupName stringSql =
   * " SELECT  BigGroupNo,  MediumGroupNo,  SmallGroupNo,  SmallGroupName " +
   * " FROM  Purc1M022 " + " WHERE  1  =  1 " ; if(!"".equals(stringBigGroupNo))
   * stringSql += " AND  BigGroupNo  =  '" + stringBigGroupNo + "' " ;
   * if(!"".equals(stringMediumGroupNo)) stringSql += " AND  MediumGroupNo  =  '"
   * + stringMediumGroupNo + "' " ; if(!"".equals(stringSmallGroupNo)) stringSql
   * += " AND  SmallGroupNo  =  '" + stringSmallGroupNo + "' " ; retPurc1M022 =
   * dbPurchase.queryFromPool(stringSql) ; return retPurc1M022 ; }
   */
  public String getVoucherCheckStatus(String stringBarCode, String stringComNo, String stringPurchaseNo, String stringKindNo, String stringFactoryNo, FargloryUtil exeUtil)
      throws Throwable {
    String stringBarCodeL = "";
    String stringKindNoPurchase = "";
    String stringTable171 = "Doc2M0171";
    String stringTable10 = "Doc2M010";
    String stringTable671 = "Doc6M0171";
    String stringTable60 = "Doc6M010";
    String stringSql = "";
    String stringTYPE = "";
    String stringVoucherYmd = "";
    String stringVoucherFlowNo = "";
    String stringVoucherSeqNo = "";
    String stringSqlAnd = "";
    String stringMessage = "";
    String stringKind = "0";
    String[][] retDoc2M0171 = null;
    String[][] retDoc6M0171 = null;
    String[][] retFED1012 = null;
    String[][] retFED1013 = null;
    Vector vectorBarCode = new Vector();
    Hashtable hashtableTYPE = new Hashtable();
    //
    if ("23".equals(stringKindNo))
      stringKindNoPurchase = "15";
    if ("24".equals(stringKindNo))
      stringKindNoPurchase = "17";
    if ("26".equals(stringKindNo))
      stringKindNoPurchase = "17";
    // 取得 該請購單 前期之請款單
    // 請款金額- 請款
    stringSql = "SELECT  DISTINCT  M17.BarCode " + " FROM  " + stringTable171 + " M17,  " + stringTable10 + "  M10 " + " WHERE  M17.BarCode  =  M10.BarCode "
        + " AND  M10.BarCode  <>  '" + stringBarCode + "' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M17.PurchaseNo  =  '" + stringPurchaseNo + "' "
        + " AND  M10.KindNo  =  '" + stringKindNo + "' " + " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' " + " ORDER BY  M17.BarCode ";
    retDoc2M0171 = getTableDataDoc(stringSql);
    for (int intNo = 0; intNo < retDoc2M0171.length; intNo++) {
      stringBarCodeL = retDoc2M0171[intNo][0].trim();
      //
      if (vectorBarCode.indexOf(stringBarCodeL) == -1)
        vectorBarCode.add(stringBarCodeL);
      //
      hashtableTYPE.put(stringBarCodeL, "A");
    }
    // 請款金額- 借款沖銷
    stringSql = "SELECT  DISTINCT  M10.BarCode " + " FROM  " + stringTable60 + "  M10 " + " WHERE  M10.BarCode  <>  '" + stringBarCode + "' " + " AND  M10.ComNo  =  '"
        + stringComNo + "' " + " AND  M10.KindNo  =  '" + stringKindNo + "' " + " AND  M10.PurchaseNo  =  '" + stringPurchaseNo + "' " + " AND  M10.FactoryNo  =  '"
        + stringFactoryNo + "' " + " ORDER BY  M10.BarCode ";
    retDoc6M0171 = getTableDataDoc(stringSql);
    for (int intNo = 0; intNo < retDoc6M0171.length; intNo++) {
      stringBarCodeL = retDoc6M0171[intNo][0].trim();
      //
      if (vectorBarCode.indexOf(stringBarCodeL) == -1)
        vectorBarCode.add(stringBarCodeL);
      //
      hashtableTYPE.put(stringBarCodeL, "B");
    }
    if (vectorBarCode.size() == 0)
      return "OK";
    //
    String stringMoney = "";
    String stringRecordNo12 = "";
    String stringDeptCd = "";
    String stringTemp = "";
    String[][] retDoc2M014 = null;
    double doubleMoneySumDoc = 0;
    double doubleMoneySumVoucher = 0;
    double doubleTemp = 0;
    double doubleMoneyDoc = 0;
    double doubleMoneyVoucher = 0;
    Hashtable hashtableDeptCd = new Hashtable();
    Hashtable hahstableMoneyDoc = new Hashtable();
    Hashtable hahstableMoneyVoucher = new Hashtable();
    Vector vectorDeptCdDoc = new Vector();
    Vector vectorDeptCdVoucher = new Vector();
    for (int intNo = 0; intNo < vectorBarCode.size(); intNo++) {
      stringBarCodeL = ("" + vectorBarCode.get(intNo));
      stringTYPE = "" + hashtableTYPE.get(stringBarCodeL);
      stringTable171 = ("A".equals(stringTYPE)) ? "Doc2M0171" : "Doc6M0171";
      // 整理 請款單之請購項目 ，結果為 部門->金額
      stringSql = "SELECT  RecordNo12,  SUM(PurchaseNoTaxMoney) " + " FROM  " + stringTable171 + "   " + " WHERE  BarCode  =  '" + stringBarCodeL + "' " + " GROUP BY  RecordNo12 ";
      retDoc6M0171 = getTableDataDoc(stringSql);
      // vectorDeptCdDoc = new Vector() ;
      // hahstableMoneyDoc = new Hashtable() ;
      for (int intNoL = 0; intNoL < retDoc6M0171.length; intNoL++) {
        stringRecordNo12 = retDoc6M0171[intNoL][0].trim();
        stringMoney = retDoc6M0171[intNoL][1].trim();
        doubleMoneySumDoc += exeUtil.doParseDouble(stringMoney);
        stringDeptCd = getDeptCd(stringRecordNo12, stringComNo, stringKindNoPurchase, stringPurchaseNo, stringFactoryNo, exeUtil, hashtableDeptCd);
        //
        if (vectorDeptCdDoc.indexOf(stringDeptCd) == -1)
          vectorDeptCdDoc.add(stringDeptCd);
        //
        doubleTemp = exeUtil.doParseDouble("" + hahstableMoneyDoc.get(stringDeptCd)) + exeUtil.doParseDouble(stringMoney);
        hahstableMoneyDoc.put(stringDeptCd, convert.FourToFive("" + doubleTemp, 0));
      }
      retDoc2M014 = getDoc2M014(stringBarCodeL);
      stringVoucherYmd = exeUtil.getDateConvertRoc(retDoc2M014[0][4].trim()).replaceAll("/", "");
      stringVoucherFlowNo = retDoc2M014[0][5].trim();
      // 整理 請款單之傳票 1252，結果為 部門->可沖銷金額
      if (retDoc2M014.length == 0) {
        return "前期請款單(" + stringBarCodeL + ") 尚未轉傳票。";
      }
      if (!"Z".equals(retDoc2M014[0][17])) {
        return "前期請款單(" + stringBarCodeL + ") 尚未轉傳票。";
      }
      // 由 FED1012 限制 公司、傳票日期、傳票流水號 及 會計科目 1252
      retFED1012 = getFED1012ForFED1013(stringVoucherYmd, stringVoucherFlowNo, stringComNo, stringKind, "1252");
      if (retFED1012.length == 0) {
        return "前期請款單(" + stringBarCode + ") 找不到對應傳票之會計科目 1252 分錄。";
      }
      for (int intNoL = 0; intNoL < retFED1012.length; intNoL++) {
        stringVoucherSeqNo = retFED1012[intNoL][6].trim();
        //
        if (!stringFactoryNo.equals(retFED1012[intNoL][12].trim())) {
          return "前期請款單(" + stringBarCodeL + ") 對應傳票之廠商(" + retFED1012[intNoL][12].trim() + ") 不一致。";
        }
        //
        stringSqlAnd = " (I.VOUCHER_YMD  =  " + stringVoucherYmd + "  AND  " + " I.VOUCHER_FLOW_NO  =  " + stringVoucherFlowNo + "  AND " + " I.VOUCHER_SEQ_NO  =  "
            + stringVoucherSeqNo + " )";
        stringSqlAnd = " AND (" + stringSqlAnd + ")";
        retFED1013 = getCanWriteAmtForFED1013(stringComNo, stringSqlAnd, false);
        //
        stringMoney = retFED1013[0][3].trim();
        stringDeptCd = retFED1013[0][4].trim();
        //
        doubleMoneySumVoucher += exeUtil.doParseDouble(stringMoney);
        //
        if (vectorDeptCdVoucher.indexOf(stringDeptCd) == -1)
          vectorDeptCdVoucher.add(stringDeptCd);
        //
        doubleTemp = exeUtil.doParseDouble("" + hahstableMoneyVoucher.get(stringDeptCd)) + exeUtil.doParseDouble(stringMoney);
        hahstableMoneyVoucher.put(stringDeptCd, convert.FourToFive("" + doubleTemp, 0));
      }
    }
    // 部門一致檢核
    if (vectorDeptCdDoc.size() != vectorDeptCdVoucher.size()) {
      stringDeptCd = "";
      for (int intNo = 0; intNo < vectorDeptCdDoc.size(); intNo++) {
        stringTemp = "" + vectorDeptCdDoc.get(intNo);
        if (!"".equals(stringDeptCd))
          stringDeptCd += "、";
        stringDeptCd += stringTemp;
      }
      stringMessage += "請款部門(" + stringDeptCd + ") ";
      stringDeptCd = "";
      for (int intNo = 0; intNo < vectorDeptCdVoucher.size(); intNo++) {
        stringTemp = "" + vectorDeptCdVoucher.get(intNo);
        if (!"".equals(stringDeptCd))
          stringDeptCd += "、";
        stringDeptCd += stringTemp;
      }
      stringMessage += "與 財會系統部門(" + stringDeptCd + ") 不一致。";
    }
    for (int intNo = 0; intNo < vectorDeptCdVoucher.size(); intNo++) {
      stringTemp = "" + vectorDeptCdDoc.get(intNo);
      if (vectorDeptCdDoc.indexOf(stringTemp) == -1) {
        if (!"".equals(stringMessage))
          stringMessage += "\n";
        stringMessage += "請款系統 缺少部門 " + stringTemp + "。";
      }
    }
    for (int intNo = 0; intNo < vectorDeptCdDoc.size(); intNo++) {
      stringTemp = "" + vectorDeptCdDoc.get(intNo);
      if (vectorDeptCdVoucher.indexOf(stringTemp) == -1) {
        if (!"".equals(stringMessage))
          stringMessage += "\n";
        stringMessage += "財會系統 缺少部門 " + stringTemp + "。";
        continue;
      }
      //
      doubleMoneyDoc = exeUtil.doParseDouble("" + hahstableMoneyDoc.get(stringDeptCd));
      doubleMoneyVoucher = exeUtil.doParseDouble("" + hahstableMoneyVoucher.get(stringDeptCd));
      if (doubleMoneyDoc != doubleMoneyVoucher) {
        stringMessage = "部門 " + stringTemp + " 之請款系統前期合計金額(" + exeUtil.getFormatNum2("" + doubleMoneyDoc) + ") 與 財會系統前期合計金額(" + exeUtil.getFormatNum2("" + doubleMoneyVoucher)
            + ") 不一致。";
      }
    }
    // 總金額一致
    doubleMoneySumDoc = exeUtil.doParseDouble(convert.FourToFive("" + doubleMoneySumDoc, 0));
    doubleMoneySumVoucher = exeUtil.doParseDouble(convert.FourToFive("" + doubleMoneySumVoucher, 0));
    if (doubleMoneySumDoc != doubleMoneySumVoucher) {
      return "請款系統前期合計金額(" + exeUtil.getFormatNum2("" + doubleMoneySumDoc) + ") 與 財會系統前期合計金額(" + exeUtil.getFormatNum2("" + doubleMoneySumVoucher) + ") 不一致。";
    }
    if (!"".equals(stringMessage)) {
      return stringMessage;
    }
    return "OK";
  }

  public String getDeptCd(String stringRecordNo12, String stringComNo, String stringKindNo, String stringPurchaseNo, String stringFactoryNo, FargloryUtil exeUtil,
      Hashtable hashtableDeptCd) throws Throwable {
    String stringDeptCd = "";
    String stringSql = "";
    String stringInOut = "";
    String stringDepartNo = "";
    String stringProjectID = "";
    String stringProjectID1 = "";
    String[] arrayTemp = null;
    String[][] retDoc3M012 = null;
    String[][] retDoc3M0123 = null;
    String[][] retDoc5M0121 = null;
    //
    stringDeptCd = "" + hashtableDeptCd.get(stringRecordNo12);
    if (!"null".equals(stringDeptCd))
      return stringDeptCd;
    //
    if ("23".equals(stringKindNo))
      stringKindNo = "15";
    if ("24".equals(stringKindNo))
      stringKindNo = "17";
    if ("26".equals(stringKindNo))
      stringKindNo = "17";
    // 行銷
    stringSql = " SELECT M12.InOut,  M12.DepartNo,  M12.ProjectID,  M12.ProjectID1 " + " FROM  Doc3M011  M11,  Doc3M0123  M12 " + " WHERE M11.BarCode  =  M12.BarCode "
        + " AND  M11.ComNo  =  '" + stringComNo + "' " + " AND  M11.KindNo  =  '" + stringKindNo + "' " + " AND  M11.DocNo  =  '" + stringPurchaseNo + "' "
        + " AND  M12.RecordNo  =  '" + stringRecordNo12 + "' ";
    retDoc3M0123 = getTableDataDoc(stringSql);
    if (retDoc3M0123.length > 0) {
      stringInOut = retDoc3M0123[0][0].trim();
      stringDepartNo = retDoc3M0123[0][1].trim();
      stringProjectID = retDoc3M0123[0][2].trim();
      stringProjectID1 = retDoc3M0123[0][3].trim();
    } else {
      stringSql = " SELECT  M12.ProjectID1 " + " FROM  Doc3M011  M11,  Doc3M012  M12 " + " WHERE M11.BarCode  =  M12.BarCode " + " AND  M11.ComNo  =  '" + stringComNo + "' "
          + " AND  M11.KindNo  = '" + stringKindNo + "' " + " AND  M11.DocNo  =  '" + stringPurchaseNo + "' " + " AND  M12.RecordNo  =  '" + stringRecordNo12 + "' ";
      retDoc3M012 = getTableDataDoc(stringSql);
      stringProjectID1 = retDoc3M012[0][0].trim();
      stringProjectID1 = convert.StringToken(stringProjectID1, "%-%")[0];
      arrayTemp = convert.StringToken(stringProjectID1, ",");
      if (arrayTemp.length > 4) {
        stringInOut = arrayTemp[0].trim();
        stringDepartNo = arrayTemp[1].trim();
        stringProjectID = arrayTemp[2].trim();
        stringProjectID1 = arrayTemp[3].trim();
      }
    }
    stringDeptCd = getVoucherDepartNo(stringInOut, stringDepartNo, stringProjectID, stringProjectID1, exeUtil);
    hashtableDeptCd.put(stringRecordNo12, stringDeptCd);
    return stringDeptCd;
  }

  public String[][] getAsAssetUnit(String stringComNo, String stringKindNo, String stringPurchaseNo, String stringFactoryNo, FargloryUtil exeUtil, talk dbAsset) throws Throwable {
    String stringSql = "";
    String stringStatus = ""; // A 存在 B 不存在 C 部份存在 部份不存在
    String stringKEY = "";
    String[][] retTableData = null;
    //
    if ("23".equals(stringKindNo))
      stringKindNo = "15";
    if ("24".equals(stringKindNo))
      stringKindNo = "17";
    if ("26".equals(stringKindNo))
      stringKindNo = "17";
    // 請購單 固資系統 存在檢核
    // 0 列帳 Y 1 固資代碼 2. 合計金額 3. 未稅金額 4 Doc3M012之RecordNo
    stringSql = " SELECT  a.ASS_ACCOUNT_ASSET,  (SELECT  FILTER FROM  AS_ASSET_FILTER  WHERE  F3_GUID = a.ASS_FILTER),  (a.ASS_AMOUNT+a.ASS_TAX_ADJ),  a.ASS_AMOUNT_UNTAX,  ASS_PURPOS  "
        + " FROM  AS_RECEIPT b, AS_ASSET a  " + " WHERE  a.RCT_ID = b.RCT_GUID " + " AND  b.RCT_COMP_ID  =  '" + stringComNo + "' " + " AND  b.PUR_ID  =  '" + stringPurchaseNo
        + "' " +
        // " AND = '" +stringKindNo +"' " + // 暫時 KindNo 不作查詢限制
        " AND  b.SUP_ID  =  '" + stringFactoryNo + "' ";
    retTableData = dbAsset.queryFromPool(stringSql);
    //
    String stringRecordNo12 = "";
    String stringFilter = "";
    String[] arrayTemp = null;
    Vector vectorFilter = new Vector();
    Hashtable hashtableFilter = new Hashtable();
    for (int intNo = 0; intNo < retTableData.length; intNo++) {
      stringFilter = retTableData[intNo][1].trim();
      stringRecordNo12 = retTableData[intNo][4].trim();
      //
      if (vectorFilter.indexOf(stringFilter) == -1)
        vectorFilter.add(stringFilter);
      //
      arrayTemp = (String[]) hashtableFilter.get(stringFilter);
      if (arrayTemp == null) {
        hashtableFilter.put(stringFilter, retTableData[intNo]);
        continue;
      }
      arrayTemp[2] = "" + (exeUtil.doParseDouble(arrayTemp[2].trim()) + exeUtil.doParseDouble(retTableData[intNo][2].trim()));
      arrayTemp[2] = convert.FourToFive(arrayTemp[2], 0);
      arrayTemp[3] = "" + (exeUtil.doParseDouble(arrayTemp[3].trim()) + exeUtil.doParseDouble(retTableData[intNo][3].trim()));
      arrayTemp[3] = convert.FourToFive(arrayTemp[3], 0);
    }
    Vector vectorTableData = new Vector();
    for (int intNo = 0; intNo < vectorFilter.size(); intNo++) {
      stringFilter = "" + vectorFilter.get(intNo);
      arrayTemp = (String[]) hashtableFilter.get(stringFilter);
      //
      vectorTableData.add(arrayTemp);
    }
    return (String[][]) vectorTableData.toArray(new String[0][0]);
  }

  public String[][] getAsAssetUnit2(String stringSourceType, String stringComNo, String stringKindNo, String stringPurchaseNo, String stringFactoryNo, FargloryUtil exeUtil,
      talk dbAsset) throws Throwable {
    String stringSql = "";
    String stringStatus = ""; // A 存在 B 不存在 C 部份存在 部份不存在
    String stringKindNoPur = stringKindNo;
    String[][] retTableData = null;
    //
    if ("23".equals(stringKindNoPur))
      stringKindNoPur = "15";
    if ("24".equals(stringKindNoPur))
      stringKindNoPur = "17";
    if ("26".equals(stringKindNoPur))
      stringKindNoPur = "17";
    if ("15".equals(stringKindNo))
      stringKindNo = "23";
    if ("17".equals(stringKindNo))
      stringKindNo = "24";
    // 請購單 固資系統 存在檢核
    // 0 列帳 Y 1 固資代碼 2. 合計金額 3. 未稅金額 4 Doc3M012之RecordNo
    stringSql = " SELECT  a.ASS_ACCOUNT_ASSET,  (SELECT  FILTER FROM  AS_ASSET_FILTER  WHERE  F3_GUID = a.ASS_FILTER),  (a.ASS_AMOUNT+a.ASS_TAX_ADJ),  a.ASS_AMOUNT_UNTAX,  ASS_PURPOS  "
        + " FROM  AS_RECEIPT b, AS_ASSET a  " + " WHERE  a.RCT_ID = b.RCT_GUID " + " AND  b.RCT_COMP_ID  =  '" + stringComNo + "' " + " AND  b.PUR_ID  =  '" + stringPurchaseNo
        + "' " +
        // " AND = '" +stringKindNoPur +"' " + // 暫時 KindNo 不作查詢限制
        " AND  b.SUP_ID  =  '" + stringFactoryNo + "' ";
    retTableData = dbAsset.queryFromPool(stringSql);
    //
    String stringRecordNo12 = "";
    String stringInOut = "";
    String stringFilter = "";
    String stringKEY = "";
    String[] arrayTemp = null;
    Vector vectorKEY = new Vector();
    Hashtable hashtableFilter = new Hashtable();
    for (int intNo = 0; intNo < retTableData.length; intNo++) {
      stringFilter = retTableData[intNo][1].trim();
      stringRecordNo12 = retTableData[intNo][4].trim();
      stringInOut = getInOutVoucher(stringSourceType, stringRecordNo12, stringComNo, stringKindNoPur, stringPurchaseNo, exeUtil);
      stringKEY = stringFilter + "%-%" + stringInOut;
      //
      if (vectorKEY.indexOf(stringKEY) == -1)
        vectorKEY.add(stringKEY);
      //
      arrayTemp = (String[]) hashtableFilter.get(stringKEY);
      if (arrayTemp == null) {
        retTableData[intNo][4] = stringInOut;
        hashtableFilter.put(stringKEY, retTableData[intNo]);
        continue;
      }
      arrayTemp[2] = "" + (exeUtil.doParseDouble(arrayTemp[2].trim()) + exeUtil.doParseDouble(retTableData[intNo][2].trim()));
      arrayTemp[2] = convert.FourToFive(arrayTemp[2], 0);
      arrayTemp[3] = "" + (exeUtil.doParseDouble(arrayTemp[3].trim()) + exeUtil.doParseDouble(retTableData[intNo][3].trim()));
      arrayTemp[3] = convert.FourToFive(arrayTemp[3], 0);
      arrayTemp[4] = stringInOut;
    }
    Vector vectorTableData = new Vector();
    for (int intNo = 0; intNo < vectorKEY.size(); intNo++) {
      stringKEY = "" + vectorKEY.get(intNo);
      arrayTemp = (String[]) hashtableFilter.get(stringKEY);
      //
      vectorTableData.add(arrayTemp);
    }
    return (String[][]) vectorTableData.toArray(new String[0][0]);
  }

  // 轉傳票
  public boolean isApplyTypeDVoucher1(String stringSourceType, String stringComNo, String stringBarCode, String stringKindNo) throws Throwable {
    String stringPurchaseNo = "";
    String stringFactoryNo = "";
    String stringTable17 = "";
    String[][] retDoc2M017 = null;
    String[][] retDoc6M010 = null;
    if ("A".equals(stringSourceType)) {
      stringTable17 = "Doc2M017";
    } else if ("B".equals(stringSourceType)) {
      stringTable17 = "Doc5M027";
    } else if ("C".equals(stringSourceType)) {
      stringTable17 = "Doc6M010";
    }
    if (!"C".equals(stringSourceType)) {
      retDoc2M017 = getDoc2M017Union(stringTable17, stringBarCode);
      if (retDoc2M017.length == 0) {
        System.out.println("找不到 表格 " + stringTable17 + " (" + stringBarCode + ")資料。");
        return false;
      }
      stringPurchaseNo = retDoc2M017[0][8].trim();
      stringFactoryNo = retDoc2M017[0][6].trim();
    } else {
      retDoc6M010 = getDoc6M010Union(stringTable17, stringBarCode);
      if (retDoc6M010.length == 0) {
        System.out.println("找不到 表格 " + stringTable17 + " (" + stringBarCode + ")資料。");
        return false;
      }
      stringPurchaseNo = retDoc6M010[0][6].trim() + retDoc6M010[0][7].trim() + retDoc6M010[0][8].trim();
      stringFactoryNo = retDoc6M010[0][33].trim();
    }
    return isApplyTypeDVoucher2(stringSourceType, stringComNo, stringPurchaseNo, stringKindNo, stringFactoryNo);
  }

  public boolean isApplyTypeDVoucher2(String stringSourceType, String stringComNo, String stringPurchaseNo, String stringKindNo, String stringFactoryNo) throws Throwable {
    String stringSql = "";
    String stringTable11 = "";
    String stringTable12 = "";
    String stringKindNoPurchase = stringKindNo;
    String[][] retDoc2M017 = null;
    String[][] retDoc6M010 = null;
    String[][] retTableData = null;
    //
    if ("23".equals(stringKindNoPurchase))
      stringKindNoPurchase = "15";
    if ("24".equals(stringKindNoPurchase))
      stringKindNoPurchase = "17";
    if ("26".equals(stringKindNoPurchase))
      stringKindNoPurchase = "17";
    //
    if (",A,C,".indexOf("," + stringSourceType + ",") != -1) {
      stringTable11 = "Doc3M011";
      stringTable12 = "Doc3M012";
    } else if (",B,D,".indexOf("," + stringSourceType + ",") != -1) {
      stringTable11 = "Doc5M011";
      stringTable12 = "Doc5M012";
    }
    //
    stringSql = " SELECT  M12.FILTER " + " FROM  " + stringTable12 + " M12,  " + stringTable11 + " M11 " + " WHERE  M11.BarCode  =  M12.BarCode "
        + " AND  ISNULL(FILTER,  '')  <>  ''  " + " AND  M11.ComNo   =  '" + stringComNo + "' " + " AND  M11.KindNo  =  '" + stringKindNoPurchase + "' " + " AND  M11.DocNo   =  '"
        + stringPurchaseNo + "' ";
    retTableData = getTableDataDoc(stringSql);
    if (retTableData.length == 0)
      return false;
    //
    return true;
  }

  // 0 公司 1 類別 2 請購單號 3 廠商
  public String[][] getAsAssetVoucher(String stringSourceType, String stringComNo, String stringKindNo, String stringPurchaseNo, String stringFactoryNo, FargloryUtil exeUtil,
      talk dbAsset) throws Throwable {
    String stringSql = "";
    String[] arrayTemp = null;
    String[][] retTableData = null;
    //
    if ("23".equals(stringKindNo))
      stringKindNo = "15";
    if ("24".equals(stringKindNo))
      stringKindNo = "17";
    // 請購單 固資系統 存在檢核
    // 0 列帳 Y 1 固資代碼 2. 合計金額 3. 未稅金額 4. 部門
    // 5 ASS_ID 6 Doc3M012之RecordNo
    stringSql = " SELECT  a.ASS_ACCOUNT_ASSET,  (SELECT  FILTER FROM  AS_ASSET_FILTER  WHERE  F3_GUID = a.ASS_FILTER),  (a.ASS_AMOUNT+a.ASS_TAX_ADJ),  a.ASS_AMOUNT_UNTAX,  '',  "
        + " a.ASS_ID,              a.ASS_PURPOS " + " FROM  AS_RECEIPT b, AS_ASSET a  " + " WHERE  a.RCT_ID = b.RCT_GUID " + " AND  b.RCT_COMP_ID  =  '" + stringComNo + "' "
        + " AND  b.PUR_ID  =  '" + stringPurchaseNo + "' " +
        // " AND = '" +stringKindNo +"' " + // 暫時 KindNo 不作查詢限制
        " AND  b.SUP_ID  =  '" + stringFactoryNo + "' ";
    retTableData = dbAsset.queryFromPool(stringSql);
    //
    String stringFilter = "";
    String stringAssAccountAsset = "";
    String stringNoTaxMoney = "";
    String stringDeptCd = "";
    String stringAcctNo = "";
    String stringKEY = "";
    String stringAssId = "";
    String stringCostID = "";
    String stringRecordNo12 = "";
    String stringInOut = "";
    String stringTemp = "";
    Vector vectorAsAssetFilter = new Vector();
    Vector vectorColumnName = new Vector();
    Vector vectorKEY = new Vector();
    Hashtable hashtableAsReceipt = new Hashtable();
    Hashtable hashtableTmp = new Hashtable();
    Hashtable hashtableDeptCd = new Hashtable();

    for (int intNo = 0; intNo < retTableData.length; intNo++) {
      stringAssAccountAsset = retTableData[intNo][0].trim();
      stringFilter = retTableData[intNo][1].trim();
      stringNoTaxMoney = retTableData[intNo][3].trim();
      // stringDeptCd = retTableData[intNo][4].trim() ;
      stringAssId = retTableData[intNo][5].trim();
      stringRecordNo12 = retTableData[intNo][6].trim();
      stringInOut = getInOutVoucher(stringSourceType, stringRecordNo12, stringComNo, stringKindNo, stringPurchaseNo, exeUtil);
      // 會計科目
      vectorAsAssetFilter = exeUtil.getQueryDataHashtable("AS_ASSET_FILTER", new Hashtable(), " AND  FILTER  = '" + stringFilter + "' ", vectorColumnName, dbAsset);
      hashtableTmp = (Hashtable) vectorAsAssetFilter.get(0);
      if ("Y".equals(stringAssAccountAsset)) {
        stringAcctNo = "" + hashtableTmp.get("ANMAL_ACNTNO_SET");
      } else {
        stringTemp = "SPEC_ACNTNO_SET_" + stringComNo;
        if ("I".equals(stringInOut))
          stringTemp = "SPEC_ACNTNO_SET_" + stringComNo + "_IN";
        stringAcctNo = "" + hashtableTmp.get(stringTemp);
      }
      if ("null".equals(stringAcctNo))
        stringAcctNo = "";
      //
      stringDeptCd = getDeptCdVoucher(stringSourceType, stringRecordNo12, stringComNo, stringKindNo, stringPurchaseNo, exeUtil);
      stringCostID = getCostIDVoucher(stringSourceType, stringRecordNo12, stringComNo, stringKindNo, stringPurchaseNo, exeUtil);
      //
      stringKEY = stringAcctNo + "%-%" + stringDeptCd + "%-%" + stringFilter + "%-%" + stringAssId + "%-%" + stringInOut;
      if (vectorKEY.indexOf(stringKEY) == -1)
        vectorKEY.add(stringKEY);
      //
      arrayTemp = (String[]) hashtableAsReceipt.get(stringKEY);
      if (arrayTemp == null) {
        arrayTemp = new String[7]; // 0 會計科目 1 部門代碼 2 金額 3 固資代碼 4 AssId 5 請款代碼 6 內外業
        arrayTemp[0] = stringAcctNo; // 會計科目
        arrayTemp[1] = stringDeptCd; // 部門代碼
        arrayTemp[2] = stringNoTaxMoney; // 金額
        arrayTemp[3] = stringFilter; // 固資代碼
        arrayTemp[4] = stringAssId; //
        arrayTemp[5] = stringCostID; //
        arrayTemp[6] = stringInOut; //
        hashtableAsReceipt.put(stringKEY, arrayTemp);
        continue;
      }
      //
      arrayTemp[2] = "" + (exeUtil.doParseDouble(arrayTemp[2]) + exeUtil.doParseDouble(stringNoTaxMoney)); // 金額
    }
    Vector vectorAsReceipt = new Vector();
    for (int intNo = 0; intNo < vectorKEY.size(); intNo++) {
      stringKEY = "" + vectorKEY.get(intNo);
      arrayTemp = (String[]) hashtableAsReceipt.get(stringKEY);
      vectorAsReceipt.add(arrayTemp);

    }
    return (String[][]) vectorAsReceipt.toArray(new String[0][0]);
  }

  public String getAssNumber(String stringAssId, FargloryUtil exeUtil, talk dbAsset) throws Throwable {
    int intPosTrim = 8;
    int intPos = 0;
    String stringSql = "";
    String stringAssNumber = "";
    String stringAssNumberStart = "";
    String stringAssNumberTmp = "";
    String stringAssNumberEnd = "";
    String[][] retAsAssetItem = null;
    //
    if ("".equals(stringAssId))
      return "";
    //
    stringSql = "  SELECT  DISTINCT  c.ASS_NUMBER " + " FROM  AS_ASSET b, AS_ASSET_ITEM c " + " WHERE  b.ASS_ID = c.ASS_ID " + " AND  b.ASS_ID = '" + stringAssId + "' "
        + " ORDER BY  c.ASS_NUMBER ";
    retAsAssetItem = dbAsset.queryFromPool(stringSql);
    if (retAsAssetItem.length == 0)
      return "";
    stringAssNumberStart = retAsAssetItem[0][0].trim();
    stringAssNumberEnd = retAsAssetItem[retAsAssetItem.length - 1][0].trim();
    //
    stringAssNumber = getAssNumberTRIM(stringAssNumberStart, stringAssNumberEnd, exeUtil);
    return stringAssNumber;
  }

  public String[][] getAsAssetItem(String stringAssId, FargloryUtil exeUtil, talk dbAsset) throws Throwable {
    String stringSql = "";
    String[][] retAsAssetItem = null;
    // 0 申請數量 1 申請金額 2 資產代號 3 申請部門(人總)
    stringSql = "  SELECT  a.ASS_PUR_COUNT, a.ASS_AMOUNT_UNTAX, b.ASS_NUMBER,  b.ASS_STD_DEPT_ID " + " FROM  AS_ASSET a, AS_ASSET_ITEM b " + " WHERE  a.ASS_ID = b.ASS_ID "
        + " AND  b.ASS_ID = '" + stringAssId + "' " + " ORDER BY  b.ASS_NUMBER ";
    retAsAssetItem = dbAsset.queryFromPool(stringSql);
    if (retAsAssetItem.length == 0)
      return retAsAssetItem;
    // 部門 金額 資產代號
    Vector vectorDeptCd = new Vector();
    String stringAssNumber = "";
    String stringAssNumberStart = "";
    String stringAssNumberEnd = "";
    String stringDeptCd = "";
    String stringDeptCdOLD = "";
    String stringDepartName = "";
    String stringAssAmountAvg = "";
    String stringAssAmountNet = "";
    String stringTemp = "";
    String[] arrayTemp = null;
    Vector vectorAssData = new Vector();
    double doubleAssAmount = 0;
    double doubleAssAmountSum = exeUtil.doParseDouble(retAsAssetItem[0][1].trim());
    double doubleAssAmountNet = 0;
    double doubleAssAmountAvg = 0;
    double doubleAssPurCountSum = exeUtil.doParseDouble(retAsAssetItem[0][0].trim());
    ;
    // 商
    doubleAssAmountAvg = exeUtil.div(doubleAssAmountSum, doubleAssPurCountSum);
    doubleAssAmountAvg = exeUtil.floor(doubleAssAmountAvg); // 無條件捨去法
    stringAssAmountAvg = convert.FourToFive("" + doubleAssAmountAvg, 0);
    // 處理金額-餘數
    doubleAssAmountNet = exeUtil.sub(doubleAssAmountSum, exeUtil.mul(doubleAssPurCountSum, doubleAssAmountAvg));
    stringAssAmountNet = convert.FourToFive("" + doubleAssAmountNet, 0);
    //
    doubleAssAmountSum = 0;
    for (int intNo = 0; intNo < retAsAssetItem.length; intNo++) {
      stringAssNumber = retAsAssetItem[intNo][2].trim();
      stringDeptCd = retAsAssetItem[intNo][3].trim();
      doubleAssAmount = exeUtil.doParseDouble(stringAssAmountAvg);
      System.out.println(intNo + "stringAssNumber(" + stringAssNumber + ")-----------------");
      System.out.println(intNo + "stringDeptCd(" + stringDeptCd + ")-----------------");
      //
      if (!stringDeptCd.equals(stringDeptCdOLD)) {
        // 初始化
        doubleAssAmountSum = 0;
        stringAssNumberStart = stringAssNumber;
      }
      if (intNo == 0) {
        doubleAssAmount += exeUtil.doParseDouble(stringAssAmountNet);
      }
      // 部門處理 S
      if (exeUtil.doParseDouble(stringDeptCd) > 0) {
        // 內業
        // 部門別(部室)
        // 除財務以科為單位
        if (stringDeptCd.startsWith("022")) {
          // 不作處理
        } else {
          stringDeptCd = stringDeptCd.substring(0, 3) + "1";
        }
      } else {
        // 外業
        // + A - A 處理
        stringDepartName = getDepartNameFED1006(stringDeptCd);
        if ("".equals(stringDepartName) && "234A1外".equals(stringDeptCd)) {
          System.out.println("案別 234A1 特別處理---------------------------s");
          stringTemp = "234A1";
          stringDepartName = getDepartNameFED1006(stringTemp);
          if (!"".equals(stringDepartName)) {
            stringDeptCd = stringTemp;
          }
        }
        if ("".equals(stringDepartName)) {
          System.out.println("案別 +- A 處理---------------------------s");
          if (Character.isDigit(stringDeptCd.charAt(stringDeptCd.length() - 1))) {
            stringTemp = stringDeptCd + "A";
          } else {
            stringTemp = stringDeptCd.substring(0, stringDeptCd.length() - 1);
          }
          stringDepartName = getDepartNameFED1006(stringTemp);
          if (!"".equals(stringDepartName)) {
            stringDeptCd = stringTemp;
          }
        }
        if ("".equals(stringDepartName)) {
          // A2
          System.out.println("案別 A2 特別處理---------------------------s");
          if (stringDeptCd.indexOf("A2") != -1) {
            stringTemp = stringDeptCd.replaceAll("A2", "A02A");
            stringDepartName = getDepartNameFED1006(stringTemp);
            if (!"".equals(stringDepartName)) {
              stringDeptCd = stringTemp;
            } else {
              if (Character.isDigit(stringTemp.charAt(stringTemp.length() - 1))) {
                stringTemp = stringTemp + "A";
              } else {
                stringTemp = stringTemp.substring(0, stringTemp.length() - 1);
              }
              stringDepartName = getDepartNameFED1006(stringTemp);
              if (!"".equals(stringDepartName)) {
                stringDeptCd = stringTemp;
              }
            }
          }
        }
      }
      // 部門整理
      // 金額加總
      doubleAssAmountSum += doubleAssAmount;
      stringAssNumberEnd = stringAssNumber; // 資產代號整理
      stringDeptCdOLD = stringDeptCd;
      //
      if (intNo == (retAsAssetItem.length - 1) || !stringDeptCd.equals(retAsAssetItem[intNo + 1][3].trim())) {
        if ("133O01A".equals(stringDeptCdOLD))
          stringDeptCdOLD = "133O1";
        if ("033O01A".equals(stringDeptCdOLD))
          stringDeptCdOLD = "133O1";
        // 新增
        arrayTemp = new String[3];
        arrayTemp[0] = stringDeptCdOLD;
        arrayTemp[1] = convert.FourToFive("" + doubleAssAmountSum, 0);
        System.out.println(intNo + "stringDeptCdOLD(" + stringDeptCdOLD + ")-----------------");
        System.out.println(intNo + "stringAssNumberStart" + stringAssNumberStart + ")-----------------");
        System.out.println(intNo + "stringAssNumberEnd" + stringAssNumberEnd + ")-----------------");
        arrayTemp[2] = getAssNumberTRIM(stringAssNumberStart, stringAssNumberEnd, exeUtil);
        vectorAssData.add(arrayTemp);
      }
    }
    return (String[][]) vectorAssData.toArray(new String[0][0]);
  }

  public String getAssNumberTRIM(String stringAssNumberStart, String stringAssNumberEnd, FargloryUtil exeUtil) throws Throwable {
    int intPosTrim = 8;
    int intPos = 0;
    String stringSql = "";
    String stringAssNumber = "";
    String stringAssNumberTmp = "";
    //
    stringAssNumberTmp = exeUtil.doSubstring(stringAssNumberEnd, 0, intPosTrim);
    intPos = stringAssNumberStart.indexOf(stringAssNumberTmp);
    if (intPos == -1) {
      for (int intNo = 1; intNo <= 5; intNo++) {
        stringAssNumberTmp = exeUtil.doSubstring(stringAssNumberEnd, 0, intPosTrim - intNo);
        intPos = stringAssNumberStart.indexOf(stringAssNumberTmp);
        if (intPos != -1) {
          stringAssNumber = stringAssNumberTmp;
          break;
        }
      }
    } else {
      stringAssNumber = stringAssNumberTmp;
      for (int intNo = 1; intNo <= 5; intNo++) {
        stringAssNumberTmp = exeUtil.doSubstring(stringAssNumberEnd, 0, intPosTrim + intNo);
        intPos = stringAssNumberStart.indexOf(stringAssNumberTmp);
        if (intPos == -1) {
          break;
        }
        stringAssNumber = stringAssNumberTmp;
      }
    }
    //
    if (stringAssNumberStart.equals(stringAssNumberEnd)) {
      stringAssNumber = stringAssNumberStart;
    } else if (!"".equals(stringAssNumber)) {
      if (stringAssNumber.length() > 7)
        stringAssNumber = exeUtil.doSubstring(stringAssNumber, 0, 7);
      stringAssNumber = stringAssNumberStart + "-" + stringAssNumberEnd.replaceAll(stringAssNumber, "");
    } else {
      stringAssNumber = stringAssNumberStart + "-" + stringAssNumberEnd;
    }
    return stringAssNumber;
  }

  public String getDeptCdVoucher(String stringSourceType, String stringRecordNo12, String stringComNo, String stringKindNo, String stringPurchaseNo, FargloryUtil exeUtil)
      throws Throwable {
    String stringDeptCd = "";
    String stringSql = "";
    String stringInOut = "";
    String stringDepartNo = "";
    String stringProjectID = "";
    String stringProjectID1 = "";
    String[] arrayTemp = null;
    String[][] retDoc3M012 = null;
    String[][] retDoc3M0123 = null;
    String[][] retDoc5M0121 = null;
    //
    if ("23".equals(stringKindNo))
      stringKindNo = "15";
    if ("24".equals(stringKindNo))
      stringKindNo = "17";
    if ("26".equals(stringKindNo))
      stringKindNo = "17";
    if (!"B".equals(stringSourceType)) {
      // 行銷
      stringSql = " SELECT  M12.InOut,  M12.DepartNo,  M12.ProjectID,  M12.ProjectID1 " + " FROM  Doc3M011  M11,  Doc3M0123  M12 " + " WHERE  M11.BarCode  =  M12.BarCode "
          + " AND  M11.ComNo  =  '" + stringComNo + "' " + " AND  M11.KindNo =  '" + stringKindNo + "' " + " AND  M11.DocNo  =  '" + stringPurchaseNo + "' "
          + " AND  M12.RecordNo  =  '" + stringRecordNo12 + "' ";
      retDoc3M0123 = getTableDataDoc(stringSql);
      if (retDoc3M0123.length > 0) {
        stringInOut = retDoc3M0123[0][0].trim();
        stringDepartNo = retDoc3M0123[0][1].trim();
        stringProjectID = retDoc3M0123[0][2].trim();
        stringProjectID1 = retDoc3M0123[0][3].trim();
      } else {
        stringSql = " SELECT  M12.ProjectID1 " + " FROM  Doc3M011  M11,  Doc3M012  M12 " + " WHERE  M11.BarCode  =  M12.BarCode " + " AND  M11.ComNo  =  '" + stringComNo + "' "
            + " AND  M11.KindNo =  '" + stringKindNo + "' " + " AND  M11.DocNo  =  '" + stringPurchaseNo + "' " + " AND  M12.RecordNo  =  '" + stringRecordNo12 + "' ";
        retDoc3M012 = getTableDataDoc(stringSql);
        stringProjectID1 = retDoc3M012[0][0].trim();
        stringProjectID1 = convert.StringToken(stringProjectID1, "%-%")[0];
        arrayTemp = convert.StringToken(stringProjectID1, ",");
        if (arrayTemp.length > 4) {
          stringInOut = arrayTemp[0].trim();
          stringDepartNo = arrayTemp[1].trim();
          stringProjectID = arrayTemp[2].trim();
          stringProjectID1 = arrayTemp[3].trim();
        }
      }
      stringDeptCd = getVoucherDepartNo(stringInOut, stringDepartNo, stringProjectID, stringProjectID1, exeUtil);
    } else {
      String stringComNoType = getComNoType(stringComNo);
      String stringCostID = "";
      String stringAccountNo = "";
      String[][] retDoc5M012 = null;
      String[][] retDoc7M0552 = null;
      Hashtable hashtableInOut = new Hashtable();
      // 管理費用
      stringSql = " SELECT  M12.InOut,  M12.DepartNo,  M12.ProjectID1,  M12.BarCode " + " FROM  Doc5M011  M11,  Doc5M0121  M12 " + " WHERE  M11.BarCode  =  M12.BarCode "
          + " AND  M11.ComNo  =  '" + stringComNo + "' " + " AND  M11.KindNo =  '" + stringKindNo + "' " + " AND  M11.DocNo  =  '" + stringPurchaseNo + "' "
          + " AND  M12.RecordNo  =  " + stringRecordNo12 + " ";
      retDoc5M0121 = getTableDataDoc(stringSql);
      if (retDoc5M0121.length == 0)
        return "";
      //
      stringInOut = retDoc5M0121[0][0].trim();
      stringDepartNo = retDoc5M0121[0][1].trim();
      stringProjectID1 = retDoc5M0121[0][2].trim();
      //
      stringSql = " SELECT CostID " + " FROM  Doc5M012 " + " WHERE  BarCode  =  '" + retDoc5M0121[0][3].trim() + "' " + " AND  RecordNo  =  '" + stringRecordNo12 + "' ";
      retDoc5M012 = getTableDataDoc(stringSql);
      stringCostID = retDoc5M012[0][0].trim();
      retDoc7M0552 = getDoc7M0552(stringCostID, stringComNoType, stringInOut, "");
      if (retDoc7M0552.length == 0)
        return "";
      stringAccountNo = retDoc7M0552[0][3].trim();
      //
      // 取得 Doc5M0121 RecordNo 之 InOut、DepartNo、ProjectID1
      stringDeptCd = getVoucherDepartNoDoc5(stringComNo, stringComNoType, stringInOut, stringDepartNo, stringProjectID1, stringProjectID1, stringAccountNo, hashtableInOut,
          exeUtil);
    }
    return stringDeptCd;
  }

  public String getInOutVoucher(String stringSourceType, String stringRecordNo12, String stringComNo, String stringKindNo, String stringPurchaseNo, FargloryUtil exeUtil)
      throws Throwable {
    String stringDeptCd = "";
    String stringSql = "";
    String stringInOut = "";
    // String stringDepartNo = "" ;
    // String stringProjectID = "" ;
    String stringProjectID1 = "";
    String[] arrayTemp = null;
    String[][] retDoc3M012 = null;
    String[][] retDoc3M0123 = null;
    String[][] retDoc5M0121 = null;
    //
    if ("23".equals(stringKindNo))
      stringKindNo = "15";
    if ("24".equals(stringKindNo))
      stringKindNo = "17";
    if ("26".equals(stringKindNo))
      stringKindNo = "17";
    // stringSourceType A 行銷-請款 B 管理費用 C 行銷-借款沖銷
    if (!"B".equals(stringSourceType)) {
      // 行銷
      stringSql = " SELECT  M12.InOut " + " FROM  Doc3M011  M11,  Doc3M0123  M12 " + " WHERE  M11.BarCode  =  M12.BarCode " + " AND  M11.ComNo  =  '" + stringComNo + "' "
          + " AND  M11.KindNo =  '" + stringKindNo + "' " + " AND  M11.DocNo  =  '" + stringPurchaseNo + "' " + " AND  M12.RecordNo  =   " + stringRecordNo12 + "  ";
      retDoc3M0123 = getTableDataDoc(stringSql);
      if (retDoc3M0123.length > 0) {
        stringInOut = retDoc3M0123[0][0].trim();
      } else {
        stringSql = " SELECT  M12.ProjectID1 " + " FROM  Doc3M011  M11,  Doc3M012  M12 " + " WHERE  M11.BarCode  =  M12.BarCode " + " AND  M11.ComNo  =  '" + stringComNo + "' "
            + " AND  M11.KindNo =  '" + stringKindNo + "' " + " AND  M11.DocNo  =  '" + stringPurchaseNo + "' " + " AND  M12.RecordNo  =  " + stringRecordNo12 + "  ";
        retDoc3M012 = getTableDataDoc(stringSql);
        stringProjectID1 = retDoc3M012[0][0].trim();
        stringProjectID1 = convert.StringToken(stringProjectID1, "%-%")[0];
        arrayTemp = convert.StringToken(stringProjectID1, ",");
        if (arrayTemp.length > 4) {
          stringInOut = arrayTemp[0].trim();
        }
      }
    } else {
      String stringComNoType = getComNoType(stringComNo);
      String stringCostID = "";
      String stringAccountNo = "";
      String[][] retDoc5M012 = null;
      String[][] retDoc7M0552 = null;
      Hashtable hashtableInOut = new Hashtable();
      // 管理費用
      stringSql = " SELECT  M12.InOut,  M12.DepartNo,  M12.ProjectID1,  M12.BarCode " + " FROM  Doc5M011  M11,  Doc5M0121  M12 " + " WHERE  M11.BarCode  =  M12.BarCode "
          + " AND  M11.ComNo  =  '" + stringComNo + "' " + " AND  M11.KindNo =  '" + stringKindNo + "' " + " AND  M11.DocNo  =  '" + stringPurchaseNo + "' "
          + " AND  M12.RecordNo  =  " + stringRecordNo12 + "  ";
      retDoc5M0121 = getTableDataDoc(stringSql);
      if (retDoc5M0121.length == 0)
        return "";
      //
      stringInOut = retDoc5M0121[0][0].trim();
    }
    return stringInOut;
  }

  public String[][] getDoc2M0171(String stringSourceType, String stringBarCode, String[] arrayTable, FargloryUtil exeUtil) throws Throwable {
    String stringComNo = arrayTable[4];
    String stringKindNo = arrayTable[5];
    String stringPurchaseNo = arrayTable[6];
    String stringFactoryNo = arrayTable[7];
    String stringSql = "";
    String stringTable = "";
    String stringRecordNo12 = "";
    String stringNoTaxMoney = "";
    String stringKEY = "";
    String stringDeptCd = "";
    String stringFilter = "";
    String[] arrayTemp = null;
    String[][] retDoc2M0171 = null;
    Vector vectorKEY = new Vector();
    Hashtable hashtableAsReceipt = new Hashtable();
    //
    if ("A".equals(stringSourceType)) {
      stringTable = "Doc2M0171";
    } else if ("B".equals(stringSourceType)) {
      stringTable = "Doc5M0272";
    } else if ("C".equals(stringSourceType)) {
      stringTable = "Doc6M0171";
    }
    //
    stringSql = " SELECT  RecordNo12,  PurchaseNoTaxMoney " + " FROM  " + stringTable + " " + " WHERE  BarCode  =  '" + stringBarCode + "' " + " ORDER BY  RecordNo12 ";
    retDoc2M0171 = getTableDataDoc(stringSql);
    for (int intNo = 0; intNo < retDoc2M0171.length; intNo++) {
      stringRecordNo12 = retDoc2M0171[intNo][0].trim();
      stringNoTaxMoney = retDoc2M0171[intNo][1].trim();
      //
      stringDeptCd = getDeptCdVoucher(stringSourceType, stringRecordNo12, stringComNo, stringKindNo, stringPurchaseNo, exeUtil);
      stringFilter = getFilterDoc3M012(stringSourceType, stringRecordNo12, arrayTable, exeUtil);
      //
      stringKEY = "1252%-%" + stringDeptCd;
      if (vectorKEY.indexOf(stringKEY) == -1)
        vectorKEY.add(stringKEY);
      //
      arrayTemp = (String[]) hashtableAsReceipt.get(stringKEY);
      if (arrayTemp == null) {
        arrayTemp = new String[7]; // 0 會計科目 1 部門代碼 2 金額 3 固資代碼
        arrayTemp[0] = "1252"; // 會計科目
        arrayTemp[1] = stringDeptCd; // 部門代碼
        arrayTemp[2] = stringNoTaxMoney; // 金額
        arrayTemp[3] = stringFilter; // 固資代碼
        arrayTemp[4] = ""; // AssId
        arrayTemp[5] = ""; // 請款代碼
        arrayTemp[6] = ""; //
        hashtableAsReceipt.put(stringKEY, arrayTemp);
        continue;
      }
      arrayTemp[2] = "" + (exeUtil.doParseDouble(arrayTemp[2]) + exeUtil.doParseDouble(stringNoTaxMoney)); // 金額
    }
    Vector vectorAsReceipt = new Vector();
    for (int intNo = 0; intNo < vectorKEY.size(); intNo++) {
      stringKEY = "" + vectorKEY.get(intNo);
      arrayTemp = (String[]) hashtableAsReceipt.get(stringKEY);
      vectorAsReceipt.add(arrayTemp);

    }
    return (String[][]) vectorAsReceipt.toArray(new String[0][0]);
  }

  public boolean isFrontExistDocVoucher(boolean booleanSource, String stringBarCode, String stringComNo, String stringKindNo, String stringPurchaseNo, String stringFactoryNo)
      throws Throwable {
    String stringKindNoPurchase = "";
    String stringSql = "";
    String stringTable10 = booleanSource ? "Doc2M010" : "Doc5M020";
    String stringTable17 = booleanSource ? "Doc2M017" : "Doc5M027";
    String stringTable60 = booleanSource ? "Doc6M010" : "";
    String[][] retDoc2M010 = null;
    String[][] retDoc6M010 = null;
    //
    if ("15".equals(stringKindNo))
      stringKindNo = "23";
    if ("17".equals(stringKindNo))
      stringKindNo = "24";
    // 判斷是否為最後一次估驗(流程中之最後一筆)
    stringSql = "SELECT  DISTINCT  M10.BarCode " + " FROM  " + stringTable10 + " M10,  " + stringTable17 + " M17 " + " WHERE  M10.BarCode  =  M17.BarCode "
        + " AND  M10.UNDERGO_WRITE  NOT IN ( 'E','Y') " + " AND  M10.BarCode  <> '" + stringBarCode + "' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.KindNo  =  '"
        + stringKindNo + "' " + " AND  M17.PurchaseNo  =  '" + stringPurchaseNo + "' " + " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' ";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M010.length > 0) {
      return true;
    }
    if (!"".equals(stringTable60)) {
      stringSql = " SELECT  DISTINCT  BarCode " + " FROM  " + stringTable60 + " " + " WHERE  1=1 " + " AND  UNDERGO_WRITE  NOT IN ( 'E','Y') " + " AND  BarCode  <> '"
          + stringBarCode + "' " + " AND  ComNo  =  '" + stringComNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' " + " AND  PurchaseNo  =  '" + stringPurchaseNo + "' "
          + " AND  FactoryNo  =  '" + stringFactoryNo + "' ";
      retDoc6M010 = dbDoc.queryFromPool(stringSql);
      if (retDoc6M010.length > 0) {
        return true;
      }
    }
    return false;
  }

  public boolean isLastDocVoucher(boolean booleanSource, String stringBarCode, String stringComNo, String stringKindNo, String stringPurchaseNo, String stringFactoryNo)
      throws Throwable {
    String stringSql = "";
    String stringBarCodeL = "";
    String stringEDateTimeL = "";
    String stringTable10 = booleanSource ? "Doc2M010" : "Doc5M020";
    String stringTable17 = booleanSource ? "Doc2M017" : "Doc5M027";
    String stringTable60 = booleanSource ? "Doc6M010" : "";
    String[][] retDoc2M010 = null;
    String[][] retDoc6M010 = null;
    //
    if ("15".equals(stringKindNo))
      stringKindNo = "23";
    if ("17".equals(stringKindNo))
      stringKindNo = "24";
    // 判斷是否為最後一次估驗(流程中之最後一筆)
    stringSql = "SELECT  DISTINCT  M10.BarCode,  M10.EDateTime " + " FROM  " + stringTable10 + " M10,  " + stringTable17 + " M17 " + " WHERE  M10.BarCode  =  M17.BarCode "
        + " AND  M10.UNDERGO_WRITE  <> 'E' " + " AND  M10.ComNo  =  '" + stringComNo + "' " + " AND  M10.KindNo  =  '" + stringKindNo + "' " + " AND  M17.PurchaseNo  =  '"
        + stringPurchaseNo + "' " + " AND  M17.FactoryNo  =  '" + stringFactoryNo + "' " + " ORDER BY  M10.EDateTime  DESC";
    retDoc2M010 = dbDoc.queryFromPool(stringSql);
    if (retDoc2M010.length > 0) {
      stringBarCodeL = retDoc2M010[0][0].trim();
      stringEDateTimeL = retDoc2M010[0][1].trim();
    }
    if (!"".equals(stringTable60)) {
      stringSql = " SELECT  DISTINCT  BarCode,  EDateTime " + " FROM  " + stringTable60 + " " + " WHERE  1=1 " + " AND  UNDERGO_WRITE  <> 'E' " + " AND  ComNo  =  '" + stringComNo
          + "' " + " AND  PurchaseNo  =  '" + stringPurchaseNo + "' " + " AND  FactoryNo  =  '" + stringFactoryNo + "' " + " AND  KindNo  =  '" + stringKindNo + "' "
          + " ORDER BY  EDateTime DESC";
      retDoc6M010 = dbDoc.queryFromPool(stringSql);
      if (retDoc6M010.length > 0) {
        if (stringEDateTimeL.compareTo(retDoc6M010[0][1].trim()) < 0) {
          stringBarCodeL = retDoc6M010[0][0].trim();
        }
      }
    }
    if (stringBarCode.equals(stringBarCodeL))
      return true;
    return false;
  }

  // 2013-08-28 B3018 固資檢核 END
  //
  public String getInformation() {
    return "---------------新增按鈕程式.preProcess()----------------";
  }
}